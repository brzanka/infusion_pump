
pmik2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005828  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b34  08005b34  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b3c  08005b3c  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08005b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000270  08005db4  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08005db4  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_line   00013fb8  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000006f  00000000  00000000  00034293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000109c9  00000000  00000000  00034302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000256d  00000000  00000000  00044ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fb0  00000000  00000000  00047238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb1a  00000000  00000000  000481e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c47  00000000  00000000  000d3d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00016668  00000000  00000000  000d4949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b5c  00000000  00000000  000eafb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000270 	.word	0x20000270
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058d0 	.word	0x080058d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000274 	.word	0x20000274
 8000104:	080058d0 	.word	0x080058d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fad3 	bl	80009a8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fa5f 	bl	80008d0 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fac5 	bl	80009a8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fabb 	bl	80009a8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fa6b 	bl	800091c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fa61 	bl	800091c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_uldivmod>:
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 800046c:	2a00      	cmp	r2, #0
 800046e:	d10f      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 8000470:	2900      	cmp	r1, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_uldivmod+0xe>
 8000474:	2800      	cmp	r0, #0
 8000476:	d002      	beq.n	800047e <__aeabi_uldivmod+0x16>
 8000478:	2100      	movs	r1, #0
 800047a:	43c9      	mvns	r1, r1
 800047c:	0008      	movs	r0, r1
 800047e:	b407      	push	{r0, r1, r2}
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <__aeabi_uldivmod+0x24>)
 8000482:	a102      	add	r1, pc, #8	; (adr r1, 800048c <__aeabi_uldivmod+0x24>)
 8000484:	1840      	adds	r0, r0, r1
 8000486:	9002      	str	r0, [sp, #8]
 8000488:	bd03      	pop	{r0, r1, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	ffffff65 	.word	0xffffff65
 8000490:	b403      	push	{r0, r1}
 8000492:	4668      	mov	r0, sp
 8000494:	b501      	push	{r0, lr}
 8000496:	9802      	ldr	r0, [sp, #8]
 8000498:	f000 f834 	bl	8000504 <__udivmoddi4>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	469e      	mov	lr, r3
 80004a0:	b002      	add	sp, #8
 80004a2:	bc0c      	pop	{r2, r3}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_lmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46ce      	mov	lr, r9
 80004ac:	4699      	mov	r9, r3
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	469c      	mov	ip, r3
 80004b2:	0413      	lsls	r3, r2, #16
 80004b4:	4647      	mov	r7, r8
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	001d      	movs	r5, r3
 80004ba:	000e      	movs	r6, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	0404      	lsls	r4, r0, #16
 80004c0:	0c24      	lsrs	r4, r4, #16
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0007      	movs	r7, r0
 80004c6:	0c10      	lsrs	r0, r2, #16
 80004c8:	434b      	muls	r3, r1
 80004ca:	4365      	muls	r5, r4
 80004cc:	4341      	muls	r1, r0
 80004ce:	4360      	muls	r0, r4
 80004d0:	0c2c      	lsrs	r4, r5, #16
 80004d2:	18c0      	adds	r0, r0, r3
 80004d4:	1820      	adds	r0, r4, r0
 80004d6:	468c      	mov	ip, r1
 80004d8:	4283      	cmp	r3, r0
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x3c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	4649      	mov	r1, r9
 80004e6:	4379      	muls	r1, r7
 80004e8:	4356      	muls	r6, r2
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	042d      	lsls	r5, r5, #16
 80004ee:	0c2d      	lsrs	r5, r5, #16
 80004f0:	1989      	adds	r1, r1, r6
 80004f2:	4463      	add	r3, ip
 80004f4:	0400      	lsls	r0, r0, #16
 80004f6:	1940      	adds	r0, r0, r5
 80004f8:	18c9      	adds	r1, r1, r3
 80004fa:	bcc0      	pop	{r6, r7}
 80004fc:	46b9      	mov	r9, r7
 80004fe:	46b0      	mov	r8, r6
 8000500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__udivmoddi4>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4657      	mov	r7, sl
 8000508:	464e      	mov	r6, r9
 800050a:	4645      	mov	r5, r8
 800050c:	46de      	mov	lr, fp
 800050e:	b5e0      	push	{r5, r6, r7, lr}
 8000510:	0004      	movs	r4, r0
 8000512:	000d      	movs	r5, r1
 8000514:	4692      	mov	sl, r2
 8000516:	4699      	mov	r9, r3
 8000518:	b083      	sub	sp, #12
 800051a:	428b      	cmp	r3, r1
 800051c:	d830      	bhi.n	8000580 <__udivmoddi4+0x7c>
 800051e:	d02d      	beq.n	800057c <__udivmoddi4+0x78>
 8000520:	4649      	mov	r1, r9
 8000522:	4650      	mov	r0, sl
 8000524:	f000 ffb6 	bl	8001494 <__clzdi2>
 8000528:	0029      	movs	r1, r5
 800052a:	0006      	movs	r6, r0
 800052c:	0020      	movs	r0, r4
 800052e:	f000 ffb1 	bl	8001494 <__clzdi2>
 8000532:	1a33      	subs	r3, r6, r0
 8000534:	4698      	mov	r8, r3
 8000536:	3b20      	subs	r3, #32
 8000538:	d434      	bmi.n	80005a4 <__udivmoddi4+0xa0>
 800053a:	469b      	mov	fp, r3
 800053c:	4653      	mov	r3, sl
 800053e:	465a      	mov	r2, fp
 8000540:	4093      	lsls	r3, r2
 8000542:	4642      	mov	r2, r8
 8000544:	001f      	movs	r7, r3
 8000546:	4653      	mov	r3, sl
 8000548:	4093      	lsls	r3, r2
 800054a:	001e      	movs	r6, r3
 800054c:	42af      	cmp	r7, r5
 800054e:	d83b      	bhi.n	80005c8 <__udivmoddi4+0xc4>
 8000550:	42af      	cmp	r7, r5
 8000552:	d100      	bne.n	8000556 <__udivmoddi4+0x52>
 8000554:	e079      	b.n	800064a <__udivmoddi4+0x146>
 8000556:	465b      	mov	r3, fp
 8000558:	1ba4      	subs	r4, r4, r6
 800055a:	41bd      	sbcs	r5, r7
 800055c:	2b00      	cmp	r3, #0
 800055e:	da00      	bge.n	8000562 <__udivmoddi4+0x5e>
 8000560:	e076      	b.n	8000650 <__udivmoddi4+0x14c>
 8000562:	2200      	movs	r2, #0
 8000564:	2300      	movs	r3, #0
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	465a      	mov	r2, fp
 800056e:	4093      	lsls	r3, r2
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4642      	mov	r2, r8
 8000576:	4093      	lsls	r3, r2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	e029      	b.n	80005d0 <__udivmoddi4+0xcc>
 800057c:	4282      	cmp	r2, r0
 800057e:	d9cf      	bls.n	8000520 <__udivmoddi4+0x1c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <__udivmoddi4+0x8e>
 800058e:	601c      	str	r4, [r3, #0]
 8000590:	605d      	str	r5, [r3, #4]
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	b003      	add	sp, #12
 8000598:	bcf0      	pop	{r4, r5, r6, r7}
 800059a:	46bb      	mov	fp, r7
 800059c:	46b2      	mov	sl, r6
 800059e:	46a9      	mov	r9, r5
 80005a0:	46a0      	mov	r8, r4
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a4:	4642      	mov	r2, r8
 80005a6:	469b      	mov	fp, r3
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	4652      	mov	r2, sl
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	4641      	mov	r1, r8
 80005b2:	0013      	movs	r3, r2
 80005b4:	464a      	mov	r2, r9
 80005b6:	408a      	lsls	r2, r1
 80005b8:	0017      	movs	r7, r2
 80005ba:	4642      	mov	r2, r8
 80005bc:	431f      	orrs	r7, r3
 80005be:	4653      	mov	r3, sl
 80005c0:	4093      	lsls	r3, r2
 80005c2:	001e      	movs	r6, r3
 80005c4:	42af      	cmp	r7, r5
 80005c6:	d9c3      	bls.n	8000550 <__udivmoddi4+0x4c>
 80005c8:	2200      	movs	r2, #0
 80005ca:	2300      	movs	r3, #0
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	4643      	mov	r3, r8
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0d8      	beq.n	8000588 <__udivmoddi4+0x84>
 80005d6:	07fb      	lsls	r3, r7, #31
 80005d8:	0872      	lsrs	r2, r6, #1
 80005da:	431a      	orrs	r2, r3
 80005dc:	4646      	mov	r6, r8
 80005de:	087b      	lsrs	r3, r7, #1
 80005e0:	e00e      	b.n	8000600 <__udivmoddi4+0xfc>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d101      	bne.n	80005ea <__udivmoddi4+0xe6>
 80005e6:	42a2      	cmp	r2, r4
 80005e8:	d80c      	bhi.n	8000604 <__udivmoddi4+0x100>
 80005ea:	1aa4      	subs	r4, r4, r2
 80005ec:	419d      	sbcs	r5, r3
 80005ee:	2001      	movs	r0, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2100      	movs	r1, #0
 80005f6:	3e01      	subs	r6, #1
 80005f8:	1824      	adds	r4, r4, r0
 80005fa:	414d      	adcs	r5, r1
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d006      	beq.n	800060e <__udivmoddi4+0x10a>
 8000600:	42ab      	cmp	r3, r5
 8000602:	d9ee      	bls.n	80005e2 <__udivmoddi4+0xde>
 8000604:	3e01      	subs	r6, #1
 8000606:	1924      	adds	r4, r4, r4
 8000608:	416d      	adcs	r5, r5
 800060a:	2e00      	cmp	r6, #0
 800060c:	d1f8      	bne.n	8000600 <__udivmoddi4+0xfc>
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	465b      	mov	r3, fp
 8000614:	1900      	adds	r0, r0, r4
 8000616:	4169      	adcs	r1, r5
 8000618:	2b00      	cmp	r3, #0
 800061a:	db24      	blt.n	8000666 <__udivmoddi4+0x162>
 800061c:	002b      	movs	r3, r5
 800061e:	465a      	mov	r2, fp
 8000620:	4644      	mov	r4, r8
 8000622:	40d3      	lsrs	r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	40e2      	lsrs	r2, r4
 8000628:	001c      	movs	r4, r3
 800062a:	465b      	mov	r3, fp
 800062c:	0015      	movs	r5, r2
 800062e:	2b00      	cmp	r3, #0
 8000630:	db2a      	blt.n	8000688 <__udivmoddi4+0x184>
 8000632:	0026      	movs	r6, r4
 8000634:	409e      	lsls	r6, r3
 8000636:	0033      	movs	r3, r6
 8000638:	0026      	movs	r6, r4
 800063a:	4647      	mov	r7, r8
 800063c:	40be      	lsls	r6, r7
 800063e:	0032      	movs	r2, r6
 8000640:	1a80      	subs	r0, r0, r2
 8000642:	4199      	sbcs	r1, r3
 8000644:	9000      	str	r0, [sp, #0]
 8000646:	9101      	str	r1, [sp, #4]
 8000648:	e79e      	b.n	8000588 <__udivmoddi4+0x84>
 800064a:	42a3      	cmp	r3, r4
 800064c:	d8bc      	bhi.n	80005c8 <__udivmoddi4+0xc4>
 800064e:	e782      	b.n	8000556 <__udivmoddi4+0x52>
 8000650:	4642      	mov	r2, r8
 8000652:	2320      	movs	r3, #32
 8000654:	2100      	movs	r1, #0
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	2200      	movs	r2, #0
 800065a:	9100      	str	r1, [sp, #0]
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	40da      	lsrs	r2, r3
 8000662:	9201      	str	r2, [sp, #4]
 8000664:	e785      	b.n	8000572 <__udivmoddi4+0x6e>
 8000666:	4642      	mov	r2, r8
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	4646      	mov	r6, r8
 8000670:	409a      	lsls	r2, r3
 8000672:	0023      	movs	r3, r4
 8000674:	40f3      	lsrs	r3, r6
 8000676:	4644      	mov	r4, r8
 8000678:	4313      	orrs	r3, r2
 800067a:	002a      	movs	r2, r5
 800067c:	40e2      	lsrs	r2, r4
 800067e:	001c      	movs	r4, r3
 8000680:	465b      	mov	r3, fp
 8000682:	0015      	movs	r5, r2
 8000684:	2b00      	cmp	r3, #0
 8000686:	dad4      	bge.n	8000632 <__udivmoddi4+0x12e>
 8000688:	4642      	mov	r2, r8
 800068a:	002f      	movs	r7, r5
 800068c:	2320      	movs	r3, #32
 800068e:	0026      	movs	r6, r4
 8000690:	4097      	lsls	r7, r2
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	40de      	lsrs	r6, r3
 8000696:	003b      	movs	r3, r7
 8000698:	4333      	orrs	r3, r6
 800069a:	e7cd      	b.n	8000638 <__udivmoddi4+0x134>

0800069c <__aeabi_fdiv>:
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	464f      	mov	r7, r9
 80006a0:	4646      	mov	r6, r8
 80006a2:	46d6      	mov	lr, sl
 80006a4:	0245      	lsls	r5, r0, #9
 80006a6:	b5c0      	push	{r6, r7, lr}
 80006a8:	0047      	lsls	r7, r0, #1
 80006aa:	1c0c      	adds	r4, r1, #0
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	0e3f      	lsrs	r7, r7, #24
 80006b0:	0fc6      	lsrs	r6, r0, #31
 80006b2:	2f00      	cmp	r7, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fdiv+0x1c>
 80006b6:	e06f      	b.n	8000798 <__aeabi_fdiv+0xfc>
 80006b8:	2fff      	cmp	r7, #255	; 0xff
 80006ba:	d100      	bne.n	80006be <__aeabi_fdiv+0x22>
 80006bc:	e074      	b.n	80007a8 <__aeabi_fdiv+0x10c>
 80006be:	2300      	movs	r3, #0
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	4699      	mov	r9, r3
 80006c4:	469a      	mov	sl, r3
 80006c6:	00ed      	lsls	r5, r5, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	4315      	orrs	r5, r2
 80006cc:	3f7f      	subs	r7, #127	; 0x7f
 80006ce:	0263      	lsls	r3, r4, #9
 80006d0:	0a5b      	lsrs	r3, r3, #9
 80006d2:	4698      	mov	r8, r3
 80006d4:	0063      	lsls	r3, r4, #1
 80006d6:	0e1b      	lsrs	r3, r3, #24
 80006d8:	0fe4      	lsrs	r4, r4, #31
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d04d      	beq.n	800077a <__aeabi_fdiv+0xde>
 80006de:	2bff      	cmp	r3, #255	; 0xff
 80006e0:	d045      	beq.n	800076e <__aeabi_fdiv+0xd2>
 80006e2:	4642      	mov	r2, r8
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	00d2      	lsls	r2, r2, #3
 80006e8:	04c9      	lsls	r1, r1, #19
 80006ea:	4311      	orrs	r1, r2
 80006ec:	4688      	mov	r8, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	3b7f      	subs	r3, #127	; 0x7f
 80006f2:	0031      	movs	r1, r6
 80006f4:	1aff      	subs	r7, r7, r3
 80006f6:	464b      	mov	r3, r9
 80006f8:	4061      	eors	r1, r4
 80006fa:	b2c9      	uxtb	r1, r1
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d900      	bls.n	8000702 <__aeabi_fdiv+0x66>
 8000700:	e0b8      	b.n	8000874 <__aeabi_fdiv+0x1d8>
 8000702:	4870      	ldr	r0, [pc, #448]	; (80008c4 <__aeabi_fdiv+0x228>)
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	58c3      	ldr	r3, [r0, r3]
 8000708:	469f      	mov	pc, r3
 800070a:	2300      	movs	r3, #0
 800070c:	4698      	mov	r8, r3
 800070e:	0026      	movs	r6, r4
 8000710:	4645      	mov	r5, r8
 8000712:	4692      	mov	sl, r2
 8000714:	4653      	mov	r3, sl
 8000716:	2b02      	cmp	r3, #2
 8000718:	d100      	bne.n	800071c <__aeabi_fdiv+0x80>
 800071a:	e08d      	b.n	8000838 <__aeabi_fdiv+0x19c>
 800071c:	2b03      	cmp	r3, #3
 800071e:	d100      	bne.n	8000722 <__aeabi_fdiv+0x86>
 8000720:	e0a1      	b.n	8000866 <__aeabi_fdiv+0x1ca>
 8000722:	2b01      	cmp	r3, #1
 8000724:	d018      	beq.n	8000758 <__aeabi_fdiv+0xbc>
 8000726:	003b      	movs	r3, r7
 8000728:	337f      	adds	r3, #127	; 0x7f
 800072a:	2b00      	cmp	r3, #0
 800072c:	dd6d      	ble.n	800080a <__aeabi_fdiv+0x16e>
 800072e:	076a      	lsls	r2, r5, #29
 8000730:	d004      	beq.n	800073c <__aeabi_fdiv+0xa0>
 8000732:	220f      	movs	r2, #15
 8000734:	402a      	ands	r2, r5
 8000736:	2a04      	cmp	r2, #4
 8000738:	d000      	beq.n	800073c <__aeabi_fdiv+0xa0>
 800073a:	3504      	adds	r5, #4
 800073c:	012a      	lsls	r2, r5, #4
 800073e:	d503      	bpl.n	8000748 <__aeabi_fdiv+0xac>
 8000740:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <__aeabi_fdiv+0x22c>)
 8000742:	401d      	ands	r5, r3
 8000744:	003b      	movs	r3, r7
 8000746:	3380      	adds	r3, #128	; 0x80
 8000748:	2bfe      	cmp	r3, #254	; 0xfe
 800074a:	dd00      	ble.n	800074e <__aeabi_fdiv+0xb2>
 800074c:	e074      	b.n	8000838 <__aeabi_fdiv+0x19c>
 800074e:	01aa      	lsls	r2, r5, #6
 8000750:	0a52      	lsrs	r2, r2, #9
 8000752:	b2d8      	uxtb	r0, r3
 8000754:	e002      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000756:	000e      	movs	r6, r1
 8000758:	2000      	movs	r0, #0
 800075a:	2200      	movs	r2, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	07f6      	lsls	r6, r6, #31
 8000760:	4310      	orrs	r0, r2
 8000762:	4330      	orrs	r0, r6
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	4643      	mov	r3, r8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d13f      	bne.n	80007f4 <__aeabi_fdiv+0x158>
 8000774:	2202      	movs	r2, #2
 8000776:	3fff      	subs	r7, #255	; 0xff
 8000778:	e003      	b.n	8000782 <__aeabi_fdiv+0xe6>
 800077a:	4643      	mov	r3, r8
 800077c:	2b00      	cmp	r3, #0
 800077e:	d12d      	bne.n	80007dc <__aeabi_fdiv+0x140>
 8000780:	2201      	movs	r2, #1
 8000782:	0031      	movs	r1, r6
 8000784:	464b      	mov	r3, r9
 8000786:	4061      	eors	r1, r4
 8000788:	b2c9      	uxtb	r1, r1
 800078a:	4313      	orrs	r3, r2
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d838      	bhi.n	8000802 <__aeabi_fdiv+0x166>
 8000790:	484e      	ldr	r0, [pc, #312]	; (80008cc <__aeabi_fdiv+0x230>)
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	58c3      	ldr	r3, [r0, r3]
 8000796:	469f      	mov	pc, r3
 8000798:	2d00      	cmp	r5, #0
 800079a:	d113      	bne.n	80007c4 <__aeabi_fdiv+0x128>
 800079c:	2304      	movs	r3, #4
 800079e:	4699      	mov	r9, r3
 80007a0:	3b03      	subs	r3, #3
 80007a2:	2700      	movs	r7, #0
 80007a4:	469a      	mov	sl, r3
 80007a6:	e792      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d105      	bne.n	80007b8 <__aeabi_fdiv+0x11c>
 80007ac:	2308      	movs	r3, #8
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b06      	subs	r3, #6
 80007b2:	27ff      	movs	r7, #255	; 0xff
 80007b4:	469a      	mov	sl, r3
 80007b6:	e78a      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007b8:	230c      	movs	r3, #12
 80007ba:	4699      	mov	r9, r3
 80007bc:	3b09      	subs	r3, #9
 80007be:	27ff      	movs	r7, #255	; 0xff
 80007c0:	469a      	mov	sl, r3
 80007c2:	e784      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007c4:	0028      	movs	r0, r5
 80007c6:	f000 fe47 	bl	8001458 <__clzsi2>
 80007ca:	2776      	movs	r7, #118	; 0x76
 80007cc:	1f43      	subs	r3, r0, #5
 80007ce:	409d      	lsls	r5, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	427f      	negs	r7, r7
 80007d4:	4699      	mov	r9, r3
 80007d6:	469a      	mov	sl, r3
 80007d8:	1a3f      	subs	r7, r7, r0
 80007da:	e778      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007dc:	4640      	mov	r0, r8
 80007de:	f000 fe3b 	bl	8001458 <__clzsi2>
 80007e2:	4642      	mov	r2, r8
 80007e4:	1f43      	subs	r3, r0, #5
 80007e6:	409a      	lsls	r2, r3
 80007e8:	2376      	movs	r3, #118	; 0x76
 80007ea:	425b      	negs	r3, r3
 80007ec:	4690      	mov	r8, r2
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	2200      	movs	r2, #0
 80007f2:	e77e      	b.n	80006f2 <__aeabi_fdiv+0x56>
 80007f4:	2303      	movs	r3, #3
 80007f6:	464a      	mov	r2, r9
 80007f8:	431a      	orrs	r2, r3
 80007fa:	4691      	mov	r9, r2
 80007fc:	33fc      	adds	r3, #252	; 0xfc
 80007fe:	2203      	movs	r2, #3
 8000800:	e777      	b.n	80006f2 <__aeabi_fdiv+0x56>
 8000802:	000e      	movs	r6, r1
 8000804:	20ff      	movs	r0, #255	; 0xff
 8000806:	2200      	movs	r2, #0
 8000808:	e7a8      	b.n	800075c <__aeabi_fdiv+0xc0>
 800080a:	2201      	movs	r2, #1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dca2      	bgt.n	8000758 <__aeabi_fdiv+0xbc>
 8000812:	379e      	adds	r7, #158	; 0x9e
 8000814:	002a      	movs	r2, r5
 8000816:	40bd      	lsls	r5, r7
 8000818:	40da      	lsrs	r2, r3
 800081a:	1e6b      	subs	r3, r5, #1
 800081c:	419d      	sbcs	r5, r3
 800081e:	4315      	orrs	r5, r2
 8000820:	076a      	lsls	r2, r5, #29
 8000822:	d004      	beq.n	800082e <__aeabi_fdiv+0x192>
 8000824:	220f      	movs	r2, #15
 8000826:	402a      	ands	r2, r5
 8000828:	2a04      	cmp	r2, #4
 800082a:	d000      	beq.n	800082e <__aeabi_fdiv+0x192>
 800082c:	3504      	adds	r5, #4
 800082e:	016a      	lsls	r2, r5, #5
 8000830:	d544      	bpl.n	80008bc <__aeabi_fdiv+0x220>
 8000832:	2001      	movs	r0, #1
 8000834:	2200      	movs	r2, #0
 8000836:	e791      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000838:	20ff      	movs	r0, #255	; 0xff
 800083a:	2200      	movs	r2, #0
 800083c:	e78e      	b.n	800075c <__aeabi_fdiv+0xc0>
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	2600      	movs	r6, #0
 8000842:	20ff      	movs	r0, #255	; 0xff
 8000844:	03d2      	lsls	r2, r2, #15
 8000846:	e789      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000848:	2300      	movs	r3, #0
 800084a:	4698      	mov	r8, r3
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	03d2      	lsls	r2, r2, #15
 8000850:	4215      	tst	r5, r2
 8000852:	d008      	beq.n	8000866 <__aeabi_fdiv+0x1ca>
 8000854:	4643      	mov	r3, r8
 8000856:	4213      	tst	r3, r2
 8000858:	d105      	bne.n	8000866 <__aeabi_fdiv+0x1ca>
 800085a:	431a      	orrs	r2, r3
 800085c:	0252      	lsls	r2, r2, #9
 800085e:	0026      	movs	r6, r4
 8000860:	20ff      	movs	r0, #255	; 0xff
 8000862:	0a52      	lsrs	r2, r2, #9
 8000864:	e77a      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	03d2      	lsls	r2, r2, #15
 800086a:	432a      	orrs	r2, r5
 800086c:	0252      	lsls	r2, r2, #9
 800086e:	20ff      	movs	r0, #255	; 0xff
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	e773      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000874:	4642      	mov	r2, r8
 8000876:	016b      	lsls	r3, r5, #5
 8000878:	0155      	lsls	r5, r2, #5
 800087a:	42ab      	cmp	r3, r5
 800087c:	d21a      	bcs.n	80008b4 <__aeabi_fdiv+0x218>
 800087e:	201b      	movs	r0, #27
 8000880:	2200      	movs	r2, #0
 8000882:	3f01      	subs	r7, #1
 8000884:	2601      	movs	r6, #1
 8000886:	001c      	movs	r4, r3
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2c00      	cmp	r4, #0
 800088e:	db01      	blt.n	8000894 <__aeabi_fdiv+0x1f8>
 8000890:	429d      	cmp	r5, r3
 8000892:	d801      	bhi.n	8000898 <__aeabi_fdiv+0x1fc>
 8000894:	1b5b      	subs	r3, r3, r5
 8000896:	4332      	orrs	r2, r6
 8000898:	3801      	subs	r0, #1
 800089a:	2800      	cmp	r0, #0
 800089c:	d1f3      	bne.n	8000886 <__aeabi_fdiv+0x1ea>
 800089e:	1e58      	subs	r0, r3, #1
 80008a0:	4183      	sbcs	r3, r0
 80008a2:	4313      	orrs	r3, r2
 80008a4:	001d      	movs	r5, r3
 80008a6:	003b      	movs	r3, r7
 80008a8:	337f      	adds	r3, #127	; 0x7f
 80008aa:	000e      	movs	r6, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_fdiv+0x216>
 80008b0:	e73d      	b.n	800072e <__aeabi_fdiv+0x92>
 80008b2:	e7aa      	b.n	800080a <__aeabi_fdiv+0x16e>
 80008b4:	201a      	movs	r0, #26
 80008b6:	2201      	movs	r2, #1
 80008b8:	1b5b      	subs	r3, r3, r5
 80008ba:	e7e3      	b.n	8000884 <__aeabi_fdiv+0x1e8>
 80008bc:	01aa      	lsls	r2, r5, #6
 80008be:	2000      	movs	r0, #0
 80008c0:	0a52      	lsrs	r2, r2, #9
 80008c2:	e74b      	b.n	800075c <__aeabi_fdiv+0xc0>
 80008c4:	080059e0 	.word	0x080059e0
 80008c8:	f7ffffff 	.word	0xf7ffffff
 80008cc:	08005a20 	.word	0x08005a20

080008d0 <__eqsf2>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	0245      	lsls	r5, r0, #9
 80008d6:	024e      	lsls	r6, r1, #9
 80008d8:	004c      	lsls	r4, r1, #1
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	2001      	movs	r0, #1
 80008e0:	0e12      	lsrs	r2, r2, #24
 80008e2:	0a76      	lsrs	r6, r6, #9
 80008e4:	0e24      	lsrs	r4, r4, #24
 80008e6:	0fc9      	lsrs	r1, r1, #31
 80008e8:	2aff      	cmp	r2, #255	; 0xff
 80008ea:	d006      	beq.n	80008fa <__eqsf2+0x2a>
 80008ec:	2cff      	cmp	r4, #255	; 0xff
 80008ee:	d003      	beq.n	80008f8 <__eqsf2+0x28>
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	d101      	bne.n	80008f8 <__eqsf2+0x28>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d006      	beq.n	8000906 <__eqsf2+0x36>
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d1fc      	bne.n	80008f8 <__eqsf2+0x28>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d1fa      	bne.n	80008f8 <__eqsf2+0x28>
 8000902:	2e00      	cmp	r6, #0
 8000904:	d1f8      	bne.n	80008f8 <__eqsf2+0x28>
 8000906:	428b      	cmp	r3, r1
 8000908:	d006      	beq.n	8000918 <__eqsf2+0x48>
 800090a:	2001      	movs	r0, #1
 800090c:	2a00      	cmp	r2, #0
 800090e:	d1f3      	bne.n	80008f8 <__eqsf2+0x28>
 8000910:	0028      	movs	r0, r5
 8000912:	1e43      	subs	r3, r0, #1
 8000914:	4198      	sbcs	r0, r3
 8000916:	e7ef      	b.n	80008f8 <__eqsf2+0x28>
 8000918:	2000      	movs	r0, #0
 800091a:	e7ed      	b.n	80008f8 <__eqsf2+0x28>

0800091c <__gesf2>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	0042      	lsls	r2, r0, #1
 8000920:	0245      	lsls	r5, r0, #9
 8000922:	024e      	lsls	r6, r1, #9
 8000924:	004c      	lsls	r4, r1, #1
 8000926:	0fc3      	lsrs	r3, r0, #31
 8000928:	0a6d      	lsrs	r5, r5, #9
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	0a76      	lsrs	r6, r6, #9
 800092e:	0e24      	lsrs	r4, r4, #24
 8000930:	0fc8      	lsrs	r0, r1, #31
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d01b      	beq.n	800096e <__gesf2+0x52>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d00e      	beq.n	8000958 <__gesf2+0x3c>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d11b      	bne.n	8000976 <__gesf2+0x5a>
 800093e:	2c00      	cmp	r4, #0
 8000940:	d101      	bne.n	8000946 <__gesf2+0x2a>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d01c      	beq.n	8000980 <__gesf2+0x64>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d00c      	beq.n	8000964 <__gesf2+0x48>
 800094a:	4283      	cmp	r3, r0
 800094c:	d01c      	beq.n	8000988 <__gesf2+0x6c>
 800094e:	2102      	movs	r1, #2
 8000950:	1e58      	subs	r0, r3, #1
 8000952:	4008      	ands	r0, r1
 8000954:	3801      	subs	r0, #1
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	2e00      	cmp	r6, #0
 800095a:	d122      	bne.n	80009a2 <__gesf2+0x86>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d1f4      	bne.n	800094a <__gesf2+0x2e>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d1f2      	bne.n	800094a <__gesf2+0x2e>
 8000964:	2800      	cmp	r0, #0
 8000966:	d1f6      	bne.n	8000956 <__gesf2+0x3a>
 8000968:	2001      	movs	r0, #1
 800096a:	4240      	negs	r0, r0
 800096c:	e7f3      	b.n	8000956 <__gesf2+0x3a>
 800096e:	2d00      	cmp	r5, #0
 8000970:	d117      	bne.n	80009a2 <__gesf2+0x86>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d0f0      	beq.n	8000958 <__gesf2+0x3c>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d1e7      	bne.n	800094a <__gesf2+0x2e>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d1e5      	bne.n	800094a <__gesf2+0x2e>
 800097e:	e7e6      	b.n	800094e <__gesf2+0x32>
 8000980:	2000      	movs	r0, #0
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e7      	beq.n	8000956 <__gesf2+0x3a>
 8000986:	e7e2      	b.n	800094e <__gesf2+0x32>
 8000988:	42a2      	cmp	r2, r4
 800098a:	dc05      	bgt.n	8000998 <__gesf2+0x7c>
 800098c:	dbea      	blt.n	8000964 <__gesf2+0x48>
 800098e:	42b5      	cmp	r5, r6
 8000990:	d802      	bhi.n	8000998 <__gesf2+0x7c>
 8000992:	d3e7      	bcc.n	8000964 <__gesf2+0x48>
 8000994:	2000      	movs	r0, #0
 8000996:	e7de      	b.n	8000956 <__gesf2+0x3a>
 8000998:	4243      	negs	r3, r0
 800099a:	4158      	adcs	r0, r3
 800099c:	0040      	lsls	r0, r0, #1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7d9      	b.n	8000956 <__gesf2+0x3a>
 80009a2:	2002      	movs	r0, #2
 80009a4:	4240      	negs	r0, r0
 80009a6:	e7d6      	b.n	8000956 <__gesf2+0x3a>

080009a8 <__lesf2>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	0042      	lsls	r2, r0, #1
 80009ac:	0245      	lsls	r5, r0, #9
 80009ae:	024e      	lsls	r6, r1, #9
 80009b0:	004c      	lsls	r4, r1, #1
 80009b2:	0fc3      	lsrs	r3, r0, #31
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	0e12      	lsrs	r2, r2, #24
 80009b8:	0a76      	lsrs	r6, r6, #9
 80009ba:	0e24      	lsrs	r4, r4, #24
 80009bc:	0fc8      	lsrs	r0, r1, #31
 80009be:	2aff      	cmp	r2, #255	; 0xff
 80009c0:	d00b      	beq.n	80009da <__lesf2+0x32>
 80009c2:	2cff      	cmp	r4, #255	; 0xff
 80009c4:	d00d      	beq.n	80009e2 <__lesf2+0x3a>
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d11f      	bne.n	8000a0a <__lesf2+0x62>
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	d116      	bne.n	80009fc <__lesf2+0x54>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d114      	bne.n	80009fc <__lesf2+0x54>
 80009d2:	2000      	movs	r0, #0
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d010      	beq.n	80009fa <__lesf2+0x52>
 80009d8:	e009      	b.n	80009ee <__lesf2+0x46>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d10c      	bne.n	80009f8 <__lesf2+0x50>
 80009de:	2cff      	cmp	r4, #255	; 0xff
 80009e0:	d113      	bne.n	8000a0a <__lesf2+0x62>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d108      	bne.n	80009f8 <__lesf2+0x50>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d008      	beq.n	80009fc <__lesf2+0x54>
 80009ea:	4283      	cmp	r3, r0
 80009ec:	d012      	beq.n	8000a14 <__lesf2+0x6c>
 80009ee:	2102      	movs	r1, #2
 80009f0:	1e58      	subs	r0, r3, #1
 80009f2:	4008      	ands	r0, r1
 80009f4:	3801      	subs	r0, #1
 80009f6:	e000      	b.n	80009fa <__lesf2+0x52>
 80009f8:	2002      	movs	r0, #2
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	2d00      	cmp	r5, #0
 80009fe:	d1f4      	bne.n	80009ea <__lesf2+0x42>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d1fa      	bne.n	80009fa <__lesf2+0x52>
 8000a04:	2001      	movs	r0, #1
 8000a06:	4240      	negs	r0, r0
 8000a08:	e7f7      	b.n	80009fa <__lesf2+0x52>
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d1ed      	bne.n	80009ea <__lesf2+0x42>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d1eb      	bne.n	80009ea <__lesf2+0x42>
 8000a12:	e7ec      	b.n	80009ee <__lesf2+0x46>
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	dc05      	bgt.n	8000a24 <__lesf2+0x7c>
 8000a18:	dbf2      	blt.n	8000a00 <__lesf2+0x58>
 8000a1a:	42b5      	cmp	r5, r6
 8000a1c:	d802      	bhi.n	8000a24 <__lesf2+0x7c>
 8000a1e:	d3ef      	bcc.n	8000a00 <__lesf2+0x58>
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7ea      	b.n	80009fa <__lesf2+0x52>
 8000a24:	4243      	negs	r3, r0
 8000a26:	4158      	adcs	r0, r3
 8000a28:	0040      	lsls	r0, r0, #1
 8000a2a:	3801      	subs	r0, #1
 8000a2c:	e7e5      	b.n	80009fa <__lesf2+0x52>
 8000a2e:	46c0      	nop			; (mov r8, r8)

08000a30 <__aeabi_fmul>:
 8000a30:	0243      	lsls	r3, r0, #9
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	464f      	mov	r7, r9
 8000a38:	4646      	mov	r6, r8
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	46d6      	mov	lr, sl
 8000a3e:	0fc3      	lsrs	r3, r0, #31
 8000a40:	0045      	lsls	r5, r0, #1
 8000a42:	4698      	mov	r8, r3
 8000a44:	b5c0      	push	{r6, r7, lr}
 8000a46:	464b      	mov	r3, r9
 8000a48:	1c0f      	adds	r7, r1, #0
 8000a4a:	0e2d      	lsrs	r5, r5, #24
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fmul+0x20>
 8000a4e:	e0cb      	b.n	8000be8 <__aeabi_fmul+0x1b8>
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0x26>
 8000a54:	e0cf      	b.n	8000bf6 <__aeabi_fmul+0x1c6>
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	04d2      	lsls	r2, r2, #19
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	4691      	mov	r9, r2
 8000a62:	2600      	movs	r6, #0
 8000a64:	469a      	mov	sl, r3
 8000a66:	3d7f      	subs	r5, #127	; 0x7f
 8000a68:	027c      	lsls	r4, r7, #9
 8000a6a:	007b      	lsls	r3, r7, #1
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	0e1b      	lsrs	r3, r3, #24
 8000a70:	0fff      	lsrs	r7, r7, #31
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fmul+0x48>
 8000a76:	e0a9      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000a78:	2bff      	cmp	r3, #255	; 0xff
 8000a7a:	d011      	beq.n	8000aa0 <__aeabi_fmul+0x70>
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	00e4      	lsls	r4, r4, #3
 8000a80:	04d2      	lsls	r2, r2, #19
 8000a82:	4314      	orrs	r4, r2
 8000a84:	4642      	mov	r2, r8
 8000a86:	3b7f      	subs	r3, #127	; 0x7f
 8000a88:	195b      	adds	r3, r3, r5
 8000a8a:	407a      	eors	r2, r7
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	1c5d      	adds	r5, r3, #1
 8000a92:	2e0a      	cmp	r6, #10
 8000a94:	dd13      	ble.n	8000abe <__aeabi_fmul+0x8e>
 8000a96:	003a      	movs	r2, r7
 8000a98:	2e0b      	cmp	r6, #11
 8000a9a:	d047      	beq.n	8000b2c <__aeabi_fmul+0xfc>
 8000a9c:	4647      	mov	r7, r8
 8000a9e:	e03f      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000aa0:	002b      	movs	r3, r5
 8000aa2:	33ff      	adds	r3, #255	; 0xff
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d11e      	bne.n	8000ae6 <__aeabi_fmul+0xb6>
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4316      	orrs	r6, r2
 8000aac:	4642      	mov	r2, r8
 8000aae:	3501      	adds	r5, #1
 8000ab0:	407a      	eors	r2, r7
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	35ff      	adds	r5, #255	; 0xff
 8000ab6:	2e0a      	cmp	r6, #10
 8000ab8:	dd00      	ble.n	8000abc <__aeabi_fmul+0x8c>
 8000aba:	e0e4      	b.n	8000c86 <__aeabi_fmul+0x256>
 8000abc:	2002      	movs	r0, #2
 8000abe:	2e02      	cmp	r6, #2
 8000ac0:	dc1c      	bgt.n	8000afc <__aeabi_fmul+0xcc>
 8000ac2:	3e01      	subs	r6, #1
 8000ac4:	2e01      	cmp	r6, #1
 8000ac6:	d842      	bhi.n	8000b4e <__aeabi_fmul+0x11e>
 8000ac8:	2802      	cmp	r0, #2
 8000aca:	d03d      	beq.n	8000b48 <__aeabi_fmul+0x118>
 8000acc:	2801      	cmp	r0, #1
 8000ace:	d166      	bne.n	8000b9e <__aeabi_fmul+0x16e>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	05c0      	lsls	r0, r0, #23
 8000ad6:	4308      	orrs	r0, r1
 8000ad8:	07d2      	lsls	r2, r2, #31
 8000ada:	4310      	orrs	r0, r2
 8000adc:	bce0      	pop	{r5, r6, r7}
 8000ade:	46ba      	mov	sl, r7
 8000ae0:	46b1      	mov	r9, r6
 8000ae2:	46a8      	mov	r8, r5
 8000ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	4316      	orrs	r6, r2
 8000aea:	4642      	mov	r2, r8
 8000aec:	3501      	adds	r5, #1
 8000aee:	407a      	eors	r2, r7
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	35ff      	adds	r5, #255	; 0xff
 8000af4:	2e0a      	cmp	r6, #10
 8000af6:	dd00      	ble.n	8000afa <__aeabi_fmul+0xca>
 8000af8:	e0e4      	b.n	8000cc4 <__aeabi_fmul+0x294>
 8000afa:	2003      	movs	r0, #3
 8000afc:	2101      	movs	r1, #1
 8000afe:	40b1      	lsls	r1, r6
 8000b00:	26a6      	movs	r6, #166	; 0xa6
 8000b02:	00f6      	lsls	r6, r6, #3
 8000b04:	4231      	tst	r1, r6
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_fmul+0xee>
 8000b08:	2690      	movs	r6, #144	; 0x90
 8000b0a:	00b6      	lsls	r6, r6, #2
 8000b0c:	4231      	tst	r1, r6
 8000b0e:	d116      	bne.n	8000b3e <__aeabi_fmul+0x10e>
 8000b10:	3eb9      	subs	r6, #185	; 0xb9
 8000b12:	3eff      	subs	r6, #255	; 0xff
 8000b14:	420e      	tst	r6, r1
 8000b16:	d01a      	beq.n	8000b4e <__aeabi_fmul+0x11e>
 8000b18:	46a1      	mov	r9, r4
 8000b1a:	4682      	mov	sl, r0
 8000b1c:	e000      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000b1e:	0017      	movs	r7, r2
 8000b20:	4653      	mov	r3, sl
 8000b22:	003a      	movs	r2, r7
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d00f      	beq.n	8000b48 <__aeabi_fmul+0x118>
 8000b28:	464c      	mov	r4, r9
 8000b2a:	4650      	mov	r0, sl
 8000b2c:	2803      	cmp	r0, #3
 8000b2e:	d1cd      	bne.n	8000acc <__aeabi_fmul+0x9c>
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	03c9      	lsls	r1, r1, #15
 8000b34:	4321      	orrs	r1, r4
 8000b36:	0249      	lsls	r1, r1, #9
 8000b38:	20ff      	movs	r0, #255	; 0xff
 8000b3a:	0a49      	lsrs	r1, r1, #9
 8000b3c:	e7ca      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	2200      	movs	r2, #0
 8000b42:	20ff      	movs	r0, #255	; 0xff
 8000b44:	03c9      	lsls	r1, r1, #15
 8000b46:	e7c5      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	e7c2      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000b4e:	0c20      	lsrs	r0, r4, #16
 8000b50:	4649      	mov	r1, r9
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	0c24      	lsrs	r4, r4, #16
 8000b56:	0027      	movs	r7, r4
 8000b58:	0c0e      	lsrs	r6, r1, #16
 8000b5a:	0409      	lsls	r1, r1, #16
 8000b5c:	0c09      	lsrs	r1, r1, #16
 8000b5e:	4374      	muls	r4, r6
 8000b60:	434f      	muls	r7, r1
 8000b62:	4346      	muls	r6, r0
 8000b64:	4348      	muls	r0, r1
 8000b66:	0c39      	lsrs	r1, r7, #16
 8000b68:	1900      	adds	r0, r0, r4
 8000b6a:	1809      	adds	r1, r1, r0
 8000b6c:	428c      	cmp	r4, r1
 8000b6e:	d903      	bls.n	8000b78 <__aeabi_fmul+0x148>
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	4684      	mov	ip, r0
 8000b76:	4466      	add	r6, ip
 8000b78:	043f      	lsls	r7, r7, #16
 8000b7a:	0408      	lsls	r0, r1, #16
 8000b7c:	0c3f      	lsrs	r7, r7, #16
 8000b7e:	19c0      	adds	r0, r0, r7
 8000b80:	0184      	lsls	r4, r0, #6
 8000b82:	1e67      	subs	r7, r4, #1
 8000b84:	41bc      	sbcs	r4, r7
 8000b86:	0c09      	lsrs	r1, r1, #16
 8000b88:	0e80      	lsrs	r0, r0, #26
 8000b8a:	1989      	adds	r1, r1, r6
 8000b8c:	4304      	orrs	r4, r0
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	430c      	orrs	r4, r1
 8000b92:	0109      	lsls	r1, r1, #4
 8000b94:	d571      	bpl.n	8000c7a <__aeabi_fmul+0x24a>
 8000b96:	2301      	movs	r3, #1
 8000b98:	0861      	lsrs	r1, r4, #1
 8000b9a:	401c      	ands	r4, r3
 8000b9c:	430c      	orrs	r4, r1
 8000b9e:	002b      	movs	r3, r5
 8000ba0:	337f      	adds	r3, #127	; 0x7f
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dd51      	ble.n	8000c4a <__aeabi_fmul+0x21a>
 8000ba6:	0761      	lsls	r1, r4, #29
 8000ba8:	d004      	beq.n	8000bb4 <__aeabi_fmul+0x184>
 8000baa:	210f      	movs	r1, #15
 8000bac:	4021      	ands	r1, r4
 8000bae:	2904      	cmp	r1, #4
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fmul+0x184>
 8000bb2:	3404      	adds	r4, #4
 8000bb4:	0121      	lsls	r1, r4, #4
 8000bb6:	d503      	bpl.n	8000bc0 <__aeabi_fmul+0x190>
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <__aeabi_fmul+0x298>)
 8000bba:	401c      	ands	r4, r3
 8000bbc:	002b      	movs	r3, r5
 8000bbe:	3380      	adds	r3, #128	; 0x80
 8000bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8000bc2:	dcc1      	bgt.n	8000b48 <__aeabi_fmul+0x118>
 8000bc4:	01a1      	lsls	r1, r4, #6
 8000bc6:	0a49      	lsrs	r1, r1, #9
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	e783      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d12c      	bne.n	8000c2a <__aeabi_fmul+0x1fa>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	431e      	orrs	r6, r3
 8000bd6:	002b      	movs	r3, r5
 8000bd8:	407a      	eors	r2, r7
 8000bda:	2001      	movs	r0, #1
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	1c5d      	adds	r5, r3, #1
 8000be0:	2e0a      	cmp	r6, #10
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_fmul+0x1b6>
 8000be4:	e757      	b.n	8000a96 <__aeabi_fmul+0x66>
 8000be6:	e76a      	b.n	8000abe <__aeabi_fmul+0x8e>
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d110      	bne.n	8000c0e <__aeabi_fmul+0x1de>
 8000bec:	2301      	movs	r3, #1
 8000bee:	2604      	movs	r6, #4
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	e738      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <__aeabi_fmul+0x1d4>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	2608      	movs	r6, #8
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	469a      	mov	sl, r3
 8000c02:	e731      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000c04:	2303      	movs	r3, #3
 8000c06:	260c      	movs	r6, #12
 8000c08:	25ff      	movs	r5, #255	; 0xff
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	e72c      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000c0e:	4648      	mov	r0, r9
 8000c10:	f000 fc22 	bl	8001458 <__clzsi2>
 8000c14:	464a      	mov	r2, r9
 8000c16:	1f43      	subs	r3, r0, #5
 8000c18:	2576      	movs	r5, #118	; 0x76
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	426d      	negs	r5, r5
 8000c20:	4691      	mov	r9, r2
 8000c22:	2600      	movs	r6, #0
 8000c24:	469a      	mov	sl, r3
 8000c26:	1a2d      	subs	r5, r5, r0
 8000c28:	e71e      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	f000 fc14 	bl	8001458 <__clzsi2>
 8000c30:	4642      	mov	r2, r8
 8000c32:	1f43      	subs	r3, r0, #5
 8000c34:	409c      	lsls	r4, r3
 8000c36:	1a2b      	subs	r3, r5, r0
 8000c38:	3b76      	subs	r3, #118	; 0x76
 8000c3a:	407a      	eors	r2, r7
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	1c5d      	adds	r5, r3, #1
 8000c42:	2e0a      	cmp	r6, #10
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_fmul+0x218>
 8000c46:	e726      	b.n	8000a96 <__aeabi_fmul+0x66>
 8000c48:	e739      	b.n	8000abe <__aeabi_fmul+0x8e>
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	1acb      	subs	r3, r1, r3
 8000c4e:	2b1b      	cmp	r3, #27
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_fmul+0x224>
 8000c52:	e73d      	b.n	8000ad0 <__aeabi_fmul+0xa0>
 8000c54:	359e      	adds	r5, #158	; 0x9e
 8000c56:	0021      	movs	r1, r4
 8000c58:	40ac      	lsls	r4, r5
 8000c5a:	40d9      	lsrs	r1, r3
 8000c5c:	1e63      	subs	r3, r4, #1
 8000c5e:	419c      	sbcs	r4, r3
 8000c60:	4321      	orrs	r1, r4
 8000c62:	074b      	lsls	r3, r1, #29
 8000c64:	d004      	beq.n	8000c70 <__aeabi_fmul+0x240>
 8000c66:	230f      	movs	r3, #15
 8000c68:	400b      	ands	r3, r1
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_fmul+0x240>
 8000c6e:	3104      	adds	r1, #4
 8000c70:	014b      	lsls	r3, r1, #5
 8000c72:	d504      	bpl.n	8000c7e <__aeabi_fmul+0x24e>
 8000c74:	2001      	movs	r0, #1
 8000c76:	2100      	movs	r1, #0
 8000c78:	e72c      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000c7a:	001d      	movs	r5, r3
 8000c7c:	e78f      	b.n	8000b9e <__aeabi_fmul+0x16e>
 8000c7e:	0189      	lsls	r1, r1, #6
 8000c80:	2000      	movs	r0, #0
 8000c82:	0a49      	lsrs	r1, r1, #9
 8000c84:	e726      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000c86:	2302      	movs	r3, #2
 8000c88:	2e0f      	cmp	r6, #15
 8000c8a:	d10c      	bne.n	8000ca6 <__aeabi_fmul+0x276>
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	464b      	mov	r3, r9
 8000c90:	03c9      	lsls	r1, r1, #15
 8000c92:	420b      	tst	r3, r1
 8000c94:	d00d      	beq.n	8000cb2 <__aeabi_fmul+0x282>
 8000c96:	420c      	tst	r4, r1
 8000c98:	d10b      	bne.n	8000cb2 <__aeabi_fmul+0x282>
 8000c9a:	4321      	orrs	r1, r4
 8000c9c:	0249      	lsls	r1, r1, #9
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	20ff      	movs	r0, #255	; 0xff
 8000ca2:	0a49      	lsrs	r1, r1, #9
 8000ca4:	e716      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000ca6:	2e0b      	cmp	r6, #11
 8000ca8:	d000      	beq.n	8000cac <__aeabi_fmul+0x27c>
 8000caa:	e6f7      	b.n	8000a9c <__aeabi_fmul+0x6c>
 8000cac:	46a1      	mov	r9, r4
 8000cae:	469a      	mov	sl, r3
 8000cb0:	e736      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	464b      	mov	r3, r9
 8000cb6:	03c9      	lsls	r1, r1, #15
 8000cb8:	4319      	orrs	r1, r3
 8000cba:	0249      	lsls	r1, r1, #9
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	20ff      	movs	r0, #255	; 0xff
 8000cc0:	0a49      	lsrs	r1, r1, #9
 8000cc2:	e707      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e7df      	b.n	8000c88 <__aeabi_fmul+0x258>
 8000cc8:	f7ffffff 	.word	0xf7ffffff

08000ccc <__aeabi_f2iz>:
 8000ccc:	0241      	lsls	r1, r0, #9
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0fc3      	lsrs	r3, r0, #31
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0e12      	lsrs	r2, r2, #24
 8000cd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cda:	dd03      	ble.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cde:	dd02      	ble.n	8000ce6 <__aeabi_f2iz+0x1a>
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <__aeabi_f2iz+0x3c>)
 8000ce2:	1898      	adds	r0, r3, r2
 8000ce4:	4770      	bx	lr
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	0400      	lsls	r0, r0, #16
 8000cea:	4301      	orrs	r1, r0
 8000cec:	2a95      	cmp	r2, #149	; 0x95
 8000cee:	dc07      	bgt.n	8000d00 <__aeabi_f2iz+0x34>
 8000cf0:	2096      	movs	r0, #150	; 0x96
 8000cf2:	1a82      	subs	r2, r0, r2
 8000cf4:	40d1      	lsrs	r1, r2
 8000cf6:	4248      	negs	r0, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	e7f1      	b.n	8000ce4 <__aeabi_f2iz+0x18>
 8000d00:	3a96      	subs	r2, #150	; 0x96
 8000d02:	4091      	lsls	r1, r2
 8000d04:	e7f7      	b.n	8000cf6 <__aeabi_f2iz+0x2a>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	7fffffff 	.word	0x7fffffff

08000d0c <__aeabi_i2f>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d013      	beq.n	8000d3a <__aeabi_i2f+0x2e>
 8000d12:	17c3      	asrs	r3, r0, #31
 8000d14:	18c5      	adds	r5, r0, r3
 8000d16:	405d      	eors	r5, r3
 8000d18:	0fc4      	lsrs	r4, r0, #31
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	f000 fb9c 	bl	8001458 <__clzsi2>
 8000d20:	239e      	movs	r3, #158	; 0x9e
 8000d22:	0001      	movs	r1, r0
 8000d24:	1a1b      	subs	r3, r3, r0
 8000d26:	2b96      	cmp	r3, #150	; 0x96
 8000d28:	dc0f      	bgt.n	8000d4a <__aeabi_i2f+0x3e>
 8000d2a:	2808      	cmp	r0, #8
 8000d2c:	d031      	beq.n	8000d92 <__aeabi_i2f+0x86>
 8000d2e:	3908      	subs	r1, #8
 8000d30:	408d      	lsls	r5, r1
 8000d32:	026d      	lsls	r5, r5, #9
 8000d34:	0a6d      	lsrs	r5, r5, #9
 8000d36:	b2d8      	uxtb	r0, r3
 8000d38:	e002      	b.n	8000d40 <__aeabi_i2f+0x34>
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	2500      	movs	r5, #0
 8000d40:	05c0      	lsls	r0, r0, #23
 8000d42:	4328      	orrs	r0, r5
 8000d44:	07e4      	lsls	r4, r4, #31
 8000d46:	4320      	orrs	r0, r4
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	2b99      	cmp	r3, #153	; 0x99
 8000d4c:	dd0c      	ble.n	8000d68 <__aeabi_i2f+0x5c>
 8000d4e:	2205      	movs	r2, #5
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	0028      	movs	r0, r5
 8000d54:	40d0      	lsrs	r0, r2
 8000d56:	0002      	movs	r2, r0
 8000d58:	0008      	movs	r0, r1
 8000d5a:	301b      	adds	r0, #27
 8000d5c:	4085      	lsls	r5, r0
 8000d5e:	0028      	movs	r0, r5
 8000d60:	1e45      	subs	r5, r0, #1
 8000d62:	41a8      	sbcs	r0, r5
 8000d64:	4302      	orrs	r2, r0
 8000d66:	0015      	movs	r5, r2
 8000d68:	2905      	cmp	r1, #5
 8000d6a:	dc16      	bgt.n	8000d9a <__aeabi_i2f+0x8e>
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <__aeabi_i2f+0xa0>)
 8000d70:	4002      	ands	r2, r0
 8000d72:	076e      	lsls	r6, r5, #29
 8000d74:	d009      	beq.n	8000d8a <__aeabi_i2f+0x7e>
 8000d76:	260f      	movs	r6, #15
 8000d78:	4035      	ands	r5, r6
 8000d7a:	2d04      	cmp	r5, #4
 8000d7c:	d005      	beq.n	8000d8a <__aeabi_i2f+0x7e>
 8000d7e:	3204      	adds	r2, #4
 8000d80:	0155      	lsls	r5, r2, #5
 8000d82:	d502      	bpl.n	8000d8a <__aeabi_i2f+0x7e>
 8000d84:	239f      	movs	r3, #159	; 0x9f
 8000d86:	4002      	ands	r2, r0
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	0192      	lsls	r2, r2, #6
 8000d8c:	0a55      	lsrs	r5, r2, #9
 8000d8e:	b2d8      	uxtb	r0, r3
 8000d90:	e7d6      	b.n	8000d40 <__aeabi_i2f+0x34>
 8000d92:	026d      	lsls	r5, r5, #9
 8000d94:	2096      	movs	r0, #150	; 0x96
 8000d96:	0a6d      	lsrs	r5, r5, #9
 8000d98:	e7d2      	b.n	8000d40 <__aeabi_i2f+0x34>
 8000d9a:	1f4a      	subs	r2, r1, #5
 8000d9c:	4095      	lsls	r5, r2
 8000d9e:	002a      	movs	r2, r5
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <__aeabi_i2f+0xa0>)
 8000da2:	4002      	ands	r2, r0
 8000da4:	076e      	lsls	r6, r5, #29
 8000da6:	d0f0      	beq.n	8000d8a <__aeabi_i2f+0x7e>
 8000da8:	e7e5      	b.n	8000d76 <__aeabi_i2f+0x6a>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	fbffffff 	.word	0xfbffffff

08000db0 <__aeabi_ddiv>:
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	4657      	mov	r7, sl
 8000db4:	464e      	mov	r6, r9
 8000db6:	4645      	mov	r5, r8
 8000db8:	46de      	mov	lr, fp
 8000dba:	b5e0      	push	{r5, r6, r7, lr}
 8000dbc:	030c      	lsls	r4, r1, #12
 8000dbe:	001f      	movs	r7, r3
 8000dc0:	004b      	lsls	r3, r1, #1
 8000dc2:	4681      	mov	r9, r0
 8000dc4:	4692      	mov	sl, r2
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	b085      	sub	sp, #20
 8000dca:	0b24      	lsrs	r4, r4, #12
 8000dcc:	0d5b      	lsrs	r3, r3, #21
 8000dce:	0fce      	lsrs	r6, r1, #31
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0x26>
 8000dd4:	e152      	b.n	800107c <__aeabi_ddiv+0x2cc>
 8000dd6:	4ad2      	ldr	r2, [pc, #840]	; (8001120 <__aeabi_ddiv+0x370>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x2e>
 8000ddc:	e16e      	b.n	80010bc <__aeabi_ddiv+0x30c>
 8000dde:	0f42      	lsrs	r2, r0, #29
 8000de0:	00e4      	lsls	r4, r4, #3
 8000de2:	4314      	orrs	r4, r2
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	0412      	lsls	r2, r2, #16
 8000de8:	4322      	orrs	r2, r4
 8000dea:	4690      	mov	r8, r2
 8000dec:	4acd      	ldr	r2, [pc, #820]	; (8001124 <__aeabi_ddiv+0x374>)
 8000dee:	00c5      	lsls	r5, r0, #3
 8000df0:	4693      	mov	fp, r2
 8000df2:	449b      	add	fp, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	4699      	mov	r9, r3
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	033c      	lsls	r4, r7, #12
 8000dfc:	007b      	lsls	r3, r7, #1
 8000dfe:	4650      	mov	r0, sl
 8000e00:	0b24      	lsrs	r4, r4, #12
 8000e02:	0d5b      	lsrs	r3, r3, #21
 8000e04:	0fff      	lsrs	r7, r7, #31
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x5c>
 8000e0a:	e11a      	b.n	8001042 <__aeabi_ddiv+0x292>
 8000e0c:	4ac4      	ldr	r2, [pc, #784]	; (8001120 <__aeabi_ddiv+0x370>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x64>
 8000e12:	e15e      	b.n	80010d2 <__aeabi_ddiv+0x322>
 8000e14:	0f42      	lsrs	r2, r0, #29
 8000e16:	00e4      	lsls	r4, r4, #3
 8000e18:	4322      	orrs	r2, r4
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0424      	lsls	r4, r4, #16
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	4ac0      	ldr	r2, [pc, #768]	; (8001124 <__aeabi_ddiv+0x374>)
 8000e22:	00c1      	lsls	r1, r0, #3
 8000e24:	4694      	mov	ip, r2
 8000e26:	465a      	mov	r2, fp
 8000e28:	4463      	add	r3, ip
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	2000      	movs	r0, #0
 8000e30:	0033      	movs	r3, r6
 8000e32:	407b      	eors	r3, r7
 8000e34:	469a      	mov	sl, r3
 8000e36:	464b      	mov	r3, r9
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d827      	bhi.n	8000e8c <__aeabi_ddiv+0xdc>
 8000e3c:	4aba      	ldr	r2, [pc, #744]	; (8001128 <__aeabi_ddiv+0x378>)
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	58d3      	ldr	r3, [r2, r3]
 8000e42:	469f      	mov	pc, r3
 8000e44:	46b2      	mov	sl, r6
 8000e46:	9b00      	ldr	r3, [sp, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d016      	beq.n	8000e7a <__aeabi_ddiv+0xca>
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_ddiv+0xa2>
 8000e50:	e287      	b.n	8001362 <__aeabi_ddiv+0x5b2>
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d000      	beq.n	8000e58 <__aeabi_ddiv+0xa8>
 8000e56:	e0d5      	b.n	8001004 <__aeabi_ddiv+0x254>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	4313      	orrs	r3, r2
 8000e62:	4652      	mov	r2, sl
 8000e64:	07d2      	lsls	r2, r2, #31
 8000e66:	4313      	orrs	r3, r2
 8000e68:	0028      	movs	r0, r5
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	b005      	add	sp, #20
 8000e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e70:	46bb      	mov	fp, r7
 8000e72:	46b2      	mov	sl, r6
 8000e74:	46a9      	mov	r9, r5
 8000e76:	46a0      	mov	r8, r4
 8000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	4ba8      	ldr	r3, [pc, #672]	; (8001120 <__aeabi_ddiv+0x370>)
 8000e80:	e7ed      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8000e82:	46ba      	mov	sl, r7
 8000e84:	46a0      	mov	r8, r4
 8000e86:	000d      	movs	r5, r1
 8000e88:	9000      	str	r0, [sp, #0]
 8000e8a:	e7dc      	b.n	8000e46 <__aeabi_ddiv+0x96>
 8000e8c:	4544      	cmp	r4, r8
 8000e8e:	d200      	bcs.n	8000e92 <__aeabi_ddiv+0xe2>
 8000e90:	e1c4      	b.n	800121c <__aeabi_ddiv+0x46c>
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0xe6>
 8000e94:	e1bf      	b.n	8001216 <__aeabi_ddiv+0x466>
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	002e      	movs	r6, r5
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	44e3      	add	fp, ip
 8000ea4:	0223      	lsls	r3, r4, #8
 8000ea6:	0e0c      	lsrs	r4, r1, #24
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	4699      	mov	r9, r3
 8000eae:	0423      	lsls	r3, r4, #16
 8000eb0:	020a      	lsls	r2, r1, #8
 8000eb2:	0c1f      	lsrs	r7, r3, #16
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	9200      	str	r2, [sp, #0]
 8000eb8:	9701      	str	r7, [sp, #4]
 8000eba:	f7ff f9ab 	bl	8000214 <__aeabi_uidivmod>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	437a      	muls	r2, r7
 8000ec2:	040b      	lsls	r3, r1, #16
 8000ec4:	0c31      	lsrs	r1, r6, #16
 8000ec6:	4680      	mov	r8, r0
 8000ec8:	4319      	orrs	r1, r3
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	d907      	bls.n	8000ede <__aeabi_ddiv+0x12e>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	1909      	adds	r1, r1, r4
 8000ed6:	44e0      	add	r8, ip
 8000ed8:	428c      	cmp	r4, r1
 8000eda:	d800      	bhi.n	8000ede <__aeabi_ddiv+0x12e>
 8000edc:	e201      	b.n	80012e2 <__aeabi_ddiv+0x532>
 8000ede:	1a88      	subs	r0, r1, r2
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	f7ff f997 	bl	8000214 <__aeabi_uidivmod>
 8000ee6:	9a01      	ldr	r2, [sp, #4]
 8000ee8:	0436      	lsls	r6, r6, #16
 8000eea:	4342      	muls	r2, r0
 8000eec:	0409      	lsls	r1, r1, #16
 8000eee:	0c36      	lsrs	r6, r6, #16
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	430e      	orrs	r6, r1
 8000ef4:	42b2      	cmp	r2, r6
 8000ef6:	d904      	bls.n	8000f02 <__aeabi_ddiv+0x152>
 8000ef8:	1936      	adds	r6, r6, r4
 8000efa:	3b01      	subs	r3, #1
 8000efc:	42b4      	cmp	r4, r6
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x152>
 8000f00:	e1e9      	b.n	80012d6 <__aeabi_ddiv+0x526>
 8000f02:	1ab0      	subs	r0, r6, r2
 8000f04:	4642      	mov	r2, r8
 8000f06:	9e00      	ldr	r6, [sp, #0]
 8000f08:	0412      	lsls	r2, r2, #16
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	0c33      	lsrs	r3, r6, #16
 8000f0e:	001f      	movs	r7, r3
 8000f10:	0c11      	lsrs	r1, r2, #16
 8000f12:	4690      	mov	r8, r2
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	0413      	lsls	r3, r2, #16
 8000f18:	0432      	lsls	r2, r6, #16
 8000f1a:	0c16      	lsrs	r6, r2, #16
 8000f1c:	0032      	movs	r2, r6
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	435a      	muls	r2, r3
 8000f22:	9603      	str	r6, [sp, #12]
 8000f24:	437b      	muls	r3, r7
 8000f26:	434e      	muls	r6, r1
 8000f28:	4379      	muls	r1, r7
 8000f2a:	0c17      	lsrs	r7, r2, #16
 8000f2c:	46bc      	mov	ip, r7
 8000f2e:	199b      	adds	r3, r3, r6
 8000f30:	4463      	add	r3, ip
 8000f32:	429e      	cmp	r6, r3
 8000f34:	d903      	bls.n	8000f3e <__aeabi_ddiv+0x18e>
 8000f36:	2680      	movs	r6, #128	; 0x80
 8000f38:	0276      	lsls	r6, r6, #9
 8000f3a:	46b4      	mov	ip, r6
 8000f3c:	4461      	add	r1, ip
 8000f3e:	0c1e      	lsrs	r6, r3, #16
 8000f40:	1871      	adds	r1, r6, r1
 8000f42:	0416      	lsls	r6, r2, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c36      	lsrs	r6, r6, #16
 8000f48:	199e      	adds	r6, r3, r6
 8000f4a:	4288      	cmp	r0, r1
 8000f4c:	d302      	bcc.n	8000f54 <__aeabi_ddiv+0x1a4>
 8000f4e:	d112      	bne.n	8000f76 <__aeabi_ddiv+0x1c6>
 8000f50:	42b5      	cmp	r5, r6
 8000f52:	d210      	bcs.n	8000f76 <__aeabi_ddiv+0x1c6>
 8000f54:	4643      	mov	r3, r8
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	9b00      	ldr	r3, [sp, #0]
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	4465      	add	r5, ip
 8000f5e:	001f      	movs	r7, r3
 8000f60:	429d      	cmp	r5, r3
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	425b      	negs	r3, r3
 8000f66:	191b      	adds	r3, r3, r4
 8000f68:	18c0      	adds	r0, r0, r3
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	d200      	bcs.n	8000f70 <__aeabi_ddiv+0x1c0>
 8000f6e:	e19e      	b.n	80012ae <__aeabi_ddiv+0x4fe>
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x1c4>
 8000f72:	e199      	b.n	80012a8 <__aeabi_ddiv+0x4f8>
 8000f74:	4690      	mov	r8, r2
 8000f76:	1bae      	subs	r6, r5, r6
 8000f78:	42b5      	cmp	r5, r6
 8000f7a:	41ad      	sbcs	r5, r5
 8000f7c:	1a40      	subs	r0, r0, r1
 8000f7e:	426d      	negs	r5, r5
 8000f80:	1b40      	subs	r0, r0, r5
 8000f82:	4284      	cmp	r4, r0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x1d8>
 8000f86:	e1d2      	b.n	800132e <__aeabi_ddiv+0x57e>
 8000f88:	4649      	mov	r1, r9
 8000f8a:	f7ff f943 	bl	8000214 <__aeabi_uidivmod>
 8000f8e:	9a01      	ldr	r2, [sp, #4]
 8000f90:	040b      	lsls	r3, r1, #16
 8000f92:	4342      	muls	r2, r0
 8000f94:	0c31      	lsrs	r1, r6, #16
 8000f96:	0005      	movs	r5, r0
 8000f98:	4319      	orrs	r1, r3
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1f0>
 8000f9e:	e16c      	b.n	800127a <__aeabi_ddiv+0x4ca>
 8000fa0:	1a88      	subs	r0, r1, r2
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	f7ff f936 	bl	8000214 <__aeabi_uidivmod>
 8000fa8:	9a01      	ldr	r2, [sp, #4]
 8000faa:	0436      	lsls	r6, r6, #16
 8000fac:	4342      	muls	r2, r0
 8000fae:	0409      	lsls	r1, r1, #16
 8000fb0:	0c36      	lsrs	r6, r6, #16
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	430e      	orrs	r6, r1
 8000fb6:	42b2      	cmp	r2, r6
 8000fb8:	d900      	bls.n	8000fbc <__aeabi_ddiv+0x20c>
 8000fba:	e153      	b.n	8001264 <__aeabi_ddiv+0x4b4>
 8000fbc:	9803      	ldr	r0, [sp, #12]
 8000fbe:	1ab6      	subs	r6, r6, r2
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	042d      	lsls	r5, r5, #16
 8000fc4:	431d      	orrs	r5, r3
 8000fc6:	9f02      	ldr	r7, [sp, #8]
 8000fc8:	042b      	lsls	r3, r5, #16
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	435a      	muls	r2, r3
 8000fce:	437b      	muls	r3, r7
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	0c29      	lsrs	r1, r5, #16
 8000fd4:	4348      	muls	r0, r1
 8000fd6:	0c13      	lsrs	r3, r2, #16
 8000fd8:	4484      	add	ip, r0
 8000fda:	4463      	add	r3, ip
 8000fdc:	4379      	muls	r1, r7
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	d903      	bls.n	8000fea <__aeabi_ddiv+0x23a>
 8000fe2:	2080      	movs	r0, #128	; 0x80
 8000fe4:	0240      	lsls	r0, r0, #9
 8000fe6:	4684      	mov	ip, r0
 8000fe8:	4461      	add	r1, ip
 8000fea:	0c18      	lsrs	r0, r3, #16
 8000fec:	0412      	lsls	r2, r2, #16
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	0c12      	lsrs	r2, r2, #16
 8000ff2:	1840      	adds	r0, r0, r1
 8000ff4:	189b      	adds	r3, r3, r2
 8000ff6:	4286      	cmp	r6, r0
 8000ff8:	d200      	bcs.n	8000ffc <__aeabi_ddiv+0x24c>
 8000ffa:	e100      	b.n	80011fe <__aeabi_ddiv+0x44e>
 8000ffc:	d100      	bne.n	8001000 <__aeabi_ddiv+0x250>
 8000ffe:	e0fb      	b.n	80011f8 <__aeabi_ddiv+0x448>
 8001000:	2301      	movs	r3, #1
 8001002:	431d      	orrs	r5, r3
 8001004:	4b49      	ldr	r3, [pc, #292]	; (800112c <__aeabi_ddiv+0x37c>)
 8001006:	445b      	add	r3, fp
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x25e>
 800100c:	e0aa      	b.n	8001164 <__aeabi_ddiv+0x3b4>
 800100e:	076a      	lsls	r2, r5, #29
 8001010:	d000      	beq.n	8001014 <__aeabi_ddiv+0x264>
 8001012:	e13d      	b.n	8001290 <__aeabi_ddiv+0x4e0>
 8001014:	08e9      	lsrs	r1, r5, #3
 8001016:	4642      	mov	r2, r8
 8001018:	01d2      	lsls	r2, r2, #7
 800101a:	d506      	bpl.n	800102a <__aeabi_ddiv+0x27a>
 800101c:	4642      	mov	r2, r8
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <__aeabi_ddiv+0x380>)
 8001020:	401a      	ands	r2, r3
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4690      	mov	r8, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	445b      	add	r3, fp
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <__aeabi_ddiv+0x384>)
 800102c:	4293      	cmp	r3, r2
 800102e:	dd00      	ble.n	8001032 <__aeabi_ddiv+0x282>
 8001030:	e723      	b.n	8000e7a <__aeabi_ddiv+0xca>
 8001032:	4642      	mov	r2, r8
 8001034:	055b      	lsls	r3, r3, #21
 8001036:	0755      	lsls	r5, r2, #29
 8001038:	0252      	lsls	r2, r2, #9
 800103a:	430d      	orrs	r5, r1
 800103c:	0b12      	lsrs	r2, r2, #12
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	e70d      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8001042:	4651      	mov	r1, sl
 8001044:	4321      	orrs	r1, r4
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x29a>
 8001048:	e07c      	b.n	8001144 <__aeabi_ddiv+0x394>
 800104a:	2c00      	cmp	r4, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x2a0>
 800104e:	e0fb      	b.n	8001248 <__aeabi_ddiv+0x498>
 8001050:	0020      	movs	r0, r4
 8001052:	f000 fa01 	bl	8001458 <__clzsi2>
 8001056:	0002      	movs	r2, r0
 8001058:	3a0b      	subs	r2, #11
 800105a:	231d      	movs	r3, #29
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	4652      	mov	r2, sl
 8001060:	0001      	movs	r1, r0
 8001062:	40da      	lsrs	r2, r3
 8001064:	4653      	mov	r3, sl
 8001066:	3908      	subs	r1, #8
 8001068:	408b      	lsls	r3, r1
 800106a:	408c      	lsls	r4, r1
 800106c:	0019      	movs	r1, r3
 800106e:	4314      	orrs	r4, r2
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <__aeabi_ddiv+0x388>)
 8001072:	4458      	add	r0, fp
 8001074:	469b      	mov	fp, r3
 8001076:	4483      	add	fp, r0
 8001078:	2000      	movs	r0, #0
 800107a:	e6d9      	b.n	8000e30 <__aeabi_ddiv+0x80>
 800107c:	0003      	movs	r3, r0
 800107e:	4323      	orrs	r3, r4
 8001080:	4698      	mov	r8, r3
 8001082:	d044      	beq.n	800110e <__aeabi_ddiv+0x35e>
 8001084:	2c00      	cmp	r4, #0
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x2da>
 8001088:	e0cf      	b.n	800122a <__aeabi_ddiv+0x47a>
 800108a:	0020      	movs	r0, r4
 800108c:	f000 f9e4 	bl	8001458 <__clzsi2>
 8001090:	0001      	movs	r1, r0
 8001092:	0002      	movs	r2, r0
 8001094:	390b      	subs	r1, #11
 8001096:	231d      	movs	r3, #29
 8001098:	1a5b      	subs	r3, r3, r1
 800109a:	4649      	mov	r1, r9
 800109c:	0010      	movs	r0, r2
 800109e:	40d9      	lsrs	r1, r3
 80010a0:	3808      	subs	r0, #8
 80010a2:	4084      	lsls	r4, r0
 80010a4:	000b      	movs	r3, r1
 80010a6:	464d      	mov	r5, r9
 80010a8:	4323      	orrs	r3, r4
 80010aa:	4698      	mov	r8, r3
 80010ac:	4085      	lsls	r5, r0
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <__aeabi_ddiv+0x38c>)
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	469b      	mov	fp, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	4699      	mov	r9, r3
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	e69e      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 80010bc:	0002      	movs	r2, r0
 80010be:	4322      	orrs	r2, r4
 80010c0:	4690      	mov	r8, r2
 80010c2:	d11d      	bne.n	8001100 <__aeabi_ddiv+0x350>
 80010c4:	2208      	movs	r2, #8
 80010c6:	469b      	mov	fp, r3
 80010c8:	2302      	movs	r3, #2
 80010ca:	2500      	movs	r5, #0
 80010cc:	4691      	mov	r9, r2
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	e693      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 80010d2:	4651      	mov	r1, sl
 80010d4:	4321      	orrs	r1, r4
 80010d6:	d109      	bne.n	80010ec <__aeabi_ddiv+0x33c>
 80010d8:	2302      	movs	r3, #2
 80010da:	464a      	mov	r2, r9
 80010dc:	431a      	orrs	r2, r3
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <__aeabi_ddiv+0x390>)
 80010e0:	4691      	mov	r9, r2
 80010e2:	469c      	mov	ip, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	2002      	movs	r0, #2
 80010e8:	44e3      	add	fp, ip
 80010ea:	e6a1      	b.n	8000e30 <__aeabi_ddiv+0x80>
 80010ec:	2303      	movs	r3, #3
 80010ee:	464a      	mov	r2, r9
 80010f0:	431a      	orrs	r2, r3
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <__aeabi_ddiv+0x390>)
 80010f4:	4691      	mov	r9, r2
 80010f6:	469c      	mov	ip, r3
 80010f8:	4651      	mov	r1, sl
 80010fa:	2003      	movs	r0, #3
 80010fc:	44e3      	add	fp, ip
 80010fe:	e697      	b.n	8000e30 <__aeabi_ddiv+0x80>
 8001100:	220c      	movs	r2, #12
 8001102:	469b      	mov	fp, r3
 8001104:	2303      	movs	r3, #3
 8001106:	46a0      	mov	r8, r4
 8001108:	4691      	mov	r9, r2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	e675      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 800110e:	2304      	movs	r3, #4
 8001110:	4699      	mov	r9, r3
 8001112:	2300      	movs	r3, #0
 8001114:	469b      	mov	fp, r3
 8001116:	3301      	adds	r3, #1
 8001118:	2500      	movs	r5, #0
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	e66d      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff
 8001124:	fffffc01 	.word	0xfffffc01
 8001128:	08005a60 	.word	0x08005a60
 800112c:	000003ff 	.word	0x000003ff
 8001130:	feffffff 	.word	0xfeffffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	000003f3 	.word	0x000003f3
 800113c:	fffffc0d 	.word	0xfffffc0d
 8001140:	fffff801 	.word	0xfffff801
 8001144:	464a      	mov	r2, r9
 8001146:	2301      	movs	r3, #1
 8001148:	431a      	orrs	r2, r3
 800114a:	4691      	mov	r9, r2
 800114c:	2400      	movs	r4, #0
 800114e:	2001      	movs	r0, #1
 8001150:	e66e      	b.n	8000e30 <__aeabi_ddiv+0x80>
 8001152:	2300      	movs	r3, #0
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	469a      	mov	sl, r3
 8001158:	2500      	movs	r5, #0
 800115a:	4b88      	ldr	r3, [pc, #544]	; (800137c <__aeabi_ddiv+0x5cc>)
 800115c:	0312      	lsls	r2, r2, #12
 800115e:	e67e      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8001160:	2501      	movs	r5, #1
 8001162:	426d      	negs	r5, r5
 8001164:	2201      	movs	r2, #1
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	2a38      	cmp	r2, #56	; 0x38
 800116a:	dd00      	ble.n	800116e <__aeabi_ddiv+0x3be>
 800116c:	e674      	b.n	8000e58 <__aeabi_ddiv+0xa8>
 800116e:	2a1f      	cmp	r2, #31
 8001170:	dc00      	bgt.n	8001174 <__aeabi_ddiv+0x3c4>
 8001172:	e0bd      	b.n	80012f0 <__aeabi_ddiv+0x540>
 8001174:	211f      	movs	r1, #31
 8001176:	4249      	negs	r1, r1
 8001178:	1acb      	subs	r3, r1, r3
 800117a:	4641      	mov	r1, r8
 800117c:	40d9      	lsrs	r1, r3
 800117e:	000b      	movs	r3, r1
 8001180:	2a20      	cmp	r2, #32
 8001182:	d004      	beq.n	800118e <__aeabi_ddiv+0x3de>
 8001184:	4641      	mov	r1, r8
 8001186:	4a7e      	ldr	r2, [pc, #504]	; (8001380 <__aeabi_ddiv+0x5d0>)
 8001188:	445a      	add	r2, fp
 800118a:	4091      	lsls	r1, r2
 800118c:	430d      	orrs	r5, r1
 800118e:	0029      	movs	r1, r5
 8001190:	1e4a      	subs	r2, r1, #1
 8001192:	4191      	sbcs	r1, r2
 8001194:	4319      	orrs	r1, r3
 8001196:	2307      	movs	r3, #7
 8001198:	001d      	movs	r5, r3
 800119a:	2200      	movs	r2, #0
 800119c:	400d      	ands	r5, r1
 800119e:	420b      	tst	r3, r1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x3f4>
 80011a2:	e0d0      	b.n	8001346 <__aeabi_ddiv+0x596>
 80011a4:	220f      	movs	r2, #15
 80011a6:	2300      	movs	r3, #0
 80011a8:	400a      	ands	r2, r1
 80011aa:	2a04      	cmp	r2, #4
 80011ac:	d100      	bne.n	80011b0 <__aeabi_ddiv+0x400>
 80011ae:	e0c7      	b.n	8001340 <__aeabi_ddiv+0x590>
 80011b0:	1d0a      	adds	r2, r1, #4
 80011b2:	428a      	cmp	r2, r1
 80011b4:	4189      	sbcs	r1, r1
 80011b6:	4249      	negs	r1, r1
 80011b8:	185b      	adds	r3, r3, r1
 80011ba:	0011      	movs	r1, r2
 80011bc:	021a      	lsls	r2, r3, #8
 80011be:	d400      	bmi.n	80011c2 <__aeabi_ddiv+0x412>
 80011c0:	e0be      	b.n	8001340 <__aeabi_ddiv+0x590>
 80011c2:	2301      	movs	r3, #1
 80011c4:	2200      	movs	r2, #0
 80011c6:	2500      	movs	r5, #0
 80011c8:	e649      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	4643      	mov	r3, r8
 80011ce:	0312      	lsls	r2, r2, #12
 80011d0:	4213      	tst	r3, r2
 80011d2:	d008      	beq.n	80011e6 <__aeabi_ddiv+0x436>
 80011d4:	4214      	tst	r4, r2
 80011d6:	d106      	bne.n	80011e6 <__aeabi_ddiv+0x436>
 80011d8:	4322      	orrs	r2, r4
 80011da:	0312      	lsls	r2, r2, #12
 80011dc:	46ba      	mov	sl, r7
 80011de:	000d      	movs	r5, r1
 80011e0:	4b66      	ldr	r3, [pc, #408]	; (800137c <__aeabi_ddiv+0x5cc>)
 80011e2:	0b12      	lsrs	r2, r2, #12
 80011e4:	e63b      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	4643      	mov	r3, r8
 80011ea:	0312      	lsls	r2, r2, #12
 80011ec:	431a      	orrs	r2, r3
 80011ee:	0312      	lsls	r2, r2, #12
 80011f0:	46b2      	mov	sl, r6
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <__aeabi_ddiv+0x5cc>)
 80011f4:	0b12      	lsrs	r2, r2, #12
 80011f6:	e632      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x44e>
 80011fc:	e702      	b.n	8001004 <__aeabi_ddiv+0x254>
 80011fe:	19a6      	adds	r6, r4, r6
 8001200:	1e6a      	subs	r2, r5, #1
 8001202:	42a6      	cmp	r6, r4
 8001204:	d200      	bcs.n	8001208 <__aeabi_ddiv+0x458>
 8001206:	e089      	b.n	800131c <__aeabi_ddiv+0x56c>
 8001208:	4286      	cmp	r6, r0
 800120a:	d200      	bcs.n	800120e <__aeabi_ddiv+0x45e>
 800120c:	e09f      	b.n	800134e <__aeabi_ddiv+0x59e>
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0x462>
 8001210:	e0af      	b.n	8001372 <__aeabi_ddiv+0x5c2>
 8001212:	0015      	movs	r5, r2
 8001214:	e6f4      	b.n	8001000 <__aeabi_ddiv+0x250>
 8001216:	42a9      	cmp	r1, r5
 8001218:	d900      	bls.n	800121c <__aeabi_ddiv+0x46c>
 800121a:	e63c      	b.n	8000e96 <__aeabi_ddiv+0xe6>
 800121c:	4643      	mov	r3, r8
 800121e:	07de      	lsls	r6, r3, #31
 8001220:	0858      	lsrs	r0, r3, #1
 8001222:	086b      	lsrs	r3, r5, #1
 8001224:	431e      	orrs	r6, r3
 8001226:	07ed      	lsls	r5, r5, #31
 8001228:	e63c      	b.n	8000ea4 <__aeabi_ddiv+0xf4>
 800122a:	f000 f915 	bl	8001458 <__clzsi2>
 800122e:	0001      	movs	r1, r0
 8001230:	0002      	movs	r2, r0
 8001232:	3115      	adds	r1, #21
 8001234:	3220      	adds	r2, #32
 8001236:	291c      	cmp	r1, #28
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x48c>
 800123a:	e72c      	b.n	8001096 <__aeabi_ddiv+0x2e6>
 800123c:	464b      	mov	r3, r9
 800123e:	3808      	subs	r0, #8
 8001240:	4083      	lsls	r3, r0
 8001242:	2500      	movs	r5, #0
 8001244:	4698      	mov	r8, r3
 8001246:	e732      	b.n	80010ae <__aeabi_ddiv+0x2fe>
 8001248:	f000 f906 	bl	8001458 <__clzsi2>
 800124c:	0003      	movs	r3, r0
 800124e:	001a      	movs	r2, r3
 8001250:	3215      	adds	r2, #21
 8001252:	3020      	adds	r0, #32
 8001254:	2a1c      	cmp	r2, #28
 8001256:	dc00      	bgt.n	800125a <__aeabi_ddiv+0x4aa>
 8001258:	e6ff      	b.n	800105a <__aeabi_ddiv+0x2aa>
 800125a:	4654      	mov	r4, sl
 800125c:	3b08      	subs	r3, #8
 800125e:	2100      	movs	r1, #0
 8001260:	409c      	lsls	r4, r3
 8001262:	e705      	b.n	8001070 <__aeabi_ddiv+0x2c0>
 8001264:	1936      	adds	r6, r6, r4
 8001266:	3b01      	subs	r3, #1
 8001268:	42b4      	cmp	r4, r6
 800126a:	d900      	bls.n	800126e <__aeabi_ddiv+0x4be>
 800126c:	e6a6      	b.n	8000fbc <__aeabi_ddiv+0x20c>
 800126e:	42b2      	cmp	r2, r6
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x4c4>
 8001272:	e6a3      	b.n	8000fbc <__aeabi_ddiv+0x20c>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	1936      	adds	r6, r6, r4
 8001278:	e6a0      	b.n	8000fbc <__aeabi_ddiv+0x20c>
 800127a:	1909      	adds	r1, r1, r4
 800127c:	3d01      	subs	r5, #1
 800127e:	428c      	cmp	r4, r1
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x4d4>
 8001282:	e68d      	b.n	8000fa0 <__aeabi_ddiv+0x1f0>
 8001284:	428a      	cmp	r2, r1
 8001286:	d800      	bhi.n	800128a <__aeabi_ddiv+0x4da>
 8001288:	e68a      	b.n	8000fa0 <__aeabi_ddiv+0x1f0>
 800128a:	1e85      	subs	r5, r0, #2
 800128c:	1909      	adds	r1, r1, r4
 800128e:	e687      	b.n	8000fa0 <__aeabi_ddiv+0x1f0>
 8001290:	220f      	movs	r2, #15
 8001292:	402a      	ands	r2, r5
 8001294:	2a04      	cmp	r2, #4
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x4ea>
 8001298:	e6bc      	b.n	8001014 <__aeabi_ddiv+0x264>
 800129a:	1d29      	adds	r1, r5, #4
 800129c:	42a9      	cmp	r1, r5
 800129e:	41ad      	sbcs	r5, r5
 80012a0:	426d      	negs	r5, r5
 80012a2:	08c9      	lsrs	r1, r1, #3
 80012a4:	44a8      	add	r8, r5
 80012a6:	e6b6      	b.n	8001016 <__aeabi_ddiv+0x266>
 80012a8:	42af      	cmp	r7, r5
 80012aa:	d900      	bls.n	80012ae <__aeabi_ddiv+0x4fe>
 80012ac:	e662      	b.n	8000f74 <__aeabi_ddiv+0x1c4>
 80012ae:	4281      	cmp	r1, r0
 80012b0:	d804      	bhi.n	80012bc <__aeabi_ddiv+0x50c>
 80012b2:	d000      	beq.n	80012b6 <__aeabi_ddiv+0x506>
 80012b4:	e65e      	b.n	8000f74 <__aeabi_ddiv+0x1c4>
 80012b6:	42ae      	cmp	r6, r5
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x50c>
 80012ba:	e65b      	b.n	8000f74 <__aeabi_ddiv+0x1c4>
 80012bc:	2302      	movs	r3, #2
 80012be:	425b      	negs	r3, r3
 80012c0:	469c      	mov	ip, r3
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	44e0      	add	r8, ip
 80012c6:	469c      	mov	ip, r3
 80012c8:	4465      	add	r5, ip
 80012ca:	429d      	cmp	r5, r3
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	425b      	negs	r3, r3
 80012d0:	191b      	adds	r3, r3, r4
 80012d2:	18c0      	adds	r0, r0, r3
 80012d4:	e64f      	b.n	8000f76 <__aeabi_ddiv+0x1c6>
 80012d6:	42b2      	cmp	r2, r6
 80012d8:	d800      	bhi.n	80012dc <__aeabi_ddiv+0x52c>
 80012da:	e612      	b.n	8000f02 <__aeabi_ddiv+0x152>
 80012dc:	1e83      	subs	r3, r0, #2
 80012de:	1936      	adds	r6, r6, r4
 80012e0:	e60f      	b.n	8000f02 <__aeabi_ddiv+0x152>
 80012e2:	428a      	cmp	r2, r1
 80012e4:	d800      	bhi.n	80012e8 <__aeabi_ddiv+0x538>
 80012e6:	e5fa      	b.n	8000ede <__aeabi_ddiv+0x12e>
 80012e8:	1e83      	subs	r3, r0, #2
 80012ea:	4698      	mov	r8, r3
 80012ec:	1909      	adds	r1, r1, r4
 80012ee:	e5f6      	b.n	8000ede <__aeabi_ddiv+0x12e>
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <__aeabi_ddiv+0x5d4>)
 80012f2:	0028      	movs	r0, r5
 80012f4:	445b      	add	r3, fp
 80012f6:	4641      	mov	r1, r8
 80012f8:	409d      	lsls	r5, r3
 80012fa:	4099      	lsls	r1, r3
 80012fc:	40d0      	lsrs	r0, r2
 80012fe:	1e6b      	subs	r3, r5, #1
 8001300:	419d      	sbcs	r5, r3
 8001302:	4643      	mov	r3, r8
 8001304:	4301      	orrs	r1, r0
 8001306:	4329      	orrs	r1, r5
 8001308:	40d3      	lsrs	r3, r2
 800130a:	074a      	lsls	r2, r1, #29
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x560>
 800130e:	e755      	b.n	80011bc <__aeabi_ddiv+0x40c>
 8001310:	220f      	movs	r2, #15
 8001312:	400a      	ands	r2, r1
 8001314:	2a04      	cmp	r2, #4
 8001316:	d000      	beq.n	800131a <__aeabi_ddiv+0x56a>
 8001318:	e74a      	b.n	80011b0 <__aeabi_ddiv+0x400>
 800131a:	e74f      	b.n	80011bc <__aeabi_ddiv+0x40c>
 800131c:	0015      	movs	r5, r2
 800131e:	4286      	cmp	r6, r0
 8001320:	d000      	beq.n	8001324 <__aeabi_ddiv+0x574>
 8001322:	e66d      	b.n	8001000 <__aeabi_ddiv+0x250>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d000      	beq.n	800132c <__aeabi_ddiv+0x57c>
 800132a:	e669      	b.n	8001000 <__aeabi_ddiv+0x250>
 800132c:	e66a      	b.n	8001004 <__aeabi_ddiv+0x254>
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <__aeabi_ddiv+0x5d8>)
 8001330:	445b      	add	r3, fp
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc00      	bgt.n	8001338 <__aeabi_ddiv+0x588>
 8001336:	e713      	b.n	8001160 <__aeabi_ddiv+0x3b0>
 8001338:	2501      	movs	r5, #1
 800133a:	2100      	movs	r1, #0
 800133c:	44a8      	add	r8, r5
 800133e:	e66a      	b.n	8001016 <__aeabi_ddiv+0x266>
 8001340:	075d      	lsls	r5, r3, #29
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	0b1a      	lsrs	r2, r3, #12
 8001346:	08c9      	lsrs	r1, r1, #3
 8001348:	2300      	movs	r3, #0
 800134a:	430d      	orrs	r5, r1
 800134c:	e587      	b.n	8000e5e <__aeabi_ddiv+0xae>
 800134e:	9900      	ldr	r1, [sp, #0]
 8001350:	3d02      	subs	r5, #2
 8001352:	004a      	lsls	r2, r1, #1
 8001354:	428a      	cmp	r2, r1
 8001356:	41bf      	sbcs	r7, r7
 8001358:	427f      	negs	r7, r7
 800135a:	193f      	adds	r7, r7, r4
 800135c:	19f6      	adds	r6, r6, r7
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	e7dd      	b.n	800131e <__aeabi_ddiv+0x56e>
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	4643      	mov	r3, r8
 8001366:	0312      	lsls	r2, r2, #12
 8001368:	431a      	orrs	r2, r3
 800136a:	0312      	lsls	r2, r2, #12
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <__aeabi_ddiv+0x5cc>)
 800136e:	0b12      	lsrs	r2, r2, #12
 8001370:	e575      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8001372:	9900      	ldr	r1, [sp, #0]
 8001374:	4299      	cmp	r1, r3
 8001376:	d3ea      	bcc.n	800134e <__aeabi_ddiv+0x59e>
 8001378:	0015      	movs	r5, r2
 800137a:	e7d3      	b.n	8001324 <__aeabi_ddiv+0x574>
 800137c:	000007ff 	.word	0x000007ff
 8001380:	0000043e 	.word	0x0000043e
 8001384:	0000041e 	.word	0x0000041e
 8001388:	000003ff 	.word	0x000003ff

0800138c <__aeabi_d2iz>:
 800138c:	000a      	movs	r2, r1
 800138e:	b530      	push	{r4, r5, lr}
 8001390:	4c13      	ldr	r4, [pc, #76]	; (80013e0 <__aeabi_d2iz+0x54>)
 8001392:	0053      	lsls	r3, r2, #1
 8001394:	0309      	lsls	r1, r1, #12
 8001396:	0005      	movs	r5, r0
 8001398:	0b09      	lsrs	r1, r1, #12
 800139a:	2000      	movs	r0, #0
 800139c:	0d5b      	lsrs	r3, r3, #21
 800139e:	0fd2      	lsrs	r2, r2, #31
 80013a0:	42a3      	cmp	r3, r4
 80013a2:	dd04      	ble.n	80013ae <__aeabi_d2iz+0x22>
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <__aeabi_d2iz+0x58>)
 80013a6:	4283      	cmp	r3, r0
 80013a8:	dd02      	ble.n	80013b0 <__aeabi_d2iz+0x24>
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <__aeabi_d2iz+0x5c>)
 80013ac:	18d0      	adds	r0, r2, r3
 80013ae:	bd30      	pop	{r4, r5, pc}
 80013b0:	2080      	movs	r0, #128	; 0x80
 80013b2:	0340      	lsls	r0, r0, #13
 80013b4:	4301      	orrs	r1, r0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <__aeabi_d2iz+0x60>)
 80013b8:	1ac0      	subs	r0, r0, r3
 80013ba:	281f      	cmp	r0, #31
 80013bc:	dd08      	ble.n	80013d0 <__aeabi_d2iz+0x44>
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <__aeabi_d2iz+0x64>)
 80013c0:	1ac3      	subs	r3, r0, r3
 80013c2:	40d9      	lsrs	r1, r3
 80013c4:	000b      	movs	r3, r1
 80013c6:	4258      	negs	r0, r3
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d1f0      	bne.n	80013ae <__aeabi_d2iz+0x22>
 80013cc:	0018      	movs	r0, r3
 80013ce:	e7ee      	b.n	80013ae <__aeabi_d2iz+0x22>
 80013d0:	4c08      	ldr	r4, [pc, #32]	; (80013f4 <__aeabi_d2iz+0x68>)
 80013d2:	40c5      	lsrs	r5, r0
 80013d4:	46a4      	mov	ip, r4
 80013d6:	4463      	add	r3, ip
 80013d8:	4099      	lsls	r1, r3
 80013da:	000b      	movs	r3, r1
 80013dc:	432b      	orrs	r3, r5
 80013de:	e7f2      	b.n	80013c6 <__aeabi_d2iz+0x3a>
 80013e0:	000003fe 	.word	0x000003fe
 80013e4:	0000041d 	.word	0x0000041d
 80013e8:	7fffffff 	.word	0x7fffffff
 80013ec:	00000433 	.word	0x00000433
 80013f0:	00000413 	.word	0x00000413
 80013f4:	fffffbed 	.word	0xfffffbed

080013f8 <__aeabi_i2d>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d016      	beq.n	800142c <__aeabi_i2d+0x34>
 80013fe:	17c3      	asrs	r3, r0, #31
 8001400:	18c5      	adds	r5, r0, r3
 8001402:	405d      	eors	r5, r3
 8001404:	0fc4      	lsrs	r4, r0, #31
 8001406:	0028      	movs	r0, r5
 8001408:	f000 f826 	bl	8001458 <__clzsi2>
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <__aeabi_i2d+0x5c>)
 800140e:	1a1b      	subs	r3, r3, r0
 8001410:	280a      	cmp	r0, #10
 8001412:	dc16      	bgt.n	8001442 <__aeabi_i2d+0x4a>
 8001414:	0002      	movs	r2, r0
 8001416:	002e      	movs	r6, r5
 8001418:	3215      	adds	r2, #21
 800141a:	4096      	lsls	r6, r2
 800141c:	220b      	movs	r2, #11
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	40d5      	lsrs	r5, r2
 8001422:	055b      	lsls	r3, r3, #21
 8001424:	032d      	lsls	r5, r5, #12
 8001426:	0b2d      	lsrs	r5, r5, #12
 8001428:	0d5b      	lsrs	r3, r3, #21
 800142a:	e003      	b.n	8001434 <__aeabi_i2d+0x3c>
 800142c:	2400      	movs	r4, #0
 800142e:	2300      	movs	r3, #0
 8001430:	2500      	movs	r5, #0
 8001432:	2600      	movs	r6, #0
 8001434:	051b      	lsls	r3, r3, #20
 8001436:	432b      	orrs	r3, r5
 8001438:	07e4      	lsls	r4, r4, #31
 800143a:	4323      	orrs	r3, r4
 800143c:	0030      	movs	r0, r6
 800143e:	0019      	movs	r1, r3
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	380b      	subs	r0, #11
 8001444:	4085      	lsls	r5, r0
 8001446:	055b      	lsls	r3, r3, #21
 8001448:	032d      	lsls	r5, r5, #12
 800144a:	2600      	movs	r6, #0
 800144c:	0b2d      	lsrs	r5, r5, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	e7f0      	b.n	8001434 <__aeabi_i2d+0x3c>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	0000041e 	.word	0x0000041e

08001458 <__clzsi2>:
 8001458:	211c      	movs	r1, #28
 800145a:	2301      	movs	r3, #1
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	4298      	cmp	r0, r3
 8001460:	d301      	bcc.n	8001466 <__clzsi2+0xe>
 8001462:	0c00      	lsrs	r0, r0, #16
 8001464:	3910      	subs	r1, #16
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	4298      	cmp	r0, r3
 800146a:	d301      	bcc.n	8001470 <__clzsi2+0x18>
 800146c:	0a00      	lsrs	r0, r0, #8
 800146e:	3908      	subs	r1, #8
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	4298      	cmp	r0, r3
 8001474:	d301      	bcc.n	800147a <__clzsi2+0x22>
 8001476:	0900      	lsrs	r0, r0, #4
 8001478:	3904      	subs	r1, #4
 800147a:	a202      	add	r2, pc, #8	; (adr r2, 8001484 <__clzsi2+0x2c>)
 800147c:	5c10      	ldrb	r0, [r2, r0]
 800147e:	1840      	adds	r0, r0, r1
 8001480:	4770      	bx	lr
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	02020304 	.word	0x02020304
 8001488:	01010101 	.word	0x01010101
	...

08001494 <__clzdi2>:
 8001494:	b510      	push	{r4, lr}
 8001496:	2900      	cmp	r1, #0
 8001498:	d103      	bne.n	80014a2 <__clzdi2+0xe>
 800149a:	f7ff ffdd 	bl	8001458 <__clzsi2>
 800149e:	3020      	adds	r0, #32
 80014a0:	e002      	b.n	80014a8 <__clzdi2+0x14>
 80014a2:	0008      	movs	r0, r1
 80014a4:	f7ff ffd8 	bl	8001458 <__clzsi2>
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)

080014ac <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


   ldr   r0, =_estack
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80014ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b0:	f001 f841 	bl	8002536 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80014da:	f004 f9cb 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f000 f91b 	bl	8001718 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
   ldr   r0, =_estack
 80014e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80014f0:	08005b44 	.word	0x08005b44
  ldr r2, =_sbss
 80014f4:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80014f8:	20000484 	.word	0x20000484

080014fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_COMP_IRQHandler>
	...

08001500 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af02      	add	r7, sp, #8
 8001506:	0002      	movs	r2, r0
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800150c:	200f      	movs	r0, #15
 800150e:	183b      	adds	r3, r7, r0
 8001510:	1dfa      	adds	r2, r7, #7
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	210f      	movs	r1, #15
 8001516:	438a      	bics	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	011a      	lsls	r2, r3, #4
 8001520:	240e      	movs	r4, #14
 8001522:	193b      	adds	r3, r7, r4
 8001524:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001526:	183b      	adds	r3, r7, r0
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	220c      	movs	r2, #12
 800152c:	4313      	orrs	r3, r2
 800152e:	b2da      	uxtb	r2, r3
 8001530:	2108      	movs	r1, #8
 8001532:	187b      	adds	r3, r7, r1
 8001534:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001536:	183b      	adds	r3, r7, r0
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2208      	movs	r2, #8
 800153c:	4313      	orrs	r3, r2
 800153e:	b2da      	uxtb	r2, r3
 8001540:	187b      	adds	r3, r7, r1
 8001542:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001544:	193b      	adds	r3, r7, r4
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	220c      	movs	r2, #12
 800154a:	4313      	orrs	r3, r2
 800154c:	b2da      	uxtb	r2, r3
 800154e:	187b      	adds	r3, r7, r1
 8001550:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001552:	193b      	adds	r3, r7, r4
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2208      	movs	r2, #8
 8001558:	4313      	orrs	r3, r2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	187b      	adds	r3, r7, r1
 800155e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 300);
 8001560:	187a      	adds	r2, r7, r1
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <lcd_send_cmd+0x7c>)
 8001564:	2396      	movs	r3, #150	; 0x96
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2304      	movs	r3, #4
 800156c:	214e      	movs	r1, #78	; 0x4e
 800156e:	f001 fba7 	bl	8002cc0 <HAL_I2C_Master_Transmit>
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b005      	add	sp, #20
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	2000028c 	.word	0x2000028c

08001580 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af02      	add	r7, sp, #8
 8001586:	0002      	movs	r2, r0
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800158c:	200f      	movs	r0, #15
 800158e:	183b      	adds	r3, r7, r0
 8001590:	1dfa      	adds	r2, r7, #7
 8001592:	7812      	ldrb	r2, [r2, #0]
 8001594:	210f      	movs	r1, #15
 8001596:	438a      	bics	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	011a      	lsls	r2, r3, #4
 80015a0:	240e      	movs	r4, #14
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80015a6:	183b      	adds	r3, r7, r0
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	220d      	movs	r2, #13
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	2108      	movs	r1, #8
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015b6:	183b      	adds	r3, r7, r0
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2209      	movs	r2, #9
 80015bc:	4313      	orrs	r3, r2
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	220d      	movs	r2, #13
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2209      	movs	r2, #9
 80015d8:	4313      	orrs	r3, r2
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 300);
 80015e0:	187a      	adds	r2, r7, r1
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <lcd_send_data+0x7c>)
 80015e4:	2396      	movs	r3, #150	; 0x96
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2304      	movs	r3, #4
 80015ec:	214e      	movs	r1, #78	; 0x4e
 80015ee:	f001 fb67 	bl	8002cc0 <HAL_I2C_Master_Transmit>
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b005      	add	sp, #20
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	2000028c 	.word	0x2000028c

08001600 <lcd_clear>:

void lcd_clear (void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001606:	2080      	movs	r0, #128	; 0x80
 8001608:	f7ff ff7a 	bl	8001500 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e005      	b.n	800161e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001612:	2020      	movs	r0, #32
 8001614:	f7ff ffb4 	bl	8001580 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b45      	cmp	r3, #69	; 0x45
 8001622:	ddf6      	ble.n	8001612 <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0);
 8001624:	2100      	movs	r1, #0
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f804 	bl	8001634 <lcd_put_cur>
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
    switch (row)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <lcd_put_cur+0x18>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d005      	beq.n	8001656 <lcd_put_cur+0x22>
 800164a:	e009      	b.n	8001660 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	4313      	orrs	r3, r2
 8001652:	603b      	str	r3, [r7, #0]
            break;
 8001654:	e004      	b.n	8001660 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	22c0      	movs	r2, #192	; 0xc0
 800165a:	4313      	orrs	r3, r2
 800165c:	603b      	str	r3, [r7, #0]
            break;
 800165e:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ff4b 	bl	8001500 <lcd_send_cmd>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}

08001672 <lcd_init>:


void lcd_init (void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001676:	2032      	movs	r0, #50	; 0x32
 8001678:	f000 ffd2 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x30);
 800167c:	2030      	movs	r0, #48	; 0x30
 800167e:	f7ff ff3f 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(15);  // wait for >4.1ms
 8001682:	200f      	movs	r0, #15
 8001684:	f000 ffcc 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001688:	2030      	movs	r0, #48	; 0x30
 800168a:	f7ff ff39 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(15);  // wait for >100us
 800168e:	200f      	movs	r0, #15
 8001690:	f000 ffc6 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001694:	2030      	movs	r0, #48	; 0x30
 8001696:	f7ff ff33 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(15);
 800169a:	200f      	movs	r0, #15
 800169c:	f000 ffc0 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80016a0:	2020      	movs	r0, #32
 80016a2:	f7ff ff2d 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(15);
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 ffba 	bl	8002620 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80016ac:	2028      	movs	r0, #40	; 0x28
 80016ae:	f7ff ff27 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 ffb4 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80016b8:	2008      	movs	r0, #8
 80016ba:	f7ff ff21 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 ffae 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff ff1b 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f000 ffa8 	bl	8002620 <HAL_Delay>
	HAL_Delay(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 ffa5 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80016d6:	2006      	movs	r0, #6
 80016d8:	f7ff ff12 	bl	8001500 <lcd_send_cmd>
	HAL_Delay(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f000 ff9f 	bl	8002620 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80016e2:	200c      	movs	r0, #12
 80016e4:	f7ff ff0c 	bl	8001500 <lcd_send_cmd>
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <lcd_send_string>:

void lcd_send_string (const char *str)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80016f6:	e006      	b.n	8001706 <lcd_send_string+0x18>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ff3d 	bl	8001580 <lcd_send_data>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f4      	bne.n	80016f8 <lcd_send_string+0xa>
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f000 ff0f 	bl	8002540 <HAL_Init>

	//HAL_TIM_Base_Start(&htim3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f843 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 fa19 	bl	8001b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800172a:	f000 f92b 	bl	8001984 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800172e:	f000 f9bd 	bl	8001aac <MX_TIM3_Init>
  MX_RTC_Init();
 8001732:	f000 f957 	bl	80019e4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8001736:	f000 f8f7 	bl	8001928 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800173a:	f000 f8b5 	bl	80018a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	0059      	lsls	r1, r3, #1
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	2201      	movs	r2, #1
 8001748:	0018      	movs	r0, r3
 800174a:	f001 f9e9 	bl	8002b20 <HAL_GPIO_WritePin>
	lcd_init();
 800174e:	f7ff ff90 	bl	8001672 <lcd_init>
	lcd_put_cur(row,col);
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <main+0x8c>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <main+0x90>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0019      	movs	r1, r3
 800175c:	0010      	movs	r0, r2
 800175e:	f7ff ff69 	bl	8001634 <lcd_put_cur>
	lcd_clear ();
 8001762:	f7ff ff4d 	bl	8001600 <lcd_clear>
	menuInit(); // display first screen
 8001766:	f000 fa93 	bl	8001c90 <menuInit>
	for (int seq = 0; seq < 2000; seq ++)
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e012      	b.n	8001796 <main+0x7e>
	{
		for (int step = 2; step >= 0; step --)
 8001770:	2302      	movs	r3, #2
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	e009      	b.n	800178a <main+0x72>
		{
			stepping(step);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fc7d 	bl	8002078 <stepping>
			HAL_Delay(2);
 800177e:	2002      	movs	r0, #2
 8001780:	f000 ff4e 	bl	8002620 <HAL_Delay>
		for (int step = 2; step >= 0; step --)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	daf2      	bge.n	8001776 <main+0x5e>
	for (int seq = 0; seq < 2000; seq ++)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	23fa      	movs	r3, #250	; 0xfa
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	429a      	cmp	r2, r3
 800179e:	dbe7      	blt.n	8001770 <main+0x58>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80017a0:	e7fe      	b.n	80017a0 <main+0x88>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	20000454 	.word	0x20000454
 80017a8:	20000458 	.word	0x20000458

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b09f      	sub	sp, #124	; 0x7c
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	2440      	movs	r4, #64	; 0x40
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	0018      	movs	r0, r3
 80017b8:	2338      	movs	r3, #56	; 0x38
 80017ba:	001a      	movs	r2, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	f004 f851 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c2:	232c      	movs	r3, #44	; 0x2c
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	0018      	movs	r0, r3
 80017c8:	2314      	movs	r3, #20
 80017ca:	001a      	movs	r2, r3
 80017cc:	2100      	movs	r1, #0
 80017ce:	f004 f849 	bl	8005864 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	0018      	movs	r0, r3
 80017d6:	2328      	movs	r3, #40	; 0x28
 80017d8:	001a      	movs	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f004 f842 	bl	8005864 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <SystemClock_Config+0xf4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <SystemClock_Config+0xf8>)
 80017e6:	401a      	ands	r2, r3
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <SystemClock_Config+0xf4>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0109      	lsls	r1, r1, #4
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	2209      	movs	r2, #9
 80017f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	22a0      	movs	r2, #160	; 0xa0
 80017fc:	02d2      	lsls	r2, r2, #11
 80017fe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001800:	0021      	movs	r1, r4
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2201      	movs	r2, #1
 8001806:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2202      	movs	r2, #2
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	0252      	lsls	r2, r2, #9
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	22c0      	movs	r2, #192	; 0xc0
 800181a:	0312      	lsls	r2, r2, #12
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	03d2      	lsls	r2, r2, #15
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001826:	187b      	adds	r3, r7, r1
 8001828:	0018      	movs	r0, r3
 800182a:	f001 fe1d 	bl	8003468 <HAL_RCC_OscConfig>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001832:	f000 fa27 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	187b      	adds	r3, r7, r1
 800183a:	220f      	movs	r2, #15
 800183c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2203      	movs	r2, #3
 8001842:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2101      	movs	r1, #1
 800185a:	0018      	movs	r0, r3
 800185c:	f002 f9d8 	bl	8003c10 <HAL_RCC_ClockConfig>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001864:	f000 fa0e 	bl	8001c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	222e      	movs	r2, #46	; 0x2e
 800186c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	0292      	lsls	r2, r2, #10
 8001886:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	0018      	movs	r0, r3
 800188c:	f002 fbe4 	bl	8004058 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001894:	f000 f9f6 	bl	8001c84 <Error_Handler>
  }
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b01f      	add	sp, #124	; 0x7c
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	40007000 	.word	0x40007000
 80018a4:	ffffe7ff 	.word	0xffffe7ff

080018a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_I2C1_Init+0x74>)
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <MX_I2C1_Init+0x78>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_I2C1_Init+0x74>)
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <MX_I2C1_Init+0x7c>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_I2C1_Init+0x74>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_I2C1_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_I2C1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_I2C1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_I2C1_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_I2C1_Init+0x74>)
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 f955 	bl	8002b94 <HAL_I2C_Init>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018ee:	f000 f9c9 	bl	8001c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_I2C1_Init+0x74>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 fd1e 	bl	8003338 <HAL_I2CEx_ConfigAnalogFilter>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001900:	f000 f9c0 	bl	8001c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <MX_I2C1_Init+0x74>)
 8001906:	2100      	movs	r1, #0
 8001908:	0018      	movs	r0, r3
 800190a:	f001 fd61 	bl	80033d0 <HAL_I2CEx_ConfigDigitalFilter>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d001      	beq.n	8001916 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001912:	f000 f9b7 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000028c 	.word	0x2000028c
 8001920:	40005400 	.word	0x40005400
 8001924:	00707cbb 	.word	0x00707cbb

08001928 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <MX_LPUART1_UART_Init+0x58>)
 8001930:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 8001934:	2296      	movs	r2, #150	; 0x96
 8001936:	0192      	lsls	r2, r2, #6
 8001938:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	0552      	lsls	r2, r2, #21
 8001940:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 8001950:	220c      	movs	r2, #12
 8001952:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <MX_LPUART1_UART_Init+0x54>)
 8001968:	0018      	movs	r0, r3
 800196a:	f003 fa0f 	bl	8004d8c <HAL_UART_Init>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 8001972:	f000 f987 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200002e0 	.word	0x200002e0
 8001980:	40004800 	.word	0x40004800

08001984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_USART2_UART_Init+0x58>)
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <MX_USART2_UART_Init+0x5c>)
 800198c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_USART2_UART_Init+0x58>)
 8001990:	2296      	movs	r2, #150	; 0x96
 8001992:	0192      	lsls	r2, r2, #6
 8001994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_USART2_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <MX_USART2_UART_Init+0x58>)
 80019c8:	0018      	movs	r0, r3
 80019ca:	f003 f9df 	bl	8004d8c <HAL_UART_Init>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019d2:	f000 f957 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000368 	.word	0x20000368
 80019e0:	40004400 	.word	0x40004400

080019e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	0018      	movs	r0, r3
 80019ee:	2314      	movs	r3, #20
 80019f0:	001a      	movs	r2, r3
 80019f2:	2100      	movs	r1, #0
 80019f4:	f003 ff36 	bl	8005864 <memset>
  RTC_DateTypeDef sDate = {0};
 80019f8:	003b      	movs	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a00:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <MX_RTC_Init+0xc4>)
 8001a02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a0c:	227f      	movs	r2, #127	; 0x7f
 8001a0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a12:	22ff      	movs	r2, #255	; 0xff
 8001a14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a30:	0018      	movs	r0, r3
 8001a32:	f002 fcaf 	bl	8004394 <HAL_RTC_Init>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a3a:	f000 f923 	bl	8001c84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2210      	movs	r2, #16
 8001a42:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x27;
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2227      	movs	r2, #39	; 0x27
 8001a48:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a5c:	1d39      	adds	r1, r7, #4
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	0018      	movs	r0, r3
 8001a64:	f002 fd32 	bl	80044cc <HAL_RTC_SetTime>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001a6c:	f000 f90a 	bl	8001c84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001a70:	003b      	movs	r3, r7
 8001a72:	2202      	movs	r2, #2
 8001a74:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001a76:	003b      	movs	r3, r7
 8001a78:	2206      	movs	r2, #6
 8001a7a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x13;
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	2213      	movs	r2, #19
 8001a80:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001a82:	003b      	movs	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a88:	0039      	movs	r1, r7
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_RTC_Init+0xc0>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 fdc6 	bl	8004620 <HAL_RTC_SetDate>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001a98:	f000 f8f4 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b006      	add	sp, #24
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200003f0 	.word	0x200003f0
 8001aa8:	40002800 	.word	0x40002800

08001aac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	2310      	movs	r3, #16
 8001aba:	001a      	movs	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	f003 fed1 	bl	8005864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	001a      	movs	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	f003 feca 	bl	8005864 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <MX_TIM3_Init+0xa4>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 - 1;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <MX_TIM3_Init+0xa8>)
 8001ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_TIM3_Init+0xac>)
 8001ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001af6:	0018      	movs	r0, r3
 8001af8:	f002 fedd 	bl	80048b6 <HAL_TIM_Base_Init>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b00:	f000 f8c0 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b04:	2108      	movs	r1, #8
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0152      	lsls	r2, r2, #5
 8001b0c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b0e:	187a      	adds	r2, r7, r1
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001b12:	0011      	movs	r1, r2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f002 ff0f 	bl	8004938 <HAL_TIM_ConfigClockSource>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b1e:	f000 f8b1 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	003b      	movs	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	003b      	movs	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b2e:	003a      	movs	r2, r7
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_TIM3_Init+0xa0>)
 8001b32:	0011      	movs	r1, r2
 8001b34:	0018      	movs	r0, r3
 8001b36:	f003 f8cb 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b3e:	f000 f8a1 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b006      	add	sp, #24
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	20000414 	.word	0x20000414
 8001b50:	40000400 	.word	0x40000400
 8001b54:	00007cff 	.word	0x00007cff
 8001b58:	0000ffff 	.word	0x0000ffff

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b08b      	sub	sp, #44	; 0x2c
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	2414      	movs	r4, #20
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	0018      	movs	r0, r3
 8001b68:	2314      	movs	r3, #20
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	f003 fe79 	bl	8005864 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001b78:	2104      	movs	r1, #4
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	430a      	orrs	r2, r1
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <MX_GPIO_Init+0x11c>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8001bd2:	2334      	movs	r3, #52	; 0x34
 8001bd4:	33ff      	adds	r3, #255	; 0xff
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	23a0      	movs	r3, #160	; 0xa0
 8001bda:	05db      	lsls	r3, r3, #23
 8001bdc:	2200      	movs	r2, #0
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 ff9e 	bl	8002b20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <MX_GPIO_Init+0x120>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	2101      	movs	r1, #1
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 ff98 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	2234      	movs	r2, #52	; 0x34
 8001bf4:	32ff      	adds	r2, #255	; 0xff
 8001bf6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	193a      	adds	r2, r7, r4
 8001c0c:	23a0      	movs	r3, #160	; 0xa0
 8001c0e:	05db      	lsls	r3, r3, #23
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fe06 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	2201      	movs	r2, #1
 8001c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_GPIO_Init+0x120>)
 8001c34:	0019      	movs	r1, r3
 8001c36:	0010      	movs	r0, r2
 8001c38:	f000 fdf4 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRZYCISK_1_Pin PRZYCISK_4_Pin PRZYCISK_3_Pin PRZYCISK_2_Pin */
  GPIO_InitStruct.Pin = PRZYCISK_1_Pin|PRZYCISK_4_Pin|PRZYCISK_3_Pin|PRZYCISK_2_Pin;
 8001c3c:	0021      	movs	r1, r4
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <MX_GPIO_Init+0x124>)
 8001c42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2288      	movs	r2, #136	; 0x88
 8001c48:	0352      	lsls	r2, r2, #13
 8001c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <MX_GPIO_Init+0x120>)
 8001c56:	0019      	movs	r1, r3
 8001c58:	0010      	movs	r0, r2
 8001c5a:	f000 fde3 	bl	8002824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2007      	movs	r0, #7
 8001c64:	f000 fdac 	bl	80027c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001c68:	2007      	movs	r0, #7
 8001c6a:	f000 fdbe 	bl	80027ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b00b      	add	sp, #44	; 0x2c
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	50000400 	.word	0x50000400
 8001c80:	0000e002 	.word	0x0000e002

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c8c:	e7fe      	b.n	8001c8c <Error_Handler+0x8>
	...

08001c90 <menuInit>:
uint8_t actionFlag = 0;
char number[1];


void menuInit(void) //display first menu
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	lcd_clear();
 8001c94:	f7ff fcb4 	bl	8001600 <lcd_clear>
	lcd_put_cur(0,0);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7ff fcca 	bl	8001634 <lcd_put_cur>
	lcd_send_data('>'); //shows which line will be chosen if key SELECT pressed
 8001ca0:	203e      	movs	r0, #62	; 0x3e
 8001ca2:	f7ff fc6d 	bl	8001580 <lcd_send_data>
	lcd_put_cur(0,1);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fcc3 	bl	8001634 <lcd_put_cur>
	lcd_send_string(select.text);
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <menuInit+0x40>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7ff fd1b 	bl	80016ee <lcd_send_string>
	lcd_put_cur(1,1);
 8001cb8:	2101      	movs	r1, #1
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fcba 	bl	8001634 <lcd_put_cur>
	lcd_send_string(newM.text);
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <menuInit+0x44>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fd12 	bl	80016ee <lcd_send_string>
}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000020 	.word	0x20000020

08001cd8 <displayCur>:

void displayCur(void) //displays the current 2-lines menu
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
		lcd_clear();
 8001cdc:	f7ff fc90 	bl	8001600 <lcd_clear>
		lcd_put_cur(0,0);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fca6 	bl	8001634 <lcd_put_cur>
		lcd_send_data('>');
 8001ce8:	203e      	movs	r0, #62	; 0x3e
 8001cea:	f7ff fc49 	bl	8001580 <lcd_send_data>
		lcd_put_cur(curIndex % 2,1);
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <displayCur+0xc8>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff fc9a 	bl	8001634 <lcd_put_cur>
		lcd_send_string(currentMenu->text);
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <displayCur+0xcc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff fcf1 	bl	80016ee <lcd_send_string>
		lcd_put_cur((curIndex+1) % 2,1);
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <displayCur+0xc8>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <displayCur+0xd0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	d504      	bpl.n	8001d22 <displayCur+0x4a>
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4252      	negs	r2, r2
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	3301      	adds	r3, #1
 8001d22:	2101      	movs	r1, #1
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff fc85 	bl	8001634 <lcd_put_cur>
		if(currentMenu->next!=NULL){
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <displayCur+0xcc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <displayCur+0x6c>
			lcd_send_string(currentMenu->next->text);
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <displayCur+0xcc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff fcd6 	bl	80016ee <lcd_send_string>
			itoa(run.velocity,number,10);
			lcd_send_string(number);
			lcd_put_cur(1,0);
			lcd_send_string("Press button");
		}
}
 8001d42:	e029      	b.n	8001d98 <displayCur+0xc0>
			lcd_put_cur(0,3);
 8001d44:	2103      	movs	r1, #3
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff fc74 	bl	8001634 <lcd_put_cur>
			itoa(run.dose,number,10);
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <displayCur+0xd4>)
 8001d4e:	7d1b      	ldrb	r3, [r3, #20]
 8001d50:	0018      	movs	r0, r3
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <displayCur+0xd8>)
 8001d54:	220a      	movs	r2, #10
 8001d56:	0019      	movs	r1, r3
 8001d58:	f003 fd4c 	bl	80057f4 <itoa>
			lcd_send_string(number);
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <displayCur+0xd8>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff fcc5 	bl	80016ee <lcd_send_string>
			lcd_put_cur(0,10);
 8001d64:	210a      	movs	r1, #10
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fc64 	bl	8001634 <lcd_put_cur>
			itoa(run.velocity,number,10);
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <displayCur+0xd4>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	1c18      	adds	r0, r3, #0
 8001d72:	f7fe ffab 	bl	8000ccc <__aeabi_f2iz>
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <displayCur+0xd8>)
 8001d78:	220a      	movs	r2, #10
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	f003 fd3a 	bl	80057f4 <itoa>
			lcd_send_string(number);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <displayCur+0xd8>)
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff fcb3 	bl	80016ee <lcd_send_string>
			lcd_put_cur(1,0);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff fc52 	bl	8001634 <lcd_put_cur>
			lcd_send_string("Press button");
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <displayCur+0xdc>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff fcab 	bl	80016ee <lcd_send_string>
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000478 	.word	0x20000478
 8001da4:	20000260 	.word	0x20000260
 8001da8:	80000001 	.word	0x80000001
 8001dac:	20000040 	.word	0x20000040
 8001db0:	2000047c 	.word	0x2000047c
 8001db4:	080059c0 	.word	0x080059c0

08001db8 <stepInto>:
void stepInto(void) //enter into sub-menu
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	if(currentMenu->child!=NULL)
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <stepInto+0x28>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <stepInto+0x22>
	{
		curIndex = 0;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <stepInto+0x2c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
		currentMenu = currentMenu->child;
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <stepInto+0x28>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <stepInto+0x28>)
 8001dd4:	601a      	str	r2, [r3, #0]
		displayCur();
 8001dd6:	f7ff ff7f 	bl	8001cd8 <displayCur>
	}
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000260 	.word	0x20000260
 8001de4:	20000478 	.word	0x20000478

08001de8 <setParameters>:
	}
	actionFlag=0;
}

void setParameters(void) //take the velocity and dose values from chosen menu
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	if(currentMenu->velocity!=0)
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <setParameters+0x50>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2100      	movs	r1, #0
 8001df4:	1c18      	adds	r0, r3, #0
 8001df6:	f7fe fb09 	bl	800040c <__aeabi_fcmpeq>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d104      	bne.n	8001e08 <setParameters+0x20>
	{
		run.velocity = currentMenu->velocity;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <setParameters+0x50>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <setParameters+0x54>)
 8001e06:	619a      	str	r2, [r3, #24]
	}
	if(currentMenu->dose!=0)
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <setParameters+0x50>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	7d1b      	ldrb	r3, [r3, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <setParameters+0x34>
	{
		run.dose = currentMenu->dose;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <setParameters+0x50>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	7d1a      	ldrb	r2, [r3, #20]
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <setParameters+0x54>)
 8001e1a:	751a      	strb	r2, [r3, #20]
	}
	currentMenu = currentMenu->child;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <setParameters+0x50>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <setParameters+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
	curIndex = 0;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <setParameters+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
	displayCur();
 8001e2c:	f7ff ff54 	bl	8001cd8 <displayCur>
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	20000260 	.word	0x20000260
 8001e3c:	20000040 	.word	0x20000040
 8001e40:	20000478 	.word	0x20000478

08001e44 <start>:

void start(void)
{
 8001e44:	b5b0      	push	{r4, r5, r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	//move the motor by the right angle with right speed
	lcd_clear();
 8001e48:	f7ff fbda 	bl	8001600 <lcd_clear>
	lcd_put_cur(0,0);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fbf0 	bl	8001634 <lcd_put_cur>
	step_distance(currentMenu->dose, 0, currentMenu->velocity);
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <start+0x60>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	7d1b      	ldrb	r3, [r3, #20]
 8001e5a:	001c      	movs	r4, r3
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <start+0x60>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	1c18      	adds	r0, r3, #0
 8001e64:	f7fe ff32 	bl	8000ccc <__aeabi_f2iz>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	0020      	movs	r0, r4
 8001e70:	f000 f990 	bl	8002194 <step_distance>

    //come back to the previous position
    step_distance(currentMenu->dose, 1, currentMenu->velocity); //zmien predkosc na stala
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <start+0x60>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	7d1b      	ldrb	r3, [r3, #20]
 8001e7a:	001c      	movs	r4, r3
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <start+0x60>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	1c18      	adds	r0, r3, #0
 8001e84:	f7fe ff22 	bl	8000ccc <__aeabi_f2iz>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f000 f980 	bl	8002194 <step_distance>
	currentMenu = &end;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <start+0x60>)
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <start+0x64>)
 8001e98:	601a      	str	r2, [r3, #0]
	lastDisplay();
 8001e9a:	f000 f81b 	bl	8001ed4 <lastDisplay>
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	20000260 	.word	0x20000260
 8001ea8:	20000240 	.word	0x20000240

08001eac <restart>:
void restart(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	currentMenu = &select;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <restart+0x1c>)
 8001eb2:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <restart+0x20>)
 8001eb4:	601a      	str	r2, [r3, #0]
	curIndex = 0;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <restart+0x24>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
	displayCur();
 8001ebc:	f7ff ff0c 	bl	8001cd8 <displayCur>
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	20000260 	.word	0x20000260
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000478 	.word	0x20000478

08001ed4 <lastDisplay>:
void lastDisplay(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	lcd_clear();
 8001ed8:	f7ff fb92 	bl	8001600 <lcd_clear>
	lcd_put_cur(0,6);
 8001edc:	2106      	movs	r1, #6
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fba8 	bl	8001634 <lcd_put_cur>
	lcd_send_string(currentMenu->text);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <lastDisplay+0x24>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff fbff 	bl	80016ee <lcd_send_string>
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	20000260 	.word	0x20000260

08001efc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //interrupts from keyboard
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	0002      	movs	r2, r0
 8001f04:	1dbb      	adds	r3, r7, #6
 8001f06:	801a      	strh	r2, [r3, #0]
  currentMillis = HAL_GetTick();
 8001f08:	f000 fb80 	bl	800260c <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f10:	601a      	str	r2, [r3, #0]
  if (currentMillis - previousMillis > 10)
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b0a      	cmp	r3, #10
 8001f1e:	d948      	bls.n	8001fb2 <HAL_GPIO_EXTI_Callback+0xb6>
  {
	    /*Configure GPIO pins : PRZYCISK_1_Pin PRZYCISK_4_Pin PRZYCISK_3_Pin PRZYCISK_2_Pin */
	  GPIO_InitStructPrivate.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f22:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f24:	601a      	str	r2, [r3, #0]
	  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f28:	2288      	movs	r2, #136	; 0x88
 8001f2a:	0352      	lsls	r2, r2, #13
 8001f2c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_GPIO_EXTI_Callback+0xd0>)
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f000 fc72 	bl	8002824 <HAL_GPIO_Init>

	actionFlag=1;
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]

    if(GPIO_Pin == GPIO_PIN_1)
 8001f46:	1dbb      	adds	r3, r7, #6
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d103      	bne.n	8001f56 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	flag = 1;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e01c      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_15)
 8001f56:	1dbb      	adds	r3, r7, #6
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d103      	bne.n	8001f6a <HAL_GPIO_EXTI_Callback+0x6e>
    {
    	flag = 2;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001f64:	2202      	movs	r2, #2
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e012      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_14)
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	881a      	ldrh	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	01db      	lsls	r3, r3, #7
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d103      	bne.n	8001f7e <HAL_GPIO_EXTI_Callback+0x82>
    {
    	flag = 3;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001f78:	2203      	movs	r2, #3
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_13)
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	019b      	lsls	r3, r3, #6
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d102      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x94>
    {
    	flag = 4;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	701a      	strb	r2, [r3, #0]
    }

    /*Configure GPIO pins : PB3 PB5 PB4 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f92:	2288      	movs	r2, #136	; 0x88
 8001f94:	0352      	lsls	r2, r2, #13
 8001f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_GPIO_EXTI_Callback+0xd0>)
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	f000 fc3d 	bl	8002824 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000474 	.word	0x20000474
 8001fc0:	20000470 	.word	0x20000470
 8001fc4:	2000045c 	.word	0x2000045c
 8001fc8:	0000e002 	.word	0x0000e002
 8001fcc:	50000400 	.word	0x50000400
 8001fd0:	2000047a 	.word	0x2000047a
 8001fd4:	20000479 	.word	0x20000479

08001fd8 <calc_distance>:
 *  Created on: Nov 11, 2023
 *      Author: 31415
 */
#include "stepper.h"

int calc_distance (int doseinml) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	int distance = doseinml * 1000 / area; //way to go in mm
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	189b      	adds	r3, r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	2150      	movs	r1, #80	; 0x50
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7fe f913 	bl	800021c <__divsi3>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	60fb      	str	r3, [r7, #12]
	return distance;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}

08002004 <calc_speed>:

int calc_speed (int milforsec) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	int mmforsec = milforsec / 1000;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	22fa      	movs	r2, #250	; 0xfa
 8002010:	0091      	lsls	r1, r2, #2
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe f902 	bl	800021c <__divsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	60fb      	str	r3, [r7, #12]
	return mmforsec;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <set_speed>:

void set_speed (int milforsec) { //speed in mm/s
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	int speed = calc_speed (milforsec);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff ffe6 	bl	8002004 <calc_speed>
 8002038:	0003      	movs	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]
	int delay = 1000/linear_step/speed; //delay in millis
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff f9db 	bl	80013f8 <__aeabi_i2d>
 8002042:	0002      	movs	r2, r0
 8002044:	000b      	movs	r3, r1
 8002046:	480a      	ldr	r0, [pc, #40]	; (8002070 <set_speed+0x48>)
 8002048:	490a      	ldr	r1, [pc, #40]	; (8002074 <set_speed+0x4c>)
 800204a:	f7fe feb1 	bl	8000db0 <__aeabi_ddiv>
 800204e:	0002      	movs	r2, r0
 8002050:	000b      	movs	r3, r1
 8002052:	0010      	movs	r0, r2
 8002054:	0019      	movs	r1, r3
 8002056:	f7ff f999 	bl	800138c <__aeabi_d2iz>
 800205a:	0003      	movs	r3, r0
 800205c:	60bb      	str	r3, [r7, #8]
	HAL_Delay(delay);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fadd 	bl	8002620 <HAL_Delay>
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	850a1429 	.word	0x850a1429
 8002074:	40e33942 	.word	0x40e33942

08002078 <stepping>:

void stepping (int step)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
// IN4 - pin pA0
// IN3 - pin pA1
// IN2 - pin pA4
// IN1 - pin PB0
		switch (step)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d064      	beq.n	8002150 <stepping+0xd8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b03      	cmp	r3, #3
 800208a:	dd00      	ble.n	800208e <stepping+0x16>
 800208c:	e07c      	b.n	8002188 <stepping+0x110>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d041      	beq.n	8002118 <stepping+0xa0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	dc76      	bgt.n	8002188 <stepping+0x110>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <stepping+0x30>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d01c      	beq.n	80020e0 <stepping+0x68>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
					break;
				}
}
 80020a6:	e06f      	b.n	8002188 <stepping+0x110>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80020a8:	23a0      	movs	r3, #160	; 0xa0
 80020aa:	05db      	lsls	r3, r3, #23
 80020ac:	2201      	movs	r2, #1
 80020ae:	2101      	movs	r1, #1
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 fd35 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	05db      	lsls	r3, r3, #23
 80020ba:	2201      	movs	r2, #1
 80020bc:	2102      	movs	r1, #2
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fd2e 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020c4:	23a0      	movs	r3, #160	; 0xa0
 80020c6:	05db      	lsls	r3, r3, #23
 80020c8:	2200      	movs	r2, #0
 80020ca:	2110      	movs	r1, #16
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 fd27 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <stepping+0x118>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	2101      	movs	r1, #1
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 fd21 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 80020de:	e053      	b.n	8002188 <stepping+0x110>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80020e0:	23a0      	movs	r3, #160	; 0xa0
 80020e2:	05db      	lsls	r3, r3, #23
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 fd19 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80020ee:	23a0      	movs	r3, #160	; 0xa0
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	2201      	movs	r2, #1
 80020f4:	2102      	movs	r1, #2
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 fd12 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80020fc:	23a0      	movs	r3, #160	; 0xa0
 80020fe:	05db      	lsls	r3, r3, #23
 8002100:	2201      	movs	r2, #1
 8002102:	2110      	movs	r1, #16
 8002104:	0018      	movs	r0, r3
 8002106:	f000 fd0b 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <stepping+0x118>)
 800210c:	2200      	movs	r2, #0
 800210e:	2101      	movs	r1, #1
 8002110:	0018      	movs	r0, r3
 8002112:	f000 fd05 	bl	8002b20 <HAL_GPIO_WritePin>
					break;
 8002116:	e037      	b.n	8002188 <stepping+0x110>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002118:	23a0      	movs	r3, #160	; 0xa0
 800211a:	05db      	lsls	r3, r3, #23
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	0018      	movs	r0, r3
 8002122:	f000 fcfd 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002126:	23a0      	movs	r3, #160	; 0xa0
 8002128:	05db      	lsls	r3, r3, #23
 800212a:	2200      	movs	r2, #0
 800212c:	2102      	movs	r1, #2
 800212e:	0018      	movs	r0, r3
 8002130:	f000 fcf6 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002134:	23a0      	movs	r3, #160	; 0xa0
 8002136:	05db      	lsls	r3, r3, #23
 8002138:	2201      	movs	r2, #1
 800213a:	2110      	movs	r1, #16
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fcef 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <stepping+0x118>)
 8002144:	2201      	movs	r2, #1
 8002146:	2101      	movs	r1, #1
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fce9 	bl	8002b20 <HAL_GPIO_WritePin>
					break;
 800214e:	e01b      	b.n	8002188 <stepping+0x110>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002150:	23a0      	movs	r3, #160	; 0xa0
 8002152:	05db      	lsls	r3, r3, #23
 8002154:	2201      	movs	r2, #1
 8002156:	2101      	movs	r1, #1
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fce1 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800215e:	23a0      	movs	r3, #160	; 0xa0
 8002160:	05db      	lsls	r3, r3, #23
 8002162:	2200      	movs	r2, #0
 8002164:	2102      	movs	r1, #2
 8002166:	0018      	movs	r0, r3
 8002168:	f000 fcda 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800216c:	23a0      	movs	r3, #160	; 0xa0
 800216e:	05db      	lsls	r3, r3, #23
 8002170:	2200      	movs	r2, #0
 8002172:	2110      	movs	r1, #16
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fcd3 	bl	8002b20 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <stepping+0x118>)
 800217c:	2201      	movs	r2, #1
 800217e:	2101      	movs	r1, #1
 8002180:	0018      	movs	r0, r3
 8002182:	f000 fccd 	bl	8002b20 <HAL_GPIO_WritePin>
					break;
 8002186:	46c0      	nop			; (mov r8, r8)
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	50000400 	.word	0x50000400

08002194 <step_distance>:

void step_distance(int doseinml, int direction, int milforsec) {
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b08d      	sub	sp, #52	; 0x34
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	int numberofsteps = calc_distance(doseinml) / linear_step;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7ff ff18 	bl	8001fd8 <calc_distance>
 80021a8:	0003      	movs	r3, r0
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7ff f924 	bl	80013f8 <__aeabi_i2d>
 80021b0:	4a46      	ldr	r2, [pc, #280]	; (80022cc <step_distance+0x138>)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <step_distance+0x13c>)
 80021b4:	f7fe fdfc 	bl	8000db0 <__aeabi_ddiv>
 80021b8:	0002      	movs	r2, r0
 80021ba:	000b      	movs	r3, r1
 80021bc:	0010      	movs	r0, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	f7ff f8e4 	bl	800138c <__aeabi_d2iz>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61fb      	str	r3, [r7, #28]
	int numberofsequences = numberofsteps / 3;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2103      	movs	r1, #3
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7fe f825 	bl	800021c <__divsi3>
 80021d2:	0003      	movs	r3, r0
 80021d4:	61bb      	str	r3, [r7, #24]

	if (direction == 0)  // for clockwise
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d14c      	bne.n	8002276 <step_distance+0xe2>
	{
		for (int seq = 0; seq < numberofsequences; seq ++)
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e0:	e044      	b.n	800226c <step_distance+0xd8>
		{
			for (int step = 2; step >= 0; step --)
 80021e2:	2302      	movs	r3, #2
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e6:	e00a      	b.n	80021fe <step_distance+0x6a>
			{
				stepping(step);
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff ff44 	bl	8002078 <stepping>
				set_speed(milforsec);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff18 	bl	8002028 <set_speed>
			for (int step = 2; step >= 0; step --)
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	3b01      	subs	r3, #1
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	daf1      	bge.n	80021e8 <step_distance+0x54>
			}
			//displaying the progress value on the screen from 0 to 100%
			lcd_put_cur(0,0);
 8002204:	2100      	movs	r1, #0
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fa14 	bl	8001634 <lcd_put_cur>
			int progress = (float)seq/(float)numberofsequences * 100;
 800220c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800220e:	f7fe fd7d 	bl	8000d0c <__aeabi_i2f>
 8002212:	1c04      	adds	r4, r0, #0
 8002214:	69b8      	ldr	r0, [r7, #24]
 8002216:	f7fe fd79 	bl	8000d0c <__aeabi_i2f>
 800221a:	1c03      	adds	r3, r0, #0
 800221c:	1c19      	adds	r1, r3, #0
 800221e:	1c20      	adds	r0, r4, #0
 8002220:	f7fe fa3c 	bl	800069c <__aeabi_fdiv>
 8002224:	1c03      	adds	r3, r0, #0
 8002226:	492b      	ldr	r1, [pc, #172]	; (80022d4 <step_distance+0x140>)
 8002228:	1c18      	adds	r0, r3, #0
 800222a:	f7fe fc01 	bl	8000a30 <__aeabi_fmul>
 800222e:	1c03      	adds	r3, r0, #0
 8002230:	1c18      	adds	r0, r3, #0
 8002232:	f7fe fd4b 	bl	8000ccc <__aeabi_f2iz>
 8002236:	0003      	movs	r3, r0
 8002238:	617b      	str	r3, [r7, #20]
			if(progress % 5 == 0) {
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2105      	movs	r1, #5
 800223e:	0018      	movs	r0, r3
 8002240:	f7fe f8d2 	bl	80003e8 <__aeabi_idivmod>
 8002244:	1e0b      	subs	r3, r1, #0
 8002246:	d10e      	bne.n	8002266 <step_distance+0xd2>
			char buffer[3];
			itoa(progress, buffer,10); //sending progress value to char buffer
 8002248:	2410      	movs	r4, #16
 800224a:	1939      	adds	r1, r7, r4
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	220a      	movs	r2, #10
 8002250:	0018      	movs	r0, r3
 8002252:	f003 facf 	bl	80057f4 <itoa>
			lcd_send_string(buffer);
 8002256:	193b      	adds	r3, r7, r4
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff fa48 	bl	80016ee <lcd_send_string>
			lcd_send_string("%");
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <step_distance+0x144>)
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff fa44 	bl	80016ee <lcd_send_string>
		for (int seq = 0; seq < numberofsequences; seq ++)
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	3301      	adds	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbb6      	blt.n	80021e2 <step_distance+0x4e>
			lcd_put_cur(0,0);
			lcd_send_string("Return...");

		}
	}
}
 8002274:	e025      	b.n	80022c2 <step_distance+0x12e>
	else if (direction == 1)  // for anti-clockwise
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d122      	bne.n	80022c2 <step_distance+0x12e>
		for (int seq=0; seq<numberofsequences; seq++)
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	e01b      	b.n	80022ba <step_distance+0x126>
			for (int step=0; step<3; step++)
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
 8002286:	e00a      	b.n	800229e <step_distance+0x10a>
				stepping(step);
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fef4 	bl	8002078 <stepping>
				set_speed(milforsec);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f7ff fec8 	bl	8002028 <set_speed>
			for (int step=0; step<3; step++)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	3301      	adds	r3, #1
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	ddf1      	ble.n	8002288 <step_distance+0xf4>
			lcd_put_cur(0,0);
 80022a4:	2100      	movs	r1, #0
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff f9c4 	bl	8001634 <lcd_put_cur>
			lcd_send_string("Return...");
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <step_distance+0x148>)
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff fa1d 	bl	80016ee <lcd_send_string>
		for (int seq=0; seq<numberofsequences; seq++)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3301      	adds	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	429a      	cmp	r2, r3
 80022c0:	dbdf      	blt.n	8002282 <step_distance+0xee>
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b00d      	add	sp, #52	; 0x34
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	25460aa6 	.word	0x25460aa6
 80022d0:	3f9a0275 	.word	0x3f9a0275
 80022d4:	42c80000 	.word	0x42c80000
 80022d8:	080059d0 	.word	0x080059d0
 80022dc:	080059d4 	.word	0x080059d4

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_MspInit+0x24>)
 80022e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_MspInit+0x24>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_MspInit+0x24>)
 80022f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_MspInit+0x24>)
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	0549      	lsls	r1, r1, #21
 80022fa:	430a      	orrs	r2, r1
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	240c      	movs	r4, #12
 8002312:	193b      	adds	r3, r7, r4
 8002314:	0018      	movs	r0, r3
 8002316:	2314      	movs	r3, #20
 8002318:	001a      	movs	r2, r3
 800231a:	2100      	movs	r1, #0
 800231c:	f003 faa2 	bl	8005864 <memset>
  if(hi2c->Instance==I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_I2C_MspInit+0x80>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d129      	bne.n	800237e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_I2C_MspInit+0x84>)
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002330:	2102      	movs	r1, #2
 8002332:	430a      	orrs	r2, r1
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	2202      	movs	r2, #2
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002342:	193b      	adds	r3, r7, r4
 8002344:	22c0      	movs	r2, #192	; 0xc0
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234a:	0021      	movs	r1, r4
 800234c:	187b      	adds	r3, r7, r1
 800234e:	2212      	movs	r2, #18
 8002350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2203      	movs	r2, #3
 800235c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2204      	movs	r2, #4
 8002362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	187b      	adds	r3, r7, r1
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002368:	0019      	movs	r1, r3
 800236a:	0010      	movs	r0, r2
 800236c:	f000 fa5a 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0389      	lsls	r1, r1, #14
 800237a:	430a      	orrs	r2, r1
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b009      	add	sp, #36	; 0x24
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40005400 	.word	0x40005400
 800238c:	40021000 	.word	0x40021000
 8002390:	50000400 	.word	0x50000400

08002394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b08b      	sub	sp, #44	; 0x2c
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	2414      	movs	r4, #20
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	0018      	movs	r0, r3
 80023a2:	2314      	movs	r3, #20
 80023a4:	001a      	movs	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	f003 fa5c 	bl	8005864 <memset>
  if(huart->Instance==LPUART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <HAL_UART_MspInit+0xdc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d129      	bne.n	800240a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_UART_MspInit+0xe0>)
 80023b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <HAL_UART_MspInit+0xe0>)
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	02c9      	lsls	r1, r1, #11
 80023c0:	430a      	orrs	r2, r1
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_UART_MspInit+0xe0>)
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_UART_MspInit+0xe0>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	430a      	orrs	r2, r1
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_UART_MspInit+0xe0>)
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2204      	movs	r2, #4
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023dc:	0021      	movs	r1, r4
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2230      	movs	r2, #48	; 0x30
 80023e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2202      	movs	r2, #2
 80023e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2203      	movs	r2, #3
 80023f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2202      	movs	r2, #2
 80023fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_UART_MspInit+0xe4>)
 8002400:	0019      	movs	r1, r3
 8002402:	0010      	movs	r0, r2
 8002404:	f000 fa0e 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002408:	e02e      	b.n	8002468 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_UART_MspInit+0xe8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d129      	bne.n	8002468 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_UART_MspInit+0xe0>)
 8002416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_UART_MspInit+0xe0>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0289      	lsls	r1, r1, #10
 800241e:	430a      	orrs	r2, r1
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_UART_MspInit+0xe0>)
 8002424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_UART_MspInit+0xe0>)
 8002428:	2101      	movs	r1, #1
 800242a:	430a      	orrs	r2, r1
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_UART_MspInit+0xe0>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	2201      	movs	r2, #1
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800243a:	2114      	movs	r1, #20
 800243c:	187b      	adds	r3, r7, r1
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	2202      	movs	r2, #2
 8002446:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2203      	movs	r2, #3
 8002452:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2204      	movs	r2, #4
 8002458:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	187a      	adds	r2, r7, r1
 800245c:	23a0      	movs	r3, #160	; 0xa0
 800245e:	05db      	lsls	r3, r3, #23
 8002460:	0011      	movs	r1, r2
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f9de 	bl	8002824 <HAL_GPIO_Init>
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b00b      	add	sp, #44	; 0x2c
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	40004800 	.word	0x40004800
 8002474:	40021000 	.word	0x40021000
 8002478:	50000800 	.word	0x50000800
 800247c:	40004400 	.word	0x40004400

08002480 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_RTC_MspInit+0x28>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d106      	bne.n	80024a0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RTC_MspInit+0x2c>)
 8002494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RTC_MspInit+0x2c>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	02c9      	lsls	r1, r1, #11
 800249c:	430a      	orrs	r2, r1
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40002800 	.word	0x40002800
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_TIM_Base_MspInit+0x28>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d105      	bne.n	80024ce <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_TIM_Base_MspInit+0x2c>)
 80024c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_TIM_Base_MspInit+0x2c>)
 80024c8:	2102      	movs	r1, #2
 80024ca:	430a      	orrs	r2, r1
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40021000 	.word	0x40021000

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 f870 	bl	80025e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_4_Pin);
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	019b      	lsls	r3, r3, #6
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fb20 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_3_Pin);
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	01db      	lsls	r3, r3, #7
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fb1b 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_2_Pin);
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fb16 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_Init+0x3c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_Init+0x3c>)
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002558:	2000      	movs	r0, #0
 800255a:	f000 f811 	bl	8002580 <HAL_InitTick>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d003      	beq.n	800256a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e001      	b.n	800256e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800256a:	f7ff feb9 	bl	80022e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	40022000 	.word	0x40022000

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_InitTick+0x5c>)
 800258a:	681c      	ldr	r4, [r3, #0]
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_InitTick+0x60>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	0019      	movs	r1, r3
 8002592:	23fa      	movs	r3, #250	; 0xfa
 8002594:	0098      	lsls	r0, r3, #2
 8002596:	f7fd fdb7 	bl	8000108 <__udivsi3>
 800259a:	0003      	movs	r3, r0
 800259c:	0019      	movs	r1, r3
 800259e:	0020      	movs	r0, r4
 80025a0:	f7fd fdb2 	bl	8000108 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f92f 	bl	800280a <HAL_SYSTICK_Config>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e00f      	b.n	80025d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d80b      	bhi.n	80025d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	2301      	movs	r3, #1
 80025be:	425b      	negs	r3, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 f8fc 	bl	80027c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_InitTick+0x64>)
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b003      	add	sp, #12
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	20000264 	.word	0x20000264
 80025e0:	2000026c 	.word	0x2000026c
 80025e4:	20000268 	.word	0x20000268

080025e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_IncTick+0x1c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	001a      	movs	r2, r3
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x20>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	18d2      	adds	r2, r2, r3
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_IncTick+0x20>)
 80025fa:	601a      	str	r2, [r3, #0]
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	2000026c 	.word	0x2000026c
 8002608:	20000480 	.word	0x20000480

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetTick+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	20000480 	.word	0x20000480

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff fff0 	bl	800260c <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	001a      	movs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	189b      	adds	r3, r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	f7ff ffe0 	bl	800260c <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	2000026c 	.word	0x2000026c

08002668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	0002      	movs	r2, r0
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002674:	1dfb      	adds	r3, r7, #7
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b7f      	cmp	r3, #127	; 0x7f
 800267a:	d809      	bhi.n	8002690 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	001a      	movs	r2, r3
 8002682:	231f      	movs	r3, #31
 8002684:	401a      	ands	r2, r3
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_EnableIRQ+0x30>)
 8002688:	2101      	movs	r1, #1
 800268a:	4091      	lsls	r1, r2
 800268c:	000a      	movs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
  }
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	0002      	movs	r2, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b7f      	cmp	r3, #127	; 0x7f
 80026b0:	d828      	bhi.n	8002704 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026b2:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <__NVIC_SetPriority+0xd4>)
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	33c0      	adds	r3, #192	; 0xc0
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	589b      	ldr	r3, [r3, r2]
 80026c2:	1dfa      	adds	r2, r7, #7
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	0011      	movs	r1, r2
 80026c8:	2203      	movs	r2, #3
 80026ca:	400a      	ands	r2, r1
 80026cc:	00d2      	lsls	r2, r2, #3
 80026ce:	21ff      	movs	r1, #255	; 0xff
 80026d0:	4091      	lsls	r1, r2
 80026d2:	000a      	movs	r2, r1
 80026d4:	43d2      	mvns	r2, r2
 80026d6:	401a      	ands	r2, r3
 80026d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	22ff      	movs	r2, #255	; 0xff
 80026e0:	401a      	ands	r2, r3
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	0018      	movs	r0, r3
 80026e8:	2303      	movs	r3, #3
 80026ea:	4003      	ands	r3, r0
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f0:	481f      	ldr	r0, [pc, #124]	; (8002770 <__NVIC_SetPriority+0xd4>)
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	430a      	orrs	r2, r1
 80026fc:	33c0      	adds	r3, #192	; 0xc0
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002702:	e031      	b.n	8002768 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <__NVIC_SetPriority+0xd8>)
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	0019      	movs	r1, r3
 800270c:	230f      	movs	r3, #15
 800270e:	400b      	ands	r3, r1
 8002710:	3b08      	subs	r3, #8
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3306      	adds	r3, #6
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	18d3      	adds	r3, r2, r3
 800271a:	3304      	adds	r3, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1dfa      	adds	r2, r7, #7
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	0011      	movs	r1, r2
 8002724:	2203      	movs	r2, #3
 8002726:	400a      	ands	r2, r1
 8002728:	00d2      	lsls	r2, r2, #3
 800272a:	21ff      	movs	r1, #255	; 0xff
 800272c:	4091      	lsls	r1, r2
 800272e:	000a      	movs	r2, r1
 8002730:	43d2      	mvns	r2, r2
 8002732:	401a      	ands	r2, r3
 8002734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	22ff      	movs	r2, #255	; 0xff
 800273c:	401a      	ands	r2, r3
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	0018      	movs	r0, r3
 8002744:	2303      	movs	r3, #3
 8002746:	4003      	ands	r3, r0
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800274c:	4809      	ldr	r0, [pc, #36]	; (8002774 <__NVIC_SetPriority+0xd8>)
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	001c      	movs	r4, r3
 8002754:	230f      	movs	r3, #15
 8002756:	4023      	ands	r3, r4
 8002758:	3b08      	subs	r3, #8
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	430a      	orrs	r2, r1
 800275e:	3306      	adds	r3, #6
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	18c3      	adds	r3, r0, r3
 8002764:	3304      	adds	r3, #4
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b003      	add	sp, #12
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	045b      	lsls	r3, r3, #17
 8002788:	429a      	cmp	r2, r3
 800278a:	d301      	bcc.n	8002790 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278c:	2301      	movs	r3, #1
 800278e:	e010      	b.n	80027b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <SysTick_Config+0x44>)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	3a01      	subs	r2, #1
 8002796:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002798:	2301      	movs	r3, #1
 800279a:	425b      	negs	r3, r3
 800279c:	2103      	movs	r1, #3
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff ff7c 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SysTick_Config+0x44>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <SysTick_Config+0x44>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b002      	add	sp, #8
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	210f      	movs	r1, #15
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	1c02      	adds	r2, r0, #0
 80027d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	0011      	movs	r1, r2
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	0002      	movs	r2, r0
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f6:	1dfb      	adds	r3, r7, #7
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff ff33 	bl	8002668 <__NVIC_EnableIRQ>
}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff ffaf 	bl	8002778 <SysTick_Config>
 800281a:	0003      	movs	r3, r0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800283a:	e155      	b.n	8002ae8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4091      	lsls	r1, r2
 8002846:	000a      	movs	r2, r1
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d100      	bne.n	8002854 <HAL_GPIO_Init+0x30>
 8002852:	e146      	b.n	8002ae2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	4013      	ands	r3, r2
 800285c:	2b01      	cmp	r3, #1
 800285e:	d005      	beq.n	800286c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002868:	2b02      	cmp	r3, #2
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	409a      	lsls	r2, r3
 800287a:	0013      	movs	r3, r2
 800287c:	43da      	mvns	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	0013      	movs	r3, r2
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	43da      	mvns	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	2201      	movs	r2, #1
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
 80028c0:	0013      	movs	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2203      	movs	r2, #3
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d017      	beq.n	800290a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	409a      	lsls	r2, r3
 80028e8:	0013      	movs	r3, r2
 80028ea:	43da      	mvns	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	409a      	lsls	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2203      	movs	r2, #3
 8002910:	4013      	ands	r3, r2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d123      	bne.n	800295e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	08da      	lsrs	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3208      	adds	r2, #8
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	58d3      	ldr	r3, [r2, r3]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2207      	movs	r2, #7
 8002928:	4013      	ands	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	409a      	lsls	r2, r3
 8002930:	0013      	movs	r3, r2
 8002932:	43da      	mvns	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2107      	movs	r1, #7
 8002942:	400b      	ands	r3, r1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	409a      	lsls	r2, r3
 8002948:	0013      	movs	r3, r2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	43da      	mvns	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	401a      	ands	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	0013      	movs	r3, r2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	23c0      	movs	r3, #192	; 0xc0
 8002998:	029b      	lsls	r3, r3, #10
 800299a:	4013      	ands	r3, r2
 800299c:	d100      	bne.n	80029a0 <HAL_GPIO_Init+0x17c>
 800299e:	e0a0      	b.n	8002ae2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a0:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <HAL_GPIO_Init+0x2dc>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_GPIO_Init+0x2dc>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	589b      	ldr	r3, [r3, r2]
 80029b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2203      	movs	r2, #3
 80029be:	4013      	ands	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	409a      	lsls	r2, r3
 80029c6:	0013      	movs	r3, r2
 80029c8:	43da      	mvns	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	23a0      	movs	r3, #160	; 0xa0
 80029d4:	05db      	lsls	r3, r3, #23
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d01f      	beq.n	8002a1a <HAL_GPIO_Init+0x1f6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4a      	ldr	r2, [pc, #296]	; (8002b08 <HAL_GPIO_Init+0x2e4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <HAL_GPIO_Init+0x1f2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_GPIO_Init+0x1ee>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2ec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00d      	beq.n	8002a0e <HAL_GPIO_Init+0x1ea>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_GPIO_Init+0x2f0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x1e6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <HAL_GPIO_Init+0x2f4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_GPIO_Init+0x1e2>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x1f8>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x1f8>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x1f8>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x1f8>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x1f8>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x1f8>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	2103      	movs	r1, #3
 8002a20:	400a      	ands	r2, r1
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43da      	mvns	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	035b      	lsls	r3, r3, #13
 8002a52:	4013      	ands	r3, r2
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	039b      	lsls	r3, r3, #14
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43da      	mvns	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	025b      	lsls	r3, r3, #9
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	40da      	lsrs	r2, r3
 8002af0:	1e13      	subs	r3, r2, #0
 8002af2:	d000      	beq.n	8002af6 <HAL_GPIO_Init+0x2d2>
 8002af4:	e6a2      	b.n	800283c <HAL_GPIO_Init+0x18>
  }
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b006      	add	sp, #24
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40010000 	.word	0x40010000
 8002b08:	50000400 	.word	0x50000400
 8002b0c:	50000800 	.word	0x50000800
 8002b10:	50000c00 	.word	0x50000c00
 8002b14:	50001000 	.word	0x50001000
 8002b18:	50001c00 	.word	0x50001c00
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	0008      	movs	r0, r1
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	1cbb      	adds	r3, r7, #2
 8002b2e:	1c02      	adds	r2, r0, #0
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	1c7b      	adds	r3, r7, #1
 8002b34:	1c0a      	adds	r2, r1, #0
 8002b36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b38:	1c7b      	adds	r3, r7, #1
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b40:	1cbb      	adds	r3, r7, #2
 8002b42:	881a      	ldrh	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002b4a:	1cbb      	adds	r3, r7, #2
 8002b4c:	881a      	ldrh	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dbb      	adds	r3, r7, #6
 8002b66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	1dba      	adds	r2, r7, #6
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	4013      	ands	r3, r2
 8002b72:	d008      	beq.n	8002b86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b76:	1dba      	adds	r2, r7, #6
 8002b78:	8812      	ldrh	r2, [r2, #0]
 8002b7a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b7c:	1dbb      	adds	r3, r7, #6
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff f9bb 	bl	8001efc <HAL_GPIO_EXTI_Callback>
  }
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e082      	b.n	8002cac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2241      	movs	r2, #65	; 0x41
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff fba3 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2241      	movs	r2, #65	; 0x41
 8002bc6:	2124      	movs	r1, #36	; 0x24
 8002bc8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4934      	ldr	r1, [pc, #208]	; (8002cb4 <HAL_I2C_Init+0x120>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4931      	ldr	r1, [pc, #196]	; (8002cb8 <HAL_I2C_Init+0x124>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	0209      	lsls	r1, r1, #8
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e007      	b.n	8002c22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2184      	movs	r1, #132	; 0x84
 8002c1c:	0209      	lsls	r1, r1, #8
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d104      	bne.n	8002c34 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	491f      	ldr	r1, [pc, #124]	; (8002cbc <HAL_I2C_Init+0x128>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	491a      	ldr	r1, [pc, #104]	; (8002cb8 <HAL_I2C_Init+0x124>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69d9      	ldr	r1, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2241      	movs	r2, #65	; 0x41
 8002c98:	2120      	movs	r1, #32
 8002c9a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2242      	movs	r2, #66	; 0x42
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	f0ffffff 	.word	0xf0ffffff
 8002cb8:	ffff7fff 	.word	0xffff7fff
 8002cbc:	02008000 	.word	0x02008000

08002cc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	0008      	movs	r0, r1
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	0019      	movs	r1, r3
 8002cce:	230a      	movs	r3, #10
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	1c02      	adds	r2, r0, #0
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	1c0a      	adds	r2, r1, #0
 8002cdc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2241      	movs	r2, #65	; 0x41
 8002ce2:	5c9b      	ldrb	r3, [r3, r2]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d000      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x2c>
 8002cea:	e0e7      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0x3a>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0e1      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1fe>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d02:	f7ff fc83 	bl	800260c <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	0219      	lsls	r1, r3, #8
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	f000 f8fc 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0cc      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2241      	movs	r2, #65	; 0x41
 8002d28:	2121      	movs	r1, #33	; 0x21
 8002d2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2242      	movs	r2, #66	; 0x42
 8002d30:	2110      	movs	r1, #16
 8002d32:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2208      	movs	r2, #8
 8002d44:	18ba      	adds	r2, r7, r2
 8002d46:	8812      	ldrh	r2, [r2, #0]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2bff      	cmp	r3, #255	; 0xff
 8002d58:	d911      	bls.n	8002d7e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	045c      	lsls	r4, r3, #17
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	8819      	ldrh	r1, [r3, #0]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <HAL_I2C_Master_Transmit+0x208>)
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	0023      	movs	r3, r4
 8002d78:	f000 faa4 	bl	80032c4 <I2C_TransferConfig>
 8002d7c:	e075      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	049c      	lsls	r4, r3, #18
 8002d92:	230a      	movs	r3, #10
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	8819      	ldrh	r1, [r3, #0]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_I2C_Master_Transmit+0x208>)
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	0023      	movs	r3, r4
 8002da0:	f000 fa90 	bl	80032c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002da4:	e061      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f8ff 	bl	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	1e03      	subs	r3, r0, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e081      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03a      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x1aa>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d136      	bne.n	8002e6a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	0013      	movs	r3, r2
 8002e06:	2200      	movs	r2, #0
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	f000 f883 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e053      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2bff      	cmp	r3, #255	; 0xff
 8002e1e:	d911      	bls.n	8002e44 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	045c      	lsls	r4, r3, #17
 8002e30:	230a      	movs	r3, #10
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	8819      	ldrh	r1, [r3, #0]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	0023      	movs	r3, r4
 8002e3e:	f000 fa41 	bl	80032c4 <I2C_TransferConfig>
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	049c      	lsls	r4, r3, #18
 8002e58:	230a      	movs	r3, #10
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	8819      	ldrh	r1, [r3, #0]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	2300      	movs	r3, #0
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	0023      	movs	r3, r4
 8002e66:	f000 fa2d 	bl	80032c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d198      	bne.n	8002da6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f8de 	bl	800303c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e01a      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	490c      	ldr	r1, [pc, #48]	; (8002ecc <HAL_I2C_Master_Transmit+0x20c>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2241      	movs	r2, #65	; 0x41
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2242      	movs	r2, #66	; 0x42
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2240      	movs	r2, #64	; 0x40
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b007      	add	sp, #28
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	80002000 	.word	0x80002000
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d103      	bne.n	8002eee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2200      	movs	r2, #0
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d007      	beq.n	8002f0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]
  }
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f24:	e030      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	d02d      	beq.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2c:	f7ff fb6e 	bl	800260c <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d302      	bcc.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d122      	bne.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	425a      	negs	r2, r3
 8002f52:	4153      	adcs	r3, r2
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	001a      	movs	r2, r3
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d113      	bne.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	2220      	movs	r2, #32
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2241      	movs	r2, #65	; 0x41
 8002f70:	2120      	movs	r1, #32
 8002f72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2242      	movs	r2, #66	; 0x42
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e00f      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	425a      	negs	r2, r3
 8002f98:	4153      	adcs	r3, r2
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d0bf      	beq.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fbc:	e032      	b.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f87d 	bl	80030c4 <I2C_IsErrorOccurred>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e030      	b.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	d025      	beq.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7ff fb18 	bl	800260c <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11a      	bne.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d013      	beq.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	2220      	movs	r2, #32
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2241      	movs	r2, #65	; 0x41
 800300c:	2120      	movs	r1, #32
 800300e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2242      	movs	r2, #66	; 0x42
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	2100      	movs	r1, #0
 800301e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e007      	b.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2202      	movs	r2, #2
 800302c:	4013      	ands	r3, r2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d1c5      	bne.n	8002fbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003048:	e02f      	b.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 f837 	bl	80030c4 <I2C_IsErrorOccurred>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e02d      	b.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7ff fad5 	bl	800260c <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11a      	bne.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
 800307e:	2b20      	cmp	r3, #32
 8003080:	d013      	beq.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	2220      	movs	r2, #32
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2241      	movs	r2, #65	; 0x41
 8003092:	2120      	movs	r1, #32
 8003094:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2242      	movs	r2, #66	; 0x42
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	2100      	movs	r1, #0
 80030a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e007      	b.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2220      	movs	r2, #32
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d1c8      	bne.n	800304a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b08b      	sub	sp, #44	; 0x2c
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2327      	movs	r3, #39	; 0x27
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2210      	movs	r2, #16
 80030ec:	4013      	ands	r3, r2
 80030ee:	d100      	bne.n	80030f2 <I2C_IsErrorOccurred+0x2e>
 80030f0:	e082      	b.n	80031f8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2210      	movs	r2, #16
 80030f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030fa:	e060      	b.n	80031be <I2C_IsErrorOccurred+0xfa>
 80030fc:	2427      	movs	r4, #39	; 0x27
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	193a      	adds	r2, r7, r4
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3301      	adds	r3, #1
 800310a:	d058      	beq.n	80031be <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7ff fa7e 	bl	800260c <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d306      	bcc.n	800312a <I2C_IsErrorOccurred+0x66>
 800311c:	193b      	adds	r3, r7, r4
 800311e:	193a      	adds	r2, r7, r4
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d149      	bne.n	80031be <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	4013      	ands	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003138:	2013      	movs	r0, #19
 800313a:	183b      	adds	r3, r7, r0
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	2142      	movs	r1, #66	; 0x42
 8003140:	5c52      	ldrb	r2, [r2, r1]
 8003142:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	401a      	ands	r2, r3
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	429a      	cmp	r2, r3
 8003156:	d126      	bne.n	80031a6 <I2C_IsErrorOccurred+0xe2>
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	01db      	lsls	r3, r3, #7
 800315e:	429a      	cmp	r2, r3
 8003160:	d021      	beq.n	80031a6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003162:	183b      	adds	r3, r7, r0
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b20      	cmp	r3, #32
 8003168:	d01d      	beq.n	80031a6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	01c9      	lsls	r1, r1, #7
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800317c:	f7ff fa46 	bl	800260c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003184:	e00f      	b.n	80031a6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003186:	f7ff fa41 	bl	800260c <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b19      	cmp	r3, #25
 8003192:	d908      	bls.n	80031a6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2220      	movs	r2, #32
 8003198:	4313      	orrs	r3, r2
 800319a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800319c:	2327      	movs	r3, #39	; 0x27
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]

              break;
 80031a4:	e00b      	b.n	80031be <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2220      	movs	r2, #32
 80031ae:	4013      	ands	r3, r2
 80031b0:	2127      	movs	r1, #39	; 0x27
 80031b2:	187a      	adds	r2, r7, r1
 80031b4:	1879      	adds	r1, r7, r1
 80031b6:	7809      	ldrb	r1, [r1, #0]
 80031b8:	7011      	strb	r1, [r2, #0]
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d1e3      	bne.n	8003186 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2220      	movs	r2, #32
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d004      	beq.n	80031d6 <I2C_IsErrorOccurred+0x112>
 80031cc:	2327      	movs	r3, #39	; 0x27
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d092      	beq.n	80030fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031d6:	2327      	movs	r3, #39	; 0x27
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d103      	bne.n	80031e8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2220      	movs	r2, #32
 80031e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2204      	movs	r2, #4
 80031ec:	4313      	orrs	r3, r2
 80031ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031f0:	2327      	movs	r3, #39	; 0x27
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d00c      	beq.n	8003224 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2201      	movs	r2, #1
 800320e:	4313      	orrs	r3, r2
 8003210:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	0052      	lsls	r2, r2, #1
 800321a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800321c:	2327      	movs	r3, #39	; 0x27
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4013      	ands	r3, r2
 800322c:	d00c      	beq.n	8003248 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2208      	movs	r2, #8
 8003232:	4313      	orrs	r3, r2
 8003234:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	00d2      	lsls	r2, r2, #3
 800323e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003240:	2327      	movs	r3, #39	; 0x27
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d00c      	beq.n	800326c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2202      	movs	r2, #2
 8003256:	4313      	orrs	r3, r2
 8003258:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003264:	2327      	movs	r3, #39	; 0x27
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800326c:	2327      	movs	r3, #39	; 0x27
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01d      	beq.n	80032b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fe29 	bl	8002ed0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	490d      	ldr	r1, [pc, #52]	; (80032c0 <I2C_IsErrorOccurred+0x1fc>)
 800328a:	400a      	ands	r2, r1
 800328c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2241      	movs	r2, #65	; 0x41
 800329e:	2120      	movs	r1, #32
 80032a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2242      	movs	r2, #66	; 0x42
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80032b2:	2327      	movs	r3, #39	; 0x27
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	781b      	ldrb	r3, [r3, #0]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b00b      	add	sp, #44	; 0x2c
 80032be:	bd90      	pop	{r4, r7, pc}
 80032c0:	fe00e800 	.word	0xfe00e800

080032c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	0008      	movs	r0, r1
 80032ce:	0011      	movs	r1, r2
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	240a      	movs	r4, #10
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	1c02      	adds	r2, r0, #0
 80032d8:	801a      	strh	r2, [r3, #0]
 80032da:	2009      	movs	r0, #9
 80032dc:	183b      	adds	r3, r7, r0
 80032de:	1c0a      	adds	r2, r1, #0
 80032e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	059b      	lsls	r3, r3, #22
 80032e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ea:	183b      	adds	r3, r7, r0
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	0419      	lsls	r1, r3, #16
 80032f0:	23ff      	movs	r3, #255	; 0xff
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	4313      	orrs	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330e:	0d51      	lsrs	r1, r2, #21
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	00d2      	lsls	r2, r2, #3
 8003314:	400a      	ands	r2, r1
 8003316:	4907      	ldr	r1, [pc, #28]	; (8003334 <I2C_TransferConfig+0x70>)
 8003318:	430a      	orrs	r2, r1
 800331a:	43d2      	mvns	r2, r2
 800331c:	401a      	ands	r2, r3
 800331e:	0011      	movs	r1, r2
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b007      	add	sp, #28
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	03ff63ff 	.word	0x03ff63ff

08003338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2241      	movs	r2, #65	; 0x41
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	d138      	bne.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2240      	movs	r2, #64	; 0x40
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003358:	2302      	movs	r3, #2
 800335a:	e032      	b.n	80033c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	2101      	movs	r1, #1
 8003362:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2241      	movs	r2, #65	; 0x41
 8003368:	2124      	movs	r1, #36	; 0x24
 800336a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	438a      	bics	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4911      	ldr	r1, [pc, #68]	; (80033cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003388:	400a      	ands	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2241      	movs	r2, #65	; 0x41
 80033b0:	2120      	movs	r1, #32
 80033b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	ffffefff 	.word	0xffffefff

080033d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2241      	movs	r2, #65	; 0x41
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d139      	bne.n	800345a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e033      	b.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2241      	movs	r2, #65	; 0x41
 8003400:	2124      	movs	r1, #36	; 0x24
 8003402:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	438a      	bics	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2241      	movs	r2, #65	; 0x41
 800344a:	2120      	movs	r1, #32
 800344c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2240      	movs	r2, #64	; 0x40
 8003452:	2100      	movs	r1, #0
 8003454:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}
 8003464:	fffff0ff 	.word	0xfffff0ff

08003468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f000 fbbf 	bl	8003bfa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347c:	4bc9      	ldr	r3, [pc, #804]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	220c      	movs	r2, #12
 8003482:	4013      	ands	r3, r2
 8003484:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003486:	4bc7      	ldr	r3, [pc, #796]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	025b      	lsls	r3, r3, #9
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <HAL_RCC_OscConfig+0x36>
 800349c:	e07e      	b.n	800359c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d007      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d112      	bne.n	80034d0 <HAL_RCC_OscConfig+0x68>
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	025b      	lsls	r3, r3, #9
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	4bbb      	ldr	r3, [pc, #748]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	4013      	ands	r3, r2
 80034be:	d100      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5a>
 80034c0:	e06b      	b.n	800359a <HAL_RCC_OscConfig+0x132>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d167      	bne.n	800359a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f000 fb95 	bl	8003bfa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	025b      	lsls	r3, r3, #9
 80034d8:	429a      	cmp	r2, r3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_OscConfig+0x84>
 80034dc:	4bb1      	ldr	r3, [pc, #708]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4bb0      	ldr	r3, [pc, #704]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	0249      	lsls	r1, r1, #9
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e027      	b.n	800353c <HAL_RCC_OscConfig+0xd4>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	23a0      	movs	r3, #160	; 0xa0
 80034f2:	02db      	lsls	r3, r3, #11
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d10e      	bne.n	8003516 <HAL_RCC_OscConfig+0xae>
 80034f8:	4baa      	ldr	r3, [pc, #680]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4ba9      	ldr	r3, [pc, #676]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	02c9      	lsls	r1, r1, #11
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4ba7      	ldr	r3, [pc, #668]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4ba6      	ldr	r3, [pc, #664]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	0249      	lsls	r1, r1, #9
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e012      	b.n	800353c <HAL_RCC_OscConfig+0xd4>
 8003516:	4ba3      	ldr	r3, [pc, #652]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4ba2      	ldr	r3, [pc, #648]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800351c:	49a2      	ldr	r1, [pc, #648]	; (80037a8 <HAL_RCC_OscConfig+0x340>)
 800351e:	400a      	ands	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	4ba0      	ldr	r3, [pc, #640]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	025b      	lsls	r3, r3, #9
 800352a:	4013      	ands	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4b9c      	ldr	r3, [pc, #624]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b9b      	ldr	r3, [pc, #620]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003536:	499d      	ldr	r1, [pc, #628]	; (80037ac <HAL_RCC_OscConfig+0x344>)
 8003538:	400a      	ands	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d015      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff f862 	bl	800260c <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800354c:	e009      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800354e:	f7ff f85d 	bl	800260c <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d902      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	f000 fb4c 	bl	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003562:	4b90      	ldr	r3, [pc, #576]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	029b      	lsls	r3, r3, #10
 800356a:	4013      	ands	r3, r2
 800356c:	d0ef      	beq.n	800354e <HAL_RCC_OscConfig+0xe6>
 800356e:	e015      	b.n	800359c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7ff f84c 	bl	800260c <HAL_GetTick>
 8003574:	0003      	movs	r3, r0
 8003576:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357a:	f7ff f847 	bl	800260c <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e336      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800358c:	4b85      	ldr	r3, [pc, #532]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	029b      	lsls	r3, r3, #10
 8003594:	4013      	ands	r3, r2
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x112>
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2202      	movs	r2, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	d100      	bne.n	80035a8 <HAL_RCC_OscConfig+0x140>
 80035a6:	e099      	b.n	80036dc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	2220      	movs	r2, #32
 80035b2:	4013      	ands	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80035b6:	4b7b      	ldr	r3, [pc, #492]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80035bc:	2120      	movs	r1, #32
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2220      	movs	r2, #32
 80035c6:	4393      	bics	r3, r2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d13e      	bne.n	8003654 <HAL_RCC_OscConfig+0x1ec>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13b      	bne.n	8003654 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80035dc:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2204      	movs	r2, #4
 80035e2:	4013      	ands	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_RCC_OscConfig+0x188>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e304      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b6c      	ldr	r3, [pc, #432]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a6e      	ldr	r2, [pc, #440]	; (80037b0 <HAL_RCC_OscConfig+0x348>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	021a      	lsls	r2, r3, #8
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2209      	movs	r2, #9
 800360c:	4393      	bics	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003618:	f000 fc42 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800361c:	0001      	movs	r1, r0
 800361e:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	220f      	movs	r2, #15
 8003626:	4013      	ands	r3, r2
 8003628:	4a62      	ldr	r2, [pc, #392]	; (80037b4 <HAL_RCC_OscConfig+0x34c>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	000a      	movs	r2, r1
 800362e:	40da      	lsrs	r2, r3
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <HAL_RCC_OscConfig+0x350>)
 8003632:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003634:	4b61      	ldr	r3, [pc, #388]	; (80037bc <HAL_RCC_OscConfig+0x354>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2513      	movs	r5, #19
 800363a:	197c      	adds	r4, r7, r5
 800363c:	0018      	movs	r0, r3
 800363e:	f7fe ff9f 	bl	8002580 <HAL_InitTick>
 8003642:	0003      	movs	r3, r0
 8003644:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003646:	197b      	adds	r3, r7, r5
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d046      	beq.n	80036dc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800364e:	197b      	adds	r3, r7, r5
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	e2d2      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d027      	beq.n	80036aa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800365a:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2209      	movs	r2, #9
 8003660:	4393      	bics	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe ffce 	bl	800260c <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe ffc9 	bl	800260c <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e2b8      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2204      	movs	r2, #4
 800368e:	4013      	ands	r3, r2
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a46      	ldr	r2, [pc, #280]	; (80037b0 <HAL_RCC_OscConfig+0x348>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	e018      	b.n	80036dc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	438a      	bics	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe ffa9 	bl	800260c <HAL_GetTick>
 80036ba:	0003      	movs	r3, r0
 80036bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fe ffa4 	bl	800260c <HAL_GetTick>
 80036c4:	0002      	movs	r2, r0
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e293      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2204      	movs	r2, #4
 80036d8:	4013      	ands	r3, r2
 80036da:	d1f1      	bne.n	80036c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2210      	movs	r2, #16
 80036e2:	4013      	ands	r3, r2
 80036e4:	d100      	bne.n	80036e8 <HAL_RCC_OscConfig+0x280>
 80036e6:	e0a2      	b.n	800382e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d140      	bne.n	8003770 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4013      	ands	r3, r2
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x29e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e279      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003706:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a2d      	ldr	r2, [pc, #180]	; (80037c0 <HAL_RCC_OscConfig+0x358>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	0a19      	lsrs	r1, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	061a      	lsls	r2, r3, #24
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	0b5b      	lsrs	r3, r3, #13
 8003734:	3301      	adds	r3, #1
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0212      	lsls	r2, r2, #8
 800373a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	210f      	movs	r1, #15
 8003744:	400b      	ands	r3, r1
 8003746:	491b      	ldr	r1, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x34c>)
 8003748:	5ccb      	ldrb	r3, [r1, r3]
 800374a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_RCC_OscConfig+0x350>)
 800374e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_OscConfig+0x354>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2513      	movs	r5, #19
 8003756:	197c      	adds	r4, r7, r5
 8003758:	0018      	movs	r0, r3
 800375a:	f7fe ff11 	bl	8002580 <HAL_InitTick>
 800375e:	0003      	movs	r3, r0
 8003760:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003762:	197b      	adds	r3, r7, r5
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d061      	beq.n	800382e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800376a:	197b      	adds	r3, r7, r5
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	e244      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d040      	beq.n	80037fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_OscConfig+0x33c>)
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	0049      	lsls	r1, r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe ff41 	bl	800260c <HAL_GetTick>
 800378a:	0003      	movs	r3, r0
 800378c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800378e:	e019      	b.n	80037c4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003790:	f7fe ff3c 	bl	800260c <HAL_GetTick>
 8003794:	0002      	movs	r2, r0
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d912      	bls.n	80037c4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e22b      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	40021000 	.word	0x40021000
 80037a8:	fffeffff 	.word	0xfffeffff
 80037ac:	fffbffff 	.word	0xfffbffff
 80037b0:	ffffe0ff 	.word	0xffffe0ff
 80037b4:	08005aa0 	.word	0x08005aa0
 80037b8:	20000264 	.word	0x20000264
 80037bc:	20000268 	.word	0x20000268
 80037c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037c4:	4bca      	ldr	r3, [pc, #808]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4013      	ands	r3, r2
 80037ce:	d0df      	beq.n	8003790 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d0:	4bc7      	ldr	r3, [pc, #796]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4ac7      	ldr	r2, [pc, #796]	; (8003af4 <HAL_RCC_OscConfig+0x68c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037de:	4bc4      	ldr	r3, [pc, #784]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e4:	4bc2      	ldr	r3, [pc, #776]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	0a19      	lsrs	r1, r3, #8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	061a      	lsls	r2, r3, #24
 80037f2:	4bbf      	ldr	r3, [pc, #764]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	e019      	b.n	800382e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037fa:	4bbd      	ldr	r3, [pc, #756]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4bbc      	ldr	r3, [pc, #752]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003800:	49bd      	ldr	r1, [pc, #756]	; (8003af8 <HAL_RCC_OscConfig+0x690>)
 8003802:	400a      	ands	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe ff01 	bl	800260c <HAL_GetTick>
 800380a:	0003      	movs	r3, r0
 800380c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003810:	f7fe fefc 	bl	800260c <HAL_GetTick>
 8003814:	0002      	movs	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1eb      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003822:	4bb3      	ldr	r3, [pc, #716]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4013      	ands	r3, r2
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2208      	movs	r2, #8
 8003834:	4013      	ands	r3, r2
 8003836:	d036      	beq.n	80038a6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d019      	beq.n	8003874 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003840:	4bab      	ldr	r3, [pc, #684]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003844:	4baa      	ldr	r3, [pc, #680]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003846:	2101      	movs	r1, #1
 8003848:	430a      	orrs	r2, r1
 800384a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7fe fede 	bl	800260c <HAL_GetTick>
 8003850:	0003      	movs	r3, r0
 8003852:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003856:	f7fe fed9 	bl	800260c <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1c8      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003868:	4ba1      	ldr	r3, [pc, #644]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800386a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386c:	2202      	movs	r2, #2
 800386e:	4013      	ands	r3, r2
 8003870:	d0f1      	beq.n	8003856 <HAL_RCC_OscConfig+0x3ee>
 8003872:	e018      	b.n	80038a6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	4b9e      	ldr	r3, [pc, #632]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003878:	4b9d      	ldr	r3, [pc, #628]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003880:	f7fe fec4 	bl	800260c <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388a:	f7fe febf 	bl	800260c <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1ae      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800389c:	4b94      	ldr	r3, [pc, #592]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	2202      	movs	r2, #2
 80038a2:	4013      	ands	r3, r2
 80038a4:	d1f1      	bne.n	800388a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	d100      	bne.n	80038b2 <HAL_RCC_OscConfig+0x44a>
 80038b0:	e0ae      	b.n	8003a10 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2023      	movs	r0, #35	; 0x23
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b8d      	ldr	r3, [pc, #564]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80038bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	055b      	lsls	r3, r3, #21
 80038c2:	4013      	ands	r3, r2
 80038c4:	d109      	bne.n	80038da <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b8a      	ldr	r3, [pc, #552]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80038c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ca:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	0549      	lsls	r1, r1, #21
 80038d0:	430a      	orrs	r2, r1
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80038d4:	183b      	adds	r3, r7, r0
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x694>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d11a      	bne.n	800391c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <HAL_RCC_OscConfig+0x694>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b84      	ldr	r3, [pc, #528]	; (8003afc <HAL_RCC_OscConfig+0x694>)
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	0049      	lsls	r1, r1, #1
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f4:	f7fe fe8a 	bl	800260c <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fe fe85 	bl	800260c <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b64      	cmp	r3, #100	; 0x64
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e174      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <HAL_RCC_OscConfig+0x694>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4013      	ands	r3, r2
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_RCC_OscConfig+0x4d0>
 8003928:	4b71      	ldr	r3, [pc, #452]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800392a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800392c:	4b70      	ldr	r3, [pc, #448]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	0049      	lsls	r1, r1, #1
 8003932:	430a      	orrs	r2, r1
 8003934:	651a      	str	r2, [r3, #80]	; 0x50
 8003936:	e031      	b.n	800399c <HAL_RCC_OscConfig+0x534>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10c      	bne.n	800395a <HAL_RCC_OscConfig+0x4f2>
 8003940:	4b6b      	ldr	r3, [pc, #428]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003944:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003946:	496c      	ldr	r1, [pc, #432]	; (8003af8 <HAL_RCC_OscConfig+0x690>)
 8003948:	400a      	ands	r2, r1
 800394a:	651a      	str	r2, [r3, #80]	; 0x50
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800394e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003950:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003952:	496b      	ldr	r1, [pc, #428]	; (8003b00 <HAL_RCC_OscConfig+0x698>)
 8003954:	400a      	ands	r2, r1
 8003956:	651a      	str	r2, [r3, #80]	; 0x50
 8003958:	e020      	b.n	800399c <HAL_RCC_OscConfig+0x534>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	23a0      	movs	r3, #160	; 0xa0
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	429a      	cmp	r2, r3
 8003964:	d10e      	bne.n	8003984 <HAL_RCC_OscConfig+0x51c>
 8003966:	4b62      	ldr	r3, [pc, #392]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800396a:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	00c9      	lsls	r1, r1, #3
 8003970:	430a      	orrs	r2, r1
 8003972:	651a      	str	r2, [r3, #80]	; 0x50
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003978:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	0049      	lsls	r1, r1, #1
 800397e:	430a      	orrs	r2, r1
 8003980:	651a      	str	r2, [r3, #80]	; 0x50
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0x534>
 8003984:	4b5a      	ldr	r3, [pc, #360]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003988:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 800398a:	495b      	ldr	r1, [pc, #364]	; (8003af8 <HAL_RCC_OscConfig+0x690>)
 800398c:	400a      	ands	r2, r1
 800398e:	651a      	str	r2, [r3, #80]	; 0x50
 8003990:	4b57      	ldr	r3, [pc, #348]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003996:	495a      	ldr	r1, [pc, #360]	; (8003b00 <HAL_RCC_OscConfig+0x698>)
 8003998:	400a      	ands	r2, r1
 800399a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fe fe32 	bl	800260c <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ac:	e009      	b.n	80039c2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fe fe2d 	bl	800260c <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	4a52      	ldr	r2, [pc, #328]	; (8003b04 <HAL_RCC_OscConfig+0x69c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e11b      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c2:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80039c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4013      	ands	r3, r2
 80039cc:	d0ef      	beq.n	80039ae <HAL_RCC_OscConfig+0x546>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7fe fe1c 	bl	800260c <HAL_GetTick>
 80039d4:	0003      	movs	r3, r0
 80039d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039d8:	e009      	b.n	80039ee <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe fe17 	bl	800260c <HAL_GetTick>
 80039de:	0002      	movs	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	4a47      	ldr	r2, [pc, #284]	; (8003b04 <HAL_RCC_OscConfig+0x69c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e105      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ee:	4b40      	ldr	r3, [pc, #256]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 80039f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4013      	ands	r3, r2
 80039f8:	d1ef      	bne.n	80039da <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039fa:	2323      	movs	r3, #35	; 0x23
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a08:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a0a:	493f      	ldr	r1, [pc, #252]	; (8003b08 <HAL_RCC_OscConfig+0x6a0>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2220      	movs	r2, #32
 8003a16:	4013      	ands	r3, r2
 8003a18:	d049      	beq.n	8003aae <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d026      	beq.n	8003a70 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a22:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a34:	2101      	movs	r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x6a4>)
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x6a4>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0189      	lsls	r1, r1, #6
 8003a44:	430a      	orrs	r2, r1
 8003a46:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fde0 	bl	800260c <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a52:	f7fe fddb 	bl	800260c <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0ca      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d0f1      	beq.n	8003a52 <HAL_RCC_OscConfig+0x5ea>
 8003a6e:	e01e      	b.n	8003aae <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003a76:	2101      	movs	r1, #1
 8003a78:	438a      	bics	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_RCC_OscConfig+0x6a4>)
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_RCC_OscConfig+0x6a4>)
 8003a82:	4923      	ldr	r1, [pc, #140]	; (8003b10 <HAL_RCC_OscConfig+0x6a8>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe fdc0 	bl	800260c <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a92:	f7fe fdbb 	bl	800260c <HAL_GetTick>
 8003a96:	0002      	movs	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0aa      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aa4:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d1f1      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d100      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x650>
 8003ab6:	e09f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d100      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x658>
 8003abe:	e078      	b.n	8003bb2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d159      	bne.n	8003b7c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_RCC_OscConfig+0x688>)
 8003ace:	4911      	ldr	r1, [pc, #68]	; (8003b14 <HAL_RCC_OscConfig+0x6ac>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fd9a 	bl	800260c <HAL_GetTick>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003adc:	e01c      	b.n	8003b18 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fd95 	bl	800260c <HAL_GetTick>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d915      	bls.n	8003b18 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e084      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
 8003af0:	40021000 	.word	0x40021000
 8003af4:	ffff1fff 	.word	0xffff1fff
 8003af8:	fffffeff 	.word	0xfffffeff
 8003afc:	40007000 	.word	0x40007000
 8003b00:	fffffbff 	.word	0xfffffbff
 8003b04:	00001388 	.word	0x00001388
 8003b08:	efffffff 	.word	0xefffffff
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	ffffdfff 	.word	0xffffdfff
 8003b14:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	049b      	lsls	r3, r3, #18
 8003b20:	4013      	ands	r3, r2
 8003b22:	d1dc      	bne.n	8003ade <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b24:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a37      	ldr	r2, [pc, #220]	; (8003c08 <HAL_RCC_OscConfig+0x7a0>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b40:	430a      	orrs	r2, r1
 8003b42:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	0449      	lsls	r1, r1, #17
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe fd5b 	bl	800260c <HAL_GetTick>
 8003b56:	0003      	movs	r3, r0
 8003b58:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe fd56 	bl	800260c <HAL_GetTick>
 8003b60:	0002      	movs	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e045      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	049b      	lsls	r3, r3, #18
 8003b76:	4013      	ands	r3, r2
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x6f4>
 8003b7a:	e03d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003b82:	4922      	ldr	r1, [pc, #136]	; (8003c0c <HAL_RCC_OscConfig+0x7a4>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fe fd40 	bl	800260c <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fe fd3b 	bl	800260c <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e02a      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	049b      	lsls	r3, r3, #18
 8003bac:	4013      	ands	r3, r2
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x72a>
 8003bb0:	e022      	b.n	8003bf8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01d      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x79c>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	025b      	lsls	r3, r3, #9
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	23f0      	movs	r3, #240	; 0xf0
 8003bd8:	039b      	lsls	r3, r3, #14
 8003bda:	401a      	ands	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	23c0      	movs	r3, #192	; 0xc0
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	401a      	ands	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b00a      	add	sp, #40	; 0x28
 8003c00:	bdb0      	pop	{r4, r5, r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	40021000 	.word	0x40021000
 8003c08:	ff02ffff 	.word	0xff02ffff
 8003c0c:	feffffff 	.word	0xfeffffff

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e128      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b96      	ldr	r3, [pc, #600]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d91e      	bls.n	8003c70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b93      	ldr	r3, [pc, #588]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	4393      	bics	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	4b90      	ldr	r3, [pc, #576]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c44:	f7fe fce2 	bl	800260c <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4c:	e009      	b.n	8003c62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4e:	f7fe fcdd 	bl	800260c <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	4a8a      	ldr	r2, [pc, #552]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e109      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b87      	ldr	r3, [pc, #540]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	4013      	ands	r3, r2
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1ee      	bne.n	8003c4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2202      	movs	r2, #2
 8003c76:	4013      	ands	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7a:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	22f0      	movs	r2, #240	; 0xf0
 8003c80:	4393      	bics	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4013      	ands	r3, r2
 8003c96:	d100      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x8a>
 8003c98:	e089      	b.n	8003dae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ca2:	4b79      	ldr	r3, [pc, #484]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	029b      	lsls	r3, r3, #10
 8003caa:	4013      	ands	r3, r2
 8003cac:	d120      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0e1      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cba:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	049b      	lsls	r3, r3, #18
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d114      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0d5      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d109      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0ca      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce0:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0c2      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf0:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fc82 	bl	800260c <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d111      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d14:	e009      	b.n	8003d2a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d16:	f7fe fc79 	bl	800260c <HAL_GetTick>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0a5      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	220c      	movs	r2, #12
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d1ef      	bne.n	8003d16 <HAL_RCC_ClockConfig+0x106>
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d42:	f7fe fc63 	bl	800260c <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	4a4d      	ldr	r2, [pc, #308]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e08f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d56:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_ClockConfig+0x132>
 8003d62:	e024      	b.n	8003dae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d11b      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6c:	e009      	b.n	8003d82 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6e:	f7fe fc4d 	bl	800260c <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e079      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d82:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	220c      	movs	r2, #12
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d1ef      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x15e>
 8003d8e:	e00e      	b.n	8003dae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe fc3c 	bl	800260c <HAL_GetTick>
 8003d94:	0002      	movs	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e068      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003da4:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	220c      	movs	r2, #12
 8003daa:	4013      	ands	r3, r2
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2201      	movs	r2, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d21e      	bcs.n	8003dfa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbc:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4393      	bics	r3, r2
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dce:	f7fe fc1d 	bl	800260c <HAL_GetTick>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	e009      	b.n	8003dec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fe fc18 	bl	800260c <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e044      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d1ee      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	4013      	ands	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <HAL_RCC_ClockConfig+0x27c>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <HAL_RCC_ClockConfig+0x280>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	00da      	lsls	r2, r3, #3
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e38:	f000 f832 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e3c:	0001      	movs	r1, r0
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <HAL_RCC_ClockConfig+0x278>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	220f      	movs	r2, #15
 8003e46:	4013      	ands	r3, r2
 8003e48:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <HAL_RCC_ClockConfig+0x284>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	000a      	movs	r2, r1
 8003e4e:	40da      	lsrs	r2, r3
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_RCC_ClockConfig+0x288>)
 8003e52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <HAL_RCC_ClockConfig+0x28c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	250b      	movs	r5, #11
 8003e5a:	197c      	adds	r4, r7, r5
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fe fb8f 	bl	8002580 <HAL_InitTick>
 8003e62:	0003      	movs	r3, r0
 8003e64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003e66:	197b      	adds	r3, r7, r5
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003e6e:	197b      	adds	r3, r7, r5
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40022000 	.word	0x40022000
 8003e84:	00001388 	.word	0x00001388
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	fffff8ff 	.word	0xfffff8ff
 8003e90:	ffffc7ff 	.word	0xffffc7ff
 8003e94:	08005aa0 	.word	0x08005aa0
 8003e98:	20000264 	.word	0x20000264
 8003e9c:	20000268 	.word	0x20000268

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b08e      	sub	sp, #56	; 0x38
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003ea6:	4b4c      	ldr	r3, [pc, #304]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eae:	230c      	movs	r3, #12
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d014      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb6:	d900      	bls.n	8003eba <HAL_RCC_GetSysClockFreq+0x1a>
 8003eb8:	e07b      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x112>
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d002      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x24>
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d00b      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x3a>
 8003ec2:	e076      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ec4:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d002      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ed2:	e07c      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003ed6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ed8:	e079      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eda:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ede:	e076      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee2:	0c9a      	lsrs	r2, r3, #18
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x148>)
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	0d9a      	lsrs	r2, r3, #22
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	025b      	lsls	r3, r3, #9
 8003f02:	4013      	ands	r3, r2
 8003f04:	d01a      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	69b8      	ldr	r0, [r7, #24]
 8003f14:	69f9      	ldr	r1, [r7, #28]
 8003f16:	f7fc fac7 	bl	80004a8 <__aeabi_lmul>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	000b      	movs	r3, r1
 8003f1e:	0010      	movs	r0, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f7fc fa9b 	bl	8000468 <__aeabi_uldivmod>
 8003f32:	0002      	movs	r2, r0
 8003f34:	000b      	movs	r3, r1
 8003f36:	0013      	movs	r3, r2
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3a:	e037      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2210      	movs	r2, #16
 8003f42:	4013      	ands	r3, r2
 8003f44:	d01a      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f50:	2300      	movs	r3, #0
 8003f52:	68b8      	ldr	r0, [r7, #8]
 8003f54:	68f9      	ldr	r1, [r7, #12]
 8003f56:	f7fc faa7 	bl	80004a8 <__aeabi_lmul>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	000b      	movs	r3, r1
 8003f5e:	0010      	movs	r0, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f7fc fa7b 	bl	8000468 <__aeabi_uldivmod>
 8003f72:	0002      	movs	r2, r0
 8003f74:	000b      	movs	r3, r1
 8003f76:	0013      	movs	r3, r2
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7a:	e017      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	0018      	movs	r0, r3
 8003f80:	2300      	movs	r3, #0
 8003f82:	0019      	movs	r1, r3
 8003f84:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003f86:	2300      	movs	r3, #0
 8003f88:	f7fc fa8e 	bl	80004a8 <__aeabi_lmul>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	000b      	movs	r3, r1
 8003f90:	0010      	movs	r0, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	001c      	movs	r4, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	001d      	movs	r5, r3
 8003f9c:	0022      	movs	r2, r4
 8003f9e:	002b      	movs	r3, r5
 8003fa0:	f7fc fa62 	bl	8000468 <__aeabi_uldivmod>
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	000b      	movs	r3, r1
 8003fa8:	0013      	movs	r3, r2
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fb0:	e00d      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	0b5b      	lsrs	r3, r3, #13
 8003fb8:	2207      	movs	r2, #7
 8003fba:	4013      	ands	r3, r2
 8003fbc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	0212      	lsls	r2, r2, #8
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	0013      	movs	r3, r2
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fcc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b00e      	add	sp, #56	; 0x38
 8003fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	003d0900 	.word	0x003d0900
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200
 8003fe8:	08005ab8 	.word	0x08005ab8

08003fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff0:	4b02      	ldr	r3, [pc, #8]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	20000264 	.word	0x20000264

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004004:	f7ff fff2 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004008:	0001      	movs	r1, r0
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	2207      	movs	r2, #7
 8004012:	4013      	ands	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004016:	5cd3      	ldrb	r3, [r2, r3]
 8004018:	40d9      	lsrs	r1, r3
 800401a:	000b      	movs	r3, r1
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	40021000 	.word	0x40021000
 8004028:	08005ab0 	.word	0x08005ab0

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004030:	f7ff ffdc 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004034:	0001      	movs	r1, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	0adb      	lsrs	r3, r3, #11
 800403c:	2207      	movs	r2, #7
 800403e:	4013      	ands	r3, r2
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	40d9      	lsrs	r1, r3
 8004046:	000b      	movs	r3, r1
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	40021000 	.word	0x40021000
 8004054:	08005ab0 	.word	0x08005ab0

08004058 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004060:	2317      	movs	r3, #23
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2220      	movs	r2, #32
 800406e:	4013      	ands	r3, r2
 8004070:	d106      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4013      	ands	r3, r2
 800407c:	d100      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800407e:	e104      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004080:	4bb9      	ldr	r3, [pc, #740]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	055b      	lsls	r3, r3, #21
 8004088:	4013      	ands	r3, r2
 800408a:	d10a      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408c:	4bb6      	ldr	r3, [pc, #728]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800408e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004090:	4bb5      	ldr	r3, [pc, #724]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	0549      	lsls	r1, r1, #21
 8004096:	430a      	orrs	r2, r1
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800409a:	2317      	movs	r3, #23
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4bb2      	ldr	r3, [pc, #712]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	d11a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4baf      	ldr	r3, [pc, #700]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4bae      	ldr	r3, [pc, #696]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0049      	lsls	r1, r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040bc:	f7fe faa6 	bl	800260c <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	e008      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c6:	f7fe faa1 	bl	800260c <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	; 0x64
 80040d2:	d901      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e143      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	4ba4      	ldr	r3, [pc, #656]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80040e4:	4ba0      	ldr	r3, [pc, #640]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	23c0      	movs	r3, #192	; 0xc0
 80040ea:	039b      	lsls	r3, r3, #14
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	23c0      	movs	r3, #192	; 0xc0
 80040f6:	039b      	lsls	r3, r3, #14
 80040f8:	4013      	ands	r3, r2
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	23c0      	movs	r3, #192	; 0xc0
 8004106:	039b      	lsls	r3, r3, #14
 8004108:	4013      	ands	r3, r2
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	429a      	cmp	r2, r3
 800410e:	d013      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	23c0      	movs	r3, #192	; 0xc0
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	401a      	ands	r2, r3
 800411a:	23c0      	movs	r3, #192	; 0xc0
 800411c:	029b      	lsls	r3, r3, #10
 800411e:	429a      	cmp	r2, r3
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004122:	4b91      	ldr	r3, [pc, #580]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	029b      	lsls	r3, r3, #10
 800412a:	401a      	ands	r2, r3
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	429a      	cmp	r2, r3
 8004132:	d101      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e113      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004138:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800413a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800413c:	23c0      	movs	r3, #192	; 0xc0
 800413e:	029b      	lsls	r3, r3, #10
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d049      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x186>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	23c0      	movs	r3, #192	; 0xc0
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	4013      	ands	r3, r2
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	429a      	cmp	r2, r3
 8004158:	d004      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2220      	movs	r2, #32
 8004160:	4013      	ands	r3, r2
 8004162:	d10d      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	23c0      	movs	r3, #192	; 0xc0
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	4013      	ands	r3, r2
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d034      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4013      	ands	r3, r2
 800417e:	d02e      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004180:	4b79      	ldr	r3, [pc, #484]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	4a7a      	ldr	r2, [pc, #488]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418a:	4b77      	ldr	r3, [pc, #476]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800418c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800418e:	4b76      	ldr	r3, [pc, #472]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0309      	lsls	r1, r1, #12
 8004194:	430a      	orrs	r2, r1
 8004196:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004198:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800419a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800419c:	4b72      	ldr	r3, [pc, #456]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800419e:	4975      	ldr	r1, [pc, #468]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80041a4:	4b70      	ldr	r3, [pc, #448]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4013      	ands	r3, r2
 80041b2:	d014      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fe fa2a 	bl	800260c <HAL_GetTick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041bc:	e009      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fe fa25 	bl	800260c <HAL_GetTick>
 80041c2:	0002      	movs	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	4a6b      	ldr	r2, [pc, #428]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0c6      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d2:	4b65      	ldr	r3, [pc, #404]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	d0ef      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	4013      	ands	r3, r2
 80041e8:	d01f      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	23c0      	movs	r3, #192	; 0xc0
 80041f0:	029b      	lsls	r3, r3, #10
 80041f2:	401a      	ands	r2, r3
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d10c      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80041fc:	4b5a      	ldr	r3, [pc, #360]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	23c0      	movs	r3, #192	; 0xc0
 800420c:	039b      	lsls	r3, r3, #14
 800420e:	401a      	ands	r2, r3
 8004210:	4b55      	ldr	r3, [pc, #340]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4b54      	ldr	r3, [pc, #336]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004218:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	23c0      	movs	r3, #192	; 0xc0
 8004220:	029b      	lsls	r3, r3, #10
 8004222:	401a      	ands	r2, r3
 8004224:	4b50      	ldr	r3, [pc, #320]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004226:	430a      	orrs	r2, r1
 8004228:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2220      	movs	r2, #32
 8004230:	4013      	ands	r3, r2
 8004232:	d01f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	23c0      	movs	r3, #192	; 0xc0
 800423a:	029b      	lsls	r3, r3, #10
 800423c:	401a      	ands	r2, r3
 800423e:	23c0      	movs	r3, #192	; 0xc0
 8004240:	029b      	lsls	r3, r3, #10
 8004242:	429a      	cmp	r2, r3
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004246:	4b48      	ldr	r3, [pc, #288]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4c      	ldr	r2, [pc, #304]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800424c:	4013      	ands	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	23c0      	movs	r3, #192	; 0xc0
 8004256:	039b      	lsls	r3, r3, #14
 8004258:	401a      	ands	r2, r3
 800425a:	4b43      	ldr	r3, [pc, #268]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004262:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	23c0      	movs	r3, #192	; 0xc0
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	401a      	ands	r2, r3
 800426e:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004270:	430a      	orrs	r2, r1
 8004272:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004274:	2317      	movs	r3, #23
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	4b39      	ldr	r3, [pc, #228]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004284:	493e      	ldr	r1, [pc, #248]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004286:	400a      	ands	r2, r1
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	4013      	ands	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004298:	2203      	movs	r2, #3
 800429a:	4393      	bics	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042a4:	430a      	orrs	r2, r1
 80042a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2202      	movs	r2, #2
 80042ae:	4013      	ands	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042b2:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	220c      	movs	r2, #12
 80042b8:	4393      	bics	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042c2:	430a      	orrs	r2, r1
 80042c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2204      	movs	r2, #4
 80042cc:	4013      	ands	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042d0:	4b25      	ldr	r3, [pc, #148]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	4b22      	ldr	r3, [pc, #136]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042e0:	430a      	orrs	r2, r1
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2208      	movs	r2, #8
 80042ea:	4013      	ands	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ee:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	4a25      	ldr	r2, [pc, #148]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042fe:	430a      	orrs	r2, r1
 8004300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4013      	ands	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800431e:	430a      	orrs	r2, r1
 8004320:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2240      	movs	r2, #64	; 0x40
 8004328:	4013      	ands	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800432e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800433c:	430a      	orrs	r2, r1
 800433e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	4013      	ands	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	4a10      	ldr	r2, [pc, #64]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004350:	4013      	ands	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1a      	ldr	r2, [r3, #32]
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800435a:	430a      	orrs	r2, r1
 800435c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b006      	add	sp, #24
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	40007000 	.word	0x40007000
 8004370:	fffcffff 	.word	0xfffcffff
 8004374:	fff7ffff 	.word	0xfff7ffff
 8004378:	00001388 	.word	0x00001388
 800437c:	ffcfffff 	.word	0xffcfffff
 8004380:	efffffff 	.word	0xefffffff
 8004384:	fffff3ff 	.word	0xfffff3ff
 8004388:	ffffcfff 	.word	0xffffcfff
 800438c:	fbffffff 	.word	0xfbffffff
 8004390:	fff3ffff 	.word	0xfff3ffff

08004394 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800439c:	230f      	movs	r3, #15
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e088      	b.n	80044c0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2221      	movs	r2, #33	; 0x21
 80043b2:	5c9b      	ldrb	r3, [r3, r2]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fe f85b 	bl	8002480 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2221      	movs	r2, #33	; 0x21
 80043ce:	2102      	movs	r1, #2
 80043d0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2210      	movs	r2, #16
 80043da:	4013      	ands	r3, r2
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d05f      	beq.n	80044a0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	22ca      	movs	r2, #202	; 0xca
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2253      	movs	r2, #83	; 0x53
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043f0:	250f      	movs	r5, #15
 80043f2:	197c      	adds	r4, r7, r5
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 f9ce 	bl	8004798 <RTC_EnterInitMode>
 80043fc:	0003      	movs	r3, r0
 80043fe:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004400:	0028      	movs	r0, r5
 8004402:	183b      	adds	r3, r7, r0
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d12c      	bne.n	8004464 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	492c      	ldr	r1, [pc, #176]	; (80044c8 <HAL_RTC_Init+0x134>)
 8004416:	400a      	ands	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68d2      	ldr	r2, [r2, #12]
 8004440:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6919      	ldr	r1, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004456:	183c      	adds	r4, r7, r0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f9e0 	bl	8004820 <RTC_ExitInitMode>
 8004460:	0003      	movs	r3, r0
 8004462:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004464:	230f      	movs	r3, #15
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2103      	movs	r1, #3
 800447a:	438a      	bics	r2, r1
 800447c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	22ff      	movs	r2, #255	; 0xff
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
 800449e:	e003      	b.n	80044a8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80044a0:	230f      	movs	r3, #15
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80044ba:	230f      	movs	r3, #15
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	781b      	ldrb	r3, [r3, #0]
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b004      	add	sp, #16
 80044c6:	bdb0      	pop	{r4, r5, r7, pc}
 80044c8:	ff8fffbf 	.word	0xff8fffbf

080044cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	5c9b      	ldrb	r3, [r3, r2]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_RTC_SetTime+0x1e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e092      	b.n	8004610 <HAL_RTC_SetTime+0x144>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2221      	movs	r2, #33	; 0x21
 80044f6:	2102      	movs	r1, #2
 80044f8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d125      	bne.n	800454c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2240      	movs	r2, #64	; 0x40
 8004508:	4013      	ands	r3, r2
 800450a:	d102      	bne.n	8004512 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2200      	movs	r2, #0
 8004510:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 f9ac 	bl	8004874 <RTC_ByteToBcd2>
 800451c:	0003      	movs	r3, r0
 800451e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f9a5 	bl	8004874 <RTC_ByteToBcd2>
 800452a:	0003      	movs	r3, r0
 800452c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800452e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	789b      	ldrb	r3, [r3, #2]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f99d 	bl	8004874 <RTC_ByteToBcd2>
 800453a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800453c:	0022      	movs	r2, r4
 800453e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	78db      	ldrb	r3, [r3, #3]
 8004544:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e017      	b.n	800457c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	4013      	ands	r3, r2
 8004556:	d102      	bne.n	800455e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800456a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004570:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	22ca      	movs	r2, #202	; 0xca
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2253      	movs	r2, #83	; 0x53
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800458c:	2513      	movs	r5, #19
 800458e:	197c      	adds	r4, r7, r5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f900 	bl	8004798 <RTC_EnterInitMode>
 8004598:	0003      	movs	r3, r0
 800459a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800459c:	0028      	movs	r0, r5
 800459e:	183b      	adds	r3, r7, r0
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d120      	bne.n	80045e8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	491a      	ldr	r1, [pc, #104]	; (8004618 <HAL_RTC_SetTime+0x14c>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4917      	ldr	r1, [pc, #92]	; (800461c <HAL_RTC_SetTime+0x150>)
 80045be:	400a      	ands	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045da:	183c      	adds	r4, r7, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	0018      	movs	r0, r3
 80045e0:	f000 f91e 	bl	8004820 <RTC_ExitInitMode>
 80045e4:	0003      	movs	r3, r0
 80045e6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80045e8:	2313      	movs	r3, #19
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2221      	movs	r2, #33	; 0x21
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	2100      	movs	r1, #0
 8004608:	5499      	strb	r1, [r3, r2]

  return status;
 800460a:	2313      	movs	r3, #19
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b006      	add	sp, #24
 8004616:	bdb0      	pop	{r4, r5, r7, pc}
 8004618:	007f7f7f 	.word	0x007f7f7f
 800461c:	fffbffff 	.word	0xfffbffff

08004620 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	5c9b      	ldrb	r3, [r3, r2]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_RTC_SetDate+0x1e>
 800463a:	2302      	movs	r3, #2
 800463c:	e07e      	b.n	800473c <HAL_RTC_SetDate+0x11c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2221      	movs	r2, #33	; 0x21
 800464a:	2102      	movs	r1, #2
 800464c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10e      	bne.n	8004672 <HAL_RTC_SetDate+0x52>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	001a      	movs	r2, r3
 800465a:	2310      	movs	r3, #16
 800465c:	4013      	ands	r3, r2
 800465e:	d008      	beq.n	8004672 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2210      	movs	r2, #16
 8004666:	4393      	bics	r3, r2
 8004668:	b2db      	uxtb	r3, r3
 800466a:	330a      	adds	r3, #10
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11c      	bne.n	80046b2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	78db      	ldrb	r3, [r3, #3]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f8f9 	bl	8004874 <RTC_ByteToBcd2>
 8004682:	0003      	movs	r3, r0
 8004684:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	785b      	ldrb	r3, [r3, #1]
 800468a:	0018      	movs	r0, r3
 800468c:	f000 f8f2 	bl	8004874 <RTC_ByteToBcd2>
 8004690:	0003      	movs	r3, r0
 8004692:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004694:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	789b      	ldrb	r3, [r3, #2]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 f8ea 	bl	8004874 <RTC_ByteToBcd2>
 80046a0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046a2:	0022      	movs	r2, r4
 80046a4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e00e      	b.n	80046d0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	78db      	ldrb	r3, [r3, #3]
 80046b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046be:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	22ca      	movs	r2, #202	; 0xca
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2253      	movs	r2, #83	; 0x53
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046e0:	2513      	movs	r5, #19
 80046e2:	197c      	adds	r4, r7, r5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 f856 	bl	8004798 <RTC_EnterInitMode>
 80046ec:	0003      	movs	r3, r0
 80046ee:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80046f0:	0028      	movs	r0, r5
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4910      	ldr	r1, [pc, #64]	; (8004744 <HAL_RTC_SetDate+0x124>)
 8004702:	400a      	ands	r2, r1
 8004704:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004706:	183c      	adds	r4, r7, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 f888 	bl	8004820 <RTC_ExitInitMode>
 8004710:	0003      	movs	r3, r0
 8004712:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004714:	2313      	movs	r3, #19
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2221      	movs	r2, #33	; 0x21
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	22ff      	movs	r2, #255	; 0xff
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

  return status;
 8004736:	2313      	movs	r3, #19
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	781b      	ldrb	r3, [r3, #0]
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b006      	add	sp, #24
 8004742:	bdb0      	pop	{r4, r5, r7, pc}
 8004744:	00ffff3f 	.word	0x00ffff3f

08004748 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_RTC_WaitForSynchro+0x4c>)
 800475a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800475c:	f7fd ff56 	bl	800260c <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004764:	e00a      	b.n	800477c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004766:	f7fd ff51 	bl	800260c <HAL_GetTick>
 800476a:	0002      	movs	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	23fa      	movs	r3, #250	; 0xfa
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	429a      	cmp	r2, r3
 8004776:	d901      	bls.n	800477c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e006      	b.n	800478a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	4013      	ands	r3, r2
 8004786:	d0ee      	beq.n	8004766 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b004      	add	sp, #16
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	0001ff5f 	.word	0x0001ff5f

08004798 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	230f      	movs	r3, #15
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2240      	movs	r2, #64	; 0x40
 80047b4:	4013      	ands	r3, r2
 80047b6:	d12c      	bne.n	8004812 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2180      	movs	r1, #128	; 0x80
 80047c4:	430a      	orrs	r2, r1
 80047c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047c8:	f7fd ff20 	bl	800260c <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047d0:	e014      	b.n	80047fc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047d2:	f7fd ff1b 	bl	800260c <HAL_GetTick>
 80047d6:	0002      	movs	r2, r0
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	200f      	movs	r0, #15
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	1839      	adds	r1, r7, r0
 80047e2:	7809      	ldrb	r1, [r1, #0]
 80047e4:	7019      	strb	r1, [r3, #0]
 80047e6:	23fa      	movs	r3, #250	; 0xfa
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d906      	bls.n	80047fc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2221      	movs	r2, #33	; 0x21
 80047f2:	2104      	movs	r1, #4
 80047f4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	4013      	ands	r3, r2
 8004806:	d104      	bne.n	8004812 <RTC_EnterInitMode+0x7a>
 8004808:	230f      	movs	r3, #15
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d1df      	bne.n	80047d2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004812:	230f      	movs	r3, #15
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b004      	add	sp, #16
 800481e:	bd80      	pop	{r7, pc}

08004820 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004828:	240f      	movs	r4, #15
 800482a:	193b      	adds	r3, r7, r4
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	438a      	bics	r2, r1
 800483e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2220      	movs	r2, #32
 8004848:	4013      	ands	r3, r2
 800484a:	d10c      	bne.n	8004866 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f7ff ff7a 	bl	8004748 <HAL_RTC_WaitForSynchro>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d006      	beq.n	8004866 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2221      	movs	r2, #33	; 0x21
 800485c:	2104      	movs	r1, #4
 800485e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004860:	193b      	adds	r3, r7, r4
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004866:	230f      	movs	r3, #15
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	781b      	ldrb	r3, [r3, #0]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b005      	add	sp, #20
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	0002      	movs	r2, r0
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004884:	e007      	b.n	8004896 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800488c:	1dfb      	adds	r3, r7, #7
 800488e:	1dfa      	adds	r2, r7, #7
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	3a0a      	subs	r2, #10
 8004894:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004896:	1dfb      	adds	r3, r7, #7
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b09      	cmp	r3, #9
 800489c:	d8f3      	bhi.n	8004886 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	1dfb      	adds	r3, r7, #7
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b004      	add	sp, #16
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e032      	b.n	800492e <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2239      	movs	r2, #57	; 0x39
 80048cc:	5c9b      	ldrb	r3, [r3, r2]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2238      	movs	r2, #56	; 0x38
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	0018      	movs	r0, r3
 80048e0:	f7fd fde6 	bl	80024b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2239      	movs	r2, #57	; 0x39
 80048e8:	2102      	movs	r1, #2
 80048ea:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	0019      	movs	r1, r3
 80048f6:	0010      	movs	r0, r2
 80048f8:	f000 f8f2 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	223e      	movs	r2, #62	; 0x3e
 8004900:	2101      	movs	r1, #1
 8004902:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	223a      	movs	r2, #58	; 0x3a
 8004908:	2101      	movs	r1, #1
 800490a:	5499      	strb	r1, [r3, r2]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	223b      	movs	r2, #59	; 0x3b
 8004910:	2101      	movs	r1, #1
 8004912:	5499      	strb	r1, [r3, r2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	223c      	movs	r2, #60	; 0x3c
 8004918:	2101      	movs	r1, #1
 800491a:	5499      	strb	r1, [r3, r2]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	223d      	movs	r2, #61	; 0x3d
 8004920:	2101      	movs	r1, #1
 8004922:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2239      	movs	r2, #57	; 0x39
 8004928:	2101      	movs	r1, #1
 800492a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	230f      	movs	r3, #15
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2238      	movs	r2, #56	; 0x38
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIM_ConfigClockSource+0x20>
 8004954:	2302      	movs	r3, #2
 8004956:	e0bc      	b.n	8004ad2 <HAL_TIM_ConfigClockSource+0x19a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2238      	movs	r2, #56	; 0x38
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2239      	movs	r2, #57	; 0x39
 8004964:	2102      	movs	r1, #2
 8004966:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2277      	movs	r2, #119	; 0x77
 8004974:	4393      	bics	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a58      	ldr	r2, [pc, #352]	; (8004adc <HAL_TIM_ConfigClockSource+0x1a4>)
 800497c:	4013      	ands	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2280      	movs	r2, #128	; 0x80
 800498e:	0192      	lsls	r2, r2, #6
 8004990:	4293      	cmp	r3, r2
 8004992:	d040      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xde>
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	0192      	lsls	r2, r2, #6
 8004998:	4293      	cmp	r3, r2
 800499a:	d900      	bls.n	800499e <HAL_TIM_ConfigClockSource+0x66>
 800499c:	e088      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	0152      	lsls	r2, r2, #5
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d100      	bne.n	80049a8 <HAL_TIM_ConfigClockSource+0x70>
 80049a6:	e088      	b.n	8004aba <HAL_TIM_ConfigClockSource+0x182>
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	0152      	lsls	r2, r2, #5
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d900      	bls.n	80049b2 <HAL_TIM_ConfigClockSource+0x7a>
 80049b0:	e07e      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049b2:	2b70      	cmp	r3, #112	; 0x70
 80049b4:	d018      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0xb0>
 80049b6:	d900      	bls.n	80049ba <HAL_TIM_ConfigClockSource+0x82>
 80049b8:	e07a      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049ba:	2b60      	cmp	r3, #96	; 0x60
 80049bc:	d04f      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x126>
 80049be:	d900      	bls.n	80049c2 <HAL_TIM_ConfigClockSource+0x8a>
 80049c0:	e076      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049c2:	2b50      	cmp	r3, #80	; 0x50
 80049c4:	d03b      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x106>
 80049c6:	d900      	bls.n	80049ca <HAL_TIM_ConfigClockSource+0x92>
 80049c8:	e072      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d057      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x146>
 80049ce:	d900      	bls.n	80049d2 <HAL_TIM_ConfigClockSource+0x9a>
 80049d0:	e06e      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049d2:	2b30      	cmp	r3, #48	; 0x30
 80049d4:	d063      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x166>
 80049d6:	d86b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d060      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x166>
 80049dc:	d868      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d05d      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x166>
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d05b      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x166>
 80049e6:	e063      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049f8:	f000 f94a 	bl	8004c90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2277      	movs	r2, #119	; 0x77
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e052      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	f000 f933 	bl	8004c90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	01c9      	lsls	r1, r1, #7
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e03e      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	f000 f8a6 	bl	8004b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 f900 	bl	8004c5c <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e02e      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	f000 f8c4 	bl	8004bf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2160      	movs	r1, #96	; 0x60
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 f8f0 	bl	8004c5c <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e01e      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	f000 f886 	bl	8004b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f8e0 	bl	8004c5c <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e00e      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	0010      	movs	r0, r2
 8004aaa:	f000 f8d7 	bl	8004c5c <TIM_ITRx_SetConfig>
      break;
 8004aae:	e005      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004ab0:	230f      	movs	r3, #15
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
      break;
 8004ab8:	e000      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004aba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2239      	movs	r2, #57	; 0x39
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2238      	movs	r2, #56	; 0x38
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

  return status;
 8004acc:	230f      	movs	r3, #15
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	781b      	ldrb	r3, [r3, #0]
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	ffff00ff 	.word	0xffff00ff

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	05db      	lsls	r3, r3, #23
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0x32>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a23      	ldr	r2, [pc, #140]	; (8004b8c <TIM_Base_SetConfig+0xac>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0x32>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <TIM_Base_SetConfig+0xb0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x32>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a21      	ldr	r2, [pc, #132]	; (8004b94 <TIM_Base_SetConfig+0xb4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2270      	movs	r2, #112	; 0x70
 8004b16:	4393      	bics	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	05db      	lsls	r3, r3, #23
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d00b      	beq.n	8004b46 <TIM_Base_SetConfig+0x66>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <TIM_Base_SetConfig+0xac>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_Base_SetConfig+0x66>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <TIM_Base_SetConfig+0xb0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_Base_SetConfig+0x66>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <TIM_Base_SetConfig+0xb4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d108      	bne.n	8004b58 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <TIM_Base_SetConfig+0xb8>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	4393      	bics	r3, r2
 8004b5e:	001a      	movs	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	615a      	str	r2, [r3, #20]
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40010800 	.word	0x40010800
 8004b94:	40011400 	.word	0x40011400
 8004b98:	fffffcff 	.word	0xfffffcff

08004b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4393      	bics	r3, r2
 8004bb6:	001a      	movs	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	22f0      	movs	r2, #240	; 0xf0
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	220a      	movs	r2, #10
 8004bd8:	4393      	bics	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b006      	add	sp, #24
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	4393      	bics	r3, r2
 8004c0c:	001a      	movs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <TIM_TI2_ConfigInputStage+0x60>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	22a0      	movs	r2, #160	; 0xa0
 8004c34:	4393      	bics	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b006      	add	sp, #24
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	ffff0fff 	.word	0xffff0fff

08004c5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2270      	movs	r2, #112	; 0x70
 8004c70:	4393      	bics	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	609a      	str	r2, [r3, #8]
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b004      	add	sp, #16
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <TIM_ETR_SetConfig+0x3c>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b006      	add	sp, #24
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	ffff00ff 	.word	0xffff00ff

08004cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2238      	movs	r2, #56	; 0x38
 8004cde:	5c9b      	ldrb	r3, [r3, r2]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e047      	b.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2238      	movs	r2, #56	; 0x38
 8004cec:	2101      	movs	r1, #1
 8004cee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2239      	movs	r2, #57	; 0x39
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2270      	movs	r2, #112	; 0x70
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	05db      	lsls	r3, r3, #23
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d00e      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10c      	bne.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	4393      	bics	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2239      	movs	r2, #57	; 0x39
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2238      	movs	r2, #56	; 0x38
 8004d72:	2100      	movs	r1, #0
 8004d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40010800 	.word	0x40010800
 8004d88:	40011400 	.word	0x40011400

08004d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e044      	b.n	8004e28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d107      	bne.n	8004db6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2278      	movs	r2, #120	; 0x78
 8004daa:	2100      	movs	r1, #0
 8004dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fd faef 	bl	8002394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2224      	movs	r2, #36	; 0x24
 8004dba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	438a      	bics	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 f830 	bl	8004e34 <UART_SetConfig>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e024      	b.n	8004e28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 fac1 	bl	8005370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	490d      	ldr	r1, [pc, #52]	; (8004e30 <HAL_UART_Init+0xa4>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	212a      	movs	r1, #42	; 0x2a
 8004e0a:	438a      	bics	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fb59 	bl	80054d8 <UART_CheckIdleState>
 8004e26:	0003      	movs	r3, r0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	ffffb7ff 	.word	0xffffb7ff

08004e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e34:	b5b0      	push	{r4, r5, r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3c:	231a      	movs	r3, #26
 8004e3e:	2218      	movs	r2, #24
 8004e40:	189b      	adds	r3, r3, r2
 8004e42:	19db      	adds	r3, r3, r7
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4ac3      	ldr	r2, [pc, #780]	; (8005174 <UART_SetConfig+0x340>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4abe      	ldr	r2, [pc, #760]	; (8005178 <UART_SetConfig+0x344>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4ab8      	ldr	r2, [pc, #736]	; (800517c <UART_SetConfig+0x348>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4ab4      	ldr	r2, [pc, #720]	; (8005180 <UART_SetConfig+0x34c>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4ab0      	ldr	r2, [pc, #704]	; (8005184 <UART_SetConfig+0x350>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d131      	bne.n	8004f2c <UART_SetConfig+0xf8>
 8004ec8:	4baf      	ldr	r3, [pc, #700]	; (8005188 <UART_SetConfig+0x354>)
 8004eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ecc:	2203      	movs	r2, #3
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d01d      	beq.n	8004f10 <UART_SetConfig+0xdc>
 8004ed4:	d823      	bhi.n	8004f1e <UART_SetConfig+0xea>
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d00c      	beq.n	8004ef4 <UART_SetConfig+0xc0>
 8004eda:	d820      	bhi.n	8004f1e <UART_SetConfig+0xea>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <UART_SetConfig+0xb2>
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d00e      	beq.n	8004f02 <UART_SetConfig+0xce>
 8004ee4:	e01b      	b.n	8004f1e <UART_SetConfig+0xea>
 8004ee6:	231b      	movs	r3, #27
 8004ee8:	2218      	movs	r2, #24
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	19db      	adds	r3, r3, r7
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e0b4      	b.n	800505e <UART_SetConfig+0x22a>
 8004ef4:	231b      	movs	r3, #27
 8004ef6:	2218      	movs	r2, #24
 8004ef8:	189b      	adds	r3, r3, r2
 8004efa:	19db      	adds	r3, r3, r7
 8004efc:	2202      	movs	r2, #2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e0ad      	b.n	800505e <UART_SetConfig+0x22a>
 8004f02:	231b      	movs	r3, #27
 8004f04:	2218      	movs	r2, #24
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	19db      	adds	r3, r3, r7
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e0a6      	b.n	800505e <UART_SetConfig+0x22a>
 8004f10:	231b      	movs	r3, #27
 8004f12:	2218      	movs	r2, #24
 8004f14:	189b      	adds	r3, r3, r2
 8004f16:	19db      	adds	r3, r3, r7
 8004f18:	2208      	movs	r2, #8
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e09f      	b.n	800505e <UART_SetConfig+0x22a>
 8004f1e:	231b      	movs	r3, #27
 8004f20:	2218      	movs	r2, #24
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	19db      	adds	r3, r3, r7
 8004f26:	2210      	movs	r2, #16
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e098      	b.n	800505e <UART_SetConfig+0x22a>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a96      	ldr	r2, [pc, #600]	; (800518c <UART_SetConfig+0x358>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d131      	bne.n	8004f9a <UART_SetConfig+0x166>
 8004f36:	4b94      	ldr	r3, [pc, #592]	; (8005188 <UART_SetConfig+0x354>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	220c      	movs	r2, #12
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d01d      	beq.n	8004f7e <UART_SetConfig+0x14a>
 8004f42:	d823      	bhi.n	8004f8c <UART_SetConfig+0x158>
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d00c      	beq.n	8004f62 <UART_SetConfig+0x12e>
 8004f48:	d820      	bhi.n	8004f8c <UART_SetConfig+0x158>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <UART_SetConfig+0x120>
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00e      	beq.n	8004f70 <UART_SetConfig+0x13c>
 8004f52:	e01b      	b.n	8004f8c <UART_SetConfig+0x158>
 8004f54:	231b      	movs	r3, #27
 8004f56:	2218      	movs	r2, #24
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	19db      	adds	r3, r3, r7
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e07d      	b.n	800505e <UART_SetConfig+0x22a>
 8004f62:	231b      	movs	r3, #27
 8004f64:	2218      	movs	r2, #24
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	19db      	adds	r3, r3, r7
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e076      	b.n	800505e <UART_SetConfig+0x22a>
 8004f70:	231b      	movs	r3, #27
 8004f72:	2218      	movs	r2, #24
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	19db      	adds	r3, r3, r7
 8004f78:	2204      	movs	r2, #4
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e06f      	b.n	800505e <UART_SetConfig+0x22a>
 8004f7e:	231b      	movs	r3, #27
 8004f80:	2218      	movs	r2, #24
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	19db      	adds	r3, r3, r7
 8004f86:	2208      	movs	r2, #8
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e068      	b.n	800505e <UART_SetConfig+0x22a>
 8004f8c:	231b      	movs	r3, #27
 8004f8e:	2218      	movs	r2, #24
 8004f90:	189b      	adds	r3, r3, r2
 8004f92:	19db      	adds	r3, r3, r7
 8004f94:	2210      	movs	r2, #16
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e061      	b.n	800505e <UART_SetConfig+0x22a>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7c      	ldr	r2, [pc, #496]	; (8005190 <UART_SetConfig+0x35c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d106      	bne.n	8004fb2 <UART_SetConfig+0x17e>
 8004fa4:	231b      	movs	r3, #27
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	189b      	adds	r3, r3, r2
 8004faa:	19db      	adds	r3, r3, r7
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e055      	b.n	800505e <UART_SetConfig+0x22a>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a77      	ldr	r2, [pc, #476]	; (8005194 <UART_SetConfig+0x360>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d106      	bne.n	8004fca <UART_SetConfig+0x196>
 8004fbc:	231b      	movs	r3, #27
 8004fbe:	2218      	movs	r2, #24
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	19db      	adds	r3, r3, r7
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e049      	b.n	800505e <UART_SetConfig+0x22a>
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6b      	ldr	r2, [pc, #428]	; (800517c <UART_SetConfig+0x348>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d13e      	bne.n	8005052 <UART_SetConfig+0x21e>
 8004fd4:	4b6c      	ldr	r3, [pc, #432]	; (8005188 <UART_SetConfig+0x354>)
 8004fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd8:	23c0      	movs	r3, #192	; 0xc0
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	4013      	ands	r3, r2
 8004fde:	22c0      	movs	r2, #192	; 0xc0
 8004fe0:	0112      	lsls	r2, r2, #4
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d027      	beq.n	8005036 <UART_SetConfig+0x202>
 8004fe6:	22c0      	movs	r2, #192	; 0xc0
 8004fe8:	0112      	lsls	r2, r2, #4
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d82a      	bhi.n	8005044 <UART_SetConfig+0x210>
 8004fee:	2280      	movs	r2, #128	; 0x80
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d011      	beq.n	800501a <UART_SetConfig+0x1e6>
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d822      	bhi.n	8005044 <UART_SetConfig+0x210>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <UART_SetConfig+0x1d8>
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	00d2      	lsls	r2, r2, #3
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <UART_SetConfig+0x1f4>
 800500a:	e01b      	b.n	8005044 <UART_SetConfig+0x210>
 800500c:	231b      	movs	r3, #27
 800500e:	2218      	movs	r2, #24
 8005010:	189b      	adds	r3, r3, r2
 8005012:	19db      	adds	r3, r3, r7
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e021      	b.n	800505e <UART_SetConfig+0x22a>
 800501a:	231b      	movs	r3, #27
 800501c:	2218      	movs	r2, #24
 800501e:	189b      	adds	r3, r3, r2
 8005020:	19db      	adds	r3, r3, r7
 8005022:	2202      	movs	r2, #2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e01a      	b.n	800505e <UART_SetConfig+0x22a>
 8005028:	231b      	movs	r3, #27
 800502a:	2218      	movs	r2, #24
 800502c:	189b      	adds	r3, r3, r2
 800502e:	19db      	adds	r3, r3, r7
 8005030:	2204      	movs	r2, #4
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e013      	b.n	800505e <UART_SetConfig+0x22a>
 8005036:	231b      	movs	r3, #27
 8005038:	2218      	movs	r2, #24
 800503a:	189b      	adds	r3, r3, r2
 800503c:	19db      	adds	r3, r3, r7
 800503e:	2208      	movs	r2, #8
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e00c      	b.n	800505e <UART_SetConfig+0x22a>
 8005044:	231b      	movs	r3, #27
 8005046:	2218      	movs	r2, #24
 8005048:	189b      	adds	r3, r3, r2
 800504a:	19db      	adds	r3, r3, r7
 800504c:	2210      	movs	r2, #16
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	e005      	b.n	800505e <UART_SetConfig+0x22a>
 8005052:	231b      	movs	r3, #27
 8005054:	2218      	movs	r2, #24
 8005056:	189b      	adds	r3, r3, r2
 8005058:	19db      	adds	r3, r3, r7
 800505a:	2210      	movs	r2, #16
 800505c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a46      	ldr	r2, [pc, #280]	; (800517c <UART_SetConfig+0x348>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d000      	beq.n	800506a <UART_SetConfig+0x236>
 8005068:	e09a      	b.n	80051a0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800506a:	231b      	movs	r3, #27
 800506c:	2218      	movs	r2, #24
 800506e:	189b      	adds	r3, r3, r2
 8005070:	19db      	adds	r3, r3, r7
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d01d      	beq.n	80050b4 <UART_SetConfig+0x280>
 8005078:	dc20      	bgt.n	80050bc <UART_SetConfig+0x288>
 800507a:	2b04      	cmp	r3, #4
 800507c:	d015      	beq.n	80050aa <UART_SetConfig+0x276>
 800507e:	dc1d      	bgt.n	80050bc <UART_SetConfig+0x288>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <UART_SetConfig+0x256>
 8005084:	2b02      	cmp	r3, #2
 8005086:	d005      	beq.n	8005094 <UART_SetConfig+0x260>
 8005088:	e018      	b.n	80050bc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fe ffb9 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 800508e:	0003      	movs	r3, r0
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005092:	e01c      	b.n	80050ce <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005094:	4b3c      	ldr	r3, [pc, #240]	; (8005188 <UART_SetConfig+0x354>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2210      	movs	r2, #16
 800509a:	4013      	ands	r3, r2
 800509c:	d002      	beq.n	80050a4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800509e:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <UART_SetConfig+0x364>)
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050a2:	e014      	b.n	80050ce <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80050a4:	4b3d      	ldr	r3, [pc, #244]	; (800519c <UART_SetConfig+0x368>)
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a8:	e011      	b.n	80050ce <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe fef9 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80050ae:	0003      	movs	r3, r0
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050b2:	e00c      	b.n	80050ce <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ba:	e008      	b.n	80050ce <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050c0:	231a      	movs	r3, #26
 80050c2:	2218      	movs	r2, #24
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	19db      	adds	r3, r3, r7
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
        break;
 80050cc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d100      	bne.n	80050d6 <UART_SetConfig+0x2a2>
 80050d4:	e133      	b.n	800533e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	0013      	movs	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d305      	bcc.n	80050f2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d906      	bls.n	8005100 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80050f2:	231a      	movs	r3, #26
 80050f4:	2218      	movs	r2, #24
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	19db      	adds	r3, r3, r7
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e11e      	b.n	800533e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	6939      	ldr	r1, [r7, #16]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	000b      	movs	r3, r1
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	0010      	movs	r0, r2
 8005112:	0205      	lsls	r5, r0, #8
 8005114:	431d      	orrs	r5, r3
 8005116:	000b      	movs	r3, r1
 8005118:	021c      	lsls	r4, r3, #8
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68b8      	ldr	r0, [r7, #8]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	1900      	adds	r0, r0, r4
 800512c:	4169      	adcs	r1, r5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f7fb f994 	bl	8000468 <__aeabi_uldivmod>
 8005140:	0002      	movs	r2, r0
 8005142:	000b      	movs	r3, r1
 8005144:	0013      	movs	r3, r2
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514a:	23c0      	movs	r3, #192	; 0xc0
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	429a      	cmp	r2, r3
 8005150:	d309      	bcc.n	8005166 <UART_SetConfig+0x332>
 8005152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	035b      	lsls	r3, r3, #13
 8005158:	429a      	cmp	r2, r3
 800515a:	d204      	bcs.n	8005166 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e0eb      	b.n	800533e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005166:	231a      	movs	r3, #26
 8005168:	2218      	movs	r2, #24
 800516a:	189b      	adds	r3, r3, r2
 800516c:	19db      	adds	r3, r3, r7
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e0e4      	b.n	800533e <UART_SetConfig+0x50a>
 8005174:	efff69f3 	.word	0xefff69f3
 8005178:	ffffcfff 	.word	0xffffcfff
 800517c:	40004800 	.word	0x40004800
 8005180:	fffff4ff 	.word	0xfffff4ff
 8005184:	40013800 	.word	0x40013800
 8005188:	40021000 	.word	0x40021000
 800518c:	40004400 	.word	0x40004400
 8005190:	40004c00 	.word	0x40004c00
 8005194:	40005000 	.word	0x40005000
 8005198:	003d0900 	.word	0x003d0900
 800519c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d000      	beq.n	80051ae <UART_SetConfig+0x37a>
 80051ac:	e070      	b.n	8005290 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80051ae:	231b      	movs	r3, #27
 80051b0:	2218      	movs	r2, #24
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	19db      	adds	r3, r3, r7
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d822      	bhi.n	8005202 <UART_SetConfig+0x3ce>
 80051bc:	009a      	lsls	r2, r3, #2
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <UART_SetConfig+0x528>)
 80051c0:	18d3      	adds	r3, r2, r3
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c6:	f7fe ff1b 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 80051ca:	0003      	movs	r3, r0
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ce:	e021      	b.n	8005214 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d0:	f7fe ff2c 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80051d4:	0003      	movs	r3, r0
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d8:	e01c      	b.n	8005214 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051da:	4b61      	ldr	r3, [pc, #388]	; (8005360 <UART_SetConfig+0x52c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2210      	movs	r2, #16
 80051e0:	4013      	ands	r3, r2
 80051e2:	d002      	beq.n	80051ea <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051e4:	4b5f      	ldr	r3, [pc, #380]	; (8005364 <UART_SetConfig+0x530>)
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051e8:	e014      	b.n	8005214 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80051ea:	4b5f      	ldr	r3, [pc, #380]	; (8005368 <UART_SetConfig+0x534>)
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ee:	e011      	b.n	8005214 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f0:	f7fe fe56 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80051f4:	0003      	movs	r3, r0
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051f8:	e00c      	b.n	8005214 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005200:	e008      	b.n	8005214 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005206:	231a      	movs	r3, #26
 8005208:	2218      	movs	r2, #24
 800520a:	189b      	adds	r3, r3, r2
 800520c:	19db      	adds	r3, r3, r7
 800520e:	2201      	movs	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
        break;
 8005212:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d100      	bne.n	800521c <UART_SetConfig+0x3e8>
 800521a:	e090      	b.n	800533e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	005a      	lsls	r2, r3, #1
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	18d2      	adds	r2, r2, r3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	0019      	movs	r1, r3
 800522e:	0010      	movs	r0, r2
 8005230:	f7fa ff6a 	bl	8000108 <__udivsi3>
 8005234:	0003      	movs	r3, r0
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d921      	bls.n	8005282 <UART_SetConfig+0x44e>
 800523e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	025b      	lsls	r3, r3, #9
 8005244:	429a      	cmp	r2, r3
 8005246:	d21c      	bcs.n	8005282 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	b29a      	uxth	r2, r3
 800524c:	200e      	movs	r0, #14
 800524e:	2418      	movs	r4, #24
 8005250:	1903      	adds	r3, r0, r4
 8005252:	19db      	adds	r3, r3, r7
 8005254:	210f      	movs	r1, #15
 8005256:	438a      	bics	r2, r1
 8005258:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	2207      	movs	r2, #7
 8005262:	4013      	ands	r3, r2
 8005264:	b299      	uxth	r1, r3
 8005266:	1903      	adds	r3, r0, r4
 8005268:	19db      	adds	r3, r3, r7
 800526a:	1902      	adds	r2, r0, r4
 800526c:	19d2      	adds	r2, r2, r7
 800526e:	8812      	ldrh	r2, [r2, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	1902      	adds	r2, r0, r4
 800527a:	19d2      	adds	r2, r2, r7
 800527c:	8812      	ldrh	r2, [r2, #0]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e05d      	b.n	800533e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	231a      	movs	r3, #26
 8005284:	2218      	movs	r2, #24
 8005286:	189b      	adds	r3, r3, r2
 8005288:	19db      	adds	r3, r3, r7
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e056      	b.n	800533e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005290:	231b      	movs	r3, #27
 8005292:	2218      	movs	r2, #24
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d822      	bhi.n	80052e4 <UART_SetConfig+0x4b0>
 800529e:	009a      	lsls	r2, r3, #2
 80052a0:	4b32      	ldr	r3, [pc, #200]	; (800536c <UART_SetConfig+0x538>)
 80052a2:	18d3      	adds	r3, r2, r3
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fe feaa 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 80052ac:	0003      	movs	r3, r0
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b0:	e021      	b.n	80052f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b2:	f7fe febb 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80052b6:	0003      	movs	r3, r0
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ba:	e01c      	b.n	80052f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <UART_SetConfig+0x52c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2210      	movs	r2, #16
 80052c2:	4013      	ands	r3, r2
 80052c4:	d002      	beq.n	80052cc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <UART_SetConfig+0x530>)
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052ca:	e014      	b.n	80052f6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <UART_SetConfig+0x534>)
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052d0:	e011      	b.n	80052f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe fde5 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80052d6:	0003      	movs	r3, r0
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052da:	e00c      	b.n	80052f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e2:	e008      	b.n	80052f6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052e8:	231a      	movs	r3, #26
 80052ea:	2218      	movs	r2, #24
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	19db      	adds	r3, r3, r7
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
        break;
 80052f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d020      	beq.n	800533e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085a      	lsrs	r2, r3, #1
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	18d2      	adds	r2, r2, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	0019      	movs	r1, r3
 800530c:	0010      	movs	r0, r2
 800530e:	f7fa fefb 	bl	8000108 <__udivsi3>
 8005312:	0003      	movs	r3, r0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d90a      	bls.n	8005332 <UART_SetConfig+0x4fe>
 800531c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	025b      	lsls	r3, r3, #9
 8005322:	429a      	cmp	r2, r3
 8005324:	d205      	bcs.n	8005332 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	b29a      	uxth	r2, r3
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e005      	b.n	800533e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005332:	231a      	movs	r3, #26
 8005334:	2218      	movs	r2, #24
 8005336:	189b      	adds	r3, r3, r2
 8005338:	19db      	adds	r3, r3, r7
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	2200      	movs	r2, #0
 8005342:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2200      	movs	r2, #0
 8005348:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800534a:	231a      	movs	r3, #26
 800534c:	2218      	movs	r2, #24
 800534e:	189b      	adds	r3, r3, r2
 8005350:	19db      	adds	r3, r3, r7
 8005352:	781b      	ldrb	r3, [r3, #0]
}
 8005354:	0018      	movs	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	b00e      	add	sp, #56	; 0x38
 800535a:	bdb0      	pop	{r4, r5, r7, pc}
 800535c:	08005ac4 	.word	0x08005ac4
 8005360:	40021000 	.word	0x40021000
 8005364:	003d0900 	.word	0x003d0900
 8005368:	00f42400 	.word	0x00f42400
 800536c:	08005ae8 	.word	0x08005ae8

08005370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2201      	movs	r2, #1
 800537e:	4013      	ands	r3, r2
 8005380:	d00b      	beq.n	800539a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a4a      	ldr	r2, [pc, #296]	; (80054b4 <UART_AdvFeatureConfig+0x144>)
 800538a:	4013      	ands	r3, r2
 800538c:	0019      	movs	r1, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2202      	movs	r2, #2
 80053a0:	4013      	ands	r3, r2
 80053a2:	d00b      	beq.n	80053bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4a43      	ldr	r2, [pc, #268]	; (80054b8 <UART_AdvFeatureConfig+0x148>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2204      	movs	r2, #4
 80053c2:	4013      	ands	r3, r2
 80053c4:	d00b      	beq.n	80053de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a3b      	ldr	r2, [pc, #236]	; (80054bc <UART_AdvFeatureConfig+0x14c>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	0019      	movs	r1, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2208      	movs	r2, #8
 80053e4:	4013      	ands	r3, r2
 80053e6:	d00b      	beq.n	8005400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <UART_AdvFeatureConfig+0x150>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2210      	movs	r2, #16
 8005406:	4013      	ands	r3, r2
 8005408:	d00b      	beq.n	8005422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4a2c      	ldr	r2, [pc, #176]	; (80054c4 <UART_AdvFeatureConfig+0x154>)
 8005412:	4013      	ands	r3, r2
 8005414:	0019      	movs	r1, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2220      	movs	r2, #32
 8005428:	4013      	ands	r3, r2
 800542a:	d00b      	beq.n	8005444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <UART_AdvFeatureConfig+0x158>)
 8005434:	4013      	ands	r3, r2
 8005436:	0019      	movs	r1, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	4013      	ands	r3, r2
 800544c:	d01d      	beq.n	800548a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <UART_AdvFeatureConfig+0x15c>)
 8005456:	4013      	ands	r3, r2
 8005458:	0019      	movs	r1, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	035b      	lsls	r3, r3, #13
 800546e:	429a      	cmp	r2, r3
 8005470:	d10b      	bne.n	800548a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <UART_AdvFeatureConfig+0x160>)
 800547a:	4013      	ands	r3, r2
 800547c:	0019      	movs	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	4013      	ands	r3, r2
 8005492:	d00b      	beq.n	80054ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <UART_AdvFeatureConfig+0x164>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	fffdffff 	.word	0xfffdffff
 80054b8:	fffeffff 	.word	0xfffeffff
 80054bc:	fffbffff 	.word	0xfffbffff
 80054c0:	ffff7fff 	.word	0xffff7fff
 80054c4:	ffffefff 	.word	0xffffefff
 80054c8:	ffffdfff 	.word	0xffffdfff
 80054cc:	ffefffff 	.word	0xffefffff
 80054d0:	ff9fffff 	.word	0xff9fffff
 80054d4:	fff7ffff 	.word	0xfff7ffff

080054d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b092      	sub	sp, #72	; 0x48
 80054dc:	af02      	add	r7, sp, #8
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2284      	movs	r2, #132	; 0x84
 80054e4:	2100      	movs	r1, #0
 80054e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054e8:	f7fd f890 	bl	800260c <HAL_GetTick>
 80054ec:	0003      	movs	r3, r0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2208      	movs	r2, #8
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d12c      	bne.n	8005558 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005500:	2280      	movs	r2, #128	; 0x80
 8005502:	0391      	lsls	r1, r2, #14
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	4a46      	ldr	r2, [pc, #280]	; (8005620 <UART_CheckIdleState+0x148>)
 8005508:	9200      	str	r2, [sp, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	f000 f88c 	bl	8005628 <UART_WaitOnFlagUntilTimeout>
 8005510:	1e03      	subs	r3, r0, #0
 8005512:	d021      	beq.n	8005558 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005514:	f3ef 8310 	mrs	r3, PRIMASK
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
 800551e:	2301      	movs	r3, #1
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	438a      	bics	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2278      	movs	r2, #120	; 0x78
 8005550:	2100      	movs	r1, #0
 8005552:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e05f      	b.n	8005618 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2204      	movs	r2, #4
 8005560:	4013      	ands	r3, r2
 8005562:	2b04      	cmp	r3, #4
 8005564:	d146      	bne.n	80055f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	2280      	movs	r2, #128	; 0x80
 800556a:	03d1      	lsls	r1, r2, #15
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <UART_CheckIdleState+0x148>)
 8005570:	9200      	str	r2, [sp, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	f000 f858 	bl	8005628 <UART_WaitOnFlagUntilTimeout>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d03b      	beq.n	80055f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557c:	f3ef 8310 	mrs	r3, PRIMASK
 8005580:	60fb      	str	r3, [r7, #12]
  return(result);
 8005582:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
 8005586:	2301      	movs	r3, #1
 8005588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f383 8810 	msr	PRIMASK, r3
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4921      	ldr	r1, [pc, #132]	; (8005624 <UART_CheckIdleState+0x14c>)
 800559e:	400a      	ands	r2, r1
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ae:	f3ef 8310 	mrs	r3, PRIMASK
 80055b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80055b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
 80055b8:	2301      	movs	r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f383 8810 	msr	PRIMASK, r3
}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2101      	movs	r1, #1
 80055d0:	438a      	bics	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f383 8810 	msr	PRIMASK, r3
}
 80055de:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	2120      	movs	r1, #32
 80055e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2278      	movs	r2, #120	; 0x78
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e011      	b.n	8005618 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	2120      	movs	r1, #32
 8005600:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2278      	movs	r2, #120	; 0x78
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	b010      	add	sp, #64	; 0x40
 800561e:	bd80      	pop	{r7, pc}
 8005620:	01ffffff 	.word	0x01ffffff
 8005624:	fffffedf 	.word	0xfffffedf

08005628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	1dfb      	adds	r3, r7, #7
 8005636:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005638:	e04b      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	3301      	adds	r3, #1
 800563e:	d048      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005640:	f7fc ffe4 	bl	800260c <HAL_GetTick>
 8005644:	0002      	movs	r2, r0
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e04b      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2204      	movs	r2, #4
 8005662:	4013      	ands	r3, r2
 8005664:	d035      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	2208      	movs	r2, #8
 800566e:	4013      	ands	r3, r2
 8005670:	2b08      	cmp	r3, #8
 8005672:	d111      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2208      	movs	r2, #8
 800567a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 f83c 	bl	80056fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2284      	movs	r2, #132	; 0x84
 8005688:	2108      	movs	r1, #8
 800568a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2278      	movs	r2, #120	; 0x78
 8005690:	2100      	movs	r1, #0
 8005692:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e02c      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	401a      	ands	r2, r3
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d112      	bne.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2280      	movs	r2, #128	; 0x80
 80056b2:	0112      	lsls	r2, r2, #4
 80056b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f81f 	bl	80056fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2284      	movs	r2, #132	; 0x84
 80056c2:	2120      	movs	r1, #32
 80056c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2278      	movs	r2, #120	; 0x78
 80056ca:	2100      	movs	r1, #0
 80056cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e00f      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	425a      	negs	r2, r3
 80056e2:	4153      	adcs	r3, r2
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	001a      	movs	r2, r3
 80056e8:	1dfb      	adds	r3, r7, #7
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d0a4      	beq.n	800563a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b004      	add	sp, #16
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	; 0x38
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005704:	f3ef 8310 	mrs	r3, PRIMASK
 8005708:	617b      	str	r3, [r7, #20]
  return(result);
 800570a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
 800570e:	2301      	movs	r3, #1
 8005710:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4926      	ldr	r1, [pc, #152]	; (80057c0 <UART_EndRxTransfer+0xc4>)
 8005726:	400a      	ands	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	623b      	str	r3, [r7, #32]
  return(result);
 800573c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
 8005740:	2301      	movs	r3, #1
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2101      	movs	r1, #1
 8005758:	438a      	bics	r2, r1
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576c:	2b01      	cmp	r3, #1
 800576e:	d118      	bne.n	80057a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005770:	f3ef 8310 	mrs	r3, PRIMASK
 8005774:	60bb      	str	r3, [r7, #8]
  return(result);
 8005776:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577a:	2301      	movs	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f383 8810 	msr	PRIMASK, r3
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2110      	movs	r1, #16
 8005792:	438a      	bics	r2, r1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f383 8810 	msr	PRIMASK, r3
}
 80057a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	2120      	movs	r1, #32
 80057a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b00e      	add	sp, #56	; 0x38
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	fffffedf 	.word	0xfffffedf

080057c4 <__itoa>:
 80057c4:	1e93      	subs	r3, r2, #2
 80057c6:	b510      	push	{r4, lr}
 80057c8:	000c      	movs	r4, r1
 80057ca:	2b22      	cmp	r3, #34	; 0x22
 80057cc:	d904      	bls.n	80057d8 <__itoa+0x14>
 80057ce:	2300      	movs	r3, #0
 80057d0:	001c      	movs	r4, r3
 80057d2:	700b      	strb	r3, [r1, #0]
 80057d4:	0020      	movs	r0, r4
 80057d6:	bd10      	pop	{r4, pc}
 80057d8:	2a0a      	cmp	r2, #10
 80057da:	d109      	bne.n	80057f0 <__itoa+0x2c>
 80057dc:	2800      	cmp	r0, #0
 80057de:	da07      	bge.n	80057f0 <__itoa+0x2c>
 80057e0:	232d      	movs	r3, #45	; 0x2d
 80057e2:	700b      	strb	r3, [r1, #0]
 80057e4:	2101      	movs	r1, #1
 80057e6:	4240      	negs	r0, r0
 80057e8:	1861      	adds	r1, r4, r1
 80057ea:	f000 f807 	bl	80057fc <__utoa>
 80057ee:	e7f1      	b.n	80057d4 <__itoa+0x10>
 80057f0:	2100      	movs	r1, #0
 80057f2:	e7f9      	b.n	80057e8 <__itoa+0x24>

080057f4 <itoa>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	f7ff ffe5 	bl	80057c4 <__itoa>
 80057fa:	bd10      	pop	{r4, pc}

080057fc <__utoa>:
 80057fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fe:	000c      	movs	r4, r1
 8005800:	0016      	movs	r6, r2
 8005802:	b08d      	sub	sp, #52	; 0x34
 8005804:	2225      	movs	r2, #37	; 0x25
 8005806:	0007      	movs	r7, r0
 8005808:	4915      	ldr	r1, [pc, #84]	; (8005860 <__utoa+0x64>)
 800580a:	a802      	add	r0, sp, #8
 800580c:	f000 f856 	bl	80058bc <memcpy>
 8005810:	1e62      	subs	r2, r4, #1
 8005812:	1eb3      	subs	r3, r6, #2
 8005814:	2500      	movs	r5, #0
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	2b22      	cmp	r3, #34	; 0x22
 800581a:	d904      	bls.n	8005826 <__utoa+0x2a>
 800581c:	7025      	strb	r5, [r4, #0]
 800581e:	002c      	movs	r4, r5
 8005820:	0020      	movs	r0, r4
 8005822:	b00d      	add	sp, #52	; 0x34
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005826:	0038      	movs	r0, r7
 8005828:	0031      	movs	r1, r6
 800582a:	f7fa fcf3 	bl	8000214 <__aeabi_uidivmod>
 800582e:	000b      	movs	r3, r1
 8005830:	aa02      	add	r2, sp, #8
 8005832:	5cd3      	ldrb	r3, [r2, r3]
 8005834:	9a01      	ldr	r2, [sp, #4]
 8005836:	0029      	movs	r1, r5
 8005838:	3501      	adds	r5, #1
 800583a:	5553      	strb	r3, [r2, r5]
 800583c:	003b      	movs	r3, r7
 800583e:	0007      	movs	r7, r0
 8005840:	429e      	cmp	r6, r3
 8005842:	d9f0      	bls.n	8005826 <__utoa+0x2a>
 8005844:	2300      	movs	r3, #0
 8005846:	0022      	movs	r2, r4
 8005848:	5563      	strb	r3, [r4, r5]
 800584a:	000b      	movs	r3, r1
 800584c:	1ac8      	subs	r0, r1, r3
 800584e:	4283      	cmp	r3, r0
 8005850:	dde6      	ble.n	8005820 <__utoa+0x24>
 8005852:	7810      	ldrb	r0, [r2, #0]
 8005854:	5ce5      	ldrb	r5, [r4, r3]
 8005856:	7015      	strb	r5, [r2, #0]
 8005858:	54e0      	strb	r0, [r4, r3]
 800585a:	3201      	adds	r2, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	e7f5      	b.n	800584c <__utoa+0x50>
 8005860:	08005b0c 	.word	0x08005b0c

08005864 <memset>:
 8005864:	0003      	movs	r3, r0
 8005866:	1882      	adds	r2, r0, r2
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	7019      	strb	r1, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	2600      	movs	r6, #0
 8005878:	4c0c      	ldr	r4, [pc, #48]	; (80058ac <__libc_init_array+0x38>)
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x3c>)
 800587c:	1b64      	subs	r4, r4, r5
 800587e:	10a4      	asrs	r4, r4, #2
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	2600      	movs	r6, #0
 8005886:	f000 f823 	bl	80058d0 <_init>
 800588a:	4c0a      	ldr	r4, [pc, #40]	; (80058b4 <__libc_init_array+0x40>)
 800588c:	4d0a      	ldr	r5, [pc, #40]	; (80058b8 <__libc_init_array+0x44>)
 800588e:	1b64      	subs	r4, r4, r5
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	00b3      	lsls	r3, r6, #2
 800589a:	58eb      	ldr	r3, [r5, r3]
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	00b3      	lsls	r3, r6, #2
 80058a4:	58eb      	ldr	r3, [r5, r3]
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08005b3c 	.word	0x08005b3c
 80058b0:	08005b3c 	.word	0x08005b3c
 80058b4:	08005b40 	.word	0x08005b40
 80058b8:	08005b3c 	.word	0x08005b3c

080058bc <memcpy>:
 80058bc:	2300      	movs	r3, #0
 80058be:	b510      	push	{r4, lr}
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d100      	bne.n	80058c6 <memcpy+0xa>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	5ccc      	ldrb	r4, [r1, r3]
 80058c8:	54c4      	strb	r4, [r0, r3]
 80058ca:	3301      	adds	r3, #1
 80058cc:	e7f8      	b.n	80058c0 <memcpy+0x4>
	...

080058d0 <_init>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr

080058dc <_fini>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr


pmik2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd0  08005cd0  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd8  08005cd8  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08005ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000270  08005f50  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08005f50  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_line   00013fa4  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000057  00000000  00000000  0003427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00010999  00000000  00000000  000342d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002550  00000000  00000000  00044c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fa8  00000000  00000000  000471c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008baf7  00000000  00000000  00048168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c41  00000000  00000000  000d3c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00016668  00000000  00000000  000d48a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b94  00000000  00000000  000eaf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000270 	.word	0x20000270
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a6c 	.word	0x08005a6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000274 	.word	0x20000274
 8000104:	08005a6c 	.word	0x08005a6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fad3 	bl	80009a8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fa5f 	bl	80008d0 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fac5 	bl	80009a8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fabb 	bl	80009a8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fa6b 	bl	800091c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fa61 	bl	800091c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_uldivmod>:
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 800046c:	2a00      	cmp	r2, #0
 800046e:	d10f      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 8000470:	2900      	cmp	r1, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_uldivmod+0xe>
 8000474:	2800      	cmp	r0, #0
 8000476:	d002      	beq.n	800047e <__aeabi_uldivmod+0x16>
 8000478:	2100      	movs	r1, #0
 800047a:	43c9      	mvns	r1, r1
 800047c:	0008      	movs	r0, r1
 800047e:	b407      	push	{r0, r1, r2}
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <__aeabi_uldivmod+0x24>)
 8000482:	a102      	add	r1, pc, #8	; (adr r1, 800048c <__aeabi_uldivmod+0x24>)
 8000484:	1840      	adds	r0, r0, r1
 8000486:	9002      	str	r0, [sp, #8]
 8000488:	bd03      	pop	{r0, r1, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	ffffff65 	.word	0xffffff65
 8000490:	b403      	push	{r0, r1}
 8000492:	4668      	mov	r0, sp
 8000494:	b501      	push	{r0, lr}
 8000496:	9802      	ldr	r0, [sp, #8]
 8000498:	f000 f834 	bl	8000504 <__udivmoddi4>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	469e      	mov	lr, r3
 80004a0:	b002      	add	sp, #8
 80004a2:	bc0c      	pop	{r2, r3}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_lmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46ce      	mov	lr, r9
 80004ac:	4699      	mov	r9, r3
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	469c      	mov	ip, r3
 80004b2:	0413      	lsls	r3, r2, #16
 80004b4:	4647      	mov	r7, r8
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	001d      	movs	r5, r3
 80004ba:	000e      	movs	r6, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	0404      	lsls	r4, r0, #16
 80004c0:	0c24      	lsrs	r4, r4, #16
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0007      	movs	r7, r0
 80004c6:	0c10      	lsrs	r0, r2, #16
 80004c8:	434b      	muls	r3, r1
 80004ca:	4365      	muls	r5, r4
 80004cc:	4341      	muls	r1, r0
 80004ce:	4360      	muls	r0, r4
 80004d0:	0c2c      	lsrs	r4, r5, #16
 80004d2:	18c0      	adds	r0, r0, r3
 80004d4:	1820      	adds	r0, r4, r0
 80004d6:	468c      	mov	ip, r1
 80004d8:	4283      	cmp	r3, r0
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x3c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	4649      	mov	r1, r9
 80004e6:	4379      	muls	r1, r7
 80004e8:	4356      	muls	r6, r2
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	042d      	lsls	r5, r5, #16
 80004ee:	0c2d      	lsrs	r5, r5, #16
 80004f0:	1989      	adds	r1, r1, r6
 80004f2:	4463      	add	r3, ip
 80004f4:	0400      	lsls	r0, r0, #16
 80004f6:	1940      	adds	r0, r0, r5
 80004f8:	18c9      	adds	r1, r1, r3
 80004fa:	bcc0      	pop	{r6, r7}
 80004fc:	46b9      	mov	r9, r7
 80004fe:	46b0      	mov	r8, r6
 8000500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__udivmoddi4>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4657      	mov	r7, sl
 8000508:	464e      	mov	r6, r9
 800050a:	4645      	mov	r5, r8
 800050c:	46de      	mov	lr, fp
 800050e:	b5e0      	push	{r5, r6, r7, lr}
 8000510:	0004      	movs	r4, r0
 8000512:	000d      	movs	r5, r1
 8000514:	4692      	mov	sl, r2
 8000516:	4699      	mov	r9, r3
 8000518:	b083      	sub	sp, #12
 800051a:	428b      	cmp	r3, r1
 800051c:	d830      	bhi.n	8000580 <__udivmoddi4+0x7c>
 800051e:	d02d      	beq.n	800057c <__udivmoddi4+0x78>
 8000520:	4649      	mov	r1, r9
 8000522:	4650      	mov	r0, sl
 8000524:	f001 f884 	bl	8001630 <__clzdi2>
 8000528:	0029      	movs	r1, r5
 800052a:	0006      	movs	r6, r0
 800052c:	0020      	movs	r0, r4
 800052e:	f001 f87f 	bl	8001630 <__clzdi2>
 8000532:	1a33      	subs	r3, r6, r0
 8000534:	4698      	mov	r8, r3
 8000536:	3b20      	subs	r3, #32
 8000538:	d434      	bmi.n	80005a4 <__udivmoddi4+0xa0>
 800053a:	469b      	mov	fp, r3
 800053c:	4653      	mov	r3, sl
 800053e:	465a      	mov	r2, fp
 8000540:	4093      	lsls	r3, r2
 8000542:	4642      	mov	r2, r8
 8000544:	001f      	movs	r7, r3
 8000546:	4653      	mov	r3, sl
 8000548:	4093      	lsls	r3, r2
 800054a:	001e      	movs	r6, r3
 800054c:	42af      	cmp	r7, r5
 800054e:	d83b      	bhi.n	80005c8 <__udivmoddi4+0xc4>
 8000550:	42af      	cmp	r7, r5
 8000552:	d100      	bne.n	8000556 <__udivmoddi4+0x52>
 8000554:	e079      	b.n	800064a <__udivmoddi4+0x146>
 8000556:	465b      	mov	r3, fp
 8000558:	1ba4      	subs	r4, r4, r6
 800055a:	41bd      	sbcs	r5, r7
 800055c:	2b00      	cmp	r3, #0
 800055e:	da00      	bge.n	8000562 <__udivmoddi4+0x5e>
 8000560:	e076      	b.n	8000650 <__udivmoddi4+0x14c>
 8000562:	2200      	movs	r2, #0
 8000564:	2300      	movs	r3, #0
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	465a      	mov	r2, fp
 800056e:	4093      	lsls	r3, r2
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4642      	mov	r2, r8
 8000576:	4093      	lsls	r3, r2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	e029      	b.n	80005d0 <__udivmoddi4+0xcc>
 800057c:	4282      	cmp	r2, r0
 800057e:	d9cf      	bls.n	8000520 <__udivmoddi4+0x1c>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <__udivmoddi4+0x8e>
 800058e:	601c      	str	r4, [r3, #0]
 8000590:	605d      	str	r5, [r3, #4]
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	b003      	add	sp, #12
 8000598:	bcf0      	pop	{r4, r5, r6, r7}
 800059a:	46bb      	mov	fp, r7
 800059c:	46b2      	mov	sl, r6
 800059e:	46a9      	mov	r9, r5
 80005a0:	46a0      	mov	r8, r4
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a4:	4642      	mov	r2, r8
 80005a6:	469b      	mov	fp, r3
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	4652      	mov	r2, sl
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	4641      	mov	r1, r8
 80005b2:	0013      	movs	r3, r2
 80005b4:	464a      	mov	r2, r9
 80005b6:	408a      	lsls	r2, r1
 80005b8:	0017      	movs	r7, r2
 80005ba:	4642      	mov	r2, r8
 80005bc:	431f      	orrs	r7, r3
 80005be:	4653      	mov	r3, sl
 80005c0:	4093      	lsls	r3, r2
 80005c2:	001e      	movs	r6, r3
 80005c4:	42af      	cmp	r7, r5
 80005c6:	d9c3      	bls.n	8000550 <__udivmoddi4+0x4c>
 80005c8:	2200      	movs	r2, #0
 80005ca:	2300      	movs	r3, #0
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	4643      	mov	r3, r8
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0d8      	beq.n	8000588 <__udivmoddi4+0x84>
 80005d6:	07fb      	lsls	r3, r7, #31
 80005d8:	0872      	lsrs	r2, r6, #1
 80005da:	431a      	orrs	r2, r3
 80005dc:	4646      	mov	r6, r8
 80005de:	087b      	lsrs	r3, r7, #1
 80005e0:	e00e      	b.n	8000600 <__udivmoddi4+0xfc>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d101      	bne.n	80005ea <__udivmoddi4+0xe6>
 80005e6:	42a2      	cmp	r2, r4
 80005e8:	d80c      	bhi.n	8000604 <__udivmoddi4+0x100>
 80005ea:	1aa4      	subs	r4, r4, r2
 80005ec:	419d      	sbcs	r5, r3
 80005ee:	2001      	movs	r0, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2100      	movs	r1, #0
 80005f6:	3e01      	subs	r6, #1
 80005f8:	1824      	adds	r4, r4, r0
 80005fa:	414d      	adcs	r5, r1
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d006      	beq.n	800060e <__udivmoddi4+0x10a>
 8000600:	42ab      	cmp	r3, r5
 8000602:	d9ee      	bls.n	80005e2 <__udivmoddi4+0xde>
 8000604:	3e01      	subs	r6, #1
 8000606:	1924      	adds	r4, r4, r4
 8000608:	416d      	adcs	r5, r5
 800060a:	2e00      	cmp	r6, #0
 800060c:	d1f8      	bne.n	8000600 <__udivmoddi4+0xfc>
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	465b      	mov	r3, fp
 8000614:	1900      	adds	r0, r0, r4
 8000616:	4169      	adcs	r1, r5
 8000618:	2b00      	cmp	r3, #0
 800061a:	db24      	blt.n	8000666 <__udivmoddi4+0x162>
 800061c:	002b      	movs	r3, r5
 800061e:	465a      	mov	r2, fp
 8000620:	4644      	mov	r4, r8
 8000622:	40d3      	lsrs	r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	40e2      	lsrs	r2, r4
 8000628:	001c      	movs	r4, r3
 800062a:	465b      	mov	r3, fp
 800062c:	0015      	movs	r5, r2
 800062e:	2b00      	cmp	r3, #0
 8000630:	db2a      	blt.n	8000688 <__udivmoddi4+0x184>
 8000632:	0026      	movs	r6, r4
 8000634:	409e      	lsls	r6, r3
 8000636:	0033      	movs	r3, r6
 8000638:	0026      	movs	r6, r4
 800063a:	4647      	mov	r7, r8
 800063c:	40be      	lsls	r6, r7
 800063e:	0032      	movs	r2, r6
 8000640:	1a80      	subs	r0, r0, r2
 8000642:	4199      	sbcs	r1, r3
 8000644:	9000      	str	r0, [sp, #0]
 8000646:	9101      	str	r1, [sp, #4]
 8000648:	e79e      	b.n	8000588 <__udivmoddi4+0x84>
 800064a:	42a3      	cmp	r3, r4
 800064c:	d8bc      	bhi.n	80005c8 <__udivmoddi4+0xc4>
 800064e:	e782      	b.n	8000556 <__udivmoddi4+0x52>
 8000650:	4642      	mov	r2, r8
 8000652:	2320      	movs	r3, #32
 8000654:	2100      	movs	r1, #0
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	2200      	movs	r2, #0
 800065a:	9100      	str	r1, [sp, #0]
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	40da      	lsrs	r2, r3
 8000662:	9201      	str	r2, [sp, #4]
 8000664:	e785      	b.n	8000572 <__udivmoddi4+0x6e>
 8000666:	4642      	mov	r2, r8
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	4646      	mov	r6, r8
 8000670:	409a      	lsls	r2, r3
 8000672:	0023      	movs	r3, r4
 8000674:	40f3      	lsrs	r3, r6
 8000676:	4644      	mov	r4, r8
 8000678:	4313      	orrs	r3, r2
 800067a:	002a      	movs	r2, r5
 800067c:	40e2      	lsrs	r2, r4
 800067e:	001c      	movs	r4, r3
 8000680:	465b      	mov	r3, fp
 8000682:	0015      	movs	r5, r2
 8000684:	2b00      	cmp	r3, #0
 8000686:	dad4      	bge.n	8000632 <__udivmoddi4+0x12e>
 8000688:	4642      	mov	r2, r8
 800068a:	002f      	movs	r7, r5
 800068c:	2320      	movs	r3, #32
 800068e:	0026      	movs	r6, r4
 8000690:	4097      	lsls	r7, r2
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	40de      	lsrs	r6, r3
 8000696:	003b      	movs	r3, r7
 8000698:	4333      	orrs	r3, r6
 800069a:	e7cd      	b.n	8000638 <__udivmoddi4+0x134>

0800069c <__aeabi_fdiv>:
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	464f      	mov	r7, r9
 80006a0:	4646      	mov	r6, r8
 80006a2:	46d6      	mov	lr, sl
 80006a4:	0245      	lsls	r5, r0, #9
 80006a6:	b5c0      	push	{r6, r7, lr}
 80006a8:	0047      	lsls	r7, r0, #1
 80006aa:	1c0c      	adds	r4, r1, #0
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	0e3f      	lsrs	r7, r7, #24
 80006b0:	0fc6      	lsrs	r6, r0, #31
 80006b2:	2f00      	cmp	r7, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fdiv+0x1c>
 80006b6:	e06f      	b.n	8000798 <__aeabi_fdiv+0xfc>
 80006b8:	2fff      	cmp	r7, #255	; 0xff
 80006ba:	d100      	bne.n	80006be <__aeabi_fdiv+0x22>
 80006bc:	e074      	b.n	80007a8 <__aeabi_fdiv+0x10c>
 80006be:	2300      	movs	r3, #0
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	4699      	mov	r9, r3
 80006c4:	469a      	mov	sl, r3
 80006c6:	00ed      	lsls	r5, r5, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	4315      	orrs	r5, r2
 80006cc:	3f7f      	subs	r7, #127	; 0x7f
 80006ce:	0263      	lsls	r3, r4, #9
 80006d0:	0a5b      	lsrs	r3, r3, #9
 80006d2:	4698      	mov	r8, r3
 80006d4:	0063      	lsls	r3, r4, #1
 80006d6:	0e1b      	lsrs	r3, r3, #24
 80006d8:	0fe4      	lsrs	r4, r4, #31
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d04d      	beq.n	800077a <__aeabi_fdiv+0xde>
 80006de:	2bff      	cmp	r3, #255	; 0xff
 80006e0:	d045      	beq.n	800076e <__aeabi_fdiv+0xd2>
 80006e2:	4642      	mov	r2, r8
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	00d2      	lsls	r2, r2, #3
 80006e8:	04c9      	lsls	r1, r1, #19
 80006ea:	4311      	orrs	r1, r2
 80006ec:	4688      	mov	r8, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	3b7f      	subs	r3, #127	; 0x7f
 80006f2:	0031      	movs	r1, r6
 80006f4:	1aff      	subs	r7, r7, r3
 80006f6:	464b      	mov	r3, r9
 80006f8:	4061      	eors	r1, r4
 80006fa:	b2c9      	uxtb	r1, r1
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d900      	bls.n	8000702 <__aeabi_fdiv+0x66>
 8000700:	e0b8      	b.n	8000874 <__aeabi_fdiv+0x1d8>
 8000702:	4870      	ldr	r0, [pc, #448]	; (80008c4 <__aeabi_fdiv+0x228>)
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	58c3      	ldr	r3, [r0, r3]
 8000708:	469f      	mov	pc, r3
 800070a:	2300      	movs	r3, #0
 800070c:	4698      	mov	r8, r3
 800070e:	0026      	movs	r6, r4
 8000710:	4645      	mov	r5, r8
 8000712:	4692      	mov	sl, r2
 8000714:	4653      	mov	r3, sl
 8000716:	2b02      	cmp	r3, #2
 8000718:	d100      	bne.n	800071c <__aeabi_fdiv+0x80>
 800071a:	e08d      	b.n	8000838 <__aeabi_fdiv+0x19c>
 800071c:	2b03      	cmp	r3, #3
 800071e:	d100      	bne.n	8000722 <__aeabi_fdiv+0x86>
 8000720:	e0a1      	b.n	8000866 <__aeabi_fdiv+0x1ca>
 8000722:	2b01      	cmp	r3, #1
 8000724:	d018      	beq.n	8000758 <__aeabi_fdiv+0xbc>
 8000726:	003b      	movs	r3, r7
 8000728:	337f      	adds	r3, #127	; 0x7f
 800072a:	2b00      	cmp	r3, #0
 800072c:	dd6d      	ble.n	800080a <__aeabi_fdiv+0x16e>
 800072e:	076a      	lsls	r2, r5, #29
 8000730:	d004      	beq.n	800073c <__aeabi_fdiv+0xa0>
 8000732:	220f      	movs	r2, #15
 8000734:	402a      	ands	r2, r5
 8000736:	2a04      	cmp	r2, #4
 8000738:	d000      	beq.n	800073c <__aeabi_fdiv+0xa0>
 800073a:	3504      	adds	r5, #4
 800073c:	012a      	lsls	r2, r5, #4
 800073e:	d503      	bpl.n	8000748 <__aeabi_fdiv+0xac>
 8000740:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <__aeabi_fdiv+0x22c>)
 8000742:	401d      	ands	r5, r3
 8000744:	003b      	movs	r3, r7
 8000746:	3380      	adds	r3, #128	; 0x80
 8000748:	2bfe      	cmp	r3, #254	; 0xfe
 800074a:	dd00      	ble.n	800074e <__aeabi_fdiv+0xb2>
 800074c:	e074      	b.n	8000838 <__aeabi_fdiv+0x19c>
 800074e:	01aa      	lsls	r2, r5, #6
 8000750:	0a52      	lsrs	r2, r2, #9
 8000752:	b2d8      	uxtb	r0, r3
 8000754:	e002      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000756:	000e      	movs	r6, r1
 8000758:	2000      	movs	r0, #0
 800075a:	2200      	movs	r2, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	07f6      	lsls	r6, r6, #31
 8000760:	4310      	orrs	r0, r2
 8000762:	4330      	orrs	r0, r6
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	4643      	mov	r3, r8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d13f      	bne.n	80007f4 <__aeabi_fdiv+0x158>
 8000774:	2202      	movs	r2, #2
 8000776:	3fff      	subs	r7, #255	; 0xff
 8000778:	e003      	b.n	8000782 <__aeabi_fdiv+0xe6>
 800077a:	4643      	mov	r3, r8
 800077c:	2b00      	cmp	r3, #0
 800077e:	d12d      	bne.n	80007dc <__aeabi_fdiv+0x140>
 8000780:	2201      	movs	r2, #1
 8000782:	0031      	movs	r1, r6
 8000784:	464b      	mov	r3, r9
 8000786:	4061      	eors	r1, r4
 8000788:	b2c9      	uxtb	r1, r1
 800078a:	4313      	orrs	r3, r2
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d838      	bhi.n	8000802 <__aeabi_fdiv+0x166>
 8000790:	484e      	ldr	r0, [pc, #312]	; (80008cc <__aeabi_fdiv+0x230>)
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	58c3      	ldr	r3, [r0, r3]
 8000796:	469f      	mov	pc, r3
 8000798:	2d00      	cmp	r5, #0
 800079a:	d113      	bne.n	80007c4 <__aeabi_fdiv+0x128>
 800079c:	2304      	movs	r3, #4
 800079e:	4699      	mov	r9, r3
 80007a0:	3b03      	subs	r3, #3
 80007a2:	2700      	movs	r7, #0
 80007a4:	469a      	mov	sl, r3
 80007a6:	e792      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d105      	bne.n	80007b8 <__aeabi_fdiv+0x11c>
 80007ac:	2308      	movs	r3, #8
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b06      	subs	r3, #6
 80007b2:	27ff      	movs	r7, #255	; 0xff
 80007b4:	469a      	mov	sl, r3
 80007b6:	e78a      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007b8:	230c      	movs	r3, #12
 80007ba:	4699      	mov	r9, r3
 80007bc:	3b09      	subs	r3, #9
 80007be:	27ff      	movs	r7, #255	; 0xff
 80007c0:	469a      	mov	sl, r3
 80007c2:	e784      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007c4:	0028      	movs	r0, r5
 80007c6:	f000 ff15 	bl	80015f4 <__clzsi2>
 80007ca:	2776      	movs	r7, #118	; 0x76
 80007cc:	1f43      	subs	r3, r0, #5
 80007ce:	409d      	lsls	r5, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	427f      	negs	r7, r7
 80007d4:	4699      	mov	r9, r3
 80007d6:	469a      	mov	sl, r3
 80007d8:	1a3f      	subs	r7, r7, r0
 80007da:	e778      	b.n	80006ce <__aeabi_fdiv+0x32>
 80007dc:	4640      	mov	r0, r8
 80007de:	f000 ff09 	bl	80015f4 <__clzsi2>
 80007e2:	4642      	mov	r2, r8
 80007e4:	1f43      	subs	r3, r0, #5
 80007e6:	409a      	lsls	r2, r3
 80007e8:	2376      	movs	r3, #118	; 0x76
 80007ea:	425b      	negs	r3, r3
 80007ec:	4690      	mov	r8, r2
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	2200      	movs	r2, #0
 80007f2:	e77e      	b.n	80006f2 <__aeabi_fdiv+0x56>
 80007f4:	2303      	movs	r3, #3
 80007f6:	464a      	mov	r2, r9
 80007f8:	431a      	orrs	r2, r3
 80007fa:	4691      	mov	r9, r2
 80007fc:	33fc      	adds	r3, #252	; 0xfc
 80007fe:	2203      	movs	r2, #3
 8000800:	e777      	b.n	80006f2 <__aeabi_fdiv+0x56>
 8000802:	000e      	movs	r6, r1
 8000804:	20ff      	movs	r0, #255	; 0xff
 8000806:	2200      	movs	r2, #0
 8000808:	e7a8      	b.n	800075c <__aeabi_fdiv+0xc0>
 800080a:	2201      	movs	r2, #1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dca2      	bgt.n	8000758 <__aeabi_fdiv+0xbc>
 8000812:	379e      	adds	r7, #158	; 0x9e
 8000814:	002a      	movs	r2, r5
 8000816:	40bd      	lsls	r5, r7
 8000818:	40da      	lsrs	r2, r3
 800081a:	1e6b      	subs	r3, r5, #1
 800081c:	419d      	sbcs	r5, r3
 800081e:	4315      	orrs	r5, r2
 8000820:	076a      	lsls	r2, r5, #29
 8000822:	d004      	beq.n	800082e <__aeabi_fdiv+0x192>
 8000824:	220f      	movs	r2, #15
 8000826:	402a      	ands	r2, r5
 8000828:	2a04      	cmp	r2, #4
 800082a:	d000      	beq.n	800082e <__aeabi_fdiv+0x192>
 800082c:	3504      	adds	r5, #4
 800082e:	016a      	lsls	r2, r5, #5
 8000830:	d544      	bpl.n	80008bc <__aeabi_fdiv+0x220>
 8000832:	2001      	movs	r0, #1
 8000834:	2200      	movs	r2, #0
 8000836:	e791      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000838:	20ff      	movs	r0, #255	; 0xff
 800083a:	2200      	movs	r2, #0
 800083c:	e78e      	b.n	800075c <__aeabi_fdiv+0xc0>
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	2600      	movs	r6, #0
 8000842:	20ff      	movs	r0, #255	; 0xff
 8000844:	03d2      	lsls	r2, r2, #15
 8000846:	e789      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000848:	2300      	movs	r3, #0
 800084a:	4698      	mov	r8, r3
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	03d2      	lsls	r2, r2, #15
 8000850:	4215      	tst	r5, r2
 8000852:	d008      	beq.n	8000866 <__aeabi_fdiv+0x1ca>
 8000854:	4643      	mov	r3, r8
 8000856:	4213      	tst	r3, r2
 8000858:	d105      	bne.n	8000866 <__aeabi_fdiv+0x1ca>
 800085a:	431a      	orrs	r2, r3
 800085c:	0252      	lsls	r2, r2, #9
 800085e:	0026      	movs	r6, r4
 8000860:	20ff      	movs	r0, #255	; 0xff
 8000862:	0a52      	lsrs	r2, r2, #9
 8000864:	e77a      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	03d2      	lsls	r2, r2, #15
 800086a:	432a      	orrs	r2, r5
 800086c:	0252      	lsls	r2, r2, #9
 800086e:	20ff      	movs	r0, #255	; 0xff
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	e773      	b.n	800075c <__aeabi_fdiv+0xc0>
 8000874:	4642      	mov	r2, r8
 8000876:	016b      	lsls	r3, r5, #5
 8000878:	0155      	lsls	r5, r2, #5
 800087a:	42ab      	cmp	r3, r5
 800087c:	d21a      	bcs.n	80008b4 <__aeabi_fdiv+0x218>
 800087e:	201b      	movs	r0, #27
 8000880:	2200      	movs	r2, #0
 8000882:	3f01      	subs	r7, #1
 8000884:	2601      	movs	r6, #1
 8000886:	001c      	movs	r4, r3
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2c00      	cmp	r4, #0
 800088e:	db01      	blt.n	8000894 <__aeabi_fdiv+0x1f8>
 8000890:	429d      	cmp	r5, r3
 8000892:	d801      	bhi.n	8000898 <__aeabi_fdiv+0x1fc>
 8000894:	1b5b      	subs	r3, r3, r5
 8000896:	4332      	orrs	r2, r6
 8000898:	3801      	subs	r0, #1
 800089a:	2800      	cmp	r0, #0
 800089c:	d1f3      	bne.n	8000886 <__aeabi_fdiv+0x1ea>
 800089e:	1e58      	subs	r0, r3, #1
 80008a0:	4183      	sbcs	r3, r0
 80008a2:	4313      	orrs	r3, r2
 80008a4:	001d      	movs	r5, r3
 80008a6:	003b      	movs	r3, r7
 80008a8:	337f      	adds	r3, #127	; 0x7f
 80008aa:	000e      	movs	r6, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_fdiv+0x216>
 80008b0:	e73d      	b.n	800072e <__aeabi_fdiv+0x92>
 80008b2:	e7aa      	b.n	800080a <__aeabi_fdiv+0x16e>
 80008b4:	201a      	movs	r0, #26
 80008b6:	2201      	movs	r2, #1
 80008b8:	1b5b      	subs	r3, r3, r5
 80008ba:	e7e3      	b.n	8000884 <__aeabi_fdiv+0x1e8>
 80008bc:	01aa      	lsls	r2, r5, #6
 80008be:	2000      	movs	r0, #0
 80008c0:	0a52      	lsrs	r2, r2, #9
 80008c2:	e74b      	b.n	800075c <__aeabi_fdiv+0xc0>
 80008c4:	08005b7c 	.word	0x08005b7c
 80008c8:	f7ffffff 	.word	0xf7ffffff
 80008cc:	08005bbc 	.word	0x08005bbc

080008d0 <__eqsf2>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	0245      	lsls	r5, r0, #9
 80008d6:	024e      	lsls	r6, r1, #9
 80008d8:	004c      	lsls	r4, r1, #1
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	2001      	movs	r0, #1
 80008e0:	0e12      	lsrs	r2, r2, #24
 80008e2:	0a76      	lsrs	r6, r6, #9
 80008e4:	0e24      	lsrs	r4, r4, #24
 80008e6:	0fc9      	lsrs	r1, r1, #31
 80008e8:	2aff      	cmp	r2, #255	; 0xff
 80008ea:	d006      	beq.n	80008fa <__eqsf2+0x2a>
 80008ec:	2cff      	cmp	r4, #255	; 0xff
 80008ee:	d003      	beq.n	80008f8 <__eqsf2+0x28>
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	d101      	bne.n	80008f8 <__eqsf2+0x28>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d006      	beq.n	8000906 <__eqsf2+0x36>
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d1fc      	bne.n	80008f8 <__eqsf2+0x28>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d1fa      	bne.n	80008f8 <__eqsf2+0x28>
 8000902:	2e00      	cmp	r6, #0
 8000904:	d1f8      	bne.n	80008f8 <__eqsf2+0x28>
 8000906:	428b      	cmp	r3, r1
 8000908:	d006      	beq.n	8000918 <__eqsf2+0x48>
 800090a:	2001      	movs	r0, #1
 800090c:	2a00      	cmp	r2, #0
 800090e:	d1f3      	bne.n	80008f8 <__eqsf2+0x28>
 8000910:	0028      	movs	r0, r5
 8000912:	1e43      	subs	r3, r0, #1
 8000914:	4198      	sbcs	r0, r3
 8000916:	e7ef      	b.n	80008f8 <__eqsf2+0x28>
 8000918:	2000      	movs	r0, #0
 800091a:	e7ed      	b.n	80008f8 <__eqsf2+0x28>

0800091c <__gesf2>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	0042      	lsls	r2, r0, #1
 8000920:	0245      	lsls	r5, r0, #9
 8000922:	024e      	lsls	r6, r1, #9
 8000924:	004c      	lsls	r4, r1, #1
 8000926:	0fc3      	lsrs	r3, r0, #31
 8000928:	0a6d      	lsrs	r5, r5, #9
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	0a76      	lsrs	r6, r6, #9
 800092e:	0e24      	lsrs	r4, r4, #24
 8000930:	0fc8      	lsrs	r0, r1, #31
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d01b      	beq.n	800096e <__gesf2+0x52>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d00e      	beq.n	8000958 <__gesf2+0x3c>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d11b      	bne.n	8000976 <__gesf2+0x5a>
 800093e:	2c00      	cmp	r4, #0
 8000940:	d101      	bne.n	8000946 <__gesf2+0x2a>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d01c      	beq.n	8000980 <__gesf2+0x64>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d00c      	beq.n	8000964 <__gesf2+0x48>
 800094a:	4283      	cmp	r3, r0
 800094c:	d01c      	beq.n	8000988 <__gesf2+0x6c>
 800094e:	2102      	movs	r1, #2
 8000950:	1e58      	subs	r0, r3, #1
 8000952:	4008      	ands	r0, r1
 8000954:	3801      	subs	r0, #1
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	2e00      	cmp	r6, #0
 800095a:	d122      	bne.n	80009a2 <__gesf2+0x86>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d1f4      	bne.n	800094a <__gesf2+0x2e>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d1f2      	bne.n	800094a <__gesf2+0x2e>
 8000964:	2800      	cmp	r0, #0
 8000966:	d1f6      	bne.n	8000956 <__gesf2+0x3a>
 8000968:	2001      	movs	r0, #1
 800096a:	4240      	negs	r0, r0
 800096c:	e7f3      	b.n	8000956 <__gesf2+0x3a>
 800096e:	2d00      	cmp	r5, #0
 8000970:	d117      	bne.n	80009a2 <__gesf2+0x86>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d0f0      	beq.n	8000958 <__gesf2+0x3c>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d1e7      	bne.n	800094a <__gesf2+0x2e>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d1e5      	bne.n	800094a <__gesf2+0x2e>
 800097e:	e7e6      	b.n	800094e <__gesf2+0x32>
 8000980:	2000      	movs	r0, #0
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e7      	beq.n	8000956 <__gesf2+0x3a>
 8000986:	e7e2      	b.n	800094e <__gesf2+0x32>
 8000988:	42a2      	cmp	r2, r4
 800098a:	dc05      	bgt.n	8000998 <__gesf2+0x7c>
 800098c:	dbea      	blt.n	8000964 <__gesf2+0x48>
 800098e:	42b5      	cmp	r5, r6
 8000990:	d802      	bhi.n	8000998 <__gesf2+0x7c>
 8000992:	d3e7      	bcc.n	8000964 <__gesf2+0x48>
 8000994:	2000      	movs	r0, #0
 8000996:	e7de      	b.n	8000956 <__gesf2+0x3a>
 8000998:	4243      	negs	r3, r0
 800099a:	4158      	adcs	r0, r3
 800099c:	0040      	lsls	r0, r0, #1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7d9      	b.n	8000956 <__gesf2+0x3a>
 80009a2:	2002      	movs	r0, #2
 80009a4:	4240      	negs	r0, r0
 80009a6:	e7d6      	b.n	8000956 <__gesf2+0x3a>

080009a8 <__lesf2>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	0042      	lsls	r2, r0, #1
 80009ac:	0245      	lsls	r5, r0, #9
 80009ae:	024e      	lsls	r6, r1, #9
 80009b0:	004c      	lsls	r4, r1, #1
 80009b2:	0fc3      	lsrs	r3, r0, #31
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	0e12      	lsrs	r2, r2, #24
 80009b8:	0a76      	lsrs	r6, r6, #9
 80009ba:	0e24      	lsrs	r4, r4, #24
 80009bc:	0fc8      	lsrs	r0, r1, #31
 80009be:	2aff      	cmp	r2, #255	; 0xff
 80009c0:	d00b      	beq.n	80009da <__lesf2+0x32>
 80009c2:	2cff      	cmp	r4, #255	; 0xff
 80009c4:	d00d      	beq.n	80009e2 <__lesf2+0x3a>
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d11f      	bne.n	8000a0a <__lesf2+0x62>
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	d116      	bne.n	80009fc <__lesf2+0x54>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d114      	bne.n	80009fc <__lesf2+0x54>
 80009d2:	2000      	movs	r0, #0
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d010      	beq.n	80009fa <__lesf2+0x52>
 80009d8:	e009      	b.n	80009ee <__lesf2+0x46>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d10c      	bne.n	80009f8 <__lesf2+0x50>
 80009de:	2cff      	cmp	r4, #255	; 0xff
 80009e0:	d113      	bne.n	8000a0a <__lesf2+0x62>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d108      	bne.n	80009f8 <__lesf2+0x50>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d008      	beq.n	80009fc <__lesf2+0x54>
 80009ea:	4283      	cmp	r3, r0
 80009ec:	d012      	beq.n	8000a14 <__lesf2+0x6c>
 80009ee:	2102      	movs	r1, #2
 80009f0:	1e58      	subs	r0, r3, #1
 80009f2:	4008      	ands	r0, r1
 80009f4:	3801      	subs	r0, #1
 80009f6:	e000      	b.n	80009fa <__lesf2+0x52>
 80009f8:	2002      	movs	r0, #2
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	2d00      	cmp	r5, #0
 80009fe:	d1f4      	bne.n	80009ea <__lesf2+0x42>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d1fa      	bne.n	80009fa <__lesf2+0x52>
 8000a04:	2001      	movs	r0, #1
 8000a06:	4240      	negs	r0, r0
 8000a08:	e7f7      	b.n	80009fa <__lesf2+0x52>
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	d1ed      	bne.n	80009ea <__lesf2+0x42>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d1eb      	bne.n	80009ea <__lesf2+0x42>
 8000a12:	e7ec      	b.n	80009ee <__lesf2+0x46>
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	dc05      	bgt.n	8000a24 <__lesf2+0x7c>
 8000a18:	dbf2      	blt.n	8000a00 <__lesf2+0x58>
 8000a1a:	42b5      	cmp	r5, r6
 8000a1c:	d802      	bhi.n	8000a24 <__lesf2+0x7c>
 8000a1e:	d3ef      	bcc.n	8000a00 <__lesf2+0x58>
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7ea      	b.n	80009fa <__lesf2+0x52>
 8000a24:	4243      	negs	r3, r0
 8000a26:	4158      	adcs	r0, r3
 8000a28:	0040      	lsls	r0, r0, #1
 8000a2a:	3801      	subs	r0, #1
 8000a2c:	e7e5      	b.n	80009fa <__lesf2+0x52>
 8000a2e:	46c0      	nop			; (mov r8, r8)

08000a30 <__aeabi_fmul>:
 8000a30:	0243      	lsls	r3, r0, #9
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	464f      	mov	r7, r9
 8000a38:	4646      	mov	r6, r8
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	46d6      	mov	lr, sl
 8000a3e:	0fc3      	lsrs	r3, r0, #31
 8000a40:	0045      	lsls	r5, r0, #1
 8000a42:	4698      	mov	r8, r3
 8000a44:	b5c0      	push	{r6, r7, lr}
 8000a46:	464b      	mov	r3, r9
 8000a48:	1c0f      	adds	r7, r1, #0
 8000a4a:	0e2d      	lsrs	r5, r5, #24
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fmul+0x20>
 8000a4e:	e0cb      	b.n	8000be8 <__aeabi_fmul+0x1b8>
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0x26>
 8000a54:	e0cf      	b.n	8000bf6 <__aeabi_fmul+0x1c6>
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	04d2      	lsls	r2, r2, #19
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	4691      	mov	r9, r2
 8000a62:	2600      	movs	r6, #0
 8000a64:	469a      	mov	sl, r3
 8000a66:	3d7f      	subs	r5, #127	; 0x7f
 8000a68:	027c      	lsls	r4, r7, #9
 8000a6a:	007b      	lsls	r3, r7, #1
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	0e1b      	lsrs	r3, r3, #24
 8000a70:	0fff      	lsrs	r7, r7, #31
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fmul+0x48>
 8000a76:	e0a9      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000a78:	2bff      	cmp	r3, #255	; 0xff
 8000a7a:	d011      	beq.n	8000aa0 <__aeabi_fmul+0x70>
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	00e4      	lsls	r4, r4, #3
 8000a80:	04d2      	lsls	r2, r2, #19
 8000a82:	4314      	orrs	r4, r2
 8000a84:	4642      	mov	r2, r8
 8000a86:	3b7f      	subs	r3, #127	; 0x7f
 8000a88:	195b      	adds	r3, r3, r5
 8000a8a:	407a      	eors	r2, r7
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	1c5d      	adds	r5, r3, #1
 8000a92:	2e0a      	cmp	r6, #10
 8000a94:	dd13      	ble.n	8000abe <__aeabi_fmul+0x8e>
 8000a96:	003a      	movs	r2, r7
 8000a98:	2e0b      	cmp	r6, #11
 8000a9a:	d047      	beq.n	8000b2c <__aeabi_fmul+0xfc>
 8000a9c:	4647      	mov	r7, r8
 8000a9e:	e03f      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000aa0:	002b      	movs	r3, r5
 8000aa2:	33ff      	adds	r3, #255	; 0xff
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d11e      	bne.n	8000ae6 <__aeabi_fmul+0xb6>
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4316      	orrs	r6, r2
 8000aac:	4642      	mov	r2, r8
 8000aae:	3501      	adds	r5, #1
 8000ab0:	407a      	eors	r2, r7
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	35ff      	adds	r5, #255	; 0xff
 8000ab6:	2e0a      	cmp	r6, #10
 8000ab8:	dd00      	ble.n	8000abc <__aeabi_fmul+0x8c>
 8000aba:	e0e4      	b.n	8000c86 <__aeabi_fmul+0x256>
 8000abc:	2002      	movs	r0, #2
 8000abe:	2e02      	cmp	r6, #2
 8000ac0:	dc1c      	bgt.n	8000afc <__aeabi_fmul+0xcc>
 8000ac2:	3e01      	subs	r6, #1
 8000ac4:	2e01      	cmp	r6, #1
 8000ac6:	d842      	bhi.n	8000b4e <__aeabi_fmul+0x11e>
 8000ac8:	2802      	cmp	r0, #2
 8000aca:	d03d      	beq.n	8000b48 <__aeabi_fmul+0x118>
 8000acc:	2801      	cmp	r0, #1
 8000ace:	d166      	bne.n	8000b9e <__aeabi_fmul+0x16e>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	05c0      	lsls	r0, r0, #23
 8000ad6:	4308      	orrs	r0, r1
 8000ad8:	07d2      	lsls	r2, r2, #31
 8000ada:	4310      	orrs	r0, r2
 8000adc:	bce0      	pop	{r5, r6, r7}
 8000ade:	46ba      	mov	sl, r7
 8000ae0:	46b1      	mov	r9, r6
 8000ae2:	46a8      	mov	r8, r5
 8000ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	4316      	orrs	r6, r2
 8000aea:	4642      	mov	r2, r8
 8000aec:	3501      	adds	r5, #1
 8000aee:	407a      	eors	r2, r7
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	35ff      	adds	r5, #255	; 0xff
 8000af4:	2e0a      	cmp	r6, #10
 8000af6:	dd00      	ble.n	8000afa <__aeabi_fmul+0xca>
 8000af8:	e0e4      	b.n	8000cc4 <__aeabi_fmul+0x294>
 8000afa:	2003      	movs	r0, #3
 8000afc:	2101      	movs	r1, #1
 8000afe:	40b1      	lsls	r1, r6
 8000b00:	26a6      	movs	r6, #166	; 0xa6
 8000b02:	00f6      	lsls	r6, r6, #3
 8000b04:	4231      	tst	r1, r6
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_fmul+0xee>
 8000b08:	2690      	movs	r6, #144	; 0x90
 8000b0a:	00b6      	lsls	r6, r6, #2
 8000b0c:	4231      	tst	r1, r6
 8000b0e:	d116      	bne.n	8000b3e <__aeabi_fmul+0x10e>
 8000b10:	3eb9      	subs	r6, #185	; 0xb9
 8000b12:	3eff      	subs	r6, #255	; 0xff
 8000b14:	420e      	tst	r6, r1
 8000b16:	d01a      	beq.n	8000b4e <__aeabi_fmul+0x11e>
 8000b18:	46a1      	mov	r9, r4
 8000b1a:	4682      	mov	sl, r0
 8000b1c:	e000      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000b1e:	0017      	movs	r7, r2
 8000b20:	4653      	mov	r3, sl
 8000b22:	003a      	movs	r2, r7
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d00f      	beq.n	8000b48 <__aeabi_fmul+0x118>
 8000b28:	464c      	mov	r4, r9
 8000b2a:	4650      	mov	r0, sl
 8000b2c:	2803      	cmp	r0, #3
 8000b2e:	d1cd      	bne.n	8000acc <__aeabi_fmul+0x9c>
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	03c9      	lsls	r1, r1, #15
 8000b34:	4321      	orrs	r1, r4
 8000b36:	0249      	lsls	r1, r1, #9
 8000b38:	20ff      	movs	r0, #255	; 0xff
 8000b3a:	0a49      	lsrs	r1, r1, #9
 8000b3c:	e7ca      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	2200      	movs	r2, #0
 8000b42:	20ff      	movs	r0, #255	; 0xff
 8000b44:	03c9      	lsls	r1, r1, #15
 8000b46:	e7c5      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	e7c2      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000b4e:	0c20      	lsrs	r0, r4, #16
 8000b50:	4649      	mov	r1, r9
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	0c24      	lsrs	r4, r4, #16
 8000b56:	0027      	movs	r7, r4
 8000b58:	0c0e      	lsrs	r6, r1, #16
 8000b5a:	0409      	lsls	r1, r1, #16
 8000b5c:	0c09      	lsrs	r1, r1, #16
 8000b5e:	4374      	muls	r4, r6
 8000b60:	434f      	muls	r7, r1
 8000b62:	4346      	muls	r6, r0
 8000b64:	4348      	muls	r0, r1
 8000b66:	0c39      	lsrs	r1, r7, #16
 8000b68:	1900      	adds	r0, r0, r4
 8000b6a:	1809      	adds	r1, r1, r0
 8000b6c:	428c      	cmp	r4, r1
 8000b6e:	d903      	bls.n	8000b78 <__aeabi_fmul+0x148>
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	4684      	mov	ip, r0
 8000b76:	4466      	add	r6, ip
 8000b78:	043f      	lsls	r7, r7, #16
 8000b7a:	0408      	lsls	r0, r1, #16
 8000b7c:	0c3f      	lsrs	r7, r7, #16
 8000b7e:	19c0      	adds	r0, r0, r7
 8000b80:	0184      	lsls	r4, r0, #6
 8000b82:	1e67      	subs	r7, r4, #1
 8000b84:	41bc      	sbcs	r4, r7
 8000b86:	0c09      	lsrs	r1, r1, #16
 8000b88:	0e80      	lsrs	r0, r0, #26
 8000b8a:	1989      	adds	r1, r1, r6
 8000b8c:	4304      	orrs	r4, r0
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	430c      	orrs	r4, r1
 8000b92:	0109      	lsls	r1, r1, #4
 8000b94:	d571      	bpl.n	8000c7a <__aeabi_fmul+0x24a>
 8000b96:	2301      	movs	r3, #1
 8000b98:	0861      	lsrs	r1, r4, #1
 8000b9a:	401c      	ands	r4, r3
 8000b9c:	430c      	orrs	r4, r1
 8000b9e:	002b      	movs	r3, r5
 8000ba0:	337f      	adds	r3, #127	; 0x7f
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dd51      	ble.n	8000c4a <__aeabi_fmul+0x21a>
 8000ba6:	0761      	lsls	r1, r4, #29
 8000ba8:	d004      	beq.n	8000bb4 <__aeabi_fmul+0x184>
 8000baa:	210f      	movs	r1, #15
 8000bac:	4021      	ands	r1, r4
 8000bae:	2904      	cmp	r1, #4
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fmul+0x184>
 8000bb2:	3404      	adds	r4, #4
 8000bb4:	0121      	lsls	r1, r4, #4
 8000bb6:	d503      	bpl.n	8000bc0 <__aeabi_fmul+0x190>
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <__aeabi_fmul+0x298>)
 8000bba:	401c      	ands	r4, r3
 8000bbc:	002b      	movs	r3, r5
 8000bbe:	3380      	adds	r3, #128	; 0x80
 8000bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8000bc2:	dcc1      	bgt.n	8000b48 <__aeabi_fmul+0x118>
 8000bc4:	01a1      	lsls	r1, r4, #6
 8000bc6:	0a49      	lsrs	r1, r1, #9
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	e783      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d12c      	bne.n	8000c2a <__aeabi_fmul+0x1fa>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	431e      	orrs	r6, r3
 8000bd6:	002b      	movs	r3, r5
 8000bd8:	407a      	eors	r2, r7
 8000bda:	2001      	movs	r0, #1
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	1c5d      	adds	r5, r3, #1
 8000be0:	2e0a      	cmp	r6, #10
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_fmul+0x1b6>
 8000be4:	e757      	b.n	8000a96 <__aeabi_fmul+0x66>
 8000be6:	e76a      	b.n	8000abe <__aeabi_fmul+0x8e>
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d110      	bne.n	8000c0e <__aeabi_fmul+0x1de>
 8000bec:	2301      	movs	r3, #1
 8000bee:	2604      	movs	r6, #4
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	e738      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <__aeabi_fmul+0x1d4>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	2608      	movs	r6, #8
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	469a      	mov	sl, r3
 8000c02:	e731      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000c04:	2303      	movs	r3, #3
 8000c06:	260c      	movs	r6, #12
 8000c08:	25ff      	movs	r5, #255	; 0xff
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	e72c      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000c0e:	4648      	mov	r0, r9
 8000c10:	f000 fcf0 	bl	80015f4 <__clzsi2>
 8000c14:	464a      	mov	r2, r9
 8000c16:	1f43      	subs	r3, r0, #5
 8000c18:	2576      	movs	r5, #118	; 0x76
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	426d      	negs	r5, r5
 8000c20:	4691      	mov	r9, r2
 8000c22:	2600      	movs	r6, #0
 8000c24:	469a      	mov	sl, r3
 8000c26:	1a2d      	subs	r5, r5, r0
 8000c28:	e71e      	b.n	8000a68 <__aeabi_fmul+0x38>
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	f000 fce2 	bl	80015f4 <__clzsi2>
 8000c30:	4642      	mov	r2, r8
 8000c32:	1f43      	subs	r3, r0, #5
 8000c34:	409c      	lsls	r4, r3
 8000c36:	1a2b      	subs	r3, r5, r0
 8000c38:	3b76      	subs	r3, #118	; 0x76
 8000c3a:	407a      	eors	r2, r7
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	1c5d      	adds	r5, r3, #1
 8000c42:	2e0a      	cmp	r6, #10
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_fmul+0x218>
 8000c46:	e726      	b.n	8000a96 <__aeabi_fmul+0x66>
 8000c48:	e739      	b.n	8000abe <__aeabi_fmul+0x8e>
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	1acb      	subs	r3, r1, r3
 8000c4e:	2b1b      	cmp	r3, #27
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_fmul+0x224>
 8000c52:	e73d      	b.n	8000ad0 <__aeabi_fmul+0xa0>
 8000c54:	359e      	adds	r5, #158	; 0x9e
 8000c56:	0021      	movs	r1, r4
 8000c58:	40ac      	lsls	r4, r5
 8000c5a:	40d9      	lsrs	r1, r3
 8000c5c:	1e63      	subs	r3, r4, #1
 8000c5e:	419c      	sbcs	r4, r3
 8000c60:	4321      	orrs	r1, r4
 8000c62:	074b      	lsls	r3, r1, #29
 8000c64:	d004      	beq.n	8000c70 <__aeabi_fmul+0x240>
 8000c66:	230f      	movs	r3, #15
 8000c68:	400b      	ands	r3, r1
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_fmul+0x240>
 8000c6e:	3104      	adds	r1, #4
 8000c70:	014b      	lsls	r3, r1, #5
 8000c72:	d504      	bpl.n	8000c7e <__aeabi_fmul+0x24e>
 8000c74:	2001      	movs	r0, #1
 8000c76:	2100      	movs	r1, #0
 8000c78:	e72c      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000c7a:	001d      	movs	r5, r3
 8000c7c:	e78f      	b.n	8000b9e <__aeabi_fmul+0x16e>
 8000c7e:	0189      	lsls	r1, r1, #6
 8000c80:	2000      	movs	r0, #0
 8000c82:	0a49      	lsrs	r1, r1, #9
 8000c84:	e726      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000c86:	2302      	movs	r3, #2
 8000c88:	2e0f      	cmp	r6, #15
 8000c8a:	d10c      	bne.n	8000ca6 <__aeabi_fmul+0x276>
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	464b      	mov	r3, r9
 8000c90:	03c9      	lsls	r1, r1, #15
 8000c92:	420b      	tst	r3, r1
 8000c94:	d00d      	beq.n	8000cb2 <__aeabi_fmul+0x282>
 8000c96:	420c      	tst	r4, r1
 8000c98:	d10b      	bne.n	8000cb2 <__aeabi_fmul+0x282>
 8000c9a:	4321      	orrs	r1, r4
 8000c9c:	0249      	lsls	r1, r1, #9
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	20ff      	movs	r0, #255	; 0xff
 8000ca2:	0a49      	lsrs	r1, r1, #9
 8000ca4:	e716      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000ca6:	2e0b      	cmp	r6, #11
 8000ca8:	d000      	beq.n	8000cac <__aeabi_fmul+0x27c>
 8000caa:	e6f7      	b.n	8000a9c <__aeabi_fmul+0x6c>
 8000cac:	46a1      	mov	r9, r4
 8000cae:	469a      	mov	sl, r3
 8000cb0:	e736      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	464b      	mov	r3, r9
 8000cb6:	03c9      	lsls	r1, r1, #15
 8000cb8:	4319      	orrs	r1, r3
 8000cba:	0249      	lsls	r1, r1, #9
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	20ff      	movs	r0, #255	; 0xff
 8000cc0:	0a49      	lsrs	r1, r1, #9
 8000cc2:	e707      	b.n	8000ad4 <__aeabi_fmul+0xa4>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e7df      	b.n	8000c88 <__aeabi_fmul+0x258>
 8000cc8:	f7ffffff 	.word	0xf7ffffff

08000ccc <__aeabi_f2iz>:
 8000ccc:	0241      	lsls	r1, r0, #9
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0fc3      	lsrs	r3, r0, #31
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0e12      	lsrs	r2, r2, #24
 8000cd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cda:	dd03      	ble.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cde:	dd02      	ble.n	8000ce6 <__aeabi_f2iz+0x1a>
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <__aeabi_f2iz+0x3c>)
 8000ce2:	1898      	adds	r0, r3, r2
 8000ce4:	4770      	bx	lr
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	0400      	lsls	r0, r0, #16
 8000cea:	4301      	orrs	r1, r0
 8000cec:	2a95      	cmp	r2, #149	; 0x95
 8000cee:	dc07      	bgt.n	8000d00 <__aeabi_f2iz+0x34>
 8000cf0:	2096      	movs	r0, #150	; 0x96
 8000cf2:	1a82      	subs	r2, r0, r2
 8000cf4:	40d1      	lsrs	r1, r2
 8000cf6:	4248      	negs	r0, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	e7f1      	b.n	8000ce4 <__aeabi_f2iz+0x18>
 8000d00:	3a96      	subs	r2, #150	; 0x96
 8000d02:	4091      	lsls	r1, r2
 8000d04:	e7f7      	b.n	8000cf6 <__aeabi_f2iz+0x2a>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	7fffffff 	.word	0x7fffffff

08000d0c <__aeabi_i2f>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d013      	beq.n	8000d3a <__aeabi_i2f+0x2e>
 8000d12:	17c3      	asrs	r3, r0, #31
 8000d14:	18c5      	adds	r5, r0, r3
 8000d16:	405d      	eors	r5, r3
 8000d18:	0fc4      	lsrs	r4, r0, #31
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	f000 fc6a 	bl	80015f4 <__clzsi2>
 8000d20:	239e      	movs	r3, #158	; 0x9e
 8000d22:	0001      	movs	r1, r0
 8000d24:	1a1b      	subs	r3, r3, r0
 8000d26:	2b96      	cmp	r3, #150	; 0x96
 8000d28:	dc0f      	bgt.n	8000d4a <__aeabi_i2f+0x3e>
 8000d2a:	2808      	cmp	r0, #8
 8000d2c:	d031      	beq.n	8000d92 <__aeabi_i2f+0x86>
 8000d2e:	3908      	subs	r1, #8
 8000d30:	408d      	lsls	r5, r1
 8000d32:	026d      	lsls	r5, r5, #9
 8000d34:	0a6d      	lsrs	r5, r5, #9
 8000d36:	b2d8      	uxtb	r0, r3
 8000d38:	e002      	b.n	8000d40 <__aeabi_i2f+0x34>
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	2500      	movs	r5, #0
 8000d40:	05c0      	lsls	r0, r0, #23
 8000d42:	4328      	orrs	r0, r5
 8000d44:	07e4      	lsls	r4, r4, #31
 8000d46:	4320      	orrs	r0, r4
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	2b99      	cmp	r3, #153	; 0x99
 8000d4c:	dd0c      	ble.n	8000d68 <__aeabi_i2f+0x5c>
 8000d4e:	2205      	movs	r2, #5
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	0028      	movs	r0, r5
 8000d54:	40d0      	lsrs	r0, r2
 8000d56:	0002      	movs	r2, r0
 8000d58:	0008      	movs	r0, r1
 8000d5a:	301b      	adds	r0, #27
 8000d5c:	4085      	lsls	r5, r0
 8000d5e:	0028      	movs	r0, r5
 8000d60:	1e45      	subs	r5, r0, #1
 8000d62:	41a8      	sbcs	r0, r5
 8000d64:	4302      	orrs	r2, r0
 8000d66:	0015      	movs	r5, r2
 8000d68:	2905      	cmp	r1, #5
 8000d6a:	dc16      	bgt.n	8000d9a <__aeabi_i2f+0x8e>
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <__aeabi_i2f+0xa0>)
 8000d70:	4002      	ands	r2, r0
 8000d72:	076e      	lsls	r6, r5, #29
 8000d74:	d009      	beq.n	8000d8a <__aeabi_i2f+0x7e>
 8000d76:	260f      	movs	r6, #15
 8000d78:	4035      	ands	r5, r6
 8000d7a:	2d04      	cmp	r5, #4
 8000d7c:	d005      	beq.n	8000d8a <__aeabi_i2f+0x7e>
 8000d7e:	3204      	adds	r2, #4
 8000d80:	0155      	lsls	r5, r2, #5
 8000d82:	d502      	bpl.n	8000d8a <__aeabi_i2f+0x7e>
 8000d84:	239f      	movs	r3, #159	; 0x9f
 8000d86:	4002      	ands	r2, r0
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	0192      	lsls	r2, r2, #6
 8000d8c:	0a55      	lsrs	r5, r2, #9
 8000d8e:	b2d8      	uxtb	r0, r3
 8000d90:	e7d6      	b.n	8000d40 <__aeabi_i2f+0x34>
 8000d92:	026d      	lsls	r5, r5, #9
 8000d94:	2096      	movs	r0, #150	; 0x96
 8000d96:	0a6d      	lsrs	r5, r5, #9
 8000d98:	e7d2      	b.n	8000d40 <__aeabi_i2f+0x34>
 8000d9a:	1f4a      	subs	r2, r1, #5
 8000d9c:	4095      	lsls	r5, r2
 8000d9e:	002a      	movs	r2, r5
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <__aeabi_i2f+0xa0>)
 8000da2:	4002      	ands	r2, r0
 8000da4:	076e      	lsls	r6, r5, #29
 8000da6:	d0f0      	beq.n	8000d8a <__aeabi_i2f+0x7e>
 8000da8:	e7e5      	b.n	8000d76 <__aeabi_i2f+0x6a>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	fbffffff 	.word	0xfbffffff

08000db0 <__aeabi_ddiv>:
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	4657      	mov	r7, sl
 8000db4:	464e      	mov	r6, r9
 8000db6:	4645      	mov	r5, r8
 8000db8:	46de      	mov	lr, fp
 8000dba:	b5e0      	push	{r5, r6, r7, lr}
 8000dbc:	030c      	lsls	r4, r1, #12
 8000dbe:	001f      	movs	r7, r3
 8000dc0:	004b      	lsls	r3, r1, #1
 8000dc2:	4681      	mov	r9, r0
 8000dc4:	4692      	mov	sl, r2
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	b085      	sub	sp, #20
 8000dca:	0b24      	lsrs	r4, r4, #12
 8000dcc:	0d5b      	lsrs	r3, r3, #21
 8000dce:	0fce      	lsrs	r6, r1, #31
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0x26>
 8000dd4:	e152      	b.n	800107c <__aeabi_ddiv+0x2cc>
 8000dd6:	4ad2      	ldr	r2, [pc, #840]	; (8001120 <__aeabi_ddiv+0x370>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x2e>
 8000ddc:	e16e      	b.n	80010bc <__aeabi_ddiv+0x30c>
 8000dde:	0f42      	lsrs	r2, r0, #29
 8000de0:	00e4      	lsls	r4, r4, #3
 8000de2:	4314      	orrs	r4, r2
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	0412      	lsls	r2, r2, #16
 8000de8:	4322      	orrs	r2, r4
 8000dea:	4690      	mov	r8, r2
 8000dec:	4acd      	ldr	r2, [pc, #820]	; (8001124 <__aeabi_ddiv+0x374>)
 8000dee:	00c5      	lsls	r5, r0, #3
 8000df0:	4693      	mov	fp, r2
 8000df2:	449b      	add	fp, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	4699      	mov	r9, r3
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	033c      	lsls	r4, r7, #12
 8000dfc:	007b      	lsls	r3, r7, #1
 8000dfe:	4650      	mov	r0, sl
 8000e00:	0b24      	lsrs	r4, r4, #12
 8000e02:	0d5b      	lsrs	r3, r3, #21
 8000e04:	0fff      	lsrs	r7, r7, #31
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x5c>
 8000e0a:	e11a      	b.n	8001042 <__aeabi_ddiv+0x292>
 8000e0c:	4ac4      	ldr	r2, [pc, #784]	; (8001120 <__aeabi_ddiv+0x370>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x64>
 8000e12:	e15e      	b.n	80010d2 <__aeabi_ddiv+0x322>
 8000e14:	0f42      	lsrs	r2, r0, #29
 8000e16:	00e4      	lsls	r4, r4, #3
 8000e18:	4322      	orrs	r2, r4
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0424      	lsls	r4, r4, #16
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	4ac0      	ldr	r2, [pc, #768]	; (8001124 <__aeabi_ddiv+0x374>)
 8000e22:	00c1      	lsls	r1, r0, #3
 8000e24:	4694      	mov	ip, r2
 8000e26:	465a      	mov	r2, fp
 8000e28:	4463      	add	r3, ip
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	2000      	movs	r0, #0
 8000e30:	0033      	movs	r3, r6
 8000e32:	407b      	eors	r3, r7
 8000e34:	469a      	mov	sl, r3
 8000e36:	464b      	mov	r3, r9
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d827      	bhi.n	8000e8c <__aeabi_ddiv+0xdc>
 8000e3c:	4aba      	ldr	r2, [pc, #744]	; (8001128 <__aeabi_ddiv+0x378>)
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	58d3      	ldr	r3, [r2, r3]
 8000e42:	469f      	mov	pc, r3
 8000e44:	46b2      	mov	sl, r6
 8000e46:	9b00      	ldr	r3, [sp, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d016      	beq.n	8000e7a <__aeabi_ddiv+0xca>
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_ddiv+0xa2>
 8000e50:	e287      	b.n	8001362 <__aeabi_ddiv+0x5b2>
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d000      	beq.n	8000e58 <__aeabi_ddiv+0xa8>
 8000e56:	e0d5      	b.n	8001004 <__aeabi_ddiv+0x254>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	4313      	orrs	r3, r2
 8000e62:	4652      	mov	r2, sl
 8000e64:	07d2      	lsls	r2, r2, #31
 8000e66:	4313      	orrs	r3, r2
 8000e68:	0028      	movs	r0, r5
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	b005      	add	sp, #20
 8000e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e70:	46bb      	mov	fp, r7
 8000e72:	46b2      	mov	sl, r6
 8000e74:	46a9      	mov	r9, r5
 8000e76:	46a0      	mov	r8, r4
 8000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	4ba8      	ldr	r3, [pc, #672]	; (8001120 <__aeabi_ddiv+0x370>)
 8000e80:	e7ed      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8000e82:	46ba      	mov	sl, r7
 8000e84:	46a0      	mov	r8, r4
 8000e86:	000d      	movs	r5, r1
 8000e88:	9000      	str	r0, [sp, #0]
 8000e8a:	e7dc      	b.n	8000e46 <__aeabi_ddiv+0x96>
 8000e8c:	4544      	cmp	r4, r8
 8000e8e:	d200      	bcs.n	8000e92 <__aeabi_ddiv+0xe2>
 8000e90:	e1c4      	b.n	800121c <__aeabi_ddiv+0x46c>
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0xe6>
 8000e94:	e1bf      	b.n	8001216 <__aeabi_ddiv+0x466>
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	002e      	movs	r6, r5
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	44e3      	add	fp, ip
 8000ea4:	0223      	lsls	r3, r4, #8
 8000ea6:	0e0c      	lsrs	r4, r1, #24
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	4699      	mov	r9, r3
 8000eae:	0423      	lsls	r3, r4, #16
 8000eb0:	020a      	lsls	r2, r1, #8
 8000eb2:	0c1f      	lsrs	r7, r3, #16
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	9200      	str	r2, [sp, #0]
 8000eb8:	9701      	str	r7, [sp, #4]
 8000eba:	f7ff f9ab 	bl	8000214 <__aeabi_uidivmod>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	437a      	muls	r2, r7
 8000ec2:	040b      	lsls	r3, r1, #16
 8000ec4:	0c31      	lsrs	r1, r6, #16
 8000ec6:	4680      	mov	r8, r0
 8000ec8:	4319      	orrs	r1, r3
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	d907      	bls.n	8000ede <__aeabi_ddiv+0x12e>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	1909      	adds	r1, r1, r4
 8000ed6:	44e0      	add	r8, ip
 8000ed8:	428c      	cmp	r4, r1
 8000eda:	d800      	bhi.n	8000ede <__aeabi_ddiv+0x12e>
 8000edc:	e201      	b.n	80012e2 <__aeabi_ddiv+0x532>
 8000ede:	1a88      	subs	r0, r1, r2
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	f7ff f997 	bl	8000214 <__aeabi_uidivmod>
 8000ee6:	9a01      	ldr	r2, [sp, #4]
 8000ee8:	0436      	lsls	r6, r6, #16
 8000eea:	4342      	muls	r2, r0
 8000eec:	0409      	lsls	r1, r1, #16
 8000eee:	0c36      	lsrs	r6, r6, #16
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	430e      	orrs	r6, r1
 8000ef4:	42b2      	cmp	r2, r6
 8000ef6:	d904      	bls.n	8000f02 <__aeabi_ddiv+0x152>
 8000ef8:	1936      	adds	r6, r6, r4
 8000efa:	3b01      	subs	r3, #1
 8000efc:	42b4      	cmp	r4, r6
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x152>
 8000f00:	e1e9      	b.n	80012d6 <__aeabi_ddiv+0x526>
 8000f02:	1ab0      	subs	r0, r6, r2
 8000f04:	4642      	mov	r2, r8
 8000f06:	9e00      	ldr	r6, [sp, #0]
 8000f08:	0412      	lsls	r2, r2, #16
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	0c33      	lsrs	r3, r6, #16
 8000f0e:	001f      	movs	r7, r3
 8000f10:	0c11      	lsrs	r1, r2, #16
 8000f12:	4690      	mov	r8, r2
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	0413      	lsls	r3, r2, #16
 8000f18:	0432      	lsls	r2, r6, #16
 8000f1a:	0c16      	lsrs	r6, r2, #16
 8000f1c:	0032      	movs	r2, r6
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	435a      	muls	r2, r3
 8000f22:	9603      	str	r6, [sp, #12]
 8000f24:	437b      	muls	r3, r7
 8000f26:	434e      	muls	r6, r1
 8000f28:	4379      	muls	r1, r7
 8000f2a:	0c17      	lsrs	r7, r2, #16
 8000f2c:	46bc      	mov	ip, r7
 8000f2e:	199b      	adds	r3, r3, r6
 8000f30:	4463      	add	r3, ip
 8000f32:	429e      	cmp	r6, r3
 8000f34:	d903      	bls.n	8000f3e <__aeabi_ddiv+0x18e>
 8000f36:	2680      	movs	r6, #128	; 0x80
 8000f38:	0276      	lsls	r6, r6, #9
 8000f3a:	46b4      	mov	ip, r6
 8000f3c:	4461      	add	r1, ip
 8000f3e:	0c1e      	lsrs	r6, r3, #16
 8000f40:	1871      	adds	r1, r6, r1
 8000f42:	0416      	lsls	r6, r2, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c36      	lsrs	r6, r6, #16
 8000f48:	199e      	adds	r6, r3, r6
 8000f4a:	4288      	cmp	r0, r1
 8000f4c:	d302      	bcc.n	8000f54 <__aeabi_ddiv+0x1a4>
 8000f4e:	d112      	bne.n	8000f76 <__aeabi_ddiv+0x1c6>
 8000f50:	42b5      	cmp	r5, r6
 8000f52:	d210      	bcs.n	8000f76 <__aeabi_ddiv+0x1c6>
 8000f54:	4643      	mov	r3, r8
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	9b00      	ldr	r3, [sp, #0]
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	4465      	add	r5, ip
 8000f5e:	001f      	movs	r7, r3
 8000f60:	429d      	cmp	r5, r3
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	425b      	negs	r3, r3
 8000f66:	191b      	adds	r3, r3, r4
 8000f68:	18c0      	adds	r0, r0, r3
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	d200      	bcs.n	8000f70 <__aeabi_ddiv+0x1c0>
 8000f6e:	e19e      	b.n	80012ae <__aeabi_ddiv+0x4fe>
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x1c4>
 8000f72:	e199      	b.n	80012a8 <__aeabi_ddiv+0x4f8>
 8000f74:	4690      	mov	r8, r2
 8000f76:	1bae      	subs	r6, r5, r6
 8000f78:	42b5      	cmp	r5, r6
 8000f7a:	41ad      	sbcs	r5, r5
 8000f7c:	1a40      	subs	r0, r0, r1
 8000f7e:	426d      	negs	r5, r5
 8000f80:	1b40      	subs	r0, r0, r5
 8000f82:	4284      	cmp	r4, r0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x1d8>
 8000f86:	e1d2      	b.n	800132e <__aeabi_ddiv+0x57e>
 8000f88:	4649      	mov	r1, r9
 8000f8a:	f7ff f943 	bl	8000214 <__aeabi_uidivmod>
 8000f8e:	9a01      	ldr	r2, [sp, #4]
 8000f90:	040b      	lsls	r3, r1, #16
 8000f92:	4342      	muls	r2, r0
 8000f94:	0c31      	lsrs	r1, r6, #16
 8000f96:	0005      	movs	r5, r0
 8000f98:	4319      	orrs	r1, r3
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1f0>
 8000f9e:	e16c      	b.n	800127a <__aeabi_ddiv+0x4ca>
 8000fa0:	1a88      	subs	r0, r1, r2
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	f7ff f936 	bl	8000214 <__aeabi_uidivmod>
 8000fa8:	9a01      	ldr	r2, [sp, #4]
 8000faa:	0436      	lsls	r6, r6, #16
 8000fac:	4342      	muls	r2, r0
 8000fae:	0409      	lsls	r1, r1, #16
 8000fb0:	0c36      	lsrs	r6, r6, #16
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	430e      	orrs	r6, r1
 8000fb6:	42b2      	cmp	r2, r6
 8000fb8:	d900      	bls.n	8000fbc <__aeabi_ddiv+0x20c>
 8000fba:	e153      	b.n	8001264 <__aeabi_ddiv+0x4b4>
 8000fbc:	9803      	ldr	r0, [sp, #12]
 8000fbe:	1ab6      	subs	r6, r6, r2
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	042d      	lsls	r5, r5, #16
 8000fc4:	431d      	orrs	r5, r3
 8000fc6:	9f02      	ldr	r7, [sp, #8]
 8000fc8:	042b      	lsls	r3, r5, #16
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	435a      	muls	r2, r3
 8000fce:	437b      	muls	r3, r7
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	0c29      	lsrs	r1, r5, #16
 8000fd4:	4348      	muls	r0, r1
 8000fd6:	0c13      	lsrs	r3, r2, #16
 8000fd8:	4484      	add	ip, r0
 8000fda:	4463      	add	r3, ip
 8000fdc:	4379      	muls	r1, r7
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	d903      	bls.n	8000fea <__aeabi_ddiv+0x23a>
 8000fe2:	2080      	movs	r0, #128	; 0x80
 8000fe4:	0240      	lsls	r0, r0, #9
 8000fe6:	4684      	mov	ip, r0
 8000fe8:	4461      	add	r1, ip
 8000fea:	0c18      	lsrs	r0, r3, #16
 8000fec:	0412      	lsls	r2, r2, #16
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	0c12      	lsrs	r2, r2, #16
 8000ff2:	1840      	adds	r0, r0, r1
 8000ff4:	189b      	adds	r3, r3, r2
 8000ff6:	4286      	cmp	r6, r0
 8000ff8:	d200      	bcs.n	8000ffc <__aeabi_ddiv+0x24c>
 8000ffa:	e100      	b.n	80011fe <__aeabi_ddiv+0x44e>
 8000ffc:	d100      	bne.n	8001000 <__aeabi_ddiv+0x250>
 8000ffe:	e0fb      	b.n	80011f8 <__aeabi_ddiv+0x448>
 8001000:	2301      	movs	r3, #1
 8001002:	431d      	orrs	r5, r3
 8001004:	4b49      	ldr	r3, [pc, #292]	; (800112c <__aeabi_ddiv+0x37c>)
 8001006:	445b      	add	r3, fp
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x25e>
 800100c:	e0aa      	b.n	8001164 <__aeabi_ddiv+0x3b4>
 800100e:	076a      	lsls	r2, r5, #29
 8001010:	d000      	beq.n	8001014 <__aeabi_ddiv+0x264>
 8001012:	e13d      	b.n	8001290 <__aeabi_ddiv+0x4e0>
 8001014:	08e9      	lsrs	r1, r5, #3
 8001016:	4642      	mov	r2, r8
 8001018:	01d2      	lsls	r2, r2, #7
 800101a:	d506      	bpl.n	800102a <__aeabi_ddiv+0x27a>
 800101c:	4642      	mov	r2, r8
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <__aeabi_ddiv+0x380>)
 8001020:	401a      	ands	r2, r3
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4690      	mov	r8, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	445b      	add	r3, fp
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <__aeabi_ddiv+0x384>)
 800102c:	4293      	cmp	r3, r2
 800102e:	dd00      	ble.n	8001032 <__aeabi_ddiv+0x282>
 8001030:	e723      	b.n	8000e7a <__aeabi_ddiv+0xca>
 8001032:	4642      	mov	r2, r8
 8001034:	055b      	lsls	r3, r3, #21
 8001036:	0755      	lsls	r5, r2, #29
 8001038:	0252      	lsls	r2, r2, #9
 800103a:	430d      	orrs	r5, r1
 800103c:	0b12      	lsrs	r2, r2, #12
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	e70d      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8001042:	4651      	mov	r1, sl
 8001044:	4321      	orrs	r1, r4
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x29a>
 8001048:	e07c      	b.n	8001144 <__aeabi_ddiv+0x394>
 800104a:	2c00      	cmp	r4, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x2a0>
 800104e:	e0fb      	b.n	8001248 <__aeabi_ddiv+0x498>
 8001050:	0020      	movs	r0, r4
 8001052:	f000 facf 	bl	80015f4 <__clzsi2>
 8001056:	0002      	movs	r2, r0
 8001058:	3a0b      	subs	r2, #11
 800105a:	231d      	movs	r3, #29
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	4652      	mov	r2, sl
 8001060:	0001      	movs	r1, r0
 8001062:	40da      	lsrs	r2, r3
 8001064:	4653      	mov	r3, sl
 8001066:	3908      	subs	r1, #8
 8001068:	408b      	lsls	r3, r1
 800106a:	408c      	lsls	r4, r1
 800106c:	0019      	movs	r1, r3
 800106e:	4314      	orrs	r4, r2
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <__aeabi_ddiv+0x388>)
 8001072:	4458      	add	r0, fp
 8001074:	469b      	mov	fp, r3
 8001076:	4483      	add	fp, r0
 8001078:	2000      	movs	r0, #0
 800107a:	e6d9      	b.n	8000e30 <__aeabi_ddiv+0x80>
 800107c:	0003      	movs	r3, r0
 800107e:	4323      	orrs	r3, r4
 8001080:	4698      	mov	r8, r3
 8001082:	d044      	beq.n	800110e <__aeabi_ddiv+0x35e>
 8001084:	2c00      	cmp	r4, #0
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x2da>
 8001088:	e0cf      	b.n	800122a <__aeabi_ddiv+0x47a>
 800108a:	0020      	movs	r0, r4
 800108c:	f000 fab2 	bl	80015f4 <__clzsi2>
 8001090:	0001      	movs	r1, r0
 8001092:	0002      	movs	r2, r0
 8001094:	390b      	subs	r1, #11
 8001096:	231d      	movs	r3, #29
 8001098:	1a5b      	subs	r3, r3, r1
 800109a:	4649      	mov	r1, r9
 800109c:	0010      	movs	r0, r2
 800109e:	40d9      	lsrs	r1, r3
 80010a0:	3808      	subs	r0, #8
 80010a2:	4084      	lsls	r4, r0
 80010a4:	000b      	movs	r3, r1
 80010a6:	464d      	mov	r5, r9
 80010a8:	4323      	orrs	r3, r4
 80010aa:	4698      	mov	r8, r3
 80010ac:	4085      	lsls	r5, r0
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <__aeabi_ddiv+0x38c>)
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	469b      	mov	fp, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	4699      	mov	r9, r3
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	e69e      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 80010bc:	0002      	movs	r2, r0
 80010be:	4322      	orrs	r2, r4
 80010c0:	4690      	mov	r8, r2
 80010c2:	d11d      	bne.n	8001100 <__aeabi_ddiv+0x350>
 80010c4:	2208      	movs	r2, #8
 80010c6:	469b      	mov	fp, r3
 80010c8:	2302      	movs	r3, #2
 80010ca:	2500      	movs	r5, #0
 80010cc:	4691      	mov	r9, r2
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	e693      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 80010d2:	4651      	mov	r1, sl
 80010d4:	4321      	orrs	r1, r4
 80010d6:	d109      	bne.n	80010ec <__aeabi_ddiv+0x33c>
 80010d8:	2302      	movs	r3, #2
 80010da:	464a      	mov	r2, r9
 80010dc:	431a      	orrs	r2, r3
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <__aeabi_ddiv+0x390>)
 80010e0:	4691      	mov	r9, r2
 80010e2:	469c      	mov	ip, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	2002      	movs	r0, #2
 80010e8:	44e3      	add	fp, ip
 80010ea:	e6a1      	b.n	8000e30 <__aeabi_ddiv+0x80>
 80010ec:	2303      	movs	r3, #3
 80010ee:	464a      	mov	r2, r9
 80010f0:	431a      	orrs	r2, r3
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <__aeabi_ddiv+0x390>)
 80010f4:	4691      	mov	r9, r2
 80010f6:	469c      	mov	ip, r3
 80010f8:	4651      	mov	r1, sl
 80010fa:	2003      	movs	r0, #3
 80010fc:	44e3      	add	fp, ip
 80010fe:	e697      	b.n	8000e30 <__aeabi_ddiv+0x80>
 8001100:	220c      	movs	r2, #12
 8001102:	469b      	mov	fp, r3
 8001104:	2303      	movs	r3, #3
 8001106:	46a0      	mov	r8, r4
 8001108:	4691      	mov	r9, r2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	e675      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 800110e:	2304      	movs	r3, #4
 8001110:	4699      	mov	r9, r3
 8001112:	2300      	movs	r3, #0
 8001114:	469b      	mov	fp, r3
 8001116:	3301      	adds	r3, #1
 8001118:	2500      	movs	r5, #0
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	e66d      	b.n	8000dfa <__aeabi_ddiv+0x4a>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff
 8001124:	fffffc01 	.word	0xfffffc01
 8001128:	08005bfc 	.word	0x08005bfc
 800112c:	000003ff 	.word	0x000003ff
 8001130:	feffffff 	.word	0xfeffffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	000003f3 	.word	0x000003f3
 800113c:	fffffc0d 	.word	0xfffffc0d
 8001140:	fffff801 	.word	0xfffff801
 8001144:	464a      	mov	r2, r9
 8001146:	2301      	movs	r3, #1
 8001148:	431a      	orrs	r2, r3
 800114a:	4691      	mov	r9, r2
 800114c:	2400      	movs	r4, #0
 800114e:	2001      	movs	r0, #1
 8001150:	e66e      	b.n	8000e30 <__aeabi_ddiv+0x80>
 8001152:	2300      	movs	r3, #0
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	469a      	mov	sl, r3
 8001158:	2500      	movs	r5, #0
 800115a:	4b88      	ldr	r3, [pc, #544]	; (800137c <__aeabi_ddiv+0x5cc>)
 800115c:	0312      	lsls	r2, r2, #12
 800115e:	e67e      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8001160:	2501      	movs	r5, #1
 8001162:	426d      	negs	r5, r5
 8001164:	2201      	movs	r2, #1
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	2a38      	cmp	r2, #56	; 0x38
 800116a:	dd00      	ble.n	800116e <__aeabi_ddiv+0x3be>
 800116c:	e674      	b.n	8000e58 <__aeabi_ddiv+0xa8>
 800116e:	2a1f      	cmp	r2, #31
 8001170:	dc00      	bgt.n	8001174 <__aeabi_ddiv+0x3c4>
 8001172:	e0bd      	b.n	80012f0 <__aeabi_ddiv+0x540>
 8001174:	211f      	movs	r1, #31
 8001176:	4249      	negs	r1, r1
 8001178:	1acb      	subs	r3, r1, r3
 800117a:	4641      	mov	r1, r8
 800117c:	40d9      	lsrs	r1, r3
 800117e:	000b      	movs	r3, r1
 8001180:	2a20      	cmp	r2, #32
 8001182:	d004      	beq.n	800118e <__aeabi_ddiv+0x3de>
 8001184:	4641      	mov	r1, r8
 8001186:	4a7e      	ldr	r2, [pc, #504]	; (8001380 <__aeabi_ddiv+0x5d0>)
 8001188:	445a      	add	r2, fp
 800118a:	4091      	lsls	r1, r2
 800118c:	430d      	orrs	r5, r1
 800118e:	0029      	movs	r1, r5
 8001190:	1e4a      	subs	r2, r1, #1
 8001192:	4191      	sbcs	r1, r2
 8001194:	4319      	orrs	r1, r3
 8001196:	2307      	movs	r3, #7
 8001198:	001d      	movs	r5, r3
 800119a:	2200      	movs	r2, #0
 800119c:	400d      	ands	r5, r1
 800119e:	420b      	tst	r3, r1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x3f4>
 80011a2:	e0d0      	b.n	8001346 <__aeabi_ddiv+0x596>
 80011a4:	220f      	movs	r2, #15
 80011a6:	2300      	movs	r3, #0
 80011a8:	400a      	ands	r2, r1
 80011aa:	2a04      	cmp	r2, #4
 80011ac:	d100      	bne.n	80011b0 <__aeabi_ddiv+0x400>
 80011ae:	e0c7      	b.n	8001340 <__aeabi_ddiv+0x590>
 80011b0:	1d0a      	adds	r2, r1, #4
 80011b2:	428a      	cmp	r2, r1
 80011b4:	4189      	sbcs	r1, r1
 80011b6:	4249      	negs	r1, r1
 80011b8:	185b      	adds	r3, r3, r1
 80011ba:	0011      	movs	r1, r2
 80011bc:	021a      	lsls	r2, r3, #8
 80011be:	d400      	bmi.n	80011c2 <__aeabi_ddiv+0x412>
 80011c0:	e0be      	b.n	8001340 <__aeabi_ddiv+0x590>
 80011c2:	2301      	movs	r3, #1
 80011c4:	2200      	movs	r2, #0
 80011c6:	2500      	movs	r5, #0
 80011c8:	e649      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	4643      	mov	r3, r8
 80011ce:	0312      	lsls	r2, r2, #12
 80011d0:	4213      	tst	r3, r2
 80011d2:	d008      	beq.n	80011e6 <__aeabi_ddiv+0x436>
 80011d4:	4214      	tst	r4, r2
 80011d6:	d106      	bne.n	80011e6 <__aeabi_ddiv+0x436>
 80011d8:	4322      	orrs	r2, r4
 80011da:	0312      	lsls	r2, r2, #12
 80011dc:	46ba      	mov	sl, r7
 80011de:	000d      	movs	r5, r1
 80011e0:	4b66      	ldr	r3, [pc, #408]	; (800137c <__aeabi_ddiv+0x5cc>)
 80011e2:	0b12      	lsrs	r2, r2, #12
 80011e4:	e63b      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	4643      	mov	r3, r8
 80011ea:	0312      	lsls	r2, r2, #12
 80011ec:	431a      	orrs	r2, r3
 80011ee:	0312      	lsls	r2, r2, #12
 80011f0:	46b2      	mov	sl, r6
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <__aeabi_ddiv+0x5cc>)
 80011f4:	0b12      	lsrs	r2, r2, #12
 80011f6:	e632      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x44e>
 80011fc:	e702      	b.n	8001004 <__aeabi_ddiv+0x254>
 80011fe:	19a6      	adds	r6, r4, r6
 8001200:	1e6a      	subs	r2, r5, #1
 8001202:	42a6      	cmp	r6, r4
 8001204:	d200      	bcs.n	8001208 <__aeabi_ddiv+0x458>
 8001206:	e089      	b.n	800131c <__aeabi_ddiv+0x56c>
 8001208:	4286      	cmp	r6, r0
 800120a:	d200      	bcs.n	800120e <__aeabi_ddiv+0x45e>
 800120c:	e09f      	b.n	800134e <__aeabi_ddiv+0x59e>
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0x462>
 8001210:	e0af      	b.n	8001372 <__aeabi_ddiv+0x5c2>
 8001212:	0015      	movs	r5, r2
 8001214:	e6f4      	b.n	8001000 <__aeabi_ddiv+0x250>
 8001216:	42a9      	cmp	r1, r5
 8001218:	d900      	bls.n	800121c <__aeabi_ddiv+0x46c>
 800121a:	e63c      	b.n	8000e96 <__aeabi_ddiv+0xe6>
 800121c:	4643      	mov	r3, r8
 800121e:	07de      	lsls	r6, r3, #31
 8001220:	0858      	lsrs	r0, r3, #1
 8001222:	086b      	lsrs	r3, r5, #1
 8001224:	431e      	orrs	r6, r3
 8001226:	07ed      	lsls	r5, r5, #31
 8001228:	e63c      	b.n	8000ea4 <__aeabi_ddiv+0xf4>
 800122a:	f000 f9e3 	bl	80015f4 <__clzsi2>
 800122e:	0001      	movs	r1, r0
 8001230:	0002      	movs	r2, r0
 8001232:	3115      	adds	r1, #21
 8001234:	3220      	adds	r2, #32
 8001236:	291c      	cmp	r1, #28
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x48c>
 800123a:	e72c      	b.n	8001096 <__aeabi_ddiv+0x2e6>
 800123c:	464b      	mov	r3, r9
 800123e:	3808      	subs	r0, #8
 8001240:	4083      	lsls	r3, r0
 8001242:	2500      	movs	r5, #0
 8001244:	4698      	mov	r8, r3
 8001246:	e732      	b.n	80010ae <__aeabi_ddiv+0x2fe>
 8001248:	f000 f9d4 	bl	80015f4 <__clzsi2>
 800124c:	0003      	movs	r3, r0
 800124e:	001a      	movs	r2, r3
 8001250:	3215      	adds	r2, #21
 8001252:	3020      	adds	r0, #32
 8001254:	2a1c      	cmp	r2, #28
 8001256:	dc00      	bgt.n	800125a <__aeabi_ddiv+0x4aa>
 8001258:	e6ff      	b.n	800105a <__aeabi_ddiv+0x2aa>
 800125a:	4654      	mov	r4, sl
 800125c:	3b08      	subs	r3, #8
 800125e:	2100      	movs	r1, #0
 8001260:	409c      	lsls	r4, r3
 8001262:	e705      	b.n	8001070 <__aeabi_ddiv+0x2c0>
 8001264:	1936      	adds	r6, r6, r4
 8001266:	3b01      	subs	r3, #1
 8001268:	42b4      	cmp	r4, r6
 800126a:	d900      	bls.n	800126e <__aeabi_ddiv+0x4be>
 800126c:	e6a6      	b.n	8000fbc <__aeabi_ddiv+0x20c>
 800126e:	42b2      	cmp	r2, r6
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x4c4>
 8001272:	e6a3      	b.n	8000fbc <__aeabi_ddiv+0x20c>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	1936      	adds	r6, r6, r4
 8001278:	e6a0      	b.n	8000fbc <__aeabi_ddiv+0x20c>
 800127a:	1909      	adds	r1, r1, r4
 800127c:	3d01      	subs	r5, #1
 800127e:	428c      	cmp	r4, r1
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x4d4>
 8001282:	e68d      	b.n	8000fa0 <__aeabi_ddiv+0x1f0>
 8001284:	428a      	cmp	r2, r1
 8001286:	d800      	bhi.n	800128a <__aeabi_ddiv+0x4da>
 8001288:	e68a      	b.n	8000fa0 <__aeabi_ddiv+0x1f0>
 800128a:	1e85      	subs	r5, r0, #2
 800128c:	1909      	adds	r1, r1, r4
 800128e:	e687      	b.n	8000fa0 <__aeabi_ddiv+0x1f0>
 8001290:	220f      	movs	r2, #15
 8001292:	402a      	ands	r2, r5
 8001294:	2a04      	cmp	r2, #4
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x4ea>
 8001298:	e6bc      	b.n	8001014 <__aeabi_ddiv+0x264>
 800129a:	1d29      	adds	r1, r5, #4
 800129c:	42a9      	cmp	r1, r5
 800129e:	41ad      	sbcs	r5, r5
 80012a0:	426d      	negs	r5, r5
 80012a2:	08c9      	lsrs	r1, r1, #3
 80012a4:	44a8      	add	r8, r5
 80012a6:	e6b6      	b.n	8001016 <__aeabi_ddiv+0x266>
 80012a8:	42af      	cmp	r7, r5
 80012aa:	d900      	bls.n	80012ae <__aeabi_ddiv+0x4fe>
 80012ac:	e662      	b.n	8000f74 <__aeabi_ddiv+0x1c4>
 80012ae:	4281      	cmp	r1, r0
 80012b0:	d804      	bhi.n	80012bc <__aeabi_ddiv+0x50c>
 80012b2:	d000      	beq.n	80012b6 <__aeabi_ddiv+0x506>
 80012b4:	e65e      	b.n	8000f74 <__aeabi_ddiv+0x1c4>
 80012b6:	42ae      	cmp	r6, r5
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x50c>
 80012ba:	e65b      	b.n	8000f74 <__aeabi_ddiv+0x1c4>
 80012bc:	2302      	movs	r3, #2
 80012be:	425b      	negs	r3, r3
 80012c0:	469c      	mov	ip, r3
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	44e0      	add	r8, ip
 80012c6:	469c      	mov	ip, r3
 80012c8:	4465      	add	r5, ip
 80012ca:	429d      	cmp	r5, r3
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	425b      	negs	r3, r3
 80012d0:	191b      	adds	r3, r3, r4
 80012d2:	18c0      	adds	r0, r0, r3
 80012d4:	e64f      	b.n	8000f76 <__aeabi_ddiv+0x1c6>
 80012d6:	42b2      	cmp	r2, r6
 80012d8:	d800      	bhi.n	80012dc <__aeabi_ddiv+0x52c>
 80012da:	e612      	b.n	8000f02 <__aeabi_ddiv+0x152>
 80012dc:	1e83      	subs	r3, r0, #2
 80012de:	1936      	adds	r6, r6, r4
 80012e0:	e60f      	b.n	8000f02 <__aeabi_ddiv+0x152>
 80012e2:	428a      	cmp	r2, r1
 80012e4:	d800      	bhi.n	80012e8 <__aeabi_ddiv+0x538>
 80012e6:	e5fa      	b.n	8000ede <__aeabi_ddiv+0x12e>
 80012e8:	1e83      	subs	r3, r0, #2
 80012ea:	4698      	mov	r8, r3
 80012ec:	1909      	adds	r1, r1, r4
 80012ee:	e5f6      	b.n	8000ede <__aeabi_ddiv+0x12e>
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <__aeabi_ddiv+0x5d4>)
 80012f2:	0028      	movs	r0, r5
 80012f4:	445b      	add	r3, fp
 80012f6:	4641      	mov	r1, r8
 80012f8:	409d      	lsls	r5, r3
 80012fa:	4099      	lsls	r1, r3
 80012fc:	40d0      	lsrs	r0, r2
 80012fe:	1e6b      	subs	r3, r5, #1
 8001300:	419d      	sbcs	r5, r3
 8001302:	4643      	mov	r3, r8
 8001304:	4301      	orrs	r1, r0
 8001306:	4329      	orrs	r1, r5
 8001308:	40d3      	lsrs	r3, r2
 800130a:	074a      	lsls	r2, r1, #29
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x560>
 800130e:	e755      	b.n	80011bc <__aeabi_ddiv+0x40c>
 8001310:	220f      	movs	r2, #15
 8001312:	400a      	ands	r2, r1
 8001314:	2a04      	cmp	r2, #4
 8001316:	d000      	beq.n	800131a <__aeabi_ddiv+0x56a>
 8001318:	e74a      	b.n	80011b0 <__aeabi_ddiv+0x400>
 800131a:	e74f      	b.n	80011bc <__aeabi_ddiv+0x40c>
 800131c:	0015      	movs	r5, r2
 800131e:	4286      	cmp	r6, r0
 8001320:	d000      	beq.n	8001324 <__aeabi_ddiv+0x574>
 8001322:	e66d      	b.n	8001000 <__aeabi_ddiv+0x250>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d000      	beq.n	800132c <__aeabi_ddiv+0x57c>
 800132a:	e669      	b.n	8001000 <__aeabi_ddiv+0x250>
 800132c:	e66a      	b.n	8001004 <__aeabi_ddiv+0x254>
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <__aeabi_ddiv+0x5d8>)
 8001330:	445b      	add	r3, fp
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc00      	bgt.n	8001338 <__aeabi_ddiv+0x588>
 8001336:	e713      	b.n	8001160 <__aeabi_ddiv+0x3b0>
 8001338:	2501      	movs	r5, #1
 800133a:	2100      	movs	r1, #0
 800133c:	44a8      	add	r8, r5
 800133e:	e66a      	b.n	8001016 <__aeabi_ddiv+0x266>
 8001340:	075d      	lsls	r5, r3, #29
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	0b1a      	lsrs	r2, r3, #12
 8001346:	08c9      	lsrs	r1, r1, #3
 8001348:	2300      	movs	r3, #0
 800134a:	430d      	orrs	r5, r1
 800134c:	e587      	b.n	8000e5e <__aeabi_ddiv+0xae>
 800134e:	9900      	ldr	r1, [sp, #0]
 8001350:	3d02      	subs	r5, #2
 8001352:	004a      	lsls	r2, r1, #1
 8001354:	428a      	cmp	r2, r1
 8001356:	41bf      	sbcs	r7, r7
 8001358:	427f      	negs	r7, r7
 800135a:	193f      	adds	r7, r7, r4
 800135c:	19f6      	adds	r6, r6, r7
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	e7dd      	b.n	800131e <__aeabi_ddiv+0x56e>
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	4643      	mov	r3, r8
 8001366:	0312      	lsls	r2, r2, #12
 8001368:	431a      	orrs	r2, r3
 800136a:	0312      	lsls	r2, r2, #12
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <__aeabi_ddiv+0x5cc>)
 800136e:	0b12      	lsrs	r2, r2, #12
 8001370:	e575      	b.n	8000e5e <__aeabi_ddiv+0xae>
 8001372:	9900      	ldr	r1, [sp, #0]
 8001374:	4299      	cmp	r1, r3
 8001376:	d3ea      	bcc.n	800134e <__aeabi_ddiv+0x59e>
 8001378:	0015      	movs	r5, r2
 800137a:	e7d3      	b.n	8001324 <__aeabi_ddiv+0x574>
 800137c:	000007ff 	.word	0x000007ff
 8001380:	0000043e 	.word	0x0000043e
 8001384:	0000041e 	.word	0x0000041e
 8001388:	000003ff 	.word	0x000003ff

0800138c <__aeabi_d2iz>:
 800138c:	000a      	movs	r2, r1
 800138e:	b530      	push	{r4, r5, lr}
 8001390:	4c13      	ldr	r4, [pc, #76]	; (80013e0 <__aeabi_d2iz+0x54>)
 8001392:	0053      	lsls	r3, r2, #1
 8001394:	0309      	lsls	r1, r1, #12
 8001396:	0005      	movs	r5, r0
 8001398:	0b09      	lsrs	r1, r1, #12
 800139a:	2000      	movs	r0, #0
 800139c:	0d5b      	lsrs	r3, r3, #21
 800139e:	0fd2      	lsrs	r2, r2, #31
 80013a0:	42a3      	cmp	r3, r4
 80013a2:	dd04      	ble.n	80013ae <__aeabi_d2iz+0x22>
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <__aeabi_d2iz+0x58>)
 80013a6:	4283      	cmp	r3, r0
 80013a8:	dd02      	ble.n	80013b0 <__aeabi_d2iz+0x24>
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <__aeabi_d2iz+0x5c>)
 80013ac:	18d0      	adds	r0, r2, r3
 80013ae:	bd30      	pop	{r4, r5, pc}
 80013b0:	2080      	movs	r0, #128	; 0x80
 80013b2:	0340      	lsls	r0, r0, #13
 80013b4:	4301      	orrs	r1, r0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <__aeabi_d2iz+0x60>)
 80013b8:	1ac0      	subs	r0, r0, r3
 80013ba:	281f      	cmp	r0, #31
 80013bc:	dd08      	ble.n	80013d0 <__aeabi_d2iz+0x44>
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <__aeabi_d2iz+0x64>)
 80013c0:	1ac3      	subs	r3, r0, r3
 80013c2:	40d9      	lsrs	r1, r3
 80013c4:	000b      	movs	r3, r1
 80013c6:	4258      	negs	r0, r3
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d1f0      	bne.n	80013ae <__aeabi_d2iz+0x22>
 80013cc:	0018      	movs	r0, r3
 80013ce:	e7ee      	b.n	80013ae <__aeabi_d2iz+0x22>
 80013d0:	4c08      	ldr	r4, [pc, #32]	; (80013f4 <__aeabi_d2iz+0x68>)
 80013d2:	40c5      	lsrs	r5, r0
 80013d4:	46a4      	mov	ip, r4
 80013d6:	4463      	add	r3, ip
 80013d8:	4099      	lsls	r1, r3
 80013da:	000b      	movs	r3, r1
 80013dc:	432b      	orrs	r3, r5
 80013de:	e7f2      	b.n	80013c6 <__aeabi_d2iz+0x3a>
 80013e0:	000003fe 	.word	0x000003fe
 80013e4:	0000041d 	.word	0x0000041d
 80013e8:	7fffffff 	.word	0x7fffffff
 80013ec:	00000433 	.word	0x00000433
 80013f0:	00000413 	.word	0x00000413
 80013f4:	fffffbed 	.word	0xfffffbed

080013f8 <__aeabi_i2d>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d016      	beq.n	800142c <__aeabi_i2d+0x34>
 80013fe:	17c3      	asrs	r3, r0, #31
 8001400:	18c5      	adds	r5, r0, r3
 8001402:	405d      	eors	r5, r3
 8001404:	0fc4      	lsrs	r4, r0, #31
 8001406:	0028      	movs	r0, r5
 8001408:	f000 f8f4 	bl	80015f4 <__clzsi2>
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <__aeabi_i2d+0x5c>)
 800140e:	1a1b      	subs	r3, r3, r0
 8001410:	280a      	cmp	r0, #10
 8001412:	dc16      	bgt.n	8001442 <__aeabi_i2d+0x4a>
 8001414:	0002      	movs	r2, r0
 8001416:	002e      	movs	r6, r5
 8001418:	3215      	adds	r2, #21
 800141a:	4096      	lsls	r6, r2
 800141c:	220b      	movs	r2, #11
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	40d5      	lsrs	r5, r2
 8001422:	055b      	lsls	r3, r3, #21
 8001424:	032d      	lsls	r5, r5, #12
 8001426:	0b2d      	lsrs	r5, r5, #12
 8001428:	0d5b      	lsrs	r3, r3, #21
 800142a:	e003      	b.n	8001434 <__aeabi_i2d+0x3c>
 800142c:	2400      	movs	r4, #0
 800142e:	2300      	movs	r3, #0
 8001430:	2500      	movs	r5, #0
 8001432:	2600      	movs	r6, #0
 8001434:	051b      	lsls	r3, r3, #20
 8001436:	432b      	orrs	r3, r5
 8001438:	07e4      	lsls	r4, r4, #31
 800143a:	4323      	orrs	r3, r4
 800143c:	0030      	movs	r0, r6
 800143e:	0019      	movs	r1, r3
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	380b      	subs	r0, #11
 8001444:	4085      	lsls	r5, r0
 8001446:	055b      	lsls	r3, r3, #21
 8001448:	032d      	lsls	r5, r5, #12
 800144a:	2600      	movs	r6, #0
 800144c:	0b2d      	lsrs	r5, r5, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	e7f0      	b.n	8001434 <__aeabi_i2d+0x3c>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	0000041e 	.word	0x0000041e

08001458 <__aeabi_f2d>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	0242      	lsls	r2, r0, #9
 800145c:	0043      	lsls	r3, r0, #1
 800145e:	0fc4      	lsrs	r4, r0, #31
 8001460:	20fe      	movs	r0, #254	; 0xfe
 8001462:	0e1b      	lsrs	r3, r3, #24
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	0a55      	lsrs	r5, r2, #9
 8001468:	4208      	tst	r0, r1
 800146a:	d00c      	beq.n	8001486 <__aeabi_f2d+0x2e>
 800146c:	21e0      	movs	r1, #224	; 0xe0
 800146e:	0089      	lsls	r1, r1, #2
 8001470:	468c      	mov	ip, r1
 8001472:	076d      	lsls	r5, r5, #29
 8001474:	0b12      	lsrs	r2, r2, #12
 8001476:	4463      	add	r3, ip
 8001478:	051b      	lsls	r3, r3, #20
 800147a:	4313      	orrs	r3, r2
 800147c:	07e4      	lsls	r4, r4, #31
 800147e:	4323      	orrs	r3, r4
 8001480:	0028      	movs	r0, r5
 8001482:	0019      	movs	r1, r3
 8001484:	bd70      	pop	{r4, r5, r6, pc}
 8001486:	2b00      	cmp	r3, #0
 8001488:	d114      	bne.n	80014b4 <__aeabi_f2d+0x5c>
 800148a:	2d00      	cmp	r5, #0
 800148c:	d01b      	beq.n	80014c6 <__aeabi_f2d+0x6e>
 800148e:	0028      	movs	r0, r5
 8001490:	f000 f8b0 	bl	80015f4 <__clzsi2>
 8001494:	280a      	cmp	r0, #10
 8001496:	dc1c      	bgt.n	80014d2 <__aeabi_f2d+0x7a>
 8001498:	230b      	movs	r3, #11
 800149a:	002a      	movs	r2, r5
 800149c:	1a1b      	subs	r3, r3, r0
 800149e:	40da      	lsrs	r2, r3
 80014a0:	0003      	movs	r3, r0
 80014a2:	3315      	adds	r3, #21
 80014a4:	409d      	lsls	r5, r3
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <__aeabi_f2d+0x88>)
 80014a8:	0312      	lsls	r2, r2, #12
 80014aa:	1a1b      	subs	r3, r3, r0
 80014ac:	055b      	lsls	r3, r3, #21
 80014ae:	0b12      	lsrs	r2, r2, #12
 80014b0:	0d5b      	lsrs	r3, r3, #21
 80014b2:	e7e1      	b.n	8001478 <__aeabi_f2d+0x20>
 80014b4:	2d00      	cmp	r5, #0
 80014b6:	d009      	beq.n	80014cc <__aeabi_f2d+0x74>
 80014b8:	0b13      	lsrs	r3, r2, #12
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	0312      	lsls	r2, r2, #12
 80014be:	431a      	orrs	r2, r3
 80014c0:	076d      	lsls	r5, r5, #29
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <__aeabi_f2d+0x8c>)
 80014c4:	e7d8      	b.n	8001478 <__aeabi_f2d+0x20>
 80014c6:	2300      	movs	r3, #0
 80014c8:	2200      	movs	r2, #0
 80014ca:	e7d5      	b.n	8001478 <__aeabi_f2d+0x20>
 80014cc:	2200      	movs	r2, #0
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <__aeabi_f2d+0x8c>)
 80014d0:	e7d2      	b.n	8001478 <__aeabi_f2d+0x20>
 80014d2:	0003      	movs	r3, r0
 80014d4:	002a      	movs	r2, r5
 80014d6:	3b0b      	subs	r3, #11
 80014d8:	409a      	lsls	r2, r3
 80014da:	2500      	movs	r5, #0
 80014dc:	e7e3      	b.n	80014a6 <__aeabi_f2d+0x4e>
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	00000389 	.word	0x00000389
 80014e4:	000007ff 	.word	0x000007ff

080014e8 <__aeabi_d2f>:
 80014e8:	0002      	movs	r2, r0
 80014ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ec:	004b      	lsls	r3, r1, #1
 80014ee:	030d      	lsls	r5, r1, #12
 80014f0:	0f40      	lsrs	r0, r0, #29
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	0fcc      	lsrs	r4, r1, #31
 80014f6:	0a6d      	lsrs	r5, r5, #9
 80014f8:	493a      	ldr	r1, [pc, #232]	; (80015e4 <__aeabi_d2f+0xfc>)
 80014fa:	4305      	orrs	r5, r0
 80014fc:	1c58      	adds	r0, r3, #1
 80014fe:	00d7      	lsls	r7, r2, #3
 8001500:	4208      	tst	r0, r1
 8001502:	d00a      	beq.n	800151a <__aeabi_d2f+0x32>
 8001504:	4938      	ldr	r1, [pc, #224]	; (80015e8 <__aeabi_d2f+0x100>)
 8001506:	1859      	adds	r1, r3, r1
 8001508:	29fe      	cmp	r1, #254	; 0xfe
 800150a:	dd16      	ble.n	800153a <__aeabi_d2f+0x52>
 800150c:	20ff      	movs	r0, #255	; 0xff
 800150e:	2200      	movs	r2, #0
 8001510:	05c0      	lsls	r0, r0, #23
 8001512:	4310      	orrs	r0, r2
 8001514:	07e4      	lsls	r4, r4, #31
 8001516:	4320      	orrs	r0, r4
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <__aeabi_d2f+0x44>
 800151e:	433d      	orrs	r5, r7
 8001520:	d026      	beq.n	8001570 <__aeabi_d2f+0x88>
 8001522:	2205      	movs	r2, #5
 8001524:	0192      	lsls	r2, r2, #6
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	e7f1      	b.n	8001510 <__aeabi_d2f+0x28>
 800152c:	432f      	orrs	r7, r5
 800152e:	d0ed      	beq.n	800150c <__aeabi_d2f+0x24>
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	03d2      	lsls	r2, r2, #15
 8001534:	20ff      	movs	r0, #255	; 0xff
 8001536:	432a      	orrs	r2, r5
 8001538:	e7ea      	b.n	8001510 <__aeabi_d2f+0x28>
 800153a:	2900      	cmp	r1, #0
 800153c:	dd1b      	ble.n	8001576 <__aeabi_d2f+0x8e>
 800153e:	0192      	lsls	r2, r2, #6
 8001540:	1e50      	subs	r0, r2, #1
 8001542:	4182      	sbcs	r2, r0
 8001544:	00ed      	lsls	r5, r5, #3
 8001546:	0f7f      	lsrs	r7, r7, #29
 8001548:	432a      	orrs	r2, r5
 800154a:	433a      	orrs	r2, r7
 800154c:	0753      	lsls	r3, r2, #29
 800154e:	d047      	beq.n	80015e0 <__aeabi_d2f+0xf8>
 8001550:	230f      	movs	r3, #15
 8001552:	4013      	ands	r3, r2
 8001554:	2b04      	cmp	r3, #4
 8001556:	d000      	beq.n	800155a <__aeabi_d2f+0x72>
 8001558:	3204      	adds	r2, #4
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	04db      	lsls	r3, r3, #19
 800155e:	4013      	ands	r3, r2
 8001560:	d03e      	beq.n	80015e0 <__aeabi_d2f+0xf8>
 8001562:	1c48      	adds	r0, r1, #1
 8001564:	29fe      	cmp	r1, #254	; 0xfe
 8001566:	d0d1      	beq.n	800150c <__aeabi_d2f+0x24>
 8001568:	0192      	lsls	r2, r2, #6
 800156a:	0a52      	lsrs	r2, r2, #9
 800156c:	b2c0      	uxtb	r0, r0
 800156e:	e7cf      	b.n	8001510 <__aeabi_d2f+0x28>
 8001570:	2000      	movs	r0, #0
 8001572:	2200      	movs	r2, #0
 8001574:	e7cc      	b.n	8001510 <__aeabi_d2f+0x28>
 8001576:	000a      	movs	r2, r1
 8001578:	3217      	adds	r2, #23
 800157a:	db2f      	blt.n	80015dc <__aeabi_d2f+0xf4>
 800157c:	2680      	movs	r6, #128	; 0x80
 800157e:	0436      	lsls	r6, r6, #16
 8001580:	432e      	orrs	r6, r5
 8001582:	251e      	movs	r5, #30
 8001584:	1a6d      	subs	r5, r5, r1
 8001586:	2d1f      	cmp	r5, #31
 8001588:	dd11      	ble.n	80015ae <__aeabi_d2f+0xc6>
 800158a:	2202      	movs	r2, #2
 800158c:	4252      	negs	r2, r2
 800158e:	1a52      	subs	r2, r2, r1
 8001590:	0031      	movs	r1, r6
 8001592:	40d1      	lsrs	r1, r2
 8001594:	2d20      	cmp	r5, #32
 8001596:	d004      	beq.n	80015a2 <__aeabi_d2f+0xba>
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <__aeabi_d2f+0x104>)
 800159a:	4694      	mov	ip, r2
 800159c:	4463      	add	r3, ip
 800159e:	409e      	lsls	r6, r3
 80015a0:	4337      	orrs	r7, r6
 80015a2:	003a      	movs	r2, r7
 80015a4:	1e53      	subs	r3, r2, #1
 80015a6:	419a      	sbcs	r2, r3
 80015a8:	430a      	orrs	r2, r1
 80015aa:	2100      	movs	r1, #0
 80015ac:	e7ce      	b.n	800154c <__aeabi_d2f+0x64>
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <__aeabi_d2f+0x108>)
 80015b0:	0038      	movs	r0, r7
 80015b2:	4694      	mov	ip, r2
 80015b4:	4463      	add	r3, ip
 80015b6:	4098      	lsls	r0, r3
 80015b8:	003a      	movs	r2, r7
 80015ba:	1e41      	subs	r1, r0, #1
 80015bc:	4188      	sbcs	r0, r1
 80015be:	409e      	lsls	r6, r3
 80015c0:	40ea      	lsrs	r2, r5
 80015c2:	4330      	orrs	r0, r6
 80015c4:	4302      	orrs	r2, r0
 80015c6:	2100      	movs	r1, #0
 80015c8:	0753      	lsls	r3, r2, #29
 80015ca:	d1c1      	bne.n	8001550 <__aeabi_d2f+0x68>
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0013      	movs	r3, r2
 80015d0:	04c9      	lsls	r1, r1, #19
 80015d2:	2001      	movs	r0, #1
 80015d4:	400b      	ands	r3, r1
 80015d6:	420a      	tst	r2, r1
 80015d8:	d1c6      	bne.n	8001568 <__aeabi_d2f+0x80>
 80015da:	e7a3      	b.n	8001524 <__aeabi_d2f+0x3c>
 80015dc:	2300      	movs	r3, #0
 80015de:	e7a0      	b.n	8001522 <__aeabi_d2f+0x3a>
 80015e0:	000b      	movs	r3, r1
 80015e2:	e79f      	b.n	8001524 <__aeabi_d2f+0x3c>
 80015e4:	000007fe 	.word	0x000007fe
 80015e8:	fffffc80 	.word	0xfffffc80
 80015ec:	fffffca2 	.word	0xfffffca2
 80015f0:	fffffc82 	.word	0xfffffc82

080015f4 <__clzsi2>:
 80015f4:	211c      	movs	r1, #28
 80015f6:	2301      	movs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d301      	bcc.n	8001602 <__clzsi2+0xe>
 80015fe:	0c00      	lsrs	r0, r0, #16
 8001600:	3910      	subs	r1, #16
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	4298      	cmp	r0, r3
 8001606:	d301      	bcc.n	800160c <__clzsi2+0x18>
 8001608:	0a00      	lsrs	r0, r0, #8
 800160a:	3908      	subs	r1, #8
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	4298      	cmp	r0, r3
 8001610:	d301      	bcc.n	8001616 <__clzsi2+0x22>
 8001612:	0900      	lsrs	r0, r0, #4
 8001614:	3904      	subs	r1, #4
 8001616:	a202      	add	r2, pc, #8	; (adr r2, 8001620 <__clzsi2+0x2c>)
 8001618:	5c10      	ldrb	r0, [r2, r0]
 800161a:	1840      	adds	r0, r0, r1
 800161c:	4770      	bx	lr
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	02020304 	.word	0x02020304
 8001624:	01010101 	.word	0x01010101
	...

08001630 <__clzdi2>:
 8001630:	b510      	push	{r4, lr}
 8001632:	2900      	cmp	r1, #0
 8001634:	d103      	bne.n	800163e <__clzdi2+0xe>
 8001636:	f7ff ffdd 	bl	80015f4 <__clzsi2>
 800163a:	3020      	adds	r0, #32
 800163c:	e002      	b.n	8001644 <__clzdi2+0x14>
 800163e:	0008      	movs	r0, r1
 8001640:	f7ff ffd8 	bl	80015f4 <__clzsi2>
 8001644:	bd10      	pop	{r4, pc}
 8001646:	46c0      	nop			; (mov r8, r8)

08001648 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


   ldr   r0, =_estack
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800164a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800164c:	f001 f841 	bl	80026d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	; (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001676:	f004 f9cb 	bl	8005a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f000 f91b 	bl	80018b4 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
   ldr   r0, =_estack
 8001680:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 800168c:	08005ce0 	.word	0x08005ce0
  ldr r2, =_sbss
 8001690:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001694:	20000484 	.word	0x20000484

08001698 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_COMP_IRQHandler>
	...

0800169c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80016a8:	200f      	movs	r0, #15
 80016aa:	183b      	adds	r3, r7, r0
 80016ac:	1dfa      	adds	r2, r7, #7
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	210f      	movs	r1, #15
 80016b2:	438a      	bics	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	011a      	lsls	r2, r3, #4
 80016bc:	240e      	movs	r4, #14
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	220c      	movs	r2, #12
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	2108      	movs	r1, #8
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2208      	movs	r2, #8
 80016d8:	4313      	orrs	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	220c      	movs	r2, #12
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2208      	movs	r2, #8
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 300);
 80016fc:	187a      	adds	r2, r7, r1
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <lcd_send_cmd+0x7c>)
 8001700:	2396      	movs	r3, #150	; 0x96
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2304      	movs	r3, #4
 8001708:	214e      	movs	r1, #78	; 0x4e
 800170a:	f001 fba7 	bl	8002e5c <HAL_I2C_Master_Transmit>
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b005      	add	sp, #20
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	2000028c 	.word	0x2000028c

0800171c <lcd_send_data>:

void lcd_send_data (char data)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b087      	sub	sp, #28
 8001720:	af02      	add	r7, sp, #8
 8001722:	0002      	movs	r2, r0
 8001724:	1dfb      	adds	r3, r7, #7
 8001726:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001728:	200f      	movs	r0, #15
 800172a:	183b      	adds	r3, r7, r0
 800172c:	1dfa      	adds	r2, r7, #7
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	210f      	movs	r1, #15
 8001732:	438a      	bics	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	011a      	lsls	r2, r3, #4
 800173c:	240e      	movs	r4, #14
 800173e:	193b      	adds	r3, r7, r4
 8001740:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001742:	183b      	adds	r3, r7, r0
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	220d      	movs	r2, #13
 8001748:	4313      	orrs	r3, r2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	2108      	movs	r1, #8
 800174e:	187b      	adds	r3, r7, r1
 8001750:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001752:	183b      	adds	r3, r7, r0
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2209      	movs	r2, #9
 8001758:	4313      	orrs	r3, r2
 800175a:	b2da      	uxtb	r2, r3
 800175c:	187b      	adds	r3, r7, r1
 800175e:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001760:	193b      	adds	r3, r7, r4
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	220d      	movs	r2, #13
 8001766:	4313      	orrs	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	187b      	adds	r3, r7, r1
 800176c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800176e:	193b      	adds	r3, r7, r4
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2209      	movs	r2, #9
 8001774:	4313      	orrs	r3, r2
 8001776:	b2da      	uxtb	r2, r3
 8001778:	187b      	adds	r3, r7, r1
 800177a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 300);
 800177c:	187a      	adds	r2, r7, r1
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <lcd_send_data+0x7c>)
 8001780:	2396      	movs	r3, #150	; 0x96
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2304      	movs	r3, #4
 8001788:	214e      	movs	r1, #78	; 0x4e
 800178a:	f001 fb67 	bl	8002e5c <HAL_I2C_Master_Transmit>
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b005      	add	sp, #20
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	2000028c 	.word	0x2000028c

0800179c <lcd_clear>:

void lcd_clear (void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80017a2:	2080      	movs	r0, #128	; 0x80
 80017a4:	f7ff ff7a 	bl	800169c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	e005      	b.n	80017ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80017ae:	2020      	movs	r0, #32
 80017b0:	f7ff ffb4 	bl	800171c <lcd_send_data>
	for (int i=0; i<70; i++)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3301      	adds	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b45      	cmp	r3, #69	; 0x45
 80017be:	ddf6      	ble.n	80017ae <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f804 	bl	80017d0 <lcd_put_cur>
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    switch (row)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <lcd_put_cur+0x18>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d005      	beq.n	80017f2 <lcd_put_cur+0x22>
 80017e6:	e009      	b.n	80017fc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	4313      	orrs	r3, r2
 80017ee:	603b      	str	r3, [r7, #0]
            break;
 80017f0:	e004      	b.n	80017fc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	22c0      	movs	r2, #192	; 0xc0
 80017f6:	4313      	orrs	r3, r2
 80017f8:	603b      	str	r3, [r7, #0]
            break;
 80017fa:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff ff4b 	bl	800169c <lcd_send_cmd>
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}

0800180e <lcd_init>:


void lcd_init (void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001812:	2032      	movs	r0, #50	; 0x32
 8001814:	f000 ffd2 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001818:	2030      	movs	r0, #48	; 0x30
 800181a:	f7ff ff3f 	bl	800169c <lcd_send_cmd>
	HAL_Delay(15);  // wait for >4.1ms
 800181e:	200f      	movs	r0, #15
 8001820:	f000 ffcc 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001824:	2030      	movs	r0, #48	; 0x30
 8001826:	f7ff ff39 	bl	800169c <lcd_send_cmd>
	HAL_Delay(15);  // wait for >100us
 800182a:	200f      	movs	r0, #15
 800182c:	f000 ffc6 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001830:	2030      	movs	r0, #48	; 0x30
 8001832:	f7ff ff33 	bl	800169c <lcd_send_cmd>
	HAL_Delay(15);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 ffc0 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800183c:	2020      	movs	r0, #32
 800183e:	f7ff ff2d 	bl	800169c <lcd_send_cmd>
	HAL_Delay(15);
 8001842:	200f      	movs	r0, #15
 8001844:	f000 ffba 	bl	80027bc <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001848:	2028      	movs	r0, #40	; 0x28
 800184a:	f7ff ff27 	bl	800169c <lcd_send_cmd>
	HAL_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 ffb4 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001854:	2008      	movs	r0, #8
 8001856:	f7ff ff21 	bl	800169c <lcd_send_cmd>
	HAL_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 ffae 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff ff1b 	bl	800169c <lcd_send_cmd>
	HAL_Delay(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f000 ffa8 	bl	80027bc <HAL_Delay>
	HAL_Delay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f000 ffa5 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001872:	2006      	movs	r0, #6
 8001874:	f7ff ff12 	bl	800169c <lcd_send_cmd>
	HAL_Delay(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 ff9f 	bl	80027bc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800187e:	200c      	movs	r0, #12
 8001880:	f7ff ff0c 	bl	800169c <lcd_send_cmd>
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <lcd_send_string>:

void lcd_send_string (const char *str)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001892:	e006      	b.n	80018a2 <lcd_send_string+0x18>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff ff3d 	bl	800171c <lcd_send_data>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f4      	bne.n	8001894 <lcd_send_string+0xa>
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ba:	f000 ff0f 	bl	80026dc <HAL_Init>

	//HAL_TIM_Base_Start(&htim3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018be:	f000 f843 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c2:	f000 fa19 	bl	8001cf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018c6:	f000 f92b 	bl	8001b20 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018ca:	f000 f9bd 	bl	8001c48 <MX_TIM3_Init>
  MX_RTC_Init();
 80018ce:	f000 f957 	bl	8001b80 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80018d2:	f000 f8f7 	bl	8001ac4 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80018d6:	f000 f8b5 	bl	8001a44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	0059      	lsls	r1, r3, #1
 80018de:	23a0      	movs	r3, #160	; 0xa0
 80018e0:	05db      	lsls	r3, r3, #23
 80018e2:	2201      	movs	r2, #1
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 f9e9 	bl	8002cbc <HAL_GPIO_WritePin>
	lcd_init();
 80018ea:	f7ff ff90 	bl	800180e <lcd_init>
	lcd_put_cur(row,col);
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <main+0x8c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <main+0x90>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f7ff ff69 	bl	80017d0 <lcd_put_cur>
	lcd_clear ();
 80018fe:	f7ff ff4d 	bl	800179c <lcd_clear>
	menuInit(); // display first screen
 8001902:	f000 fa93 	bl	8001e2c <menuInit>
	for (int seq = 0; seq < 2000; seq ++)
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e012      	b.n	8001932 <main+0x7e>
	{
		for (int step = 2; step >= 0; step --)
 800190c:	2302      	movs	r3, #2
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	e009      	b.n	8001926 <main+0x72>
		{
			stepping(step);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fc8b 	bl	8002230 <stepping>
			HAL_Delay(2);
 800191a:	2002      	movs	r0, #2
 800191c:	f000 ff4e 	bl	80027bc <HAL_Delay>
		for (int step = 2; step >= 0; step --)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	daf2      	bge.n	8001912 <main+0x5e>
	for (int seq = 0; seq < 2000; seq ++)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	23fa      	movs	r3, #250	; 0xfa
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	429a      	cmp	r2, r3
 800193a:	dbe7      	blt.n	800190c <main+0x58>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800193c:	e7fe      	b.n	800193c <main+0x88>
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20000454 	.word	0x20000454
 8001944:	20000458 	.word	0x20000458

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b09f      	sub	sp, #124	; 0x7c
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	2440      	movs	r4, #64	; 0x40
 8001950:	193b      	adds	r3, r7, r4
 8001952:	0018      	movs	r0, r3
 8001954:	2338      	movs	r3, #56	; 0x38
 8001956:	001a      	movs	r2, r3
 8001958:	2100      	movs	r1, #0
 800195a:	f004 f851 	bl	8005a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195e:	232c      	movs	r3, #44	; 0x2c
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	0018      	movs	r0, r3
 8001964:	2314      	movs	r3, #20
 8001966:	001a      	movs	r2, r3
 8001968:	2100      	movs	r1, #0
 800196a:	f004 f849 	bl	8005a00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	0018      	movs	r0, r3
 8001972:	2328      	movs	r3, #40	; 0x28
 8001974:	001a      	movs	r2, r3
 8001976:	2100      	movs	r1, #0
 8001978:	f004 f842 	bl	8005a00 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <SystemClock_Config+0xf4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <SystemClock_Config+0xf8>)
 8001982:	401a      	ands	r2, r3
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <SystemClock_Config+0xf4>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0109      	lsls	r1, r1, #4
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800198e:	193b      	adds	r3, r7, r4
 8001990:	2209      	movs	r2, #9
 8001992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001994:	193b      	adds	r3, r7, r4
 8001996:	22a0      	movs	r2, #160	; 0xa0
 8001998:	02d2      	lsls	r2, r2, #11
 800199a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800199c:	0021      	movs	r1, r4
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2201      	movs	r2, #1
 80019a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2202      	movs	r2, #2
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	0252      	lsls	r2, r2, #9
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	22c0      	movs	r2, #192	; 0xc0
 80019b6:	0312      	lsls	r2, r2, #12
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	03d2      	lsls	r2, r2, #15
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	0018      	movs	r0, r3
 80019c6:	f001 fe1d 	bl	8003604 <HAL_RCC_OscConfig>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80019ce:	f000 fa27 	bl	8001e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	220f      	movs	r2, #15
 80019d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2203      	movs	r2, #3
 80019de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2101      	movs	r1, #1
 80019f6:	0018      	movs	r0, r3
 80019f8:	f002 f9d8 	bl	8003dac <HAL_RCC_ClockConfig>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a00:	f000 fa0e 	bl	8001e20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	222e      	movs	r2, #46	; 0x2e
 8001a08:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	0292      	lsls	r2, r2, #10
 8001a22:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	0018      	movs	r0, r3
 8001a28:	f002 fbe4 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001a30:	f000 f9f6 	bl	8001e20 <Error_Handler>
  }
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b01f      	add	sp, #124	; 0x7c
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	ffffe7ff 	.word	0xffffe7ff

08001a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_I2C1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <MX_I2C1_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 f955 	bl	8002d30 <HAL_I2C_Init>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a8a:	f000 f9c9 	bl	8001e20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 fd1e 	bl	80034d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f000 f9c0 	bl	8001e20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f001 fd61 	bl	800356c <HAL_I2CEx_ConfigDigitalFilter>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 f9b7 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000028c 	.word	0x2000028c
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	00707cbb 	.word	0x00707cbb

08001ac4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <MX_LPUART1_UART_Init+0x58>)
 8001acc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001ad0:	2296      	movs	r2, #150	; 0x96
 8001ad2:	0192      	lsls	r2, r2, #6
 8001ad4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0552      	lsls	r2, r2, #21
 8001adc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001aec:	220c      	movs	r2, #12
 8001aee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <MX_LPUART1_UART_Init+0x54>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f003 fa0f 	bl	8004f28 <HAL_UART_Init>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 8001b0e:	f000 f987 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200002e0 	.word	0x200002e0
 8001b1c:	40004800 	.word	0x40004800

08001b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <MX_USART2_UART_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b2c:	2296      	movs	r2, #150	; 0x96
 8001b2e:	0192      	lsls	r2, r2, #6
 8001b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f003 f9df 	bl	8004f28 <HAL_UART_Init>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f957 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000368 	.word	0x20000368
 8001b7c:	40004400 	.word	0x40004400

08001b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	0018      	movs	r0, r3
 8001b8a:	2314      	movs	r3, #20
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f003 ff36 	bl	8005a00 <memset>
  RTC_DateTypeDef sDate = {0};
 8001b94:	003b      	movs	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <MX_RTC_Init+0xc4>)
 8001b9e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001ba8:	227f      	movs	r2, #127	; 0x7f
 8001baa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bae:	22ff      	movs	r2, #255	; 0xff
 8001bb0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f002 fcaf 	bl	8004530 <HAL_RTC_Init>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001bd6:	f000 f923 	bl	8001e20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2210      	movs	r2, #16
 8001bde:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x27;
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2227      	movs	r2, #39	; 0x27
 8001be4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bf8:	1d39      	adds	r1, r7, #4
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f002 fd32 	bl	8004668 <HAL_RTC_SetTime>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d001      	beq.n	8001c0c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f000 f90a 	bl	8001e20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8001c12:	003b      	movs	r3, r7
 8001c14:	2206      	movs	r2, #6
 8001c16:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x13;
 8001c18:	003b      	movs	r3, r7
 8001c1a:	2213      	movs	r2, #19
 8001c1c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001c1e:	003b      	movs	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c24:	0039      	movs	r1, r7
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_RTC_Init+0xc0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f002 fdc6 	bl	80047bc <HAL_RTC_SetDate>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d001      	beq.n	8001c38 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001c34:	f000 f8f4 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b006      	add	sp, #24
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200003f0 	.word	0x200003f0
 8001c44:	40002800 	.word	0x40002800

08001c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	2308      	movs	r3, #8
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	0018      	movs	r0, r3
 8001c54:	2310      	movs	r3, #16
 8001c56:	001a      	movs	r2, r3
 8001c58:	2100      	movs	r1, #0
 8001c5a:	f003 fed1 	bl	8005a00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5e:	003b      	movs	r3, r7
 8001c60:	0018      	movs	r0, r3
 8001c62:	2308      	movs	r3, #8
 8001c64:	001a      	movs	r2, r3
 8001c66:	2100      	movs	r1, #0
 8001c68:	f003 feca 	bl	8005a00 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <MX_TIM3_Init+0xa4>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 - 1;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c74:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <MX_TIM3_Init+0xa8>)
 8001c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f002 fedd 	bl	8004a52 <HAL_TIM_Base_Init>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f000 f8c0 	bl	8001e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	0152      	lsls	r2, r2, #5
 8001ca8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001caa:	187a      	adds	r2, r7, r1
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f002 ff0f 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001cba:	f000 f8b1 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	003b      	movs	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	003b      	movs	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cca:	003a      	movs	r2, r7
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_TIM3_Init+0xa0>)
 8001cce:	0011      	movs	r1, r2
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f003 f8cb 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	1e03      	subs	r3, r0, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001cda:	f000 f8a1 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b006      	add	sp, #24
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	20000414 	.word	0x20000414
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	00007cff 	.word	0x00007cff
 8001cf4:	0000ffff 	.word	0x0000ffff

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	2414      	movs	r4, #20
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	0018      	movs	r0, r3
 8001d04:	2314      	movs	r3, #20
 8001d06:	001a      	movs	r2, r3
 8001d08:	2100      	movs	r1, #0
 8001d0a:	f003 fe79 	bl	8005a00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d14:	2104      	movs	r1, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d44:	2101      	movs	r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MX_GPIO_Init+0x11c>)
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8001d6e:	2334      	movs	r3, #52	; 0x34
 8001d70:	33ff      	adds	r3, #255	; 0xff
 8001d72:	0019      	movs	r1, r3
 8001d74:	23a0      	movs	r3, #160	; 0xa0
 8001d76:	05db      	lsls	r3, r3, #23
 8001d78:	2200      	movs	r2, #0
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 ff9e 	bl	8002cbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <MX_GPIO_Init+0x120>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	2101      	movs	r1, #1
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 ff98 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	2234      	movs	r2, #52	; 0x34
 8001d90:	32ff      	adds	r2, #255	; 0xff
 8001d92:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	2201      	movs	r2, #1
 8001d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	193a      	adds	r2, r7, r4
 8001da8:	23a0      	movs	r3, #160	; 0xa0
 8001daa:	05db      	lsls	r3, r3, #23
 8001dac:	0011      	movs	r1, r2
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 fe06 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	193b      	adds	r3, r7, r4
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	193b      	adds	r3, r7, r4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_GPIO_Init+0x120>)
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	f000 fdf4 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRZYCISK_1_Pin PRZYCISK_4_Pin PRZYCISK_3_Pin PRZYCISK_2_Pin */
  GPIO_InitStruct.Pin = PRZYCISK_1_Pin|PRZYCISK_4_Pin|PRZYCISK_3_Pin|PRZYCISK_2_Pin;
 8001dd8:	0021      	movs	r1, r4
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <MX_GPIO_Init+0x124>)
 8001dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2288      	movs	r2, #136	; 0x88
 8001de4:	0352      	lsls	r2, r2, #13
 8001de6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <MX_GPIO_Init+0x120>)
 8001df2:	0019      	movs	r1, r3
 8001df4:	0010      	movs	r0, r2
 8001df6:	f000 fde3 	bl	80029c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2007      	movs	r0, #7
 8001e00:	f000 fdac 	bl	800295c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001e04:	2007      	movs	r0, #7
 8001e06:	f000 fdbe 	bl	8002986 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b00b      	add	sp, #44	; 0x2c
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	40021000 	.word	0x40021000
 8001e18:	50000400 	.word	0x50000400
 8001e1c:	0000e002 	.word	0x0000e002

08001e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e28:	e7fe      	b.n	8001e28 <Error_Handler+0x8>
	...

08001e2c <menuInit>:
uint8_t flag = 0;
uint8_t actionFlag = 0;
char number[1];

void menuInit(void) //display first menu
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	lcd_clear();
 8001e30:	f7ff fcb4 	bl	800179c <lcd_clear>
	lcd_put_cur(0,0);
 8001e34:	2100      	movs	r1, #0
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff fcca 	bl	80017d0 <lcd_put_cur>
	lcd_send_data('>'); //shows which line will be chosen if key SELECT pressed
 8001e3c:	203e      	movs	r0, #62	; 0x3e
 8001e3e:	f7ff fc6d 	bl	800171c <lcd_send_data>
	lcd_put_cur(0,1);
 8001e42:	2101      	movs	r1, #1
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fcc3 	bl	80017d0 <lcd_put_cur>
	lcd_send_string(select.text);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <menuInit+0x40>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff fd1b 	bl	800188a <lcd_send_string>
	lcd_put_cur(1,1);
 8001e54:	2101      	movs	r1, #1
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7ff fcba 	bl	80017d0 <lcd_put_cur>
	lcd_send_string(newM.text);
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <menuInit+0x44>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fd12 	bl	800188a <lcd_send_string>
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000020 	.word	0x20000020

08001e74 <displayCur>:

void displayCur(void) //displays the current 2-lines menu
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
		lcd_clear();
 8001e78:	f7ff fc90 	bl	800179c <lcd_clear>
		lcd_put_cur(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fca6 	bl	80017d0 <lcd_put_cur>
		lcd_send_data('>');
 8001e84:	203e      	movs	r0, #62	; 0x3e
 8001e86:	f7ff fc49 	bl	800171c <lcd_send_data>
		lcd_put_cur(curIndex % 2,1);
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <displayCur+0xc8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	001a      	movs	r2, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	2101      	movs	r1, #1
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fc9a 	bl	80017d0 <lcd_put_cur>
		lcd_send_string(currentMenu->text);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <displayCur+0xcc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff fcf1 	bl	800188a <lcd_send_string>
		lcd_put_cur((curIndex+1) % 2,1);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <displayCur+0xc8>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <displayCur+0xd0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d504      	bpl.n	8001ebe <displayCur+0x4a>
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4252      	negs	r2, r2
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff fc85 	bl	80017d0 <lcd_put_cur>
		if(currentMenu->next!=NULL){
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <displayCur+0xcc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <displayCur+0x6c>
			lcd_send_string(currentMenu->next->text);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <displayCur+0xcc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff fcd6 	bl	800188a <lcd_send_string>
			itoa(run.velocity,number,10);
			lcd_send_string(number);
			lcd_put_cur(1,0);
			lcd_send_string("Press button");
		}
}
 8001ede:	e029      	b.n	8001f34 <displayCur+0xc0>
			lcd_put_cur(0,3);
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fc74 	bl	80017d0 <lcd_put_cur>
			itoa(run.dose,number,10);
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <displayCur+0xd4>)
 8001eea:	7d1b      	ldrb	r3, [r3, #20]
 8001eec:	0018      	movs	r0, r3
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <displayCur+0xd8>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	f003 fd4c 	bl	8005990 <itoa>
			lcd_send_string(number);
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <displayCur+0xd8>)
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff fcc5 	bl	800188a <lcd_send_string>
			lcd_put_cur(0,10);
 8001f00:	210a      	movs	r1, #10
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fc64 	bl	80017d0 <lcd_put_cur>
			itoa(run.velocity,number,10);
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <displayCur+0xd4>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	1c18      	adds	r0, r3, #0
 8001f0e:	f7fe fedd 	bl	8000ccc <__aeabi_f2iz>
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <displayCur+0xd8>)
 8001f14:	220a      	movs	r2, #10
 8001f16:	0019      	movs	r1, r3
 8001f18:	f003 fd3a 	bl	8005990 <itoa>
			lcd_send_string(number);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <displayCur+0xd8>)
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff fcb3 	bl	800188a <lcd_send_string>
			lcd_put_cur(1,0);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff fc52 	bl	80017d0 <lcd_put_cur>
			lcd_send_string("Press button");
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <displayCur+0xdc>)
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fcab 	bl	800188a <lcd_send_string>
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	20000478 	.word	0x20000478
 8001f40:	20000260 	.word	0x20000260
 8001f44:	80000001 	.word	0x80000001
 8001f48:	20000040 	.word	0x20000040
 8001f4c:	2000047c 	.word	0x2000047c
 8001f50:	08005b5c 	.word	0x08005b5c

08001f54 <stepInto>:
void stepInto(void) //enter into sub-menu
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	if(currentMenu->child!=NULL)
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <stepInto+0x28>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <stepInto+0x22>
	{
		curIndex = 0;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <stepInto+0x2c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
		currentMenu = currentMenu->child;
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <stepInto+0x28>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <stepInto+0x28>)
 8001f70:	601a      	str	r2, [r3, #0]
		displayCur();
 8001f72:	f7ff ff7f 	bl	8001e74 <displayCur>
	}
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000260 	.word	0x20000260
 8001f80:	20000478 	.word	0x20000478

08001f84 <setParameters>:
	}
	actionFlag = 0;
}

void setParameters(void) //take the velocity and dose values from chosen menu
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	if(currentMenu->velocity != 0)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <setParameters+0x50>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	1c18      	adds	r0, r3, #0
 8001f92:	f7fe fa3b 	bl	800040c <__aeabi_fcmpeq>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d104      	bne.n	8001fa4 <setParameters+0x20>
	{
		run.velocity = currentMenu->velocity;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <setParameters+0x50>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <setParameters+0x54>)
 8001fa2:	619a      	str	r2, [r3, #24]
	}
	if(currentMenu->dose != 0)
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <setParameters+0x50>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	7d1b      	ldrb	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <setParameters+0x34>
	{
		run.dose = currentMenu->dose;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <setParameters+0x50>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	7d1a      	ldrb	r2, [r3, #20]
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <setParameters+0x54>)
 8001fb6:	751a      	strb	r2, [r3, #20]
	}
	currentMenu = currentMenu->child;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <setParameters+0x50>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <setParameters+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
	curIndex = 0;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <setParameters+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
	displayCur();
 8001fc8:	f7ff ff54 	bl	8001e74 <displayCur>
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	20000260 	.word	0x20000260
 8001fd8:	20000040 	.word	0x20000040
 8001fdc:	20000478 	.word	0x20000478

08001fe0 <start>:

void start(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	//move the motor by the right angle with right speed
	lcd_clear();
 8001fe4:	f7ff fbda 	bl	800179c <lcd_clear>
	lcd_put_cur(0,0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff fbf0 	bl	80017d0 <lcd_put_cur>
	step_distance(currentMenu->dose, 0, currentMenu->velocity);
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <start+0x4c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	7d1b      	ldrb	r3, [r3, #20]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <start+0x4c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	1c1a      	adds	r2, r3, #0
 8002000:	2100      	movs	r1, #0
 8002002:	f000 f9a3 	bl	800234c <step_distance>

    //come back to the previous position
    step_distance(currentMenu->dose, 1, currentMenu->velocity); //zmien predkosc na stala
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <start+0x4c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	7d1b      	ldrb	r3, [r3, #20]
 800200c:	0018      	movs	r0, r3
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <start+0x4c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	1c1a      	adds	r2, r3, #0
 8002016:	2101      	movs	r1, #1
 8002018:	f000 f998 	bl	800234c <step_distance>
	currentMenu = &end;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <start+0x4c>)
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <start+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
	lastDisplay();
 8002022:	f000 f81b 	bl	800205c <lastDisplay>
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000260 	.word	0x20000260
 8002030:	20000240 	.word	0x20000240

08002034 <restart>:
void restart(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	currentMenu = &select;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <restart+0x1c>)
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <restart+0x20>)
 800203c:	601a      	str	r2, [r3, #0]
	curIndex = 0;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <restart+0x24>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
	displayCur();
 8002044:	f7ff ff16 	bl	8001e74 <displayCur>
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	20000260 	.word	0x20000260
 8002054:	20000000 	.word	0x20000000
 8002058:	20000478 	.word	0x20000478

0800205c <lastDisplay>:
void lastDisplay(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	lcd_clear();
 8002060:	f7ff fb9c 	bl	800179c <lcd_clear>
	lcd_put_cur(0,6);
 8002064:	2106      	movs	r1, #6
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fbb2 	bl	80017d0 <lcd_put_cur>
	lcd_send_string(currentMenu->text);
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <lastDisplay+0x24>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff fc09 	bl	800188a <lcd_send_string>
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	20000260 	.word	0x20000260

08002084 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //interrupts from keyboard
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	0002      	movs	r2, r0
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	801a      	strh	r2, [r3, #0]
  currentMillis = HAL_GetTick();
 8002090:	f000 fb8a 	bl	80027a8 <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002098:	601a      	str	r2, [r3, #0]
  if (currentMillis - previousMillis > 10)
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_GPIO_EXTI_Callback+0xc0>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_GPIO_EXTI_Callback+0xc4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b0a      	cmp	r3, #10
 80020a6:	d948      	bls.n	800213a <HAL_GPIO_EXTI_Callback+0xb6>
  {
	    /*Configure GPIO pins : PRZYCISK_1_Pin PRZYCISK_4_Pin PRZYCISK_3_Pin PRZYCISK_2_Pin */
	  GPIO_InitStructPrivate.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 80020aa:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_GPIO_EXTI_Callback+0xcc>)
 80020ac:	601a      	str	r2, [r3, #0]
	  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 80020b0:	2288      	movs	r2, #136	; 0x88
 80020b2:	0352      	lsls	r2, r2, #13
 80020b4:	605a      	str	r2, [r3, #4]
	  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <HAL_GPIO_EXTI_Callback+0xd0>)
 80020c0:	0019      	movs	r1, r3
 80020c2:	0010      	movs	r0, r2
 80020c4:	f000 fc7c 	bl	80029c0 <HAL_GPIO_Init>

	actionFlag=1;
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_GPIO_EXTI_Callback+0xd4>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]

    if(GPIO_Pin == GPIO_PIN_1)
 80020ce:	1dbb      	adds	r3, r7, #6
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d103      	bne.n	80020de <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	flag = 1;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_GPIO_EXTI_Callback+0xd8>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e01c      	b.n	8002118 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_15)
 80020de:	1dbb      	adds	r3, r7, #6
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d103      	bne.n	80020f2 <HAL_GPIO_EXTI_Callback+0x6e>
    {
    	flag = 2;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_GPIO_EXTI_Callback+0xd8>)
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e012      	b.n	8002118 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_14)
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	01db      	lsls	r3, r3, #7
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d103      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x82>
    {
    	flag = 3;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002100:	2203      	movs	r2, #3
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e008      	b.n	8002118 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_13)
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	429a      	cmp	r2, r3
 8002110:	d102      	bne.n	8002118 <HAL_GPIO_EXTI_Callback+0x94>
    {
    	flag = 4;
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002114:	2204      	movs	r2, #4
 8002116:	701a      	strb	r2, [r3, #0]
    }

    /*Configure GPIO pins : PB3 PB5 PB4 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 800211a:	2288      	movs	r2, #136	; 0x88
 800211c:	0352      	lsls	r2, r2, #13
 800211e:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002122:	2202      	movs	r2, #2
 8002124:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_GPIO_EXTI_Callback+0xd0>)
 800212a:	0019      	movs	r1, r3
 800212c:	0010      	movs	r0, r2
 800212e:	f000 fc47 	bl	80029c0 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002138:	601a      	str	r2, [r3, #0]
  }
}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	20000474 	.word	0x20000474
 8002148:	20000470 	.word	0x20000470
 800214c:	2000045c 	.word	0x2000045c
 8002150:	0000e002 	.word	0x0000e002
 8002154:	50000400 	.word	0x50000400
 8002158:	2000047a 	.word	0x2000047a
 800215c:	20000479 	.word	0x20000479

08002160 <calc_steps>:
 *  Created on: Nov 11, 2023
 *      Author: 31415
 */
#include "stepper.h"

int calc_steps (int doseinml) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	int steps = (((doseinml * 1000) / area) / linear_step);
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	0013      	movs	r3, r2
 800216c:	015b      	lsls	r3, r3, #5
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	189b      	adds	r3, r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff f93e 	bl	80013f8 <__aeabi_i2d>
 800217c:	2200      	movs	r2, #0
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <calc_steps+0x50>)
 8002180:	f7fe fe16 	bl	8000db0 <__aeabi_ddiv>
 8002184:	0002      	movs	r2, r0
 8002186:	000b      	movs	r3, r1
 8002188:	0010      	movs	r0, r2
 800218a:	0019      	movs	r1, r3
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <calc_steps+0x54>)
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <calc_steps+0x58>)
 8002190:	f7fe fe0e 	bl	8000db0 <__aeabi_ddiv>
 8002194:	0002      	movs	r2, r0
 8002196:	000b      	movs	r3, r1
 8002198:	0010      	movs	r0, r2
 800219a:	0019      	movs	r1, r3
 800219c:	f7ff f8f6 	bl	800138c <__aeabi_d2iz>
 80021a0:	0003      	movs	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]
	return steps;
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b004      	add	sp, #16
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40540000 	.word	0x40540000
 80021b4:	25460aa6 	.word	0x25460aa6
 80021b8:	3f9a0275 	.word	0x3f9a0275

080021bc <set_speed>:

void set_speed (int mlforsec) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	float mmforsec = mlforsec * 1000 / area;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	0013      	movs	r3, r2
 80021c8:	015b      	lsls	r3, r3, #5
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff f910 	bl	80013f8 <__aeabi_i2d>
 80021d8:	2200      	movs	r2, #0
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <set_speed+0x68>)
 80021dc:	f7fe fde8 	bl	8000db0 <__aeabi_ddiv>
 80021e0:	0002      	movs	r2, r0
 80021e2:	000b      	movs	r3, r1
 80021e4:	0010      	movs	r0, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	f7ff f97e 	bl	80014e8 <__aeabi_d2f>
 80021ec:	1c03      	adds	r3, r0, #0
 80021ee:	60fb      	str	r3, [r7, #12]
	int delayms = (1000 * linear_step) / mmforsec;
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff f931 	bl	8001458 <__aeabi_f2d>
 80021f6:	0002      	movs	r2, r0
 80021f8:	000b      	movs	r3, r1
 80021fa:	480b      	ldr	r0, [pc, #44]	; (8002228 <set_speed+0x6c>)
 80021fc:	490b      	ldr	r1, [pc, #44]	; (800222c <set_speed+0x70>)
 80021fe:	f7fe fdd7 	bl	8000db0 <__aeabi_ddiv>
 8002202:	0002      	movs	r2, r0
 8002204:	000b      	movs	r3, r1
 8002206:	0010      	movs	r0, r2
 8002208:	0019      	movs	r1, r3
 800220a:	f7ff f8bf 	bl	800138c <__aeabi_d2iz>
 800220e:	0003      	movs	r3, r0
 8002210:	60bb      	str	r3, [r7, #8]
	HAL_Delay(delayms);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0018      	movs	r0, r3
 8002216:	f000 fad1 	bl	80027bc <HAL_Delay>
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40540000 	.word	0x40540000
 8002228:	66666666 	.word	0x66666666
 800222c:	40396666 	.word	0x40396666

08002230 <stepping>:

void stepping (int step)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	switch (step)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d064      	beq.n	8002308 <stepping+0xd8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b03      	cmp	r3, #3
 8002242:	dd00      	ble.n	8002246 <stepping+0x16>
 8002244:	e07c      	b.n	8002340 <stepping+0x110>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d041      	beq.n	80022d0 <stepping+0xa0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	dc76      	bgt.n	8002340 <stepping+0x110>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <stepping+0x30>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d01c      	beq.n	8002298 <stepping+0x68>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		break;
	}
}
 800225e:	e06f      	b.n	8002340 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002260:	23a0      	movs	r3, #160	; 0xa0
 8002262:	05db      	lsls	r3, r3, #23
 8002264:	2201      	movs	r2, #1
 8002266:	2101      	movs	r1, #1
 8002268:	0018      	movs	r0, r3
 800226a:	f000 fd27 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800226e:	23a0      	movs	r3, #160	; 0xa0
 8002270:	05db      	lsls	r3, r3, #23
 8002272:	2201      	movs	r2, #1
 8002274:	2102      	movs	r1, #2
 8002276:	0018      	movs	r0, r3
 8002278:	f000 fd20 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800227c:	23a0      	movs	r3, #160	; 0xa0
 800227e:	05db      	lsls	r3, r3, #23
 8002280:	2200      	movs	r2, #0
 8002282:	2110      	movs	r1, #16
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fd19 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <stepping+0x118>)
 800228c:	2200      	movs	r2, #0
 800228e:	2101      	movs	r1, #1
 8002290:	0018      	movs	r0, r3
 8002292:	f000 fd13 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8002296:	e053      	b.n	8002340 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002298:	23a0      	movs	r3, #160	; 0xa0
 800229a:	05db      	lsls	r3, r3, #23
 800229c:	2200      	movs	r2, #0
 800229e:	2101      	movs	r1, #1
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fd0b 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80022a6:	23a0      	movs	r3, #160	; 0xa0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	2201      	movs	r2, #1
 80022ac:	2102      	movs	r1, #2
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 fd04 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80022b4:	23a0      	movs	r3, #160	; 0xa0
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	2201      	movs	r2, #1
 80022ba:	2110      	movs	r1, #16
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 fcfd 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <stepping+0x118>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	2101      	movs	r1, #1
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 fcf7 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 80022ce:	e037      	b.n	8002340 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80022d0:	23a0      	movs	r3, #160	; 0xa0
 80022d2:	05db      	lsls	r3, r3, #23
 80022d4:	2200      	movs	r2, #0
 80022d6:	2101      	movs	r1, #1
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 fcef 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80022de:	23a0      	movs	r3, #160	; 0xa0
 80022e0:	05db      	lsls	r3, r3, #23
 80022e2:	2200      	movs	r2, #0
 80022e4:	2102      	movs	r1, #2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fce8 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80022ec:	23a0      	movs	r3, #160	; 0xa0
 80022ee:	05db      	lsls	r3, r3, #23
 80022f0:	2201      	movs	r2, #1
 80022f2:	2110      	movs	r1, #16
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fce1 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <stepping+0x118>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	2101      	movs	r1, #1
 8002300:	0018      	movs	r0, r3
 8002302:	f000 fcdb 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8002306:	e01b      	b.n	8002340 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002308:	23a0      	movs	r3, #160	; 0xa0
 800230a:	05db      	lsls	r3, r3, #23
 800230c:	2201      	movs	r2, #1
 800230e:	2101      	movs	r1, #1
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fcd3 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002316:	23a0      	movs	r3, #160	; 0xa0
 8002318:	05db      	lsls	r3, r3, #23
 800231a:	2200      	movs	r2, #0
 800231c:	2102      	movs	r1, #2
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fccc 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002324:	23a0      	movs	r3, #160	; 0xa0
 8002326:	05db      	lsls	r3, r3, #23
 8002328:	2200      	movs	r2, #0
 800232a:	2110      	movs	r1, #16
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fcc5 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <stepping+0x118>)
 8002334:	2201      	movs	r2, #1
 8002336:	2101      	movs	r1, #1
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fcbf 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 800233e:	46c0      	nop			; (mov r8, r8)
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}
 8002348:	50000400 	.word	0x50000400

0800234c <step_distance>:

void step_distance(int doseinml, int direction, float mlforsec) {
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b08d      	sub	sp, #52	; 0x34
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	int numberofsteps = calc_steps(doseinml);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff ff00 	bl	8002160 <calc_steps>
 8002360:	0003      	movs	r3, r0
 8002362:	61fb      	str	r3, [r7, #28]
	int numberofsequences = numberofsteps / 4;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da00      	bge.n	800236c <step_distance+0x20>
 800236a:	3303      	adds	r3, #3
 800236c:	109b      	asrs	r3, r3, #2
 800236e:	61bb      	str	r3, [r7, #24]

	if (direction == 0)  // for clockwise
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d14f      	bne.n	8002416 <step_distance+0xca>
	{
		for (int seq = 0; seq < numberofsequences; seq ++)
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800237a:	e047      	b.n	800240c <step_distance+0xc0>
		{
			for (int step = 3; step >= 0; step --)
 800237c:	2303      	movs	r3, #3
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	e00d      	b.n	800239e <step_distance+0x52>
			{
				stepping(step);
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ff53 	bl	8002230 <stepping>
				set_speed(mlforsec);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fc9e 	bl	8000ccc <__aeabi_f2iz>
 8002390:	0003      	movs	r3, r0
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff ff12 	bl	80021bc <set_speed>
			for (int step = 3; step >= 0; step --)
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	daee      	bge.n	8002382 <step_distance+0x36>
			}
			//displaying the progress value on the screen from 0 to 100%
			lcd_put_cur(0,0);
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fa12 	bl	80017d0 <lcd_put_cur>
			int progress = (float)seq/(float)numberofsequences * 100;
 80023ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ae:	f7fe fcad 	bl	8000d0c <__aeabi_i2f>
 80023b2:	1c04      	adds	r4, r0, #0
 80023b4:	69b8      	ldr	r0, [r7, #24]
 80023b6:	f7fe fca9 	bl	8000d0c <__aeabi_i2f>
 80023ba:	1c03      	adds	r3, r0, #0
 80023bc:	1c19      	adds	r1, r3, #0
 80023be:	1c20      	adds	r0, r4, #0
 80023c0:	f7fe f96c 	bl	800069c <__aeabi_fdiv>
 80023c4:	1c03      	adds	r3, r0, #0
 80023c6:	492a      	ldr	r1, [pc, #168]	; (8002470 <step_distance+0x124>)
 80023c8:	1c18      	adds	r0, r3, #0
 80023ca:	f7fe fb31 	bl	8000a30 <__aeabi_fmul>
 80023ce:	1c03      	adds	r3, r0, #0
 80023d0:	1c18      	adds	r0, r3, #0
 80023d2:	f7fe fc7b 	bl	8000ccc <__aeabi_f2iz>
 80023d6:	0003      	movs	r3, r0
 80023d8:	617b      	str	r3, [r7, #20]
			if(progress % 5 == 0) {
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2105      	movs	r1, #5
 80023de:	0018      	movs	r0, r3
 80023e0:	f7fe f802 	bl	80003e8 <__aeabi_idivmod>
 80023e4:	1e0b      	subs	r3, r1, #0
 80023e6:	d10e      	bne.n	8002406 <step_distance+0xba>
			char buffer[3];
			itoa(progress, buffer,10);
 80023e8:	2410      	movs	r4, #16
 80023ea:	1939      	adds	r1, r7, r4
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	220a      	movs	r2, #10
 80023f0:	0018      	movs	r0, r3
 80023f2:	f003 facd 	bl	8005990 <itoa>
			lcd_send_string(buffer);
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff fa46 	bl	800188a <lcd_send_string>
			lcd_send_string("%");
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <step_distance+0x128>)
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff fa42 	bl	800188a <lcd_send_string>
		for (int seq = 0; seq < numberofsequences; seq ++)
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	3301      	adds	r3, #1
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbb3      	blt.n	800237c <step_distance+0x30>
			lcd_put_cur(0,0);
			lcd_send_string("Return...");

		}
	}
}
 8002414:	e028      	b.n	8002468 <step_distance+0x11c>
	else if (direction == 1)  // for anti-clockwise
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d125      	bne.n	8002468 <step_distance+0x11c>
		for (int seq = 0; seq < numberofsequences; seq++)
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
 8002420:	e01e      	b.n	8002460 <step_distance+0x114>
			for (int step = 0; step < 3; step++)
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	e00d      	b.n	8002444 <step_distance+0xf8>
				stepping(step);
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff ff00 	bl	8002230 <stepping>
				set_speed(mlforsec);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fe fc4b 	bl	8000ccc <__aeabi_f2iz>
 8002436:	0003      	movs	r3, r0
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff febf 	bl	80021bc <set_speed>
			for (int step = 0; step < 3; step++)
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	3301      	adds	r3, #1
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b02      	cmp	r3, #2
 8002448:	ddee      	ble.n	8002428 <step_distance+0xdc>
			lcd_put_cur(0,0);
 800244a:	2100      	movs	r1, #0
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff f9bf 	bl	80017d0 <lcd_put_cur>
			lcd_send_string("Return...");
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <step_distance+0x12c>)
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fa18 	bl	800188a <lcd_send_string>
		for (int seq = 0; seq < numberofsequences; seq++)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	3301      	adds	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbdc      	blt.n	8002422 <step_distance+0xd6>
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b00d      	add	sp, #52	; 0x34
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	42c80000 	.word	0x42c80000
 8002474:	08005b6c 	.word	0x08005b6c
 8002478:	08005b70 	.word	0x08005b70

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_MspInit+0x24>)
 8002482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_MspInit+0x24>)
 8002486:	2101      	movs	r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_MspInit+0x24>)
 800248e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_MspInit+0x24>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0549      	lsls	r1, r1, #21
 8002496:	430a      	orrs	r2, r1
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000

080024a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	240c      	movs	r4, #12
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	0018      	movs	r0, r3
 80024b2:	2314      	movs	r3, #20
 80024b4:	001a      	movs	r2, r3
 80024b6:	2100      	movs	r1, #0
 80024b8:	f003 faa2 	bl	8005a00 <memset>
  if(hi2c->Instance==I2C1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_I2C_MspInit+0x80>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d129      	bne.n	800251a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_I2C_MspInit+0x84>)
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_I2C_MspInit+0x84>)
 80024cc:	2102      	movs	r1, #2
 80024ce:	430a      	orrs	r2, r1
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_I2C_MspInit+0x84>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	22c0      	movs	r2, #192	; 0xc0
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	0021      	movs	r1, r4
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2212      	movs	r2, #18
 80024ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2203      	movs	r2, #3
 80024f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2204      	movs	r2, #4
 80024fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	187b      	adds	r3, r7, r1
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_I2C_MspInit+0x88>)
 8002504:	0019      	movs	r1, r3
 8002506:	0010      	movs	r0, r2
 8002508:	f000 fa5a 	bl	80029c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_I2C_MspInit+0x84>)
 800250e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_I2C_MspInit+0x84>)
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	0389      	lsls	r1, r1, #14
 8002516:	430a      	orrs	r2, r1
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b009      	add	sp, #36	; 0x24
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40005400 	.word	0x40005400
 8002528:	40021000 	.word	0x40021000
 800252c:	50000400 	.word	0x50000400

08002530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b08b      	sub	sp, #44	; 0x2c
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	2414      	movs	r4, #20
 800253a:	193b      	adds	r3, r7, r4
 800253c:	0018      	movs	r0, r3
 800253e:	2314      	movs	r3, #20
 8002540:	001a      	movs	r2, r3
 8002542:	2100      	movs	r1, #0
 8002544:	f003 fa5c 	bl	8005a00 <memset>
  if(huart->Instance==LPUART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2f      	ldr	r2, [pc, #188]	; (800260c <HAL_UART_MspInit+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d129      	bne.n	80025a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_UART_MspInit+0xe0>)
 8002554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002556:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <HAL_UART_MspInit+0xe0>)
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	02c9      	lsls	r1, r1, #11
 800255c:	430a      	orrs	r2, r1
 800255e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_UART_MspInit+0xe0>)
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_UART_MspInit+0xe0>)
 8002566:	2104      	movs	r1, #4
 8002568:	430a      	orrs	r2, r1
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_UART_MspInit+0xe0>)
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	2204      	movs	r2, #4
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002578:	0021      	movs	r1, r4
 800257a:	187b      	adds	r3, r7, r1
 800257c:	2230      	movs	r2, #48	; 0x30
 800257e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2202      	movs	r2, #2
 8002584:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2203      	movs	r2, #3
 8002590:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2202      	movs	r2, #2
 8002596:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002598:	187b      	adds	r3, r7, r1
 800259a:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_UART_MspInit+0xe4>)
 800259c:	0019      	movs	r1, r3
 800259e:	0010      	movs	r0, r2
 80025a0:	f000 fa0e 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025a4:	e02e      	b.n	8002604 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_UART_MspInit+0xe8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d129      	bne.n	8002604 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_UART_MspInit+0xe0>)
 80025b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_UART_MspInit+0xe0>)
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	0289      	lsls	r1, r1, #10
 80025ba:	430a      	orrs	r2, r1
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_UART_MspInit+0xe0>)
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_UART_MspInit+0xe0>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_UART_MspInit+0xe0>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025d6:	2114      	movs	r1, #20
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2202      	movs	r2, #2
 80025e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2203      	movs	r2, #3
 80025ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	2204      	movs	r2, #4
 80025f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	187a      	adds	r2, r7, r1
 80025f8:	23a0      	movs	r3, #160	; 0xa0
 80025fa:	05db      	lsls	r3, r3, #23
 80025fc:	0011      	movs	r1, r2
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f9de 	bl	80029c0 <HAL_GPIO_Init>
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b00b      	add	sp, #44	; 0x2c
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	40004800 	.word	0x40004800
 8002610:	40021000 	.word	0x40021000
 8002614:	50000800 	.word	0x50000800
 8002618:	40004400 	.word	0x40004400

0800261c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a06      	ldr	r2, [pc, #24]	; (8002644 <HAL_RTC_MspInit+0x28>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d106      	bne.n	800263c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RTC_MspInit+0x2c>)
 8002630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RTC_MspInit+0x2c>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	02c9      	lsls	r1, r1, #11
 8002638:	430a      	orrs	r2, r1
 800263a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40002800 	.word	0x40002800
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_TIM_Base_MspInit+0x28>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d105      	bne.n	800266a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_TIM_Base_MspInit+0x2c>)
 8002660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_TIM_Base_MspInit+0x2c>)
 8002664:	2102      	movs	r1, #2
 8002666:	430a      	orrs	r2, r1
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40000400 	.word	0x40000400
 8002678:	40021000 	.word	0x40021000

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <NMI_Handler+0x4>

08002682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <HardFault_Handler+0x4>

08002688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 f870 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_4_Pin);
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 fb20 	bl	8002cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_3_Pin);
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fb1b 	bl	8002cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_2_Pin);
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fb16 	bl	8002cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_Init+0x3c>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_Init+0x3c>)
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026f4:	2000      	movs	r0, #0
 80026f6:	f000 f811 	bl	800271c <HAL_InitTick>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d003      	beq.n	8002706 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e001      	b.n	800270a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002706:	f7ff feb9 	bl	800247c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	781b      	ldrb	r3, [r3, #0]
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_InitTick+0x5c>)
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_InitTick+0x60>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	0019      	movs	r1, r3
 800272e:	23fa      	movs	r3, #250	; 0xfa
 8002730:	0098      	lsls	r0, r3, #2
 8002732:	f7fd fce9 	bl	8000108 <__udivsi3>
 8002736:	0003      	movs	r3, r0
 8002738:	0019      	movs	r1, r3
 800273a:	0020      	movs	r0, r4
 800273c:	f7fd fce4 	bl	8000108 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f92f 	bl	80029a6 <HAL_SYSTICK_Config>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00f      	b.n	8002770 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d80b      	bhi.n	800276e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	2301      	movs	r3, #1
 800275a:	425b      	negs	r3, r3
 800275c:	2200      	movs	r2, #0
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f8fc 	bl	800295c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_InitTick+0x64>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b003      	add	sp, #12
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	20000264 	.word	0x20000264
 800277c:	2000026c 	.word	0x2000026c
 8002780:	20000268 	.word	0x20000268

08002784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_IncTick+0x1c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	001a      	movs	r2, r3
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_IncTick+0x20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	18d2      	adds	r2, r2, r3
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_IncTick+0x20>)
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	2000026c 	.word	0x2000026c
 80027a4:	20000480 	.word	0x20000480

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_GetTick+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000480 	.word	0x20000480

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	001a      	movs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	f7ff ffe0 	bl	80027a8 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	2000026c 	.word	0x2000026c

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	0002      	movs	r2, r0
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b7f      	cmp	r3, #127	; 0x7f
 8002816:	d809      	bhi.n	800282c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	001a      	movs	r2, r3
 800281e:	231f      	movs	r3, #31
 8002820:	401a      	ands	r2, r3
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_EnableIRQ+0x30>)
 8002824:	2101      	movs	r1, #1
 8002826:	4091      	lsls	r1, r2
 8002828:	000a      	movs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
  }
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b7f      	cmp	r3, #127	; 0x7f
 800284c:	d828      	bhi.n	80028a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800284e:	4a2f      	ldr	r2, [pc, #188]	; (800290c <__NVIC_SetPriority+0xd4>)
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	33c0      	adds	r3, #192	; 0xc0
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	589b      	ldr	r3, [r3, r2]
 800285e:	1dfa      	adds	r2, r7, #7
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	0011      	movs	r1, r2
 8002864:	2203      	movs	r2, #3
 8002866:	400a      	ands	r2, r1
 8002868:	00d2      	lsls	r2, r2, #3
 800286a:	21ff      	movs	r1, #255	; 0xff
 800286c:	4091      	lsls	r1, r2
 800286e:	000a      	movs	r2, r1
 8002870:	43d2      	mvns	r2, r2
 8002872:	401a      	ands	r2, r3
 8002874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	019b      	lsls	r3, r3, #6
 800287a:	22ff      	movs	r2, #255	; 0xff
 800287c:	401a      	ands	r2, r3
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	0018      	movs	r0, r3
 8002884:	2303      	movs	r3, #3
 8002886:	4003      	ands	r3, r0
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288c:	481f      	ldr	r0, [pc, #124]	; (800290c <__NVIC_SetPriority+0xd4>)
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	430a      	orrs	r2, r1
 8002898:	33c0      	adds	r3, #192	; 0xc0
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800289e:	e031      	b.n	8002904 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <__NVIC_SetPriority+0xd8>)
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	0019      	movs	r1, r3
 80028a8:	230f      	movs	r3, #15
 80028aa:	400b      	ands	r3, r1
 80028ac:	3b08      	subs	r3, #8
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3306      	adds	r3, #6
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	18d3      	adds	r3, r2, r3
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1dfa      	adds	r2, r7, #7
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	0011      	movs	r1, r2
 80028c0:	2203      	movs	r2, #3
 80028c2:	400a      	ands	r2, r1
 80028c4:	00d2      	lsls	r2, r2, #3
 80028c6:	21ff      	movs	r1, #255	; 0xff
 80028c8:	4091      	lsls	r1, r2
 80028ca:	000a      	movs	r2, r1
 80028cc:	43d2      	mvns	r2, r2
 80028ce:	401a      	ands	r2, r3
 80028d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	401a      	ands	r2, r3
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	0018      	movs	r0, r3
 80028e0:	2303      	movs	r3, #3
 80028e2:	4003      	ands	r3, r0
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e8:	4809      	ldr	r0, [pc, #36]	; (8002910 <__NVIC_SetPriority+0xd8>)
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	001c      	movs	r4, r3
 80028f0:	230f      	movs	r3, #15
 80028f2:	4023      	ands	r3, r4
 80028f4:	3b08      	subs	r3, #8
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	430a      	orrs	r2, r1
 80028fa:	3306      	adds	r3, #6
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	18c3      	adds	r3, r0, r3
 8002900:	3304      	adds	r3, #4
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b003      	add	sp, #12
 800290a:	bd90      	pop	{r4, r7, pc}
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	045b      	lsls	r3, r3, #17
 8002924:	429a      	cmp	r2, r3
 8002926:	d301      	bcc.n	800292c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002928:	2301      	movs	r3, #1
 800292a:	e010      	b.n	800294e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <SysTick_Config+0x44>)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	3a01      	subs	r2, #1
 8002932:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002934:	2301      	movs	r3, #1
 8002936:	425b      	negs	r3, r3
 8002938:	2103      	movs	r1, #3
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff ff7c 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <SysTick_Config+0x44>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <SysTick_Config+0x44>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	e000e010 	.word	0xe000e010

0800295c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	210f      	movs	r1, #15
 8002968:	187b      	adds	r3, r7, r1
 800296a:	1c02      	adds	r2, r0, #0
 800296c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	187b      	adds	r3, r7, r1
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b25b      	sxtb	r3, r3
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <__NVIC_SetPriority>
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b004      	add	sp, #16
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	0002      	movs	r2, r0
 800298e:	1dfb      	adds	r3, r7, #7
 8002990:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b25b      	sxtb	r3, r3
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff ff33 	bl	8002804 <__NVIC_EnableIRQ>
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff ffaf 	bl	8002914 <SysTick_Config>
 80029b6:	0003      	movs	r3, r0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029d6:	e155      	b.n	8002c84 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4091      	lsls	r1, r2
 80029e2:	000a      	movs	r2, r1
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <HAL_GPIO_Init+0x30>
 80029ee:	e146      	b.n	8002c7e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d005      	beq.n	8002a08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d130      	bne.n	8002a6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	409a      	lsls	r2, r3
 8002a16:	0013      	movs	r3, r2
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3e:	2201      	movs	r2, #1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	43da      	mvns	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	2201      	movs	r2, #1
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d017      	beq.n	8002aa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d123      	bne.n	8002afa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	58d3      	ldr	r3, [r2, r3]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	409a      	lsls	r2, r3
 8002acc:	0013      	movs	r3, r2
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2107      	movs	r1, #7
 8002ade:	400b      	ands	r3, r1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	6939      	ldr	r1, [r7, #16]
 8002af8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d100      	bne.n	8002b3c <HAL_GPIO_Init+0x17c>
 8002b3a:	e0a0      	b.n	8002c7e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3c:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_GPIO_Init+0x2dc>)
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <HAL_GPIO_Init+0x2dc>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b48:	4a55      	ldr	r2, [pc, #340]	; (8002ca0 <HAL_GPIO_Init+0x2e0>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	589b      	ldr	r3, [r3, r2]
 8002b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	409a      	lsls	r2, r3
 8002b62:	0013      	movs	r3, r2
 8002b64:	43da      	mvns	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	23a0      	movs	r3, #160	; 0xa0
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d01f      	beq.n	8002bb6 <HAL_GPIO_Init+0x1f6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <HAL_GPIO_Init+0x2e4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x1f2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a49      	ldr	r2, [pc, #292]	; (8002ca8 <HAL_GPIO_Init+0x2e8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a48      	ldr	r2, [pc, #288]	; (8002cac <HAL_GPIO_Init+0x2ec>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x1ea>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a47      	ldr	r2, [pc, #284]	; (8002cb0 <HAL_GPIO_Init+0x2f0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x1e6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <HAL_GPIO_Init+0x2f4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x1e2>
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	2103      	movs	r1, #3
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x2e0>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43da      	mvns	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	035b      	lsls	r3, r3, #13
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	039b      	lsls	r3, r3, #14
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	4013      	ands	r3, r2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	025b      	lsls	r3, r3, #9
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	40da      	lsrs	r2, r3
 8002c8c:	1e13      	subs	r3, r2, #0
 8002c8e:	d000      	beq.n	8002c92 <HAL_GPIO_Init+0x2d2>
 8002c90:	e6a2      	b.n	80029d8 <HAL_GPIO_Init+0x18>
  }
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	50000400 	.word	0x50000400
 8002ca8:	50000800 	.word	0x50000800
 8002cac:	50000c00 	.word	0x50000c00
 8002cb0:	50001000 	.word	0x50001000
 8002cb4:	50001c00 	.word	0x50001c00
 8002cb8:	40010400 	.word	0x40010400

08002cbc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	0008      	movs	r0, r1
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	1cbb      	adds	r3, r7, #2
 8002cca:	1c02      	adds	r2, r0, #0
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	1c7b      	adds	r3, r7, #1
 8002cd0:	1c0a      	adds	r2, r1, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	1c7b      	adds	r3, r7, #1
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cdc:	1cbb      	adds	r3, r7, #2
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002ce4:	e003      	b.n	8002cee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002ce6:	1cbb      	adds	r3, r7, #2
 8002ce8:	881a      	ldrh	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	0002      	movs	r2, r0
 8002d00:	1dbb      	adds	r3, r7, #6
 8002d02:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	1dba      	adds	r2, r7, #6
 8002d0a:	8812      	ldrh	r2, [r2, #0]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d008      	beq.n	8002d22 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d12:	1dba      	adds	r2, r7, #6
 8002d14:	8812      	ldrh	r2, [r2, #0]
 8002d16:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d18:	1dbb      	adds	r3, r7, #6
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff f9b1 	bl	8002084 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e082      	b.n	8002e48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2241      	movs	r2, #65	; 0x41
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fba3 	bl	80024a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	; 0x41
 8002d62:	2124      	movs	r1, #36	; 0x24
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	438a      	bics	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4934      	ldr	r1, [pc, #208]	; (8002e50 <HAL_I2C_Init+0x120>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4931      	ldr	r1, [pc, #196]	; (8002e54 <HAL_I2C_Init+0x124>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d108      	bne.n	8002dae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0209      	lsls	r1, r1, #8
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	e007      	b.n	8002dbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2184      	movs	r1, #132	; 0x84
 8002db8:	0209      	lsls	r1, r1, #8
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d104      	bne.n	8002dd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	491f      	ldr	r1, [pc, #124]	; (8002e58 <HAL_I2C_Init+0x128>)
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	491a      	ldr	r1, [pc, #104]	; (8002e54 <HAL_I2C_Init+0x124>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69d9      	ldr	r1, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2241      	movs	r2, #65	; 0x41
 8002e34:	2120      	movs	r1, #32
 8002e36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2242      	movs	r2, #66	; 0x42
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	f0ffffff 	.word	0xf0ffffff
 8002e54:	ffff7fff 	.word	0xffff7fff
 8002e58:	02008000 	.word	0x02008000

08002e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	0008      	movs	r0, r1
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	0019      	movs	r1, r3
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	1c02      	adds	r2, r0, #0
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	2308      	movs	r3, #8
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	1c0a      	adds	r2, r1, #0
 8002e78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2241      	movs	r2, #65	; 0x41
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d000      	beq.n	8002e88 <HAL_I2C_Master_Transmit+0x2c>
 8002e86:	e0e7      	b.n	8003058 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Master_Transmit+0x3a>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0e1      	b.n	800305a <HAL_I2C_Master_Transmit+0x1fe>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2240      	movs	r2, #64	; 0x40
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e9e:	f7ff fc83 	bl	80027a8 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	0219      	lsls	r1, r3, #8
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f000 f8fc 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2241      	movs	r2, #65	; 0x41
 8002ec4:	2121      	movs	r1, #33	; 0x21
 8002ec6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2242      	movs	r2, #66	; 0x42
 8002ecc:	2110      	movs	r1, #16
 8002ece:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2208      	movs	r2, #8
 8002ee0:	18ba      	adds	r2, r7, r2
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d911      	bls.n	8002f1a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	045c      	lsls	r4, r3, #17
 8002f06:	230a      	movs	r3, #10
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	8819      	ldrh	r1, [r3, #0]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	4b55      	ldr	r3, [pc, #340]	; (8003064 <HAL_I2C_Master_Transmit+0x208>)
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	0023      	movs	r3, r4
 8002f14:	f000 faa4 	bl	8003460 <I2C_TransferConfig>
 8002f18:	e075      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	049c      	lsls	r4, r3, #18
 8002f2e:	230a      	movs	r3, #10
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	8819      	ldrh	r1, [r3, #0]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_I2C_Master_Transmit+0x208>)
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	0023      	movs	r3, r4
 8002f3c:	f000 fa90 	bl	8003460 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f40:	e061      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f8ff 	bl	800314c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f4e:	1e03      	subs	r3, r0, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e081      	b.n	800305a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d03a      	beq.n	8003006 <HAL_I2C_Master_Transmit+0x1aa>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d136      	bne.n	8003006 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	f000 f883 	bl	80030b0 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e053      	b.n	800305a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2bff      	cmp	r3, #255	; 0xff
 8002fba:	d911      	bls.n	8002fe0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	22ff      	movs	r2, #255	; 0xff
 8002fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	045c      	lsls	r4, r3, #17
 8002fcc:	230a      	movs	r3, #10
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	8819      	ldrh	r1, [r3, #0]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	0023      	movs	r3, r4
 8002fda:	f000 fa41 	bl	8003460 <I2C_TransferConfig>
 8002fde:	e012      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	049c      	lsls	r4, r3, #18
 8002ff4:	230a      	movs	r3, #10
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	8819      	ldrh	r1, [r3, #0]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	0023      	movs	r3, r4
 8003002:	f000 fa2d 	bl	8003460 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d198      	bne.n	8002f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f8de 	bl	80031d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01a      	b.n	800305a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2220      	movs	r2, #32
 800302a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	490c      	ldr	r1, [pc, #48]	; (8003068 <HAL_I2C_Master_Transmit+0x20c>)
 8003038:	400a      	ands	r2, r1
 800303a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2241      	movs	r2, #65	; 0x41
 8003040:	2120      	movs	r1, #32
 8003042:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2242      	movs	r2, #66	; 0x42
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b007      	add	sp, #28
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	80002000 	.word	0x80002000
 8003068:	fe00e800 	.word	0xfe00e800

0800306c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2202      	movs	r2, #2
 800307c:	4013      	ands	r3, r2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d103      	bne.n	800308a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	2b01      	cmp	r3, #1
 8003096:	d007      	beq.n	80030a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	430a      	orrs	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
  }
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c0:	e030      	b.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	d02d      	beq.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7ff fb6e 	bl	80027a8 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d122      	bne.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	425a      	negs	r2, r3
 80030ee:	4153      	adcs	r3, r2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	001a      	movs	r2, r3
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d113      	bne.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	2220      	movs	r2, #32
 8003102:	431a      	orrs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2241      	movs	r2, #65	; 0x41
 800310c:	2120      	movs	r1, #32
 800310e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2242      	movs	r2, #66	; 0x42
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	2100      	movs	r1, #0
 800311e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e00f      	b.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	425a      	negs	r2, r3
 8003134:	4153      	adcs	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	001a      	movs	r2, r3
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d0bf      	beq.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003158:	e032      	b.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 f87d 	bl	8003260 <I2C_IsErrorOccurred>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d001      	beq.n	800316e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e030      	b.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3301      	adds	r3, #1
 8003172:	d025      	beq.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7ff fb18 	bl	80027a8 <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11a      	bne.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2202      	movs	r2, #2
 8003192:	4013      	ands	r3, r2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d013      	beq.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	2220      	movs	r2, #32
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2241      	movs	r2, #65	; 0x41
 80031a8:	2120      	movs	r1, #32
 80031aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2242      	movs	r2, #66	; 0x42
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e007      	b.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2202      	movs	r2, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d1c5      	bne.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b004      	add	sp, #16
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e4:	e02f      	b.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f837 	bl	8003260 <I2C_IsErrorOccurred>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d001      	beq.n	80031fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02d      	b.n	8003256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7ff fad5 	bl	80027a8 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11a      	bne.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2220      	movs	r2, #32
 8003218:	4013      	ands	r3, r2
 800321a:	2b20      	cmp	r3, #32
 800321c:	d013      	beq.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	2220      	movs	r2, #32
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2241      	movs	r2, #65	; 0x41
 800322e:	2120      	movs	r1, #32
 8003230:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2242      	movs	r2, #66	; 0x42
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2240      	movs	r2, #64	; 0x40
 800323e:	2100      	movs	r1, #0
 8003240:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2220      	movs	r2, #32
 800324e:	4013      	ands	r3, r2
 8003250:	2b20      	cmp	r3, #32
 8003252:	d1c8      	bne.n	80031e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b004      	add	sp, #16
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b08b      	sub	sp, #44	; 0x2c
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2327      	movs	r3, #39	; 0x27
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2210      	movs	r2, #16
 8003288:	4013      	ands	r3, r2
 800328a:	d100      	bne.n	800328e <I2C_IsErrorOccurred+0x2e>
 800328c:	e082      	b.n	8003394 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003296:	e060      	b.n	800335a <I2C_IsErrorOccurred+0xfa>
 8003298:	2427      	movs	r4, #39	; 0x27
 800329a:	193b      	adds	r3, r7, r4
 800329c:	193a      	adds	r2, r7, r4
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	3301      	adds	r3, #1
 80032a6:	d058      	beq.n	800335a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a8:	f7ff fa7e 	bl	80027a8 <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d306      	bcc.n	80032c6 <I2C_IsErrorOccurred+0x66>
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	193a      	adds	r2, r7, r4
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d149      	bne.n	800335a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	4013      	ands	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032d4:	2013      	movs	r0, #19
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	2142      	movs	r1, #66	; 0x42
 80032dc:	5c52      	ldrb	r2, [r2, r1]
 80032de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	401a      	ands	r2, r3
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d126      	bne.n	8003342 <I2C_IsErrorOccurred+0xe2>
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	01db      	lsls	r3, r3, #7
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d021      	beq.n	8003342 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b20      	cmp	r3, #32
 8003304:	d01d      	beq.n	8003342 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	01c9      	lsls	r1, r1, #7
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003318:	f7ff fa46 	bl	80027a8 <HAL_GetTick>
 800331c:	0003      	movs	r3, r0
 800331e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003320:	e00f      	b.n	8003342 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003322:	f7ff fa41 	bl	80027a8 <HAL_GetTick>
 8003326:	0002      	movs	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b19      	cmp	r3, #25
 800332e:	d908      	bls.n	8003342 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2220      	movs	r2, #32
 8003334:	4313      	orrs	r3, r2
 8003336:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003338:	2327      	movs	r3, #39	; 0x27
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]

              break;
 8003340:	e00b      	b.n	800335a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2220      	movs	r2, #32
 800334a:	4013      	ands	r3, r2
 800334c:	2127      	movs	r1, #39	; 0x27
 800334e:	187a      	adds	r2, r7, r1
 8003350:	1879      	adds	r1, r7, r1
 8003352:	7809      	ldrb	r1, [r1, #0]
 8003354:	7011      	strb	r1, [r2, #0]
 8003356:	2b20      	cmp	r3, #32
 8003358:	d1e3      	bne.n	8003322 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2220      	movs	r2, #32
 8003362:	4013      	ands	r3, r2
 8003364:	2b20      	cmp	r3, #32
 8003366:	d004      	beq.n	8003372 <I2C_IsErrorOccurred+0x112>
 8003368:	2327      	movs	r3, #39	; 0x27
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d092      	beq.n	8003298 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003372:	2327      	movs	r3, #39	; 0x27
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2220      	movs	r2, #32
 8003382:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2204      	movs	r2, #4
 8003388:	4313      	orrs	r3, r2
 800338a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800338c:	2327      	movs	r3, #39	; 0x27
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00c      	beq.n	80033c0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4313      	orrs	r3, r2
 80033ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	0052      	lsls	r2, r2, #1
 80033b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b8:	2327      	movs	r3, #39	; 0x27
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4013      	ands	r3, r2
 80033c8:	d00c      	beq.n	80033e4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	2208      	movs	r2, #8
 80033ce:	4313      	orrs	r3, r2
 80033d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	00d2      	lsls	r2, r2, #3
 80033da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033dc:	2327      	movs	r3, #39	; 0x27
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00c      	beq.n	8003408 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2202      	movs	r2, #2
 80033f2:	4313      	orrs	r3, r2
 80033f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003400:	2327      	movs	r3, #39	; 0x27
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003408:	2327      	movs	r3, #39	; 0x27
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d01d      	beq.n	800344e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff fe29 	bl	800306c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	490d      	ldr	r1, [pc, #52]	; (800345c <I2C_IsErrorOccurred+0x1fc>)
 8003426:	400a      	ands	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2241      	movs	r2, #65	; 0x41
 800343a:	2120      	movs	r1, #32
 800343c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2242      	movs	r2, #66	; 0x42
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800344e:	2327      	movs	r3, #39	; 0x27
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	781b      	ldrb	r3, [r3, #0]
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b00b      	add	sp, #44	; 0x2c
 800345a:	bd90      	pop	{r4, r7, pc}
 800345c:	fe00e800 	.word	0xfe00e800

08003460 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	0008      	movs	r0, r1
 800346a:	0011      	movs	r1, r2
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	240a      	movs	r4, #10
 8003470:	193b      	adds	r3, r7, r4
 8003472:	1c02      	adds	r2, r0, #0
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	2009      	movs	r0, #9
 8003478:	183b      	adds	r3, r7, r0
 800347a:	1c0a      	adds	r2, r1, #0
 800347c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800347e:	193b      	adds	r3, r7, r4
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	059b      	lsls	r3, r3, #22
 8003484:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003486:	183b      	adds	r3, r7, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	0419      	lsls	r1, r3, #16
 800348c:	23ff      	movs	r3, #255	; 0xff
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003492:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	4313      	orrs	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034aa:	0d51      	lsrs	r1, r2, #21
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	00d2      	lsls	r2, r2, #3
 80034b0:	400a      	ands	r2, r1
 80034b2:	4907      	ldr	r1, [pc, #28]	; (80034d0 <I2C_TransferConfig+0x70>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	43d2      	mvns	r2, r2
 80034b8:	401a      	ands	r2, r3
 80034ba:	0011      	movs	r1, r2
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b007      	add	sp, #28
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	03ff63ff 	.word	0x03ff63ff

080034d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2241      	movs	r2, #65	; 0x41
 80034e2:	5c9b      	ldrb	r3, [r3, r2]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d138      	bne.n	800355c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2240      	movs	r2, #64	; 0x40
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e032      	b.n	800355e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2241      	movs	r2, #65	; 0x41
 8003504:	2124      	movs	r1, #36	; 0x24
 8003506:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2101      	movs	r1, #1
 8003514:	438a      	bics	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4911      	ldr	r1, [pc, #68]	; (8003568 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003524:	400a      	ands	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2101      	movs	r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2241      	movs	r2, #65	; 0x41
 800354c:	2120      	movs	r1, #32
 800354e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b002      	add	sp, #8
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	ffffefff 	.word	0xffffefff

0800356c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2241      	movs	r2, #65	; 0x41
 800357a:	5c9b      	ldrb	r3, [r3, r2]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b20      	cmp	r3, #32
 8003580:	d139      	bne.n	80035f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800358c:	2302      	movs	r3, #2
 800358e:	e033      	b.n	80035f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2241      	movs	r2, #65	; 0x41
 800359c:	2124      	movs	r1, #36	; 0x24
 800359e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2101      	movs	r1, #1
 80035ac:	438a      	bics	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a11      	ldr	r2, [pc, #68]	; (8003600 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2241      	movs	r2, #65	; 0x41
 80035e6:	2120      	movs	r1, #32
 80035e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2240      	movs	r2, #64	; 0x40
 80035ee:	2100      	movs	r1, #0
 80035f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
  }
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	fffff0ff 	.word	0xfffff0ff

08003604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f000 fbbf 	bl	8003d96 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003618:	4bc9      	ldr	r3, [pc, #804]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	220c      	movs	r2, #12
 800361e:	4013      	ands	r3, r2
 8003620:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003622:	4bc7      	ldr	r3, [pc, #796]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	025b      	lsls	r3, r3, #9
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2201      	movs	r2, #1
 8003634:	4013      	ands	r3, r2
 8003636:	d100      	bne.n	800363a <HAL_RCC_OscConfig+0x36>
 8003638:	e07e      	b.n	8003738 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d007      	beq.n	8003650 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d112      	bne.n	800366c <HAL_RCC_OscConfig+0x68>
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	025b      	lsls	r3, r3, #9
 800364c:	429a      	cmp	r2, r3
 800364e:	d10d      	bne.n	800366c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	4bbb      	ldr	r3, [pc, #748]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	4013      	ands	r3, r2
 800365a:	d100      	bne.n	800365e <HAL_RCC_OscConfig+0x5a>
 800365c:	e06b      	b.n	8003736 <HAL_RCC_OscConfig+0x132>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d167      	bne.n	8003736 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f000 fb95 	bl	8003d96 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	025b      	lsls	r3, r3, #9
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x84>
 8003678:	4bb1      	ldr	r3, [pc, #708]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4bb0      	ldr	r3, [pc, #704]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	0249      	lsls	r1, r1, #9
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e027      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	23a0      	movs	r3, #160	; 0xa0
 800368e:	02db      	lsls	r3, r3, #11
 8003690:	429a      	cmp	r2, r3
 8003692:	d10e      	bne.n	80036b2 <HAL_RCC_OscConfig+0xae>
 8003694:	4baa      	ldr	r3, [pc, #680]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4ba9      	ldr	r3, [pc, #676]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	02c9      	lsls	r1, r1, #11
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	4ba7      	ldr	r3, [pc, #668]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4ba6      	ldr	r3, [pc, #664]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	0249      	lsls	r1, r1, #9
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e012      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 80036b2:	4ba3      	ldr	r3, [pc, #652]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4ba2      	ldr	r3, [pc, #648]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036b8:	49a2      	ldr	r1, [pc, #648]	; (8003944 <HAL_RCC_OscConfig+0x340>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	4ba0      	ldr	r3, [pc, #640]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	025b      	lsls	r3, r3, #9
 80036c6:	4013      	ands	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4b9c      	ldr	r3, [pc, #624]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b9b      	ldr	r3, [pc, #620]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80036d2:	499d      	ldr	r1, [pc, #628]	; (8003948 <HAL_RCC_OscConfig+0x344>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d015      	beq.n	800370c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7ff f862 	bl	80027a8 <HAL_GetTick>
 80036e4:	0003      	movs	r3, r0
 80036e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ea:	f7ff f85d 	bl	80027a8 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d902      	bls.n	80036fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	f000 fb4c 	bl	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fe:	4b90      	ldr	r3, [pc, #576]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	029b      	lsls	r3, r3, #10
 8003706:	4013      	ands	r3, r2
 8003708:	d0ef      	beq.n	80036ea <HAL_RCC_OscConfig+0xe6>
 800370a:	e015      	b.n	8003738 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7ff f84c 	bl	80027a8 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003716:	f7ff f847 	bl	80027a8 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	; 0x64
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e336      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003728:	4b85      	ldr	r3, [pc, #532]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	4013      	ands	r3, r2
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x112>
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003736:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d100      	bne.n	8003744 <HAL_RCC_OscConfig+0x140>
 8003742:	e099      	b.n	8003878 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	2220      	movs	r2, #32
 800374e:	4013      	ands	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003752:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b7a      	ldr	r3, [pc, #488]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003758:	2120      	movs	r1, #32
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	2220      	movs	r2, #32
 8003762:	4393      	bics	r3, r2
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d13e      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1ec>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d13b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003778:	4b71      	ldr	r3, [pc, #452]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2204      	movs	r2, #4
 800377e:	4013      	ands	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_RCC_OscConfig+0x188>
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e304      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b6c      	ldr	r3, [pc, #432]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a6e      	ldr	r2, [pc, #440]	; (800394c <HAL_RCC_OscConfig+0x348>)
 8003792:	4013      	ands	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	4b68      	ldr	r3, [pc, #416]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2209      	movs	r2, #9
 80037a8:	4393      	bics	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	4b64      	ldr	r3, [pc, #400]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b4:	f000 fc42 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80037b8:	0001      	movs	r1, r0
 80037ba:	4b61      	ldr	r3, [pc, #388]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	220f      	movs	r2, #15
 80037c2:	4013      	ands	r3, r2
 80037c4:	4a62      	ldr	r2, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x34c>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	000a      	movs	r2, r1
 80037ca:	40da      	lsrs	r2, r3
 80037cc:	4b61      	ldr	r3, [pc, #388]	; (8003954 <HAL_RCC_OscConfig+0x350>)
 80037ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCC_OscConfig+0x354>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2513      	movs	r5, #19
 80037d6:	197c      	adds	r4, r7, r5
 80037d8:	0018      	movs	r0, r3
 80037da:	f7fe ff9f 	bl	800271c <HAL_InitTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d046      	beq.n	8003878 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80037ea:	197b      	adds	r3, r7, r5
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	e2d2      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d027      	beq.n	8003846 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037f6:	4b52      	ldr	r3, [pc, #328]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2209      	movs	r2, #9
 80037fc:	4393      	bics	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe ffce 	bl	80027a8 <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003812:	f7fe ffc9 	bl	80027a8 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e2b8      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003824:	4b46      	ldr	r3, [pc, #280]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2204      	movs	r2, #4
 800382a:	4013      	ands	r3, r2
 800382c:	d0f1      	beq.n	8003812 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b44      	ldr	r3, [pc, #272]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a46      	ldr	r2, [pc, #280]	; (800394c <HAL_RCC_OscConfig+0x348>)
 8003834:	4013      	ands	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	4b40      	ldr	r3, [pc, #256]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	e018      	b.n	8003878 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800384c:	2101      	movs	r1, #1
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe ffa9 	bl	80027a8 <HAL_GetTick>
 8003856:	0003      	movs	r3, r0
 8003858:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385c:	f7fe ffa4 	bl	80027a8 <HAL_GetTick>
 8003860:	0002      	movs	r2, r0
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e293      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800386e:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	4013      	ands	r3, r2
 8003876:	d1f1      	bne.n	800385c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2210      	movs	r2, #16
 800387e:	4013      	ands	r3, r2
 8003880:	d100      	bne.n	8003884 <HAL_RCC_OscConfig+0x280>
 8003882:	e0a2      	b.n	80039ca <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d140      	bne.n	800390c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4013      	ands	r3, r2
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x29e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e279      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a2:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4a2d      	ldr	r2, [pc, #180]	; (800395c <HAL_RCC_OscConfig+0x358>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b0:	4b23      	ldr	r3, [pc, #140]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	0a19      	lsrs	r1, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	061a      	lsls	r2, r3, #24
 80038c4:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	0b5b      	lsrs	r3, r3, #13
 80038d0:	3301      	adds	r3, #1
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	0212      	lsls	r2, r2, #8
 80038d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	210f      	movs	r1, #15
 80038e0:	400b      	ands	r3, r1
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x34c>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_RCC_OscConfig+0x350>)
 80038ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <HAL_RCC_OscConfig+0x354>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2513      	movs	r5, #19
 80038f2:	197c      	adds	r4, r7, r5
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fe ff11 	bl	800271c <HAL_InitTick>
 80038fa:	0003      	movs	r3, r0
 80038fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80038fe:	197b      	adds	r3, r7, r5
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d061      	beq.n	80039ca <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003906:	197b      	adds	r3, r7, r5
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	e244      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d040      	beq.n	8003996 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x33c>)
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	0049      	lsls	r1, r1, #1
 800391e:	430a      	orrs	r2, r1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fe ff41 	bl	80027a8 <HAL_GetTick>
 8003926:	0003      	movs	r3, r0
 8003928:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800392a:	e019      	b.n	8003960 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800392c:	f7fe ff3c 	bl	80027a8 <HAL_GetTick>
 8003930:	0002      	movs	r2, r0
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d912      	bls.n	8003960 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e22b      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	40021000 	.word	0x40021000
 8003944:	fffeffff 	.word	0xfffeffff
 8003948:	fffbffff 	.word	0xfffbffff
 800394c:	ffffe0ff 	.word	0xffffe0ff
 8003950:	08005c3c 	.word	0x08005c3c
 8003954:	20000264 	.word	0x20000264
 8003958:	20000268 	.word	0x20000268
 800395c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003960:	4bca      	ldr	r3, [pc, #808]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d0df      	beq.n	800392c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800396c:	4bc7      	ldr	r3, [pc, #796]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4ac7      	ldr	r2, [pc, #796]	; (8003c90 <HAL_RCC_OscConfig+0x68c>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397a:	4bc4      	ldr	r3, [pc, #784]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003980:	4bc2      	ldr	r3, [pc, #776]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	0a19      	lsrs	r1, r3, #8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	061a      	lsls	r2, r3, #24
 800398e:	4bbf      	ldr	r3, [pc, #764]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e019      	b.n	80039ca <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003996:	4bbd      	ldr	r3, [pc, #756]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4bbc      	ldr	r3, [pc, #752]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 800399c:	49bd      	ldr	r1, [pc, #756]	; (8003c94 <HAL_RCC_OscConfig+0x690>)
 800399e:	400a      	ands	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe ff01 	bl	80027a8 <HAL_GetTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ac:	f7fe fefc 	bl	80027a8 <HAL_GetTick>
 80039b0:	0002      	movs	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1eb      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039be:	4bb3      	ldr	r3, [pc, #716]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4013      	ands	r3, r2
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2208      	movs	r2, #8
 80039d0:	4013      	ands	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d019      	beq.n	8003a10 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039dc:	4bab      	ldr	r3, [pc, #684]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 80039de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e0:	4baa      	ldr	r3, [pc, #680]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fede 	bl	80027a8 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fe fed9 	bl	80027a8 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1c8      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a04:	4ba1      	ldr	r3, [pc, #644]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	2202      	movs	r2, #2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d0f1      	beq.n	80039f2 <HAL_RCC_OscConfig+0x3ee>
 8003a0e:	e018      	b.n	8003a42 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4b9e      	ldr	r3, [pc, #632]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a14:	4b9d      	ldr	r3, [pc, #628]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	438a      	bics	r2, r1
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe fec4 	bl	80027a8 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a26:	f7fe febf 	bl	80027a8 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1ae      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a38:	4b94      	ldr	r3, [pc, #592]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d1f1      	bne.n	8003a26 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2204      	movs	r2, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d100      	bne.n	8003a4e <HAL_RCC_OscConfig+0x44a>
 8003a4c:	e0ae      	b.n	8003bac <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2023      	movs	r0, #35	; 0x23
 8003a50:	183b      	adds	r3, r7, r0
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a56:	4b8d      	ldr	r3, [pc, #564]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	055b      	lsls	r3, r3, #21
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	0549      	lsls	r1, r1, #21
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x694>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d11a      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4b85      	ldr	r3, [pc, #532]	; (8003c98 <HAL_RCC_OscConfig+0x694>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCC_OscConfig+0x694>)
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	0049      	lsls	r1, r1, #1
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a90:	f7fe fe8a 	bl	80027a8 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7fe fe85 	bl	80027a8 <HAL_GetTick>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	; 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e174      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b7a      	ldr	r3, [pc, #488]	; (8003c98 <HAL_RCC_OscConfig+0x694>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4d0>
 8003ac4:	4b71      	ldr	r3, [pc, #452]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ac8:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0049      	lsls	r1, r1, #1
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ad2:	e031      	b.n	8003b38 <HAL_RCC_OscConfig+0x534>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x4f2>
 8003adc:	4b6b      	ldr	r3, [pc, #428]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ae0:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003ae2:	496c      	ldr	r1, [pc, #432]	; (8003c94 <HAL_RCC_OscConfig+0x690>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ae8:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aec:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003aee:	496b      	ldr	r1, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0x698>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	651a      	str	r2, [r3, #80]	; 0x50
 8003af4:	e020      	b.n	8003b38 <HAL_RCC_OscConfig+0x534>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	23a0      	movs	r3, #160	; 0xa0
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10e      	bne.n	8003b20 <HAL_RCC_OscConfig+0x51c>
 8003b02:	4b62      	ldr	r3, [pc, #392]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b06:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	00c9      	lsls	r1, r1, #3
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	651a      	str	r2, [r3, #80]	; 0x50
 8003b10:	4b5e      	ldr	r3, [pc, #376]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b14:	4b5d      	ldr	r3, [pc, #372]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0049      	lsls	r1, r1, #1
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	651a      	str	r2, [r3, #80]	; 0x50
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0x534>
 8003b20:	4b5a      	ldr	r3, [pc, #360]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b26:	495b      	ldr	r1, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x690>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b2c:	4b57      	ldr	r3, [pc, #348]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b30:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b32:	495a      	ldr	r1, [pc, #360]	; (8003c9c <HAL_RCC_OscConfig+0x698>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b40:	f7fe fe32 	bl	80027a8 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b48:	e009      	b.n	8003b5e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fe2d 	bl	80027a8 <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_RCC_OscConfig+0x69c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e11b      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4013      	ands	r3, r2
 8003b68:	d0ef      	beq.n	8003b4a <HAL_RCC_OscConfig+0x546>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fe1c 	bl	80027a8 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b74:	e009      	b.n	8003b8a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe fe17 	bl	80027a8 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	4a47      	ldr	r2, [pc, #284]	; (8003ca0 <HAL_RCC_OscConfig+0x69c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e105      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b8a:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	d1ef      	bne.n	8003b76 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b96:	2323      	movs	r3, #35	; 0x23
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba4:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003ba6:	493f      	ldr	r1, [pc, #252]	; (8003ca4 <HAL_RCC_OscConfig+0x6a0>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d049      	beq.n	8003c4a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d026      	beq.n	8003c0c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bce:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd6:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCC_OscConfig+0x6a4>)
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <HAL_RCC_OscConfig+0x6a4>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	0189      	lsls	r1, r1, #6
 8003be0:	430a      	orrs	r2, r1
 8003be2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fde0 	bl	80027a8 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bee:	f7fe fddb 	bl	80027a8 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0ca      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d0f1      	beq.n	8003bee <HAL_RCC_OscConfig+0x5ea>
 8003c0a:	e01e      	b.n	8003c4a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <HAL_RCC_OscConfig+0x6a4>)
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_OscConfig+0x6a4>)
 8003c1e:	4923      	ldr	r1, [pc, #140]	; (8003cac <HAL_RCC_OscConfig+0x6a8>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe fdc0 	bl	80027a8 <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c2e:	f7fe fdbb 	bl	80027a8 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0aa      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d1f1      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d100      	bne.n	8003c54 <HAL_RCC_OscConfig+0x650>
 8003c52:	e09f      	b.n	8003d94 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d100      	bne.n	8003c5c <HAL_RCC_OscConfig+0x658>
 8003c5a:	e078      	b.n	8003d4e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d159      	bne.n	8003d18 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_RCC_OscConfig+0x688>)
 8003c6a:	4911      	ldr	r1, [pc, #68]	; (8003cb0 <HAL_RCC_OscConfig+0x6ac>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe fd9a 	bl	80027a8 <HAL_GetTick>
 8003c74:	0003      	movs	r3, r0
 8003c76:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c78:	e01c      	b.n	8003cb4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fe fd95 	bl	80027a8 <HAL_GetTick>
 8003c7e:	0002      	movs	r2, r0
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d915      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e084      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	ffff1fff 	.word	0xffff1fff
 8003c94:	fffffeff 	.word	0xfffffeff
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	fffffbff 	.word	0xfffffbff
 8003ca0:	00001388 	.word	0x00001388
 8003ca4:	efffffff 	.word	0xefffffff
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	ffffdfff 	.word	0xffffdfff
 8003cb0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	049b      	lsls	r3, r3, #18
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d1dc      	bne.n	8003c7a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a37      	ldr	r2, [pc, #220]	; (8003da4 <HAL_RCC_OscConfig+0x7a0>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	0449      	lsls	r1, r1, #17
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe fd5b 	bl	80027a8 <HAL_GetTick>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe fd56 	bl	80027a8 <HAL_GetTick>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e045      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003d0a:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	049b      	lsls	r3, r3, #18
 8003d12:	4013      	ands	r3, r2
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x6f4>
 8003d16:	e03d      	b.n	8003d94 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003d1e:	4922      	ldr	r1, [pc, #136]	; (8003da8 <HAL_RCC_OscConfig+0x7a4>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fd40 	bl	80027a8 <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fe fd3b 	bl	80027a8 <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e02a      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	049b      	lsls	r3, r3, #18
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x72a>
 8003d4c:	e022      	b.n	8003d94 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01d      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_RCC_OscConfig+0x79c>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	025b      	lsls	r3, r3, #9
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d10f      	bne.n	8003d90 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	23f0      	movs	r3, #240	; 0xf0
 8003d74:	039b      	lsls	r3, r3, #14
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	23c0      	movs	r3, #192	; 0xc0
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	401a      	ands	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b00a      	add	sp, #40	; 0x28
 8003d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40021000 	.word	0x40021000
 8003da4:	ff02ffff 	.word	0xff02ffff
 8003da8:	feffffff 	.word	0xfeffffff

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b5b0      	push	{r4, r5, r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e128      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b96      	ldr	r3, [pc, #600]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d91e      	bls.n	8003e0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b93      	ldr	r3, [pc, #588]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	4b90      	ldr	r3, [pc, #576]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003de0:	f7fe fce2 	bl	80027a8 <HAL_GetTick>
 8003de4:	0003      	movs	r3, r0
 8003de6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de8:	e009      	b.n	8003dfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dea:	f7fe fcdd 	bl	80027a8 <HAL_GetTick>
 8003dee:	0002      	movs	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	4a8a      	ldr	r2, [pc, #552]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e109      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b87      	ldr	r3, [pc, #540]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2201      	movs	r2, #1
 8003e04:	4013      	ands	r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1ee      	bne.n	8003dea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2202      	movs	r2, #2
 8003e12:	4013      	ands	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e16:	4b83      	ldr	r3, [pc, #524]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	22f0      	movs	r2, #240	; 0xf0
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4b7f      	ldr	r3, [pc, #508]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4013      	ands	r3, r2
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x8a>
 8003e34:	e089      	b.n	8003f4a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e3e:	4b79      	ldr	r3, [pc, #484]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	029b      	lsls	r3, r3, #10
 8003e46:	4013      	ands	r3, r2
 8003e48:	d120      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0e1      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e56:	4b73      	ldr	r3, [pc, #460]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	049b      	lsls	r3, r3, #18
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d114      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0d5      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	d109      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ca      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e7c:	4b69      	ldr	r3, [pc, #420]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0c2      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8c:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2203      	movs	r2, #3
 8003e92:	4393      	bics	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	4b62      	ldr	r3, [pc, #392]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7fe fc82 	bl	80027a8 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d111      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eb0:	e009      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb2:	f7fe fc79 	bl	80027a8 <HAL_GetTick>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0a5      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec6:	4b57      	ldr	r3, [pc, #348]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	220c      	movs	r2, #12
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d1ef      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x106>
 8003ed2:	e03a      	b.n	8003f4a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d111      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003edc:	e009      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ede:	f7fe fc63 	bl	80027a8 <HAL_GetTick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e08f      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	220c      	movs	r2, #12
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d1ef      	bne.n	8003ede <HAL_RCC_ClockConfig+0x132>
 8003efe:	e024      	b.n	8003f4a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d11b      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f08:	e009      	b.n	8003f1e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0a:	f7fe fc4d 	bl	80027a8 <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	4a42      	ldr	r2, [pc, #264]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e079      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	220c      	movs	r2, #12
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d1ef      	bne.n	8003f0a <HAL_RCC_ClockConfig+0x15e>
 8003f2a:	e00e      	b.n	8003f4a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2c:	f7fe fc3c 	bl	80027a8 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	4a3a      	ldr	r2, [pc, #232]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e068      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f40:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	220c      	movs	r2, #12
 8003f46:	4013      	ands	r3, r2
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4a:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	4013      	ands	r3, r2
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d21e      	bcs.n	8003f96 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f58:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4393      	bics	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f6a:	f7fe fc1d 	bl	80027a8 <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	e009      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7fe fc18 	bl	80027a8 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a28      	ldr	r2, [pc, #160]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e044      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d1ee      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a20      	ldr	r2, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x27c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fbe:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	; (800402c <HAL_RCC_ClockConfig+0x280>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	00da      	lsls	r2, r3, #3
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd4:	f000 f832 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003fd8:	0001      	movs	r1, r0
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x278>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	4a12      	ldr	r2, [pc, #72]	; (8004030 <HAL_RCC_ClockConfig+0x284>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	000a      	movs	r2, r1
 8003fea:	40da      	lsrs	r2, r3
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_RCC_ClockConfig+0x288>)
 8003fee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_RCC_ClockConfig+0x28c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	250b      	movs	r5, #11
 8003ff6:	197c      	adds	r4, r7, r5
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fe fb8f 	bl	800271c <HAL_InitTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004002:	197b      	adds	r3, r7, r5
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800400a:	197b      	adds	r3, r7, r5
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	e000      	b.n	8004012 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bdb0      	pop	{r4, r5, r7, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	40022000 	.word	0x40022000
 8004020:	00001388 	.word	0x00001388
 8004024:	40021000 	.word	0x40021000
 8004028:	fffff8ff 	.word	0xfffff8ff
 800402c:	ffffc7ff 	.word	0xffffc7ff
 8004030:	08005c3c 	.word	0x08005c3c
 8004034:	20000264 	.word	0x20000264
 8004038:	20000268 	.word	0x20000268

0800403c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b5b0      	push	{r4, r5, r7, lr}
 800403e:	b08e      	sub	sp, #56	; 0x38
 8004040:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <HAL_RCC_GetSysClockFreq+0x138>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404a:	230c      	movs	r3, #12
 800404c:	4013      	ands	r3, r2
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d014      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004052:	d900      	bls.n	8004056 <HAL_RCC_GetSysClockFreq+0x1a>
 8004054:	e07b      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x112>
 8004056:	2b04      	cmp	r3, #4
 8004058:	d002      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x24>
 800405a:	2b08      	cmp	r3, #8
 800405c:	d00b      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 800405e:	e076      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004060:	4b44      	ldr	r3, [pc, #272]	; (8004174 <HAL_RCC_GetSysClockFreq+0x138>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2210      	movs	r2, #16
 8004066:	4013      	ands	r3, r2
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800406a:	4b43      	ldr	r3, [pc, #268]	; (8004178 <HAL_RCC_GetSysClockFreq+0x13c>)
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800406e:	e07c      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004070:	4b42      	ldr	r3, [pc, #264]	; (800417c <HAL_RCC_GetSysClockFreq+0x140>)
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004074:	e079      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b42      	ldr	r3, [pc, #264]	; (8004180 <HAL_RCC_GetSysClockFreq+0x144>)
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800407a:	e076      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	0c9a      	lsrs	r2, r3, #18
 8004080:	230f      	movs	r3, #15
 8004082:	401a      	ands	r2, r3
 8004084:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <HAL_RCC_GetSysClockFreq+0x148>)
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	0d9a      	lsrs	r2, r3, #22
 800408e:	2303      	movs	r3, #3
 8004090:	4013      	ands	r3, r2
 8004092:	3301      	adds	r3, #1
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_GetSysClockFreq+0x138>)
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	4013      	ands	r3, r2
 80040a0:	d01a      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	4a35      	ldr	r2, [pc, #212]	; (8004180 <HAL_RCC_GetSysClockFreq+0x144>)
 80040ac:	2300      	movs	r3, #0
 80040ae:	69b8      	ldr	r0, [r7, #24]
 80040b0:	69f9      	ldr	r1, [r7, #28]
 80040b2:	f7fc f9f9 	bl	80004a8 <__aeabi_lmul>
 80040b6:	0002      	movs	r2, r0
 80040b8:	000b      	movs	r3, r1
 80040ba:	0010      	movs	r0, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f7fc f9cd 	bl	8000468 <__aeabi_uldivmod>
 80040ce:	0002      	movs	r2, r0
 80040d0:	000b      	movs	r3, r1
 80040d2:	0013      	movs	r3, r2
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	e037      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80040d8:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_GetSysClockFreq+0x138>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2210      	movs	r2, #16
 80040de:	4013      	ands	r3, r2
 80040e0:	d01a      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4a23      	ldr	r2, [pc, #140]	; (8004178 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	68f9      	ldr	r1, [r7, #12]
 80040f2:	f7fc f9d9 	bl	80004a8 <__aeabi_lmul>
 80040f6:	0002      	movs	r2, r0
 80040f8:	000b      	movs	r3, r1
 80040fa:	0010      	movs	r0, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f7fc f9ad 	bl	8000468 <__aeabi_uldivmod>
 800410e:	0002      	movs	r2, r0
 8004110:	000b      	movs	r3, r1
 8004112:	0013      	movs	r3, r2
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	e017      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	0018      	movs	r0, r3
 800411c:	2300      	movs	r3, #0
 800411e:	0019      	movs	r1, r3
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_RCC_GetSysClockFreq+0x140>)
 8004122:	2300      	movs	r3, #0
 8004124:	f7fc f9c0 	bl	80004a8 <__aeabi_lmul>
 8004128:	0002      	movs	r2, r0
 800412a:	000b      	movs	r3, r1
 800412c:	0010      	movs	r0, r2
 800412e:	0019      	movs	r1, r3
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	001c      	movs	r4, r3
 8004134:	2300      	movs	r3, #0
 8004136:	001d      	movs	r5, r3
 8004138:	0022      	movs	r2, r4
 800413a:	002b      	movs	r3, r5
 800413c:	f7fc f994 	bl	8000468 <__aeabi_uldivmod>
 8004140:	0002      	movs	r2, r0
 8004142:	000b      	movs	r3, r1
 8004144:	0013      	movs	r3, r2
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800414c:	e00d      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_GetSysClockFreq+0x138>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	2207      	movs	r2, #7
 8004156:	4013      	ands	r3, r2
 8004158:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	3301      	adds	r3, #1
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	0212      	lsls	r2, r2, #8
 8004162:	409a      	lsls	r2, r3
 8004164:	0013      	movs	r3, r2
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004168:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b00e      	add	sp, #56	; 0x38
 8004172:	bdb0      	pop	{r4, r5, r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	003d0900 	.word	0x003d0900
 800417c:	00f42400 	.word	0x00f42400
 8004180:	007a1200 	.word	0x007a1200
 8004184:	08005c54 	.word	0x08005c54

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <HAL_RCC_GetHCLKFreq+0x10>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	20000264 	.word	0x20000264

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff2 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041a4:	0001      	movs	r1, r0
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	2207      	movs	r2, #7
 80041ae:	4013      	ands	r3, r2
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	40d9      	lsrs	r1, r3
 80041b6:	000b      	movs	r3, r1
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08005c4c 	.word	0x08005c4c

080041c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041cc:	f7ff ffdc 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041d0:	0001      	movs	r1, r0
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	0adb      	lsrs	r3, r3, #11
 80041d8:	2207      	movs	r2, #7
 80041da:	4013      	ands	r3, r2
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	40d9      	lsrs	r1, r3
 80041e2:	000b      	movs	r3, r1
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	40021000 	.word	0x40021000
 80041f0:	08005c4c 	.word	0x08005c4c

080041f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80041fc:	2317      	movs	r3, #23
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2220      	movs	r2, #32
 800420a:	4013      	ands	r3, r2
 800420c:	d106      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	4013      	ands	r3, r2
 8004218:	d100      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800421a:	e104      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421c:	4bb9      	ldr	r3, [pc, #740]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800421e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	055b      	lsls	r3, r3, #21
 8004224:	4013      	ands	r3, r2
 8004226:	d10a      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004228:	4bb6      	ldr	r3, [pc, #728]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800422a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422c:	4bb5      	ldr	r3, [pc, #724]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	0549      	lsls	r1, r1, #21
 8004232:	430a      	orrs	r2, r1
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004236:	2317      	movs	r3, #23
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4bb2      	ldr	r3, [pc, #712]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4013      	ands	r3, r2
 8004248:	d11a      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424a:	4baf      	ldr	r3, [pc, #700]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4bae      	ldr	r3, [pc, #696]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	0049      	lsls	r1, r1, #1
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004258:	f7fe faa6 	bl	80027a8 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	e008      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fe faa1 	bl	80027a8 <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	; 0x64
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e143      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4ba4      	ldr	r3, [pc, #656]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4013      	ands	r3, r2
 800427e:	d0f0      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004280:	4ba0      	ldr	r3, [pc, #640]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	23c0      	movs	r3, #192	; 0xc0
 8004286:	039b      	lsls	r3, r3, #14
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	23c0      	movs	r3, #192	; 0xc0
 8004292:	039b      	lsls	r3, r3, #14
 8004294:	4013      	ands	r3, r2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	429a      	cmp	r2, r3
 800429a:	d107      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	23c0      	movs	r3, #192	; 0xc0
 80042a2:	039b      	lsls	r3, r3, #14
 80042a4:	4013      	ands	r3, r2
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d013      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	23c0      	movs	r3, #192	; 0xc0
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	401a      	ands	r2, r3
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d10a      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042be:	4b91      	ldr	r3, [pc, #580]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	401a      	ands	r2, r3
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d101      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e113      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80042d4:	4b8b      	ldr	r3, [pc, #556]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d8:	23c0      	movs	r3, #192	; 0xc0
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d049      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	4013      	ands	r3, r2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d004      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2220      	movs	r2, #32
 80042fc:	4013      	ands	r3, r2
 80042fe:	d10d      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	23c0      	movs	r3, #192	; 0xc0
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	4013      	ands	r3, r2
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	429a      	cmp	r2, r3
 800430e:	d034      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4013      	ands	r3, r2
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800431c:	4b79      	ldr	r3, [pc, #484]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004322:	4013      	ands	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004326:	4b77      	ldr	r3, [pc, #476]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	0309      	lsls	r1, r1, #12
 8004330:	430a      	orrs	r2, r1
 8004332:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004334:	4b73      	ldr	r3, [pc, #460]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004338:	4b72      	ldr	r3, [pc, #456]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800433a:	4975      	ldr	r1, [pc, #468]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800433c:	400a      	ands	r2, r1
 800433e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004340:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4013      	ands	r3, r2
 800434e:	d014      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe fa2a 	bl	80027a8 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004358:	e009      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fe fa25 	bl	80027a8 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	4a6b      	ldr	r2, [pc, #428]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0c6      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436e:	4b65      	ldr	r3, [pc, #404]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4013      	ands	r3, r2
 8004378:	d0ef      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4013      	ands	r3, r2
 8004384:	d01f      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	23c0      	movs	r3, #192	; 0xc0
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	401a      	ands	r2, r3
 8004390:	23c0      	movs	r3, #192	; 0xc0
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	429a      	cmp	r2, r3
 8004396:	d10c      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004398:	4b5a      	ldr	r3, [pc, #360]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5e      	ldr	r2, [pc, #376]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800439e:	4013      	ands	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	23c0      	movs	r3, #192	; 0xc0
 80043a8:	039b      	lsls	r3, r3, #14
 80043aa:	401a      	ands	r2, r3
 80043ac:	4b55      	ldr	r3, [pc, #340]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	4b54      	ldr	r3, [pc, #336]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	23c0      	movs	r3, #192	; 0xc0
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	401a      	ands	r2, r3
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043c2:	430a      	orrs	r2, r1
 80043c4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2220      	movs	r2, #32
 80043cc:	4013      	ands	r3, r2
 80043ce:	d01f      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	23c0      	movs	r3, #192	; 0xc0
 80043d6:	029b      	lsls	r3, r3, #10
 80043d8:	401a      	ands	r2, r3
 80043da:	23c0      	movs	r3, #192	; 0xc0
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	429a      	cmp	r2, r3
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80043e2:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a4c      	ldr	r2, [pc, #304]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	23c0      	movs	r3, #192	; 0xc0
 80043f2:	039b      	lsls	r3, r3, #14
 80043f4:	401a      	ands	r2, r3
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	23c0      	movs	r3, #192	; 0xc0
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	401a      	ands	r2, r3
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800440c:	430a      	orrs	r2, r1
 800440e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004410:	2317      	movs	r3, #23
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441a:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004420:	493e      	ldr	r1, [pc, #248]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004422:	400a      	ands	r2, r1
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2201      	movs	r2, #1
 800442c:	4013      	ands	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	2203      	movs	r2, #3
 8004436:	4393      	bics	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004440:	430a      	orrs	r2, r1
 8004442:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2202      	movs	r2, #2
 800444a:	4013      	ands	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	220c      	movs	r2, #12
 8004454:	4393      	bics	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	4b29      	ldr	r3, [pc, #164]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800445e:	430a      	orrs	r2, r1
 8004460:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2204      	movs	r2, #4
 8004468:	4013      	ands	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800446c:	4b25      	ldr	r3, [pc, #148]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	4b22      	ldr	r3, [pc, #136]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800447c:	430a      	orrs	r2, r1
 800447e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	4013      	ands	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004490:	4013      	ands	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800449a:	430a      	orrs	r2, r1
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044ba:	430a      	orrs	r2, r1
 80044bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	4013      	ands	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2280      	movs	r2, #128	; 0x80
 80044e2:	4013      	ands	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	4a10      	ldr	r2, [pc, #64]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044f6:	430a      	orrs	r2, r1
 80044f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b006      	add	sp, #24
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
 800450c:	fffcffff 	.word	0xfffcffff
 8004510:	fff7ffff 	.word	0xfff7ffff
 8004514:	00001388 	.word	0x00001388
 8004518:	ffcfffff 	.word	0xffcfffff
 800451c:	efffffff 	.word	0xefffffff
 8004520:	fffff3ff 	.word	0xfffff3ff
 8004524:	ffffcfff 	.word	0xffffcfff
 8004528:	fbffffff 	.word	0xfbffffff
 800452c:	fff3ffff 	.word	0xfff3ffff

08004530 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004538:	230f      	movs	r3, #15
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e088      	b.n	800465c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2221      	movs	r2, #33	; 0x21
 800454e:	5c9b      	ldrb	r3, [r3, r2]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fe f85b 	bl	800261c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2221      	movs	r2, #33	; 0x21
 800456a:	2102      	movs	r1, #2
 800456c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2210      	movs	r2, #16
 8004576:	4013      	ands	r3, r2
 8004578:	2b10      	cmp	r3, #16
 800457a:	d05f      	beq.n	800463c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	22ca      	movs	r2, #202	; 0xca
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2253      	movs	r2, #83	; 0x53
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800458c:	250f      	movs	r5, #15
 800458e:	197c      	adds	r4, r7, r5
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f9ce 	bl	8004934 <RTC_EnterInitMode>
 8004598:	0003      	movs	r3, r0
 800459a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800459c:	0028      	movs	r0, r5
 800459e:	183b      	adds	r3, r7, r0
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d12c      	bne.n	8004600 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	492c      	ldr	r1, [pc, #176]	; (8004664 <HAL_RTC_Init+0x134>)
 80045b2:	400a      	ands	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68d2      	ldr	r2, [r2, #12]
 80045dc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6919      	ldr	r1, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80045f2:	183c      	adds	r4, r7, r0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 f9e0 	bl	80049bc <RTC_ExitInitMode>
 80045fc:	0003      	movs	r3, r0
 80045fe:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004600:	230f      	movs	r3, #15
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d113      	bne.n	8004632 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2103      	movs	r1, #3
 8004616:	438a      	bics	r2, r1
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
 800463a:	e003      	b.n	8004644 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800463c:	230f      	movs	r3, #15
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004644:	230f      	movs	r3, #15
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2221      	movs	r2, #33	; 0x21
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004656:	230f      	movs	r3, #15
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bdb0      	pop	{r4, r5, r7, pc}
 8004664:	ff8fffbf 	.word	0xff8fffbf

08004668 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	5c9b      	ldrb	r3, [r3, r2]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_RTC_SetTime+0x1e>
 8004682:	2302      	movs	r3, #2
 8004684:	e092      	b.n	80047ac <HAL_RTC_SetTime+0x144>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2221      	movs	r2, #33	; 0x21
 8004692:	2102      	movs	r1, #2
 8004694:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d125      	bne.n	80046e8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	4013      	ands	r3, r2
 80046a6:	d102      	bne.n	80046ae <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2200      	movs	r2, #0
 80046ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 f9ac 	bl	8004a10 <RTC_ByteToBcd2>
 80046b8:	0003      	movs	r3, r0
 80046ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 f9a5 	bl	8004a10 <RTC_ByteToBcd2>
 80046c6:	0003      	movs	r3, r0
 80046c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	789b      	ldrb	r3, [r3, #2]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 f99d 	bl	8004a10 <RTC_ByteToBcd2>
 80046d6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046d8:	0022      	movs	r2, r4
 80046da:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	78db      	ldrb	r3, [r3, #3]
 80046e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e017      	b.n	8004718 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	4013      	ands	r3, r2
 80046f2:	d102      	bne.n	80046fa <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004706:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800470c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	78db      	ldrb	r3, [r3, #3]
 8004712:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	22ca      	movs	r2, #202	; 0xca
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2253      	movs	r2, #83	; 0x53
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004728:	2513      	movs	r5, #19
 800472a:	197c      	adds	r4, r7, r5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	0018      	movs	r0, r3
 8004730:	f000 f900 	bl	8004934 <RTC_EnterInitMode>
 8004734:	0003      	movs	r3, r0
 8004736:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004738:	0028      	movs	r0, r5
 800473a:	183b      	adds	r3, r7, r0
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d120      	bne.n	8004784 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	491a      	ldr	r1, [pc, #104]	; (80047b4 <HAL_RTC_SetTime+0x14c>)
 800474a:	400a      	ands	r2, r1
 800474c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4917      	ldr	r1, [pc, #92]	; (80047b8 <HAL_RTC_SetTime+0x150>)
 800475a:	400a      	ands	r2, r1
 800475c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004776:	183c      	adds	r4, r7, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f91e 	bl	80049bc <RTC_ExitInitMode>
 8004780:	0003      	movs	r3, r0
 8004782:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004784:	2313      	movs	r3, #19
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2221      	movs	r2, #33	; 0x21
 8004792:	2101      	movs	r1, #1
 8004794:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	22ff      	movs	r2, #255	; 0xff
 800479c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]

  return status;
 80047a6:	2313      	movs	r3, #19
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	781b      	ldrb	r3, [r3, #0]
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b006      	add	sp, #24
 80047b2:	bdb0      	pop	{r4, r5, r7, pc}
 80047b4:	007f7f7f 	.word	0x007f7f7f
 80047b8:	fffbffff 	.word	0xfffbffff

080047bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047bc:	b5b0      	push	{r4, r5, r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	5c9b      	ldrb	r3, [r3, r2]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_RTC_SetDate+0x1e>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e07e      	b.n	80048d8 <HAL_RTC_SetDate+0x11c>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	2101      	movs	r1, #1
 80047e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2221      	movs	r2, #33	; 0x21
 80047e6:	2102      	movs	r1, #2
 80047e8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10e      	bne.n	800480e <HAL_RTC_SetDate+0x52>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	001a      	movs	r2, r3
 80047f6:	2310      	movs	r3, #16
 80047f8:	4013      	ands	r3, r2
 80047fa:	d008      	beq.n	800480e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2210      	movs	r2, #16
 8004802:	4393      	bics	r3, r2
 8004804:	b2db      	uxtb	r3, r3
 8004806:	330a      	adds	r3, #10
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11c      	bne.n	800484e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	78db      	ldrb	r3, [r3, #3]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f8f9 	bl	8004a10 <RTC_ByteToBcd2>
 800481e:	0003      	movs	r3, r0
 8004820:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	0018      	movs	r0, r3
 8004828:	f000 f8f2 	bl	8004a10 <RTC_ByteToBcd2>
 800482c:	0003      	movs	r3, r0
 800482e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004830:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	789b      	ldrb	r3, [r3, #2]
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f8ea 	bl	8004a10 <RTC_ByteToBcd2>
 800483c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800483e:	0022      	movs	r2, r4
 8004840:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e00e      	b.n	800486c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800485a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004860:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	22ca      	movs	r2, #202	; 0xca
 8004872:	625a      	str	r2, [r3, #36]	; 0x24
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2253      	movs	r2, #83	; 0x53
 800487a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800487c:	2513      	movs	r5, #19
 800487e:	197c      	adds	r4, r7, r5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f856 	bl	8004934 <RTC_EnterInitMode>
 8004888:	0003      	movs	r3, r0
 800488a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800488c:	0028      	movs	r0, r5
 800488e:	183b      	adds	r3, r7, r0
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10c      	bne.n	80048b0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4910      	ldr	r1, [pc, #64]	; (80048e0 <HAL_RTC_SetDate+0x124>)
 800489e:	400a      	ands	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048a2:	183c      	adds	r4, r7, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 f888 	bl	80049bc <RTC_ExitInitMode>
 80048ac:	0003      	movs	r3, r0
 80048ae:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80048b0:	2313      	movs	r3, #19
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2221      	movs	r2, #33	; 0x21
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

  return status;
 80048d2:	2313      	movs	r3, #19
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	781b      	ldrb	r3, [r3, #0]
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b006      	add	sp, #24
 80048de:	bdb0      	pop	{r4, r5, r7, pc}
 80048e0:	00ffff3f 	.word	0x00ffff3f

080048e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <HAL_RTC_WaitForSynchro+0x4c>)
 80048f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f8:	f7fd ff56 	bl	80027a8 <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004900:	e00a      	b.n	8004918 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004902:	f7fd ff51 	bl	80027a8 <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	23fa      	movs	r3, #250	; 0xfa
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d901      	bls.n	8004918 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e006      	b.n	8004926 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	4013      	ands	r3, r2
 8004922:	d0ee      	beq.n	8004902 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	0001ff5f 	.word	0x0001ff5f

08004934 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	230f      	movs	r3, #15
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2240      	movs	r2, #64	; 0x40
 8004950:	4013      	ands	r3, r2
 8004952:	d12c      	bne.n	80049ae <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	430a      	orrs	r2, r1
 8004962:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004964:	f7fd ff20 	bl	80027a8 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800496c:	e014      	b.n	8004998 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800496e:	f7fd ff1b 	bl	80027a8 <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	200f      	movs	r0, #15
 800497a:	183b      	adds	r3, r7, r0
 800497c:	1839      	adds	r1, r7, r0
 800497e:	7809      	ldrb	r1, [r1, #0]
 8004980:	7019      	strb	r1, [r3, #0]
 8004982:	23fa      	movs	r3, #250	; 0xfa
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	429a      	cmp	r2, r3
 8004988:	d906      	bls.n	8004998 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2221      	movs	r2, #33	; 0x21
 800498e:	2104      	movs	r1, #4
 8004990:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004992:	183b      	adds	r3, r7, r0
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	4013      	ands	r3, r2
 80049a2:	d104      	bne.n	80049ae <RTC_EnterInitMode+0x7a>
 80049a4:	230f      	movs	r3, #15
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d1df      	bne.n	800496e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80049ae:	230f      	movs	r3, #15
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}

080049bc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	240f      	movs	r4, #15
 80049c6:	193b      	adds	r3, r7, r4
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	438a      	bics	r2, r1
 80049da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2220      	movs	r2, #32
 80049e4:	4013      	ands	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7ff ff7a 	bl	80048e4 <HAL_RTC_WaitForSynchro>
 80049f0:	1e03      	subs	r3, r0, #0
 80049f2:	d006      	beq.n	8004a02 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2221      	movs	r2, #33	; 0x21
 80049f8:	2104      	movs	r1, #4
 80049fa:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80049fc:	193b      	adds	r3, r7, r4
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004a02:	230f      	movs	r3, #15
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	781b      	ldrb	r3, [r3, #0]
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b005      	add	sp, #20
 8004a0e:	bd90      	pop	{r4, r7, pc}

08004a10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	0002      	movs	r2, r0
 8004a18:	1dfb      	adds	r3, r7, #7
 8004a1a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004a20:	e007      	b.n	8004a32 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004a28:	1dfb      	adds	r3, r7, #7
 8004a2a:	1dfa      	adds	r2, r7, #7
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	3a0a      	subs	r2, #10
 8004a30:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d8f3      	bhi.n	8004a22 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	1dfb      	adds	r3, r7, #7
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b2db      	uxtb	r3, r3
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b004      	add	sp, #16
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2239      	movs	r2, #57	; 0x39
 8004a68:	5c9b      	ldrb	r3, [r3, r2]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2238      	movs	r2, #56	; 0x38
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fd fde6 	bl	800264c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2239      	movs	r2, #57	; 0x39
 8004a84:	2102      	movs	r1, #2
 8004a86:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	0019      	movs	r1, r3
 8004a92:	0010      	movs	r0, r2
 8004a94:	f000 f8f2 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	223e      	movs	r2, #62	; 0x3e
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	223a      	movs	r2, #58	; 0x3a
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	5499      	strb	r1, [r3, r2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	223b      	movs	r2, #59	; 0x3b
 8004aac:	2101      	movs	r1, #1
 8004aae:	5499      	strb	r1, [r3, r2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	223c      	movs	r2, #60	; 0x3c
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	223d      	movs	r2, #61	; 0x3d
 8004abc:	2101      	movs	r1, #1
 8004abe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2239      	movs	r2, #57	; 0x39
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	230f      	movs	r3, #15
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2238      	movs	r2, #56	; 0x38
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_ConfigClockSource+0x20>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0bc      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x19a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2238      	movs	r2, #56	; 0x38
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2239      	movs	r2, #57	; 0x39
 8004b00:	2102      	movs	r1, #2
 8004b02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2277      	movs	r2, #119	; 0x77
 8004b10:	4393      	bics	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0192      	lsls	r2, r2, #6
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d040      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xde>
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	0192      	lsls	r2, r2, #6
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d900      	bls.n	8004b3a <HAL_TIM_ConfigClockSource+0x66>
 8004b38:	e088      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	0152      	lsls	r2, r2, #5
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d100      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x70>
 8004b42:	e088      	b.n	8004c56 <HAL_TIM_ConfigClockSource+0x182>
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	0152      	lsls	r2, r2, #5
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d900      	bls.n	8004b4e <HAL_TIM_ConfigClockSource+0x7a>
 8004b4c:	e07e      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b4e:	2b70      	cmp	r3, #112	; 0x70
 8004b50:	d018      	beq.n	8004b84 <HAL_TIM_ConfigClockSource+0xb0>
 8004b52:	d900      	bls.n	8004b56 <HAL_TIM_ConfigClockSource+0x82>
 8004b54:	e07a      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b56:	2b60      	cmp	r3, #96	; 0x60
 8004b58:	d04f      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x126>
 8004b5a:	d900      	bls.n	8004b5e <HAL_TIM_ConfigClockSource+0x8a>
 8004b5c:	e076      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b5e:	2b50      	cmp	r3, #80	; 0x50
 8004b60:	d03b      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x106>
 8004b62:	d900      	bls.n	8004b66 <HAL_TIM_ConfigClockSource+0x92>
 8004b64:	e072      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d057      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x146>
 8004b6a:	d900      	bls.n	8004b6e <HAL_TIM_ConfigClockSource+0x9a>
 8004b6c:	e06e      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b6e:	2b30      	cmp	r3, #48	; 0x30
 8004b70:	d063      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x166>
 8004b72:	d86b      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d060      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x166>
 8004b78:	d868      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d05d      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x166>
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d05b      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x166>
 8004b82:	e063      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b94:	f000 f94a 	bl	8004e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2277      	movs	r2, #119	; 0x77
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]
      break;
 8004bb0:	e052      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	f000 f933 	bl	8004e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	01c9      	lsls	r1, r1, #7
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
      break;
 8004bd8:	e03e      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	001a      	movs	r2, r3
 8004be8:	f000 f8a6 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2150      	movs	r1, #80	; 0x50
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 f900 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e02e      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c06:	001a      	movs	r2, r3
 8004c08:	f000 f8c4 	bl	8004d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2160      	movs	r1, #96	; 0x60
 8004c12:	0018      	movs	r0, r3
 8004c14:	f000 f8f0 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004c18:	e01e      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	001a      	movs	r2, r3
 8004c28:	f000 f886 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2140      	movs	r1, #64	; 0x40
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f8e0 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004c38:	e00e      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	0019      	movs	r1, r3
 8004c44:	0010      	movs	r0, r2
 8004c46:	f000 f8d7 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004c4a:	e005      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c4c:	230f      	movs	r3, #15
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
      break;
 8004c54:	e000      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004c56:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2239      	movs	r2, #57	; 0x39
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2238      	movs	r2, #56	; 0x38
 8004c64:	2100      	movs	r1, #0
 8004c66:	5499      	strb	r1, [r3, r2]

  return status;
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	ffff00ff 	.word	0xffff00ff

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0x32>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <TIM_Base_SetConfig+0xac>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0x32>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <TIM_Base_SetConfig+0xb0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0x32>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <TIM_Base_SetConfig+0xb4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2270      	movs	r2, #112	; 0x70
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	05db      	lsls	r3, r3, #23
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x66>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_Base_SetConfig+0xac>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0x66>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <TIM_Base_SetConfig+0xb0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0x66>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_Base_SetConfig+0xb4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d108      	bne.n	8004cf4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <TIM_Base_SetConfig+0xb8>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	615a      	str	r2, [r3, #20]
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b004      	add	sp, #16
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40010800 	.word	0x40010800
 8004d30:	40011400 	.word	0x40011400
 8004d34:	fffffcff 	.word	0xfffffcff

08004d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4393      	bics	r3, r2
 8004d52:	001a      	movs	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	22f0      	movs	r2, #240	; 0xf0
 8004d62:	4393      	bics	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	220a      	movs	r2, #10
 8004d74:	4393      	bics	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b006      	add	sp, #24
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	2210      	movs	r2, #16
 8004da6:	4393      	bics	r3, r2
 8004da8:	001a      	movs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <TIM_TI2_ConfigInputStage+0x60>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	031b      	lsls	r3, r3, #12
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	22a0      	movs	r2, #160	; 0xa0
 8004dd0:	4393      	bics	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b006      	add	sp, #24
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	ffff0fff 	.word	0xffff0fff

08004df8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2270      	movs	r2, #112	; 0x70
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	2207      	movs	r2, #7
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	609a      	str	r2, [r3, #8]
}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b004      	add	sp, #16
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <TIM_ETR_SetConfig+0x3c>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b006      	add	sp, #24
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	ffff00ff 	.word	0xffff00ff

08004e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2238      	movs	r2, #56	; 0x38
 8004e7a:	5c9b      	ldrb	r3, [r3, r2]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e047      	b.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2238      	movs	r2, #56	; 0x38
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2239      	movs	r2, #57	; 0x39
 8004e90:	2102      	movs	r1, #2
 8004e92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2270      	movs	r2, #112	; 0x70
 8004ea8:	4393      	bics	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	05db      	lsls	r3, r3, #23
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10c      	bne.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	4393      	bics	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2239      	movs	r2, #57	; 0x39
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2238      	movs	r2, #56	; 0x38
 8004f0e:	2100      	movs	r1, #0
 8004f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b004      	add	sp, #16
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40010800 	.word	0x40010800
 8004f24:	40011400 	.word	0x40011400

08004f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e044      	b.n	8004fc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d107      	bne.n	8004f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2278      	movs	r2, #120	; 0x78
 8004f46:	2100      	movs	r1, #0
 8004f48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f7fd faef 	bl	8002530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2224      	movs	r2, #36	; 0x24
 8004f56:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2101      	movs	r1, #1
 8004f64:	438a      	bics	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 f830 	bl	8004fd0 <UART_SetConfig>
 8004f70:	0003      	movs	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e024      	b.n	8004fc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 fac1 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	490d      	ldr	r1, [pc, #52]	; (8004fcc <HAL_UART_Init+0xa4>)
 8004f96:	400a      	ands	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	212a      	movs	r1, #42	; 0x2a
 8004fa6:	438a      	bics	r2, r1
 8004fa8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f000 fb59 	bl	8005674 <UART_CheckIdleState>
 8004fc2:	0003      	movs	r3, r0
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	ffffb7ff 	.word	0xffffb7ff

08004fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd8:	231a      	movs	r3, #26
 8004fda:	2218      	movs	r2, #24
 8004fdc:	189b      	adds	r3, r3, r2
 8004fde:	19db      	adds	r3, r3, r7
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4ac3      	ldr	r2, [pc, #780]	; (8005310 <UART_SetConfig+0x340>)
 8005004:	4013      	ands	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4abe      	ldr	r2, [pc, #760]	; (8005314 <UART_SetConfig+0x344>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4ab8      	ldr	r2, [pc, #736]	; (8005318 <UART_SetConfig+0x348>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005040:	4313      	orrs	r3, r2
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4ab4      	ldr	r2, [pc, #720]	; (800531c <UART_SetConfig+0x34c>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4ab0      	ldr	r2, [pc, #704]	; (8005320 <UART_SetConfig+0x350>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d131      	bne.n	80050c8 <UART_SetConfig+0xf8>
 8005064:	4baf      	ldr	r3, [pc, #700]	; (8005324 <UART_SetConfig+0x354>)
 8005066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005068:	2203      	movs	r2, #3
 800506a:	4013      	ands	r3, r2
 800506c:	2b03      	cmp	r3, #3
 800506e:	d01d      	beq.n	80050ac <UART_SetConfig+0xdc>
 8005070:	d823      	bhi.n	80050ba <UART_SetConfig+0xea>
 8005072:	2b02      	cmp	r3, #2
 8005074:	d00c      	beq.n	8005090 <UART_SetConfig+0xc0>
 8005076:	d820      	bhi.n	80050ba <UART_SetConfig+0xea>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <UART_SetConfig+0xb2>
 800507c:	2b01      	cmp	r3, #1
 800507e:	d00e      	beq.n	800509e <UART_SetConfig+0xce>
 8005080:	e01b      	b.n	80050ba <UART_SetConfig+0xea>
 8005082:	231b      	movs	r3, #27
 8005084:	2218      	movs	r2, #24
 8005086:	189b      	adds	r3, r3, r2
 8005088:	19db      	adds	r3, r3, r7
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e0b4      	b.n	80051fa <UART_SetConfig+0x22a>
 8005090:	231b      	movs	r3, #27
 8005092:	2218      	movs	r2, #24
 8005094:	189b      	adds	r3, r3, r2
 8005096:	19db      	adds	r3, r3, r7
 8005098:	2202      	movs	r2, #2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e0ad      	b.n	80051fa <UART_SetConfig+0x22a>
 800509e:	231b      	movs	r3, #27
 80050a0:	2218      	movs	r2, #24
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	19db      	adds	r3, r3, r7
 80050a6:	2204      	movs	r2, #4
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e0a6      	b.n	80051fa <UART_SetConfig+0x22a>
 80050ac:	231b      	movs	r3, #27
 80050ae:	2218      	movs	r2, #24
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	19db      	adds	r3, r3, r7
 80050b4:	2208      	movs	r2, #8
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e09f      	b.n	80051fa <UART_SetConfig+0x22a>
 80050ba:	231b      	movs	r3, #27
 80050bc:	2218      	movs	r2, #24
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	19db      	adds	r3, r3, r7
 80050c2:	2210      	movs	r2, #16
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e098      	b.n	80051fa <UART_SetConfig+0x22a>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a96      	ldr	r2, [pc, #600]	; (8005328 <UART_SetConfig+0x358>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d131      	bne.n	8005136 <UART_SetConfig+0x166>
 80050d2:	4b94      	ldr	r3, [pc, #592]	; (8005324 <UART_SetConfig+0x354>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	220c      	movs	r2, #12
 80050d8:	4013      	ands	r3, r2
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d01d      	beq.n	800511a <UART_SetConfig+0x14a>
 80050de:	d823      	bhi.n	8005128 <UART_SetConfig+0x158>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d00c      	beq.n	80050fe <UART_SetConfig+0x12e>
 80050e4:	d820      	bhi.n	8005128 <UART_SetConfig+0x158>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <UART_SetConfig+0x120>
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d00e      	beq.n	800510c <UART_SetConfig+0x13c>
 80050ee:	e01b      	b.n	8005128 <UART_SetConfig+0x158>
 80050f0:	231b      	movs	r3, #27
 80050f2:	2218      	movs	r2, #24
 80050f4:	189b      	adds	r3, r3, r2
 80050f6:	19db      	adds	r3, r3, r7
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e07d      	b.n	80051fa <UART_SetConfig+0x22a>
 80050fe:	231b      	movs	r3, #27
 8005100:	2218      	movs	r2, #24
 8005102:	189b      	adds	r3, r3, r2
 8005104:	19db      	adds	r3, r3, r7
 8005106:	2202      	movs	r2, #2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e076      	b.n	80051fa <UART_SetConfig+0x22a>
 800510c:	231b      	movs	r3, #27
 800510e:	2218      	movs	r2, #24
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	2204      	movs	r2, #4
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e06f      	b.n	80051fa <UART_SetConfig+0x22a>
 800511a:	231b      	movs	r3, #27
 800511c:	2218      	movs	r2, #24
 800511e:	189b      	adds	r3, r3, r2
 8005120:	19db      	adds	r3, r3, r7
 8005122:	2208      	movs	r2, #8
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e068      	b.n	80051fa <UART_SetConfig+0x22a>
 8005128:	231b      	movs	r3, #27
 800512a:	2218      	movs	r2, #24
 800512c:	189b      	adds	r3, r3, r2
 800512e:	19db      	adds	r3, r3, r7
 8005130:	2210      	movs	r2, #16
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e061      	b.n	80051fa <UART_SetConfig+0x22a>
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a7c      	ldr	r2, [pc, #496]	; (800532c <UART_SetConfig+0x35c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d106      	bne.n	800514e <UART_SetConfig+0x17e>
 8005140:	231b      	movs	r3, #27
 8005142:	2218      	movs	r2, #24
 8005144:	189b      	adds	r3, r3, r2
 8005146:	19db      	adds	r3, r3, r7
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	e055      	b.n	80051fa <UART_SetConfig+0x22a>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a77      	ldr	r2, [pc, #476]	; (8005330 <UART_SetConfig+0x360>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d106      	bne.n	8005166 <UART_SetConfig+0x196>
 8005158:	231b      	movs	r3, #27
 800515a:	2218      	movs	r2, #24
 800515c:	189b      	adds	r3, r3, r2
 800515e:	19db      	adds	r3, r3, r7
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e049      	b.n	80051fa <UART_SetConfig+0x22a>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6b      	ldr	r2, [pc, #428]	; (8005318 <UART_SetConfig+0x348>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d13e      	bne.n	80051ee <UART_SetConfig+0x21e>
 8005170:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <UART_SetConfig+0x354>)
 8005172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005174:	23c0      	movs	r3, #192	; 0xc0
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	4013      	ands	r3, r2
 800517a:	22c0      	movs	r2, #192	; 0xc0
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	4293      	cmp	r3, r2
 8005180:	d027      	beq.n	80051d2 <UART_SetConfig+0x202>
 8005182:	22c0      	movs	r2, #192	; 0xc0
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	4293      	cmp	r3, r2
 8005188:	d82a      	bhi.n	80051e0 <UART_SetConfig+0x210>
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	0112      	lsls	r2, r2, #4
 800518e:	4293      	cmp	r3, r2
 8005190:	d011      	beq.n	80051b6 <UART_SetConfig+0x1e6>
 8005192:	2280      	movs	r2, #128	; 0x80
 8005194:	0112      	lsls	r2, r2, #4
 8005196:	4293      	cmp	r3, r2
 8005198:	d822      	bhi.n	80051e0 <UART_SetConfig+0x210>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <UART_SetConfig+0x1d8>
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	00d2      	lsls	r2, r2, #3
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <UART_SetConfig+0x1f4>
 80051a6:	e01b      	b.n	80051e0 <UART_SetConfig+0x210>
 80051a8:	231b      	movs	r3, #27
 80051aa:	2218      	movs	r2, #24
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	19db      	adds	r3, r3, r7
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e021      	b.n	80051fa <UART_SetConfig+0x22a>
 80051b6:	231b      	movs	r3, #27
 80051b8:	2218      	movs	r2, #24
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	19db      	adds	r3, r3, r7
 80051be:	2202      	movs	r2, #2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e01a      	b.n	80051fa <UART_SetConfig+0x22a>
 80051c4:	231b      	movs	r3, #27
 80051c6:	2218      	movs	r2, #24
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	19db      	adds	r3, r3, r7
 80051cc:	2204      	movs	r2, #4
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e013      	b.n	80051fa <UART_SetConfig+0x22a>
 80051d2:	231b      	movs	r3, #27
 80051d4:	2218      	movs	r2, #24
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	2208      	movs	r2, #8
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e00c      	b.n	80051fa <UART_SetConfig+0x22a>
 80051e0:	231b      	movs	r3, #27
 80051e2:	2218      	movs	r2, #24
 80051e4:	189b      	adds	r3, r3, r2
 80051e6:	19db      	adds	r3, r3, r7
 80051e8:	2210      	movs	r2, #16
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e005      	b.n	80051fa <UART_SetConfig+0x22a>
 80051ee:	231b      	movs	r3, #27
 80051f0:	2218      	movs	r2, #24
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	19db      	adds	r3, r3, r7
 80051f6:	2210      	movs	r2, #16
 80051f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a46      	ldr	r2, [pc, #280]	; (8005318 <UART_SetConfig+0x348>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d000      	beq.n	8005206 <UART_SetConfig+0x236>
 8005204:	e09a      	b.n	800533c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005206:	231b      	movs	r3, #27
 8005208:	2218      	movs	r2, #24
 800520a:	189b      	adds	r3, r3, r2
 800520c:	19db      	adds	r3, r3, r7
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d01d      	beq.n	8005250 <UART_SetConfig+0x280>
 8005214:	dc20      	bgt.n	8005258 <UART_SetConfig+0x288>
 8005216:	2b04      	cmp	r3, #4
 8005218:	d015      	beq.n	8005246 <UART_SetConfig+0x276>
 800521a:	dc1d      	bgt.n	8005258 <UART_SetConfig+0x288>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <UART_SetConfig+0x256>
 8005220:	2b02      	cmp	r3, #2
 8005222:	d005      	beq.n	8005230 <UART_SetConfig+0x260>
 8005224:	e018      	b.n	8005258 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005226:	f7fe ffb9 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800522a:	0003      	movs	r3, r0
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800522e:	e01c      	b.n	800526a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005230:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <UART_SetConfig+0x354>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2210      	movs	r2, #16
 8005236:	4013      	ands	r3, r2
 8005238:	d002      	beq.n	8005240 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800523a:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <UART_SetConfig+0x364>)
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800523e:	e014      	b.n	800526a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005240:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <UART_SetConfig+0x368>)
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005244:	e011      	b.n	800526a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe fef9 	bl	800403c <HAL_RCC_GetSysClockFreq>
 800524a:	0003      	movs	r3, r0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800524e:	e00c      	b.n	800526a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005256:	e008      	b.n	800526a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800525c:	231a      	movs	r3, #26
 800525e:	2218      	movs	r2, #24
 8005260:	189b      	adds	r3, r3, r2
 8005262:	19db      	adds	r3, r3, r7
 8005264:	2201      	movs	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]
        break;
 8005268:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d100      	bne.n	8005272 <UART_SetConfig+0x2a2>
 8005270:	e133      	b.n	80054da <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	0013      	movs	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	189b      	adds	r3, r3, r2
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	429a      	cmp	r2, r3
 8005280:	d305      	bcc.n	800528e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528a:	429a      	cmp	r2, r3
 800528c:	d906      	bls.n	800529c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800528e:	231a      	movs	r3, #26
 8005290:	2218      	movs	r2, #24
 8005292:	189b      	adds	r3, r3, r2
 8005294:	19db      	adds	r3, r3, r7
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e11e      	b.n	80054da <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	6939      	ldr	r1, [r7, #16]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	000b      	movs	r3, r1
 80052aa:	0e1b      	lsrs	r3, r3, #24
 80052ac:	0010      	movs	r0, r2
 80052ae:	0205      	lsls	r5, r0, #8
 80052b0:	431d      	orrs	r5, r3
 80052b2:	000b      	movs	r3, r1
 80052b4:	021c      	lsls	r4, r3, #8
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	1900      	adds	r0, r0, r4
 80052c8:	4169      	adcs	r1, r5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	2300      	movs	r3, #0
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f7fb f8c6 	bl	8000468 <__aeabi_uldivmod>
 80052dc:	0002      	movs	r2, r0
 80052de:	000b      	movs	r3, r1
 80052e0:	0013      	movs	r3, r2
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e6:	23c0      	movs	r3, #192	; 0xc0
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d309      	bcc.n	8005302 <UART_SetConfig+0x332>
 80052ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	035b      	lsls	r3, r3, #13
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d204      	bcs.n	8005302 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e0eb      	b.n	80054da <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005302:	231a      	movs	r3, #26
 8005304:	2218      	movs	r2, #24
 8005306:	189b      	adds	r3, r3, r2
 8005308:	19db      	adds	r3, r3, r7
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e0e4      	b.n	80054da <UART_SetConfig+0x50a>
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	ffffcfff 	.word	0xffffcfff
 8005318:	40004800 	.word	0x40004800
 800531c:	fffff4ff 	.word	0xfffff4ff
 8005320:	40013800 	.word	0x40013800
 8005324:	40021000 	.word	0x40021000
 8005328:	40004400 	.word	0x40004400
 800532c:	40004c00 	.word	0x40004c00
 8005330:	40005000 	.word	0x40005000
 8005334:	003d0900 	.word	0x003d0900
 8005338:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	429a      	cmp	r2, r3
 8005346:	d000      	beq.n	800534a <UART_SetConfig+0x37a>
 8005348:	e070      	b.n	800542c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800534a:	231b      	movs	r3, #27
 800534c:	2218      	movs	r2, #24
 800534e:	189b      	adds	r3, r3, r2
 8005350:	19db      	adds	r3, r3, r7
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d822      	bhi.n	800539e <UART_SetConfig+0x3ce>
 8005358:	009a      	lsls	r2, r3, #2
 800535a:	4b67      	ldr	r3, [pc, #412]	; (80054f8 <UART_SetConfig+0x528>)
 800535c:	18d3      	adds	r3, r2, r3
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005362:	f7fe ff1b 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8005366:	0003      	movs	r3, r0
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800536a:	e021      	b.n	80053b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800536c:	f7fe ff2c 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8005370:	0003      	movs	r3, r0
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005374:	e01c      	b.n	80053b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005376:	4b61      	ldr	r3, [pc, #388]	; (80054fc <UART_SetConfig+0x52c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2210      	movs	r2, #16
 800537c:	4013      	ands	r3, r2
 800537e:	d002      	beq.n	8005386 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005380:	4b5f      	ldr	r3, [pc, #380]	; (8005500 <UART_SetConfig+0x530>)
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005384:	e014      	b.n	80053b0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005386:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <UART_SetConfig+0x534>)
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800538a:	e011      	b.n	80053b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538c:	f7fe fe56 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8005390:	0003      	movs	r3, r0
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005394:	e00c      	b.n	80053b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800539c:	e008      	b.n	80053b0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80053a2:	231a      	movs	r3, #26
 80053a4:	2218      	movs	r2, #24
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	19db      	adds	r3, r3, r7
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
        break;
 80053ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d100      	bne.n	80053b8 <UART_SetConfig+0x3e8>
 80053b6:	e090      	b.n	80054da <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	005a      	lsls	r2, r3, #1
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	18d2      	adds	r2, r2, r3
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	0019      	movs	r1, r3
 80053ca:	0010      	movs	r0, r2
 80053cc:	f7fa fe9c 	bl	8000108 <__udivsi3>
 80053d0:	0003      	movs	r3, r0
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d921      	bls.n	800541e <UART_SetConfig+0x44e>
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	025b      	lsls	r3, r3, #9
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d21c      	bcs.n	800541e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	200e      	movs	r0, #14
 80053ea:	2418      	movs	r4, #24
 80053ec:	1903      	adds	r3, r0, r4
 80053ee:	19db      	adds	r3, r3, r7
 80053f0:	210f      	movs	r1, #15
 80053f2:	438a      	bics	r2, r1
 80053f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2207      	movs	r2, #7
 80053fe:	4013      	ands	r3, r2
 8005400:	b299      	uxth	r1, r3
 8005402:	1903      	adds	r3, r0, r4
 8005404:	19db      	adds	r3, r3, r7
 8005406:	1902      	adds	r2, r0, r4
 8005408:	19d2      	adds	r2, r2, r7
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1902      	adds	r2, r0, r4
 8005416:	19d2      	adds	r2, r2, r7
 8005418:	8812      	ldrh	r2, [r2, #0]
 800541a:	60da      	str	r2, [r3, #12]
 800541c:	e05d      	b.n	80054da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800541e:	231a      	movs	r3, #26
 8005420:	2218      	movs	r2, #24
 8005422:	189b      	adds	r3, r3, r2
 8005424:	19db      	adds	r3, r3, r7
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e056      	b.n	80054da <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800542c:	231b      	movs	r3, #27
 800542e:	2218      	movs	r2, #24
 8005430:	189b      	adds	r3, r3, r2
 8005432:	19db      	adds	r3, r3, r7
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b08      	cmp	r3, #8
 8005438:	d822      	bhi.n	8005480 <UART_SetConfig+0x4b0>
 800543a:	009a      	lsls	r2, r3, #2
 800543c:	4b32      	ldr	r3, [pc, #200]	; (8005508 <UART_SetConfig+0x538>)
 800543e:	18d3      	adds	r3, r2, r3
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fe feaa 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8005448:	0003      	movs	r3, r0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800544c:	e021      	b.n	8005492 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544e:	f7fe febb 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8005452:	0003      	movs	r3, r0
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005456:	e01c      	b.n	8005492 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <UART_SetConfig+0x52c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2210      	movs	r2, #16
 800545e:	4013      	ands	r3, r2
 8005460:	d002      	beq.n	8005468 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005462:	4b27      	ldr	r3, [pc, #156]	; (8005500 <UART_SetConfig+0x530>)
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005466:	e014      	b.n	8005492 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005468:	4b26      	ldr	r3, [pc, #152]	; (8005504 <UART_SetConfig+0x534>)
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800546c:	e011      	b.n	8005492 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546e:	f7fe fde5 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8005472:	0003      	movs	r3, r0
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005476:	e00c      	b.n	8005492 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800547e:	e008      	b.n	8005492 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005484:	231a      	movs	r3, #26
 8005486:	2218      	movs	r2, #24
 8005488:	189b      	adds	r3, r3, r2
 800548a:	19db      	adds	r3, r3, r7
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
        break;
 8005490:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	085a      	lsrs	r2, r3, #1
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	18d2      	adds	r2, r2, r3
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0019      	movs	r1, r3
 80054a8:	0010      	movs	r0, r2
 80054aa:	f7fa fe2d 	bl	8000108 <__udivsi3>
 80054ae:	0003      	movs	r3, r0
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	2b0f      	cmp	r3, #15
 80054b6:	d90a      	bls.n	80054ce <UART_SetConfig+0x4fe>
 80054b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	429a      	cmp	r2, r3
 80054c0:	d205      	bcs.n	80054ce <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e005      	b.n	80054da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80054ce:	231a      	movs	r3, #26
 80054d0:	2218      	movs	r2, #24
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	19db      	adds	r3, r3, r7
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2200      	movs	r2, #0
 80054de:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2200      	movs	r2, #0
 80054e4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054e6:	231a      	movs	r3, #26
 80054e8:	2218      	movs	r2, #24
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	19db      	adds	r3, r3, r7
 80054ee:	781b      	ldrb	r3, [r3, #0]
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b00e      	add	sp, #56	; 0x38
 80054f6:	bdb0      	pop	{r4, r5, r7, pc}
 80054f8:	08005c60 	.word	0x08005c60
 80054fc:	40021000 	.word	0x40021000
 8005500:	003d0900 	.word	0x003d0900
 8005504:	00f42400 	.word	0x00f42400
 8005508:	08005c84 	.word	0x08005c84

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2201      	movs	r2, #1
 800551a:	4013      	ands	r3, r2
 800551c:	d00b      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <UART_AdvFeatureConfig+0x144>)
 8005526:	4013      	ands	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2202      	movs	r2, #2
 800553c:	4013      	ands	r3, r2
 800553e:	d00b      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4a43      	ldr	r2, [pc, #268]	; (8005654 <UART_AdvFeatureConfig+0x148>)
 8005548:	4013      	ands	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	2204      	movs	r2, #4
 800555e:	4013      	ands	r3, r2
 8005560:	d00b      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a3b      	ldr	r2, [pc, #236]	; (8005658 <UART_AdvFeatureConfig+0x14c>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2208      	movs	r2, #8
 8005580:	4013      	ands	r3, r2
 8005582:	d00b      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a34      	ldr	r2, [pc, #208]	; (800565c <UART_AdvFeatureConfig+0x150>)
 800558c:	4013      	ands	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2210      	movs	r2, #16
 80055a2:	4013      	ands	r3, r2
 80055a4:	d00b      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <UART_AdvFeatureConfig+0x154>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2220      	movs	r2, #32
 80055c4:	4013      	ands	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	4a25      	ldr	r2, [pc, #148]	; (8005664 <UART_AdvFeatureConfig+0x158>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2240      	movs	r2, #64	; 0x40
 80055e6:	4013      	ands	r3, r2
 80055e8:	d01d      	beq.n	8005626 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <UART_AdvFeatureConfig+0x15c>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	035b      	lsls	r3, r3, #13
 800560a:	429a      	cmp	r2, r3
 800560c:	d10b      	bne.n	8005626 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	4013      	ands	r3, r2
 800562e:	d00b      	beq.n	8005648 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <UART_AdvFeatureConfig+0x164>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }
}
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}
 8005650:	fffdffff 	.word	0xfffdffff
 8005654:	fffeffff 	.word	0xfffeffff
 8005658:	fffbffff 	.word	0xfffbffff
 800565c:	ffff7fff 	.word	0xffff7fff
 8005660:	ffffefff 	.word	0xffffefff
 8005664:	ffffdfff 	.word	0xffffdfff
 8005668:	ffefffff 	.word	0xffefffff
 800566c:	ff9fffff 	.word	0xff9fffff
 8005670:	fff7ffff 	.word	0xfff7ffff

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b092      	sub	sp, #72	; 0x48
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2284      	movs	r2, #132	; 0x84
 8005680:	2100      	movs	r1, #0
 8005682:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005684:	f7fd f890 	bl	80027a8 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2208      	movs	r2, #8
 8005694:	4013      	ands	r3, r2
 8005696:	2b08      	cmp	r3, #8
 8005698:	d12c      	bne.n	80056f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	0391      	lsls	r1, r2, #14
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4a46      	ldr	r2, [pc, #280]	; (80057bc <UART_CheckIdleState+0x148>)
 80056a4:	9200      	str	r2, [sp, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f000 f88c 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 80056ac:	1e03      	subs	r3, r0, #0
 80056ae:	d021      	beq.n	80056f4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b0:	f3ef 8310 	mrs	r3, PRIMASK
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ba:	2301      	movs	r3, #1
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	f383 8810 	msr	PRIMASK, r3
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	438a      	bics	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2278      	movs	r2, #120	; 0x78
 80056ec:	2100      	movs	r1, #0
 80056ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e05f      	b.n	80057b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2204      	movs	r2, #4
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d146      	bne.n	8005790 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005704:	2280      	movs	r2, #128	; 0x80
 8005706:	03d1      	lsls	r1, r2, #15
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4a2c      	ldr	r2, [pc, #176]	; (80057bc <UART_CheckIdleState+0x148>)
 800570c:	9200      	str	r2, [sp, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	f000 f858 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 8005714:	1e03      	subs	r3, r0, #0
 8005716:	d03b      	beq.n	8005790 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005718:	f3ef 8310 	mrs	r3, PRIMASK
 800571c:	60fb      	str	r3, [r7, #12]
  return(result);
 800571e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
 8005722:	2301      	movs	r3, #1
 8005724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f383 8810 	msr	PRIMASK, r3
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4921      	ldr	r1, [pc, #132]	; (80057c0 <UART_CheckIdleState+0x14c>)
 800573a:	400a      	ands	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574a:	f3ef 8310 	mrs	r3, PRIMASK
 800574e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005750:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	633b      	str	r3, [r7, #48]	; 0x30
 8005754:	2301      	movs	r3, #1
 8005756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f383 8810 	msr	PRIMASK, r3
}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2101      	movs	r1, #1
 800576c:	438a      	bics	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f383 8810 	msr	PRIMASK, r3
}
 800577a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	2120      	movs	r1, #32
 8005782:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2278      	movs	r2, #120	; 0x78
 8005788:	2100      	movs	r1, #0
 800578a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e011      	b.n	80057b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	2120      	movs	r1, #32
 800579c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2278      	movs	r2, #120	; 0x78
 80057ae:	2100      	movs	r1, #0
 80057b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b010      	add	sp, #64	; 0x40
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	01ffffff 	.word	0x01ffffff
 80057c0:	fffffedf 	.word	0xfffffedf

080057c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d4:	e04b      	b.n	800586e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	3301      	adds	r3, #1
 80057da:	d048      	beq.n	800586e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057dc:	f7fc ffe4 	bl	80027a8 <HAL_GetTick>
 80057e0:	0002      	movs	r2, r0
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e04b      	b.n	800588e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2204      	movs	r2, #4
 80057fe:	4013      	ands	r3, r2
 8005800:	d035      	beq.n	800586e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	2208      	movs	r2, #8
 800580a:	4013      	ands	r3, r2
 800580c:	2b08      	cmp	r3, #8
 800580e:	d111      	bne.n	8005834 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2208      	movs	r2, #8
 8005816:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 f83c 	bl	8005898 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2284      	movs	r2, #132	; 0x84
 8005824:	2108      	movs	r1, #8
 8005826:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2278      	movs	r2, #120	; 0x78
 800582c:	2100      	movs	r1, #0
 800582e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e02c      	b.n	800588e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	401a      	ands	r2, r3
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	429a      	cmp	r2, r3
 8005846:	d112      	bne.n	800586e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2280      	movs	r2, #128	; 0x80
 800584e:	0112      	lsls	r2, r2, #4
 8005850:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	0018      	movs	r0, r3
 8005856:	f000 f81f 	bl	8005898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2284      	movs	r2, #132	; 0x84
 800585e:	2120      	movs	r1, #32
 8005860:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2278      	movs	r2, #120	; 0x78
 8005866:	2100      	movs	r1, #0
 8005868:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e00f      	b.n	800588e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	425a      	negs	r2, r3
 800587e:	4153      	adcs	r3, r2
 8005880:	b2db      	uxtb	r3, r3
 8005882:	001a      	movs	r2, r3
 8005884:	1dfb      	adds	r3, r7, #7
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d0a4      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b004      	add	sp, #16
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08e      	sub	sp, #56	; 0x38
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a0:	f3ef 8310 	mrs	r3, PRIMASK
 80058a4:	617b      	str	r3, [r7, #20]
  return(result);
 80058a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	2301      	movs	r3, #1
 80058ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4926      	ldr	r1, [pc, #152]	; (800595c <UART_EndRxTransfer+0xc4>)
 80058c2:	400a      	ands	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f383 8810 	msr	PRIMASK, r3
}
 80058d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d2:	f3ef 8310 	mrs	r3, PRIMASK
 80058d6:	623b      	str	r3, [r7, #32]
  return(result);
 80058d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	633b      	str	r3, [r7, #48]	; 0x30
 80058dc:	2301      	movs	r3, #1
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	f383 8810 	msr	PRIMASK, r3
}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2101      	movs	r1, #1
 80058f4:	438a      	bics	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	f383 8810 	msr	PRIMASK, r3
}
 8005902:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005908:	2b01      	cmp	r3, #1
 800590a:	d118      	bne.n	800593e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590c:	f3ef 8310 	mrs	r3, PRIMASK
 8005910:	60bb      	str	r3, [r7, #8]
  return(result);
 8005912:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005916:	2301      	movs	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2110      	movs	r1, #16
 800592e:	438a      	bics	r2, r1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	2120      	movs	r1, #32
 8005944:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	b00e      	add	sp, #56	; 0x38
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	fffffedf 	.word	0xfffffedf

08005960 <__itoa>:
 8005960:	1e93      	subs	r3, r2, #2
 8005962:	b510      	push	{r4, lr}
 8005964:	000c      	movs	r4, r1
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	d904      	bls.n	8005974 <__itoa+0x14>
 800596a:	2300      	movs	r3, #0
 800596c:	001c      	movs	r4, r3
 800596e:	700b      	strb	r3, [r1, #0]
 8005970:	0020      	movs	r0, r4
 8005972:	bd10      	pop	{r4, pc}
 8005974:	2a0a      	cmp	r2, #10
 8005976:	d109      	bne.n	800598c <__itoa+0x2c>
 8005978:	2800      	cmp	r0, #0
 800597a:	da07      	bge.n	800598c <__itoa+0x2c>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	700b      	strb	r3, [r1, #0]
 8005980:	2101      	movs	r1, #1
 8005982:	4240      	negs	r0, r0
 8005984:	1861      	adds	r1, r4, r1
 8005986:	f000 f807 	bl	8005998 <__utoa>
 800598a:	e7f1      	b.n	8005970 <__itoa+0x10>
 800598c:	2100      	movs	r1, #0
 800598e:	e7f9      	b.n	8005984 <__itoa+0x24>

08005990 <itoa>:
 8005990:	b510      	push	{r4, lr}
 8005992:	f7ff ffe5 	bl	8005960 <__itoa>
 8005996:	bd10      	pop	{r4, pc}

08005998 <__utoa>:
 8005998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599a:	000c      	movs	r4, r1
 800599c:	0016      	movs	r6, r2
 800599e:	b08d      	sub	sp, #52	; 0x34
 80059a0:	2225      	movs	r2, #37	; 0x25
 80059a2:	0007      	movs	r7, r0
 80059a4:	4915      	ldr	r1, [pc, #84]	; (80059fc <__utoa+0x64>)
 80059a6:	a802      	add	r0, sp, #8
 80059a8:	f000 f856 	bl	8005a58 <memcpy>
 80059ac:	1e62      	subs	r2, r4, #1
 80059ae:	1eb3      	subs	r3, r6, #2
 80059b0:	2500      	movs	r5, #0
 80059b2:	9201      	str	r2, [sp, #4]
 80059b4:	2b22      	cmp	r3, #34	; 0x22
 80059b6:	d904      	bls.n	80059c2 <__utoa+0x2a>
 80059b8:	7025      	strb	r5, [r4, #0]
 80059ba:	002c      	movs	r4, r5
 80059bc:	0020      	movs	r0, r4
 80059be:	b00d      	add	sp, #52	; 0x34
 80059c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c2:	0038      	movs	r0, r7
 80059c4:	0031      	movs	r1, r6
 80059c6:	f7fa fc25 	bl	8000214 <__aeabi_uidivmod>
 80059ca:	000b      	movs	r3, r1
 80059cc:	aa02      	add	r2, sp, #8
 80059ce:	5cd3      	ldrb	r3, [r2, r3]
 80059d0:	9a01      	ldr	r2, [sp, #4]
 80059d2:	0029      	movs	r1, r5
 80059d4:	3501      	adds	r5, #1
 80059d6:	5553      	strb	r3, [r2, r5]
 80059d8:	003b      	movs	r3, r7
 80059da:	0007      	movs	r7, r0
 80059dc:	429e      	cmp	r6, r3
 80059de:	d9f0      	bls.n	80059c2 <__utoa+0x2a>
 80059e0:	2300      	movs	r3, #0
 80059e2:	0022      	movs	r2, r4
 80059e4:	5563      	strb	r3, [r4, r5]
 80059e6:	000b      	movs	r3, r1
 80059e8:	1ac8      	subs	r0, r1, r3
 80059ea:	4283      	cmp	r3, r0
 80059ec:	dde6      	ble.n	80059bc <__utoa+0x24>
 80059ee:	7810      	ldrb	r0, [r2, #0]
 80059f0:	5ce5      	ldrb	r5, [r4, r3]
 80059f2:	7015      	strb	r5, [r2, #0]
 80059f4:	54e0      	strb	r0, [r4, r3]
 80059f6:	3201      	adds	r2, #1
 80059f8:	3b01      	subs	r3, #1
 80059fa:	e7f5      	b.n	80059e8 <__utoa+0x50>
 80059fc:	08005ca8 	.word	0x08005ca8

08005a00 <memset>:
 8005a00:	0003      	movs	r3, r0
 8005a02:	1882      	adds	r2, r0, r2
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d100      	bne.n	8005a0a <memset+0xa>
 8005a08:	4770      	bx	lr
 8005a0a:	7019      	strb	r1, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	e7f9      	b.n	8005a04 <memset+0x4>

08005a10 <__libc_init_array>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	2600      	movs	r6, #0
 8005a14:	4c0c      	ldr	r4, [pc, #48]	; (8005a48 <__libc_init_array+0x38>)
 8005a16:	4d0d      	ldr	r5, [pc, #52]	; (8005a4c <__libc_init_array+0x3c>)
 8005a18:	1b64      	subs	r4, r4, r5
 8005a1a:	10a4      	asrs	r4, r4, #2
 8005a1c:	42a6      	cmp	r6, r4
 8005a1e:	d109      	bne.n	8005a34 <__libc_init_array+0x24>
 8005a20:	2600      	movs	r6, #0
 8005a22:	f000 f823 	bl	8005a6c <_init>
 8005a26:	4c0a      	ldr	r4, [pc, #40]	; (8005a50 <__libc_init_array+0x40>)
 8005a28:	4d0a      	ldr	r5, [pc, #40]	; (8005a54 <__libc_init_array+0x44>)
 8005a2a:	1b64      	subs	r4, r4, r5
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	42a6      	cmp	r6, r4
 8005a30:	d105      	bne.n	8005a3e <__libc_init_array+0x2e>
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	00b3      	lsls	r3, r6, #2
 8005a36:	58eb      	ldr	r3, [r5, r3]
 8005a38:	4798      	blx	r3
 8005a3a:	3601      	adds	r6, #1
 8005a3c:	e7ee      	b.n	8005a1c <__libc_init_array+0xc>
 8005a3e:	00b3      	lsls	r3, r6, #2
 8005a40:	58eb      	ldr	r3, [r5, r3]
 8005a42:	4798      	blx	r3
 8005a44:	3601      	adds	r6, #1
 8005a46:	e7f2      	b.n	8005a2e <__libc_init_array+0x1e>
 8005a48:	08005cd8 	.word	0x08005cd8
 8005a4c:	08005cd8 	.word	0x08005cd8
 8005a50:	08005cdc 	.word	0x08005cdc
 8005a54:	08005cd8 	.word	0x08005cd8

08005a58 <memcpy>:
 8005a58:	2300      	movs	r3, #0
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d100      	bne.n	8005a62 <memcpy+0xa>
 8005a60:	bd10      	pop	{r4, pc}
 8005a62:	5ccc      	ldrb	r4, [r1, r3]
 8005a64:	54c4      	strb	r4, [r0, r3]
 8005a66:	3301      	adds	r3, #1
 8005a68:	e7f8      	b.n	8005a5c <memcpy+0x4>
	...

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr


pmik2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800a040  0800a040  0001a040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a604  0800a604  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a60c  0800a60c  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a60c  0800a60c  0001a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a610  0800a610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  0800a614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000438  0800aa4c  00020438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800aa4c  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 13 .debug_line   00014df0  00000000  00000000  000204a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000057  00000000  00000000  00035293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00011173  00000000  00000000  000352ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000027d3  00000000  00000000  0004645d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001070  00000000  00000000  00048c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbb8  00000000  00000000  00049ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ccc  00000000  00000000  000d7858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001764c  00000000  00000000  000d8524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e2c  00000000  00000000  000efb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000438 	.word	0x20000438
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a024 	.word	0x0800a024

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000043c 	.word	0x2000043c
 8000104:	0800a024 	.word	0x0800a024

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc07 	bl	8001c50 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb57 	bl	8001b00 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fbf9 	bl	8001c50 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fbef 	bl	8001c50 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb7f 	bl	8001b84 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb75 	bl	8001b84 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fad3 	bl	8000a5c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa5f 	bl	8000984 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fac5 	bl	8000a5c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fabb 	bl	8000a5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa6b 	bl	80009d0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa61 	bl	80009d0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 faf2 	bl	8002bc0 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 faed 	bl	8002bc0 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fdiv>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	464f      	mov	r7, r9
 8000754:	4646      	mov	r6, r8
 8000756:	46d6      	mov	lr, sl
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0047      	lsls	r7, r0, #1
 800075e:	1c0c      	adds	r4, r1, #0
 8000760:	0a6d      	lsrs	r5, r5, #9
 8000762:	0e3f      	lsrs	r7, r7, #24
 8000764:	0fc6      	lsrs	r6, r0, #31
 8000766:	2f00      	cmp	r7, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fdiv+0x1c>
 800076a:	e06f      	b.n	800084c <__aeabi_fdiv+0xfc>
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fdiv+0x22>
 8000770:	e074      	b.n	800085c <__aeabi_fdiv+0x10c>
 8000772:	2300      	movs	r3, #0
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	00ed      	lsls	r5, r5, #3
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4315      	orrs	r5, r2
 8000780:	3f7f      	subs	r7, #127	; 0x7f
 8000782:	0263      	lsls	r3, r4, #9
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	4698      	mov	r8, r3
 8000788:	0063      	lsls	r3, r4, #1
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	0fe4      	lsrs	r4, r4, #31
 800078e:	2b00      	cmp	r3, #0
 8000790:	d04d      	beq.n	800082e <__aeabi_fdiv+0xde>
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d045      	beq.n	8000822 <__aeabi_fdiv+0xd2>
 8000796:	4642      	mov	r2, r8
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	04c9      	lsls	r1, r1, #19
 800079e:	4311      	orrs	r1, r2
 80007a0:	4688      	mov	r8, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	3b7f      	subs	r3, #127	; 0x7f
 80007a6:	0031      	movs	r1, r6
 80007a8:	1aff      	subs	r7, r7, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	4061      	eors	r1, r4
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d900      	bls.n	80007b6 <__aeabi_fdiv+0x66>
 80007b4:	e0b8      	b.n	8000928 <__aeabi_fdiv+0x1d8>
 80007b6:	4870      	ldr	r0, [pc, #448]	; (8000978 <__aeabi_fdiv+0x228>)
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	58c3      	ldr	r3, [r0, r3]
 80007bc:	469f      	mov	pc, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	4698      	mov	r8, r3
 80007c2:	0026      	movs	r6, r4
 80007c4:	4645      	mov	r5, r8
 80007c6:	4692      	mov	sl, r2
 80007c8:	4653      	mov	r3, sl
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fdiv+0x80>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fdiv+0x19c>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fdiv+0x86>
 80007d4:	e0a1      	b.n	800091a <__aeabi_fdiv+0x1ca>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d018      	beq.n	800080c <__aeabi_fdiv+0xbc>
 80007da:	003b      	movs	r3, r7
 80007dc:	337f      	adds	r3, #127	; 0x7f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd6d      	ble.n	80008be <__aeabi_fdiv+0x16e>
 80007e2:	076a      	lsls	r2, r5, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007e6:	220f      	movs	r2, #15
 80007e8:	402a      	ands	r2, r5
 80007ea:	2a04      	cmp	r2, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007ee:	3504      	adds	r5, #4
 80007f0:	012a      	lsls	r2, r5, #4
 80007f2:	d503      	bpl.n	80007fc <__aeabi_fdiv+0xac>
 80007f4:	4b61      	ldr	r3, [pc, #388]	; (800097c <__aeabi_fdiv+0x22c>)
 80007f6:	401d      	ands	r5, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	3380      	adds	r3, #128	; 0x80
 80007fc:	2bfe      	cmp	r3, #254	; 0xfe
 80007fe:	dd00      	ble.n	8000802 <__aeabi_fdiv+0xb2>
 8000800:	e074      	b.n	80008ec <__aeabi_fdiv+0x19c>
 8000802:	01aa      	lsls	r2, r5, #6
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e002      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800080a:	000e      	movs	r6, r1
 800080c:	2000      	movs	r0, #0
 800080e:	2200      	movs	r2, #0
 8000810:	05c0      	lsls	r0, r0, #23
 8000812:	07f6      	lsls	r6, r6, #31
 8000814:	4310      	orrs	r0, r2
 8000816:	4330      	orrs	r0, r6
 8000818:	bce0      	pop	{r5, r6, r7}
 800081a:	46ba      	mov	sl, r7
 800081c:	46b1      	mov	r9, r6
 800081e:	46a8      	mov	r8, r5
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0x158>
 8000828:	2202      	movs	r2, #2
 800082a:	3fff      	subs	r7, #255	; 0xff
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0xe6>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0x140>
 8000834:	2201      	movs	r2, #1
 8000836:	0031      	movs	r1, r6
 8000838:	464b      	mov	r3, r9
 800083a:	4061      	eors	r1, r4
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	4313      	orrs	r3, r2
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0x166>
 8000844:	484e      	ldr	r0, [pc, #312]	; (8000980 <__aeabi_fdiv+0x230>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	58c3      	ldr	r3, [r0, r3]
 800084a:	469f      	mov	pc, r3
 800084c:	2d00      	cmp	r5, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0x128>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e792      	b.n	8000782 <__aeabi_fdiv+0x32>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0x11c>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e78a      	b.n	8000782 <__aeabi_fdiv+0x32>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	; 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e784      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000878:	0028      	movs	r0, r5
 800087a:	f002 f983 	bl	8002b84 <__clzsi2>
 800087e:	2776      	movs	r7, #118	; 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409d      	lsls	r5, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e778      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000890:	4640      	mov	r0, r8
 8000892:	f002 f977 	bl	8002b84 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	; 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	4690      	mov	r8, r2
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	2200      	movs	r2, #0
 80008a6:	e77e      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	33fc      	adds	r3, #252	; 0xfc
 80008b2:	2203      	movs	r2, #3
 80008b4:	e777      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008b6:	000e      	movs	r6, r1
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	e7a8      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008be:	2201      	movs	r2, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b1b      	cmp	r3, #27
 80008c4:	dca2      	bgt.n	800080c <__aeabi_fdiv+0xbc>
 80008c6:	379e      	adds	r7, #158	; 0x9e
 80008c8:	002a      	movs	r2, r5
 80008ca:	40bd      	lsls	r5, r7
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	1e6b      	subs	r3, r5, #1
 80008d0:	419d      	sbcs	r5, r3
 80008d2:	4315      	orrs	r5, r2
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008d8:	220f      	movs	r2, #15
 80008da:	402a      	ands	r2, r5
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d000      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008e0:	3504      	adds	r5, #4
 80008e2:	016a      	lsls	r2, r5, #5
 80008e4:	d544      	bpl.n	8000970 <__aeabi_fdiv+0x220>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2200      	movs	r2, #0
 80008ea:	e791      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2200      	movs	r2, #0
 80008f0:	e78e      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	2600      	movs	r6, #0
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	e789      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4698      	mov	r8, r3
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	4215      	tst	r5, r2
 8000906:	d008      	beq.n	800091a <__aeabi_fdiv+0x1ca>
 8000908:	4643      	mov	r3, r8
 800090a:	4213      	tst	r3, r2
 800090c:	d105      	bne.n	800091a <__aeabi_fdiv+0x1ca>
 800090e:	431a      	orrs	r2, r3
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0026      	movs	r6, r4
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e77a      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	432a      	orrs	r2, r5
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e773      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000928:	4642      	mov	r2, r8
 800092a:	016b      	lsls	r3, r5, #5
 800092c:	0155      	lsls	r5, r2, #5
 800092e:	42ab      	cmp	r3, r5
 8000930:	d21a      	bcs.n	8000968 <__aeabi_fdiv+0x218>
 8000932:	201b      	movs	r0, #27
 8000934:	2200      	movs	r2, #0
 8000936:	3f01      	subs	r7, #1
 8000938:	2601      	movs	r6, #1
 800093a:	001c      	movs	r4, r3
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2c00      	cmp	r4, #0
 8000942:	db01      	blt.n	8000948 <__aeabi_fdiv+0x1f8>
 8000944:	429d      	cmp	r5, r3
 8000946:	d801      	bhi.n	800094c <__aeabi_fdiv+0x1fc>
 8000948:	1b5b      	subs	r3, r3, r5
 800094a:	4332      	orrs	r2, r6
 800094c:	3801      	subs	r0, #1
 800094e:	2800      	cmp	r0, #0
 8000950:	d1f3      	bne.n	800093a <__aeabi_fdiv+0x1ea>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	4183      	sbcs	r3, r0
 8000956:	4313      	orrs	r3, r2
 8000958:	001d      	movs	r5, r3
 800095a:	003b      	movs	r3, r7
 800095c:	337f      	adds	r3, #127	; 0x7f
 800095e:	000e      	movs	r6, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd00      	ble.n	8000966 <__aeabi_fdiv+0x216>
 8000964:	e73d      	b.n	80007e2 <__aeabi_fdiv+0x92>
 8000966:	e7aa      	b.n	80008be <__aeabi_fdiv+0x16e>
 8000968:	201a      	movs	r0, #26
 800096a:	2201      	movs	r2, #1
 800096c:	1b5b      	subs	r3, r3, r5
 800096e:	e7e3      	b.n	8000938 <__aeabi_fdiv+0x1e8>
 8000970:	01aa      	lsls	r2, r5, #6
 8000972:	2000      	movs	r0, #0
 8000974:	0a52      	lsrs	r2, r2, #9
 8000976:	e74b      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000978:	0800a140 	.word	0x0800a140
 800097c:	f7ffffff 	.word	0xf7ffffff
 8000980:	0800a180 	.word	0x0800a180

08000984 <__eqsf2>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0245      	lsls	r5, r0, #9
 800098a:	024e      	lsls	r6, r1, #9
 800098c:	004c      	lsls	r4, r1, #1
 800098e:	0fc3      	lsrs	r3, r0, #31
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	2001      	movs	r0, #1
 8000994:	0e12      	lsrs	r2, r2, #24
 8000996:	0a76      	lsrs	r6, r6, #9
 8000998:	0e24      	lsrs	r4, r4, #24
 800099a:	0fc9      	lsrs	r1, r1, #31
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d006      	beq.n	80009ae <__eqsf2+0x2a>
 80009a0:	2cff      	cmp	r4, #255	; 0xff
 80009a2:	d003      	beq.n	80009ac <__eqsf2+0x28>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d101      	bne.n	80009ac <__eqsf2+0x28>
 80009a8:	42b5      	cmp	r5, r6
 80009aa:	d006      	beq.n	80009ba <__eqsf2+0x36>
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d1fc      	bne.n	80009ac <__eqsf2+0x28>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d1fa      	bne.n	80009ac <__eqsf2+0x28>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d1f8      	bne.n	80009ac <__eqsf2+0x28>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d006      	beq.n	80009cc <__eqsf2+0x48>
 80009be:	2001      	movs	r0, #1
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d1f3      	bne.n	80009ac <__eqsf2+0x28>
 80009c4:	0028      	movs	r0, r5
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	e7ef      	b.n	80009ac <__eqsf2+0x28>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7ed      	b.n	80009ac <__eqsf2+0x28>

080009d0 <__gesf2>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	0042      	lsls	r2, r0, #1
 80009d4:	0245      	lsls	r5, r0, #9
 80009d6:	024e      	lsls	r6, r1, #9
 80009d8:	004c      	lsls	r4, r1, #1
 80009da:	0fc3      	lsrs	r3, r0, #31
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	0a76      	lsrs	r6, r6, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	0fc8      	lsrs	r0, r1, #31
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d01b      	beq.n	8000a22 <__gesf2+0x52>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d00e      	beq.n	8000a0c <__gesf2+0x3c>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d11b      	bne.n	8000a2a <__gesf2+0x5a>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d101      	bne.n	80009fa <__gesf2+0x2a>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d01c      	beq.n	8000a34 <__gesf2+0x64>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d00c      	beq.n	8000a18 <__gesf2+0x48>
 80009fe:	4283      	cmp	r3, r0
 8000a00:	d01c      	beq.n	8000a3c <__gesf2+0x6c>
 8000a02:	2102      	movs	r1, #2
 8000a04:	1e58      	subs	r0, r3, #1
 8000a06:	4008      	ands	r0, r1
 8000a08:	3801      	subs	r0, #1
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d122      	bne.n	8000a56 <__gesf2+0x86>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d1f4      	bne.n	80009fe <__gesf2+0x2e>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d1f2      	bne.n	80009fe <__gesf2+0x2e>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f6      	bne.n	8000a0a <__gesf2+0x3a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	4240      	negs	r0, r0
 8000a20:	e7f3      	b.n	8000a0a <__gesf2+0x3a>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d117      	bne.n	8000a56 <__gesf2+0x86>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d0f0      	beq.n	8000a0c <__gesf2+0x3c>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1e7      	bne.n	80009fe <__gesf2+0x2e>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1e5      	bne.n	80009fe <__gesf2+0x2e>
 8000a32:	e7e6      	b.n	8000a02 <__gesf2+0x32>
 8000a34:	2000      	movs	r0, #0
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0e7      	beq.n	8000a0a <__gesf2+0x3a>
 8000a3a:	e7e2      	b.n	8000a02 <__gesf2+0x32>
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	dc05      	bgt.n	8000a4c <__gesf2+0x7c>
 8000a40:	dbea      	blt.n	8000a18 <__gesf2+0x48>
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d802      	bhi.n	8000a4c <__gesf2+0x7c>
 8000a46:	d3e7      	bcc.n	8000a18 <__gesf2+0x48>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7de      	b.n	8000a0a <__gesf2+0x3a>
 8000a4c:	4243      	negs	r3, r0
 8000a4e:	4158      	adcs	r0, r3
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7d9      	b.n	8000a0a <__gesf2+0x3a>
 8000a56:	2002      	movs	r0, #2
 8000a58:	4240      	negs	r0, r0
 8000a5a:	e7d6      	b.n	8000a0a <__gesf2+0x3a>

08000a5c <__lesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d00b      	beq.n	8000a8e <__lesf2+0x32>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00d      	beq.n	8000a96 <__lesf2+0x3a>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11f      	bne.n	8000abe <__lesf2+0x62>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d116      	bne.n	8000ab0 <__lesf2+0x54>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d114      	bne.n	8000ab0 <__lesf2+0x54>
 8000a86:	2000      	movs	r0, #0
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d010      	beq.n	8000aae <__lesf2+0x52>
 8000a8c:	e009      	b.n	8000aa2 <__lesf2+0x46>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d10c      	bne.n	8000aac <__lesf2+0x50>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d113      	bne.n	8000abe <__lesf2+0x62>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d108      	bne.n	8000aac <__lesf2+0x50>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d008      	beq.n	8000ab0 <__lesf2+0x54>
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d012      	beq.n	8000ac8 <__lesf2+0x6c>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	1e58      	subs	r0, r3, #1
 8000aa6:	4008      	ands	r0, r1
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	e000      	b.n	8000aae <__lesf2+0x52>
 8000aac:	2002      	movs	r0, #2
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d1f4      	bne.n	8000a9e <__lesf2+0x42>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1fa      	bne.n	8000aae <__lesf2+0x52>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4240      	negs	r0, r0
 8000abc:	e7f7      	b.n	8000aae <__lesf2+0x52>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d1ed      	bne.n	8000a9e <__lesf2+0x42>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1eb      	bne.n	8000a9e <__lesf2+0x42>
 8000ac6:	e7ec      	b.n	8000aa2 <__lesf2+0x46>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__lesf2+0x7c>
 8000acc:	dbf2      	blt.n	8000ab4 <__lesf2+0x58>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__lesf2+0x7c>
 8000ad2:	d3ef      	bcc.n	8000ab4 <__lesf2+0x58>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7ea      	b.n	8000aae <__lesf2+0x52>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7e5      	b.n	8000aae <__lesf2+0x52>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__aeabi_fmul>:
 8000ae4:	0243      	lsls	r3, r0, #9
 8000ae6:	0a5b      	lsrs	r3, r3, #9
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	464f      	mov	r7, r9
 8000aec:	4646      	mov	r6, r8
 8000aee:	4699      	mov	r9, r3
 8000af0:	46d6      	mov	lr, sl
 8000af2:	0fc3      	lsrs	r3, r0, #31
 8000af4:	0045      	lsls	r5, r0, #1
 8000af6:	4698      	mov	r8, r3
 8000af8:	b5c0      	push	{r6, r7, lr}
 8000afa:	464b      	mov	r3, r9
 8000afc:	1c0f      	adds	r7, r1, #0
 8000afe:	0e2d      	lsrs	r5, r5, #24
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fmul+0x20>
 8000b02:	e0cb      	b.n	8000c9c <__aeabi_fmul+0x1b8>
 8000b04:	2dff      	cmp	r5, #255	; 0xff
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fmul+0x26>
 8000b08:	e0cf      	b.n	8000caa <__aeabi_fmul+0x1c6>
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	04d2      	lsls	r2, r2, #19
 8000b10:	431a      	orrs	r2, r3
 8000b12:	2300      	movs	r3, #0
 8000b14:	4691      	mov	r9, r2
 8000b16:	2600      	movs	r6, #0
 8000b18:	469a      	mov	sl, r3
 8000b1a:	3d7f      	subs	r5, #127	; 0x7f
 8000b1c:	027c      	lsls	r4, r7, #9
 8000b1e:	007b      	lsls	r3, r7, #1
 8000b20:	0a64      	lsrs	r4, r4, #9
 8000b22:	0e1b      	lsrs	r3, r3, #24
 8000b24:	0fff      	lsrs	r7, r7, #31
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fmul+0x48>
 8000b2a:	e0a9      	b.n	8000c80 <__aeabi_fmul+0x19c>
 8000b2c:	2bff      	cmp	r3, #255	; 0xff
 8000b2e:	d011      	beq.n	8000b54 <__aeabi_fmul+0x70>
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	00e4      	lsls	r4, r4, #3
 8000b34:	04d2      	lsls	r2, r2, #19
 8000b36:	4314      	orrs	r4, r2
 8000b38:	4642      	mov	r2, r8
 8000b3a:	3b7f      	subs	r3, #127	; 0x7f
 8000b3c:	195b      	adds	r3, r3, r5
 8000b3e:	407a      	eors	r2, r7
 8000b40:	2000      	movs	r0, #0
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	1c5d      	adds	r5, r3, #1
 8000b46:	2e0a      	cmp	r6, #10
 8000b48:	dd13      	ble.n	8000b72 <__aeabi_fmul+0x8e>
 8000b4a:	003a      	movs	r2, r7
 8000b4c:	2e0b      	cmp	r6, #11
 8000b4e:	d047      	beq.n	8000be0 <__aeabi_fmul+0xfc>
 8000b50:	4647      	mov	r7, r8
 8000b52:	e03f      	b.n	8000bd4 <__aeabi_fmul+0xf0>
 8000b54:	002b      	movs	r3, r5
 8000b56:	33ff      	adds	r3, #255	; 0xff
 8000b58:	2c00      	cmp	r4, #0
 8000b5a:	d11e      	bne.n	8000b9a <__aeabi_fmul+0xb6>
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	4316      	orrs	r6, r2
 8000b60:	4642      	mov	r2, r8
 8000b62:	3501      	adds	r5, #1
 8000b64:	407a      	eors	r2, r7
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	35ff      	adds	r5, #255	; 0xff
 8000b6a:	2e0a      	cmp	r6, #10
 8000b6c:	dd00      	ble.n	8000b70 <__aeabi_fmul+0x8c>
 8000b6e:	e0e4      	b.n	8000d3a <__aeabi_fmul+0x256>
 8000b70:	2002      	movs	r0, #2
 8000b72:	2e02      	cmp	r6, #2
 8000b74:	dc1c      	bgt.n	8000bb0 <__aeabi_fmul+0xcc>
 8000b76:	3e01      	subs	r6, #1
 8000b78:	2e01      	cmp	r6, #1
 8000b7a:	d842      	bhi.n	8000c02 <__aeabi_fmul+0x11e>
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d03d      	beq.n	8000bfc <__aeabi_fmul+0x118>
 8000b80:	2801      	cmp	r0, #1
 8000b82:	d166      	bne.n	8000c52 <__aeabi_fmul+0x16e>
 8000b84:	2000      	movs	r0, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	05c0      	lsls	r0, r0, #23
 8000b8a:	4308      	orrs	r0, r1
 8000b8c:	07d2      	lsls	r2, r2, #31
 8000b8e:	4310      	orrs	r0, r2
 8000b90:	bce0      	pop	{r5, r6, r7}
 8000b92:	46ba      	mov	sl, r7
 8000b94:	46b1      	mov	r9, r6
 8000b96:	46a8      	mov	r8, r5
 8000b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4316      	orrs	r6, r2
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	407a      	eors	r2, r7
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	35ff      	adds	r5, #255	; 0xff
 8000ba8:	2e0a      	cmp	r6, #10
 8000baa:	dd00      	ble.n	8000bae <__aeabi_fmul+0xca>
 8000bac:	e0e4      	b.n	8000d78 <__aeabi_fmul+0x294>
 8000bae:	2003      	movs	r0, #3
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	40b1      	lsls	r1, r6
 8000bb4:	26a6      	movs	r6, #166	; 0xa6
 8000bb6:	00f6      	lsls	r6, r6, #3
 8000bb8:	4231      	tst	r1, r6
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_fmul+0xee>
 8000bbc:	2690      	movs	r6, #144	; 0x90
 8000bbe:	00b6      	lsls	r6, r6, #2
 8000bc0:	4231      	tst	r1, r6
 8000bc2:	d116      	bne.n	8000bf2 <__aeabi_fmul+0x10e>
 8000bc4:	3eb9      	subs	r6, #185	; 0xb9
 8000bc6:	3eff      	subs	r6, #255	; 0xff
 8000bc8:	420e      	tst	r6, r1
 8000bca:	d01a      	beq.n	8000c02 <__aeabi_fmul+0x11e>
 8000bcc:	46a1      	mov	r9, r4
 8000bce:	4682      	mov	sl, r0
 8000bd0:	e000      	b.n	8000bd4 <__aeabi_fmul+0xf0>
 8000bd2:	0017      	movs	r7, r2
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	003a      	movs	r2, r7
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d00f      	beq.n	8000bfc <__aeabi_fmul+0x118>
 8000bdc:	464c      	mov	r4, r9
 8000bde:	4650      	mov	r0, sl
 8000be0:	2803      	cmp	r0, #3
 8000be2:	d1cd      	bne.n	8000b80 <__aeabi_fmul+0x9c>
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	03c9      	lsls	r1, r1, #15
 8000be8:	4321      	orrs	r1, r4
 8000bea:	0249      	lsls	r1, r1, #9
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	0a49      	lsrs	r1, r1, #9
 8000bf0:	e7ca      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	20ff      	movs	r0, #255	; 0xff
 8000bf8:	03c9      	lsls	r1, r1, #15
 8000bfa:	e7c5      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000bfc:	20ff      	movs	r0, #255	; 0xff
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e7c2      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	4649      	mov	r1, r9
 8000c06:	0424      	lsls	r4, r4, #16
 8000c08:	0c24      	lsrs	r4, r4, #16
 8000c0a:	0027      	movs	r7, r4
 8000c0c:	0c0e      	lsrs	r6, r1, #16
 8000c0e:	0409      	lsls	r1, r1, #16
 8000c10:	0c09      	lsrs	r1, r1, #16
 8000c12:	4374      	muls	r4, r6
 8000c14:	434f      	muls	r7, r1
 8000c16:	4346      	muls	r6, r0
 8000c18:	4348      	muls	r0, r1
 8000c1a:	0c39      	lsrs	r1, r7, #16
 8000c1c:	1900      	adds	r0, r0, r4
 8000c1e:	1809      	adds	r1, r1, r0
 8000c20:	428c      	cmp	r4, r1
 8000c22:	d903      	bls.n	8000c2c <__aeabi_fmul+0x148>
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	4684      	mov	ip, r0
 8000c2a:	4466      	add	r6, ip
 8000c2c:	043f      	lsls	r7, r7, #16
 8000c2e:	0408      	lsls	r0, r1, #16
 8000c30:	0c3f      	lsrs	r7, r7, #16
 8000c32:	19c0      	adds	r0, r0, r7
 8000c34:	0184      	lsls	r4, r0, #6
 8000c36:	1e67      	subs	r7, r4, #1
 8000c38:	41bc      	sbcs	r4, r7
 8000c3a:	0c09      	lsrs	r1, r1, #16
 8000c3c:	0e80      	lsrs	r0, r0, #26
 8000c3e:	1989      	adds	r1, r1, r6
 8000c40:	4304      	orrs	r4, r0
 8000c42:	0189      	lsls	r1, r1, #6
 8000c44:	430c      	orrs	r4, r1
 8000c46:	0109      	lsls	r1, r1, #4
 8000c48:	d571      	bpl.n	8000d2e <__aeabi_fmul+0x24a>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	0861      	lsrs	r1, r4, #1
 8000c4e:	401c      	ands	r4, r3
 8000c50:	430c      	orrs	r4, r1
 8000c52:	002b      	movs	r3, r5
 8000c54:	337f      	adds	r3, #127	; 0x7f
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd51      	ble.n	8000cfe <__aeabi_fmul+0x21a>
 8000c5a:	0761      	lsls	r1, r4, #29
 8000c5c:	d004      	beq.n	8000c68 <__aeabi_fmul+0x184>
 8000c5e:	210f      	movs	r1, #15
 8000c60:	4021      	ands	r1, r4
 8000c62:	2904      	cmp	r1, #4
 8000c64:	d000      	beq.n	8000c68 <__aeabi_fmul+0x184>
 8000c66:	3404      	adds	r4, #4
 8000c68:	0121      	lsls	r1, r4, #4
 8000c6a:	d503      	bpl.n	8000c74 <__aeabi_fmul+0x190>
 8000c6c:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <__aeabi_fmul+0x298>)
 8000c6e:	401c      	ands	r4, r3
 8000c70:	002b      	movs	r3, r5
 8000c72:	3380      	adds	r3, #128	; 0x80
 8000c74:	2bfe      	cmp	r3, #254	; 0xfe
 8000c76:	dcc1      	bgt.n	8000bfc <__aeabi_fmul+0x118>
 8000c78:	01a1      	lsls	r1, r4, #6
 8000c7a:	0a49      	lsrs	r1, r1, #9
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e783      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d12c      	bne.n	8000cde <__aeabi_fmul+0x1fa>
 8000c84:	2301      	movs	r3, #1
 8000c86:	4642      	mov	r2, r8
 8000c88:	431e      	orrs	r6, r3
 8000c8a:	002b      	movs	r3, r5
 8000c8c:	407a      	eors	r2, r7
 8000c8e:	2001      	movs	r0, #1
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	1c5d      	adds	r5, r3, #1
 8000c94:	2e0a      	cmp	r6, #10
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_fmul+0x1b6>
 8000c98:	e757      	b.n	8000b4a <__aeabi_fmul+0x66>
 8000c9a:	e76a      	b.n	8000b72 <__aeabi_fmul+0x8e>
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d110      	bne.n	8000cc2 <__aeabi_fmul+0x1de>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	2604      	movs	r6, #4
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	e738      	b.n	8000b1c <__aeabi_fmul+0x38>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d104      	bne.n	8000cb8 <__aeabi_fmul+0x1d4>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	2608      	movs	r6, #8
 8000cb2:	25ff      	movs	r5, #255	; 0xff
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e731      	b.n	8000b1c <__aeabi_fmul+0x38>
 8000cb8:	2303      	movs	r3, #3
 8000cba:	260c      	movs	r6, #12
 8000cbc:	25ff      	movs	r5, #255	; 0xff
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	e72c      	b.n	8000b1c <__aeabi_fmul+0x38>
 8000cc2:	4648      	mov	r0, r9
 8000cc4:	f001 ff5e 	bl	8002b84 <__clzsi2>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	1f43      	subs	r3, r0, #5
 8000ccc:	2576      	movs	r5, #118	; 0x76
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	426d      	negs	r5, r5
 8000cd4:	4691      	mov	r9, r2
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	469a      	mov	sl, r3
 8000cda:	1a2d      	subs	r5, r5, r0
 8000cdc:	e71e      	b.n	8000b1c <__aeabi_fmul+0x38>
 8000cde:	0020      	movs	r0, r4
 8000ce0:	f001 ff50 	bl	8002b84 <__clzsi2>
 8000ce4:	4642      	mov	r2, r8
 8000ce6:	1f43      	subs	r3, r0, #5
 8000ce8:	409c      	lsls	r4, r3
 8000cea:	1a2b      	subs	r3, r5, r0
 8000cec:	3b76      	subs	r3, #118	; 0x76
 8000cee:	407a      	eors	r2, r7
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	1c5d      	adds	r5, r3, #1
 8000cf6:	2e0a      	cmp	r6, #10
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_fmul+0x218>
 8000cfa:	e726      	b.n	8000b4a <__aeabi_fmul+0x66>
 8000cfc:	e739      	b.n	8000b72 <__aeabi_fmul+0x8e>
 8000cfe:	2101      	movs	r1, #1
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	2b1b      	cmp	r3, #27
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fmul+0x224>
 8000d06:	e73d      	b.n	8000b84 <__aeabi_fmul+0xa0>
 8000d08:	359e      	adds	r5, #158	; 0x9e
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	40ac      	lsls	r4, r5
 8000d0e:	40d9      	lsrs	r1, r3
 8000d10:	1e63      	subs	r3, r4, #1
 8000d12:	419c      	sbcs	r4, r3
 8000d14:	4321      	orrs	r1, r4
 8000d16:	074b      	lsls	r3, r1, #29
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fmul+0x240>
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d000      	beq.n	8000d24 <__aeabi_fmul+0x240>
 8000d22:	3104      	adds	r1, #4
 8000d24:	014b      	lsls	r3, r1, #5
 8000d26:	d504      	bpl.n	8000d32 <__aeabi_fmul+0x24e>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e72c      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000d2e:	001d      	movs	r5, r3
 8000d30:	e78f      	b.n	8000c52 <__aeabi_fmul+0x16e>
 8000d32:	0189      	lsls	r1, r1, #6
 8000d34:	2000      	movs	r0, #0
 8000d36:	0a49      	lsrs	r1, r1, #9
 8000d38:	e726      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	2e0f      	cmp	r6, #15
 8000d3e:	d10c      	bne.n	8000d5a <__aeabi_fmul+0x276>
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	464b      	mov	r3, r9
 8000d44:	03c9      	lsls	r1, r1, #15
 8000d46:	420b      	tst	r3, r1
 8000d48:	d00d      	beq.n	8000d66 <__aeabi_fmul+0x282>
 8000d4a:	420c      	tst	r4, r1
 8000d4c:	d10b      	bne.n	8000d66 <__aeabi_fmul+0x282>
 8000d4e:	4321      	orrs	r1, r4
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	003a      	movs	r2, r7
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	0a49      	lsrs	r1, r1, #9
 8000d58:	e716      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000d5a:	2e0b      	cmp	r6, #11
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fmul+0x27c>
 8000d5e:	e6f7      	b.n	8000b50 <__aeabi_fmul+0x6c>
 8000d60:	46a1      	mov	r9, r4
 8000d62:	469a      	mov	sl, r3
 8000d64:	e736      	b.n	8000bd4 <__aeabi_fmul+0xf0>
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	464b      	mov	r3, r9
 8000d6a:	03c9      	lsls	r1, r1, #15
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	0249      	lsls	r1, r1, #9
 8000d70:	4642      	mov	r2, r8
 8000d72:	20ff      	movs	r0, #255	; 0xff
 8000d74:	0a49      	lsrs	r1, r1, #9
 8000d76:	e707      	b.n	8000b88 <__aeabi_fmul+0xa4>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e7df      	b.n	8000d3c <__aeabi_fmul+0x258>
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__aeabi_f2iz>:
 8000d80:	0241      	lsls	r1, r0, #9
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0fc3      	lsrs	r3, r0, #31
 8000d86:	0a49      	lsrs	r1, r1, #9
 8000d88:	2000      	movs	r0, #0
 8000d8a:	0e12      	lsrs	r2, r2, #24
 8000d8c:	2a7e      	cmp	r2, #126	; 0x7e
 8000d8e:	dd03      	ble.n	8000d98 <__aeabi_f2iz+0x18>
 8000d90:	2a9d      	cmp	r2, #157	; 0x9d
 8000d92:	dd02      	ble.n	8000d9a <__aeabi_f2iz+0x1a>
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <__aeabi_f2iz+0x3c>)
 8000d96:	1898      	adds	r0, r3, r2
 8000d98:	4770      	bx	lr
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0400      	lsls	r0, r0, #16
 8000d9e:	4301      	orrs	r1, r0
 8000da0:	2a95      	cmp	r2, #149	; 0x95
 8000da2:	dc07      	bgt.n	8000db4 <__aeabi_f2iz+0x34>
 8000da4:	2096      	movs	r0, #150	; 0x96
 8000da6:	1a82      	subs	r2, r0, r2
 8000da8:	40d1      	lsrs	r1, r2
 8000daa:	4248      	negs	r0, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f3      	bne.n	8000d98 <__aeabi_f2iz+0x18>
 8000db0:	0008      	movs	r0, r1
 8000db2:	e7f1      	b.n	8000d98 <__aeabi_f2iz+0x18>
 8000db4:	3a96      	subs	r2, #150	; 0x96
 8000db6:	4091      	lsls	r1, r2
 8000db8:	e7f7      	b.n	8000daa <__aeabi_f2iz+0x2a>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	7fffffff 	.word	0x7fffffff

08000dc0 <__aeabi_i2f>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d013      	beq.n	8000dee <__aeabi_i2f+0x2e>
 8000dc6:	17c3      	asrs	r3, r0, #31
 8000dc8:	18c5      	adds	r5, r0, r3
 8000dca:	405d      	eors	r5, r3
 8000dcc:	0fc4      	lsrs	r4, r0, #31
 8000dce:	0028      	movs	r0, r5
 8000dd0:	f001 fed8 	bl	8002b84 <__clzsi2>
 8000dd4:	239e      	movs	r3, #158	; 0x9e
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a1b      	subs	r3, r3, r0
 8000dda:	2b96      	cmp	r3, #150	; 0x96
 8000ddc:	dc0f      	bgt.n	8000dfe <__aeabi_i2f+0x3e>
 8000dde:	2808      	cmp	r0, #8
 8000de0:	d031      	beq.n	8000e46 <__aeabi_i2f+0x86>
 8000de2:	3908      	subs	r1, #8
 8000de4:	408d      	lsls	r5, r1
 8000de6:	026d      	lsls	r5, r5, #9
 8000de8:	0a6d      	lsrs	r5, r5, #9
 8000dea:	b2d8      	uxtb	r0, r3
 8000dec:	e002      	b.n	8000df4 <__aeabi_i2f+0x34>
 8000dee:	2400      	movs	r4, #0
 8000df0:	2000      	movs	r0, #0
 8000df2:	2500      	movs	r5, #0
 8000df4:	05c0      	lsls	r0, r0, #23
 8000df6:	4328      	orrs	r0, r5
 8000df8:	07e4      	lsls	r4, r4, #31
 8000dfa:	4320      	orrs	r0, r4
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
 8000dfe:	2b99      	cmp	r3, #153	; 0x99
 8000e00:	dd0c      	ble.n	8000e1c <__aeabi_i2f+0x5c>
 8000e02:	2205      	movs	r2, #5
 8000e04:	1a12      	subs	r2, r2, r0
 8000e06:	0028      	movs	r0, r5
 8000e08:	40d0      	lsrs	r0, r2
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	0008      	movs	r0, r1
 8000e0e:	301b      	adds	r0, #27
 8000e10:	4085      	lsls	r5, r0
 8000e12:	0028      	movs	r0, r5
 8000e14:	1e45      	subs	r5, r0, #1
 8000e16:	41a8      	sbcs	r0, r5
 8000e18:	4302      	orrs	r2, r0
 8000e1a:	0015      	movs	r5, r2
 8000e1c:	2905      	cmp	r1, #5
 8000e1e:	dc16      	bgt.n	8000e4e <__aeabi_i2f+0x8e>
 8000e20:	002a      	movs	r2, r5
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <__aeabi_i2f+0xa0>)
 8000e24:	4002      	ands	r2, r0
 8000e26:	076e      	lsls	r6, r5, #29
 8000e28:	d009      	beq.n	8000e3e <__aeabi_i2f+0x7e>
 8000e2a:	260f      	movs	r6, #15
 8000e2c:	4035      	ands	r5, r6
 8000e2e:	2d04      	cmp	r5, #4
 8000e30:	d005      	beq.n	8000e3e <__aeabi_i2f+0x7e>
 8000e32:	3204      	adds	r2, #4
 8000e34:	0155      	lsls	r5, r2, #5
 8000e36:	d502      	bpl.n	8000e3e <__aeabi_i2f+0x7e>
 8000e38:	239f      	movs	r3, #159	; 0x9f
 8000e3a:	4002      	ands	r2, r0
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	0192      	lsls	r2, r2, #6
 8000e40:	0a55      	lsrs	r5, r2, #9
 8000e42:	b2d8      	uxtb	r0, r3
 8000e44:	e7d6      	b.n	8000df4 <__aeabi_i2f+0x34>
 8000e46:	026d      	lsls	r5, r5, #9
 8000e48:	2096      	movs	r0, #150	; 0x96
 8000e4a:	0a6d      	lsrs	r5, r5, #9
 8000e4c:	e7d2      	b.n	8000df4 <__aeabi_i2f+0x34>
 8000e4e:	1f4a      	subs	r2, r1, #5
 8000e50:	4095      	lsls	r5, r2
 8000e52:	002a      	movs	r2, r5
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <__aeabi_i2f+0xa0>)
 8000e56:	4002      	ands	r2, r0
 8000e58:	076e      	lsls	r6, r5, #29
 8000e5a:	d0f0      	beq.n	8000e3e <__aeabi_i2f+0x7e>
 8000e5c:	e7e5      	b.n	8000e2a <__aeabi_i2f+0x6a>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	fbffffff 	.word	0xfbffffff

08000e64 <__aeabi_dadd>:
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	464f      	mov	r7, r9
 8000e68:	4646      	mov	r6, r8
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	0004      	movs	r4, r0
 8000e6e:	b5c0      	push	{r6, r7, lr}
 8000e70:	001f      	movs	r7, r3
 8000e72:	030b      	lsls	r3, r1, #12
 8000e74:	0010      	movs	r0, r2
 8000e76:	004e      	lsls	r6, r1, #1
 8000e78:	0a5b      	lsrs	r3, r3, #9
 8000e7a:	0fcd      	lsrs	r5, r1, #31
 8000e7c:	0f61      	lsrs	r1, r4, #29
 8000e7e:	007a      	lsls	r2, r7, #1
 8000e80:	4319      	orrs	r1, r3
 8000e82:	00e3      	lsls	r3, r4, #3
 8000e84:	033c      	lsls	r4, r7, #12
 8000e86:	0fff      	lsrs	r7, r7, #31
 8000e88:	46bc      	mov	ip, r7
 8000e8a:	0a64      	lsrs	r4, r4, #9
 8000e8c:	0f47      	lsrs	r7, r0, #29
 8000e8e:	4327      	orrs	r7, r4
 8000e90:	0d76      	lsrs	r6, r6, #21
 8000e92:	0d52      	lsrs	r2, r2, #21
 8000e94:	00c0      	lsls	r0, r0, #3
 8000e96:	46b9      	mov	r9, r7
 8000e98:	4680      	mov	r8, r0
 8000e9a:	1ab7      	subs	r7, r6, r2
 8000e9c:	4565      	cmp	r5, ip
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x3e>
 8000ea0:	e09b      	b.n	8000fda <__aeabi_dadd+0x176>
 8000ea2:	2f00      	cmp	r7, #0
 8000ea4:	dc00      	bgt.n	8000ea8 <__aeabi_dadd+0x44>
 8000ea6:	e084      	b.n	8000fb2 <__aeabi_dadd+0x14e>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0x4a>
 8000eac:	e0be      	b.n	800102c <__aeabi_dadd+0x1c8>
 8000eae:	4ac8      	ldr	r2, [pc, #800]	; (80011d0 <__aeabi_dadd+0x36c>)
 8000eb0:	4296      	cmp	r6, r2
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dadd+0x52>
 8000eb4:	e124      	b.n	8001100 <__aeabi_dadd+0x29c>
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	464c      	mov	r4, r9
 8000eba:	0412      	lsls	r2, r2, #16
 8000ebc:	4314      	orrs	r4, r2
 8000ebe:	46a1      	mov	r9, r4
 8000ec0:	2f38      	cmp	r7, #56	; 0x38
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_dadd+0x62>
 8000ec4:	e167      	b.n	8001196 <__aeabi_dadd+0x332>
 8000ec6:	2f1f      	cmp	r7, #31
 8000ec8:	dd00      	ble.n	8000ecc <__aeabi_dadd+0x68>
 8000eca:	e1d6      	b.n	800127a <__aeabi_dadd+0x416>
 8000ecc:	2220      	movs	r2, #32
 8000ece:	464c      	mov	r4, r9
 8000ed0:	1bd2      	subs	r2, r2, r7
 8000ed2:	4094      	lsls	r4, r2
 8000ed4:	46a2      	mov	sl, r4
 8000ed6:	4644      	mov	r4, r8
 8000ed8:	40fc      	lsrs	r4, r7
 8000eda:	0020      	movs	r0, r4
 8000edc:	4654      	mov	r4, sl
 8000ede:	4304      	orrs	r4, r0
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	4090      	lsls	r0, r2
 8000ee4:	1e42      	subs	r2, r0, #1
 8000ee6:	4190      	sbcs	r0, r2
 8000ee8:	464a      	mov	r2, r9
 8000eea:	40fa      	lsrs	r2, r7
 8000eec:	4304      	orrs	r4, r0
 8000eee:	1a89      	subs	r1, r1, r2
 8000ef0:	1b1c      	subs	r4, r3, r4
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	4192      	sbcs	r2, r2
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	1a8b      	subs	r3, r1, r2
 8000efa:	469a      	mov	sl, r3
 8000efc:	4653      	mov	r3, sl
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_dadd+0xa0>
 8000f02:	e0d4      	b.n	80010ae <__aeabi_dadd+0x24a>
 8000f04:	4653      	mov	r3, sl
 8000f06:	025a      	lsls	r2, r3, #9
 8000f08:	0a53      	lsrs	r3, r2, #9
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	4653      	mov	r3, sl
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dadd+0xb0>
 8000f12:	e104      	b.n	800111e <__aeabi_dadd+0x2ba>
 8000f14:	4650      	mov	r0, sl
 8000f16:	f001 fe35 	bl	8002b84 <__clzsi2>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	3b08      	subs	r3, #8
 8000f1e:	2220      	movs	r2, #32
 8000f20:	0020      	movs	r0, r4
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	4651      	mov	r1, sl
 8000f26:	40d0      	lsrs	r0, r2
 8000f28:	4099      	lsls	r1, r3
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	409c      	lsls	r4, r3
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	42b3      	cmp	r3, r6
 8000f32:	da00      	bge.n	8000f36 <__aeabi_dadd+0xd2>
 8000f34:	e102      	b.n	800113c <__aeabi_dadd+0x2d8>
 8000f36:	1b9b      	subs	r3, r3, r6
 8000f38:	1c59      	adds	r1, r3, #1
 8000f3a:	291f      	cmp	r1, #31
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_dadd+0xdc>
 8000f3e:	e0a7      	b.n	8001090 <__aeabi_dadd+0x22c>
 8000f40:	2320      	movs	r3, #32
 8000f42:	0010      	movs	r0, r2
 8000f44:	0026      	movs	r6, r4
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	409c      	lsls	r4, r3
 8000f4a:	4098      	lsls	r0, r3
 8000f4c:	40ce      	lsrs	r6, r1
 8000f4e:	40ca      	lsrs	r2, r1
 8000f50:	1e63      	subs	r3, r4, #1
 8000f52:	419c      	sbcs	r4, r3
 8000f54:	4330      	orrs	r0, r6
 8000f56:	4692      	mov	sl, r2
 8000f58:	2600      	movs	r6, #0
 8000f5a:	4304      	orrs	r4, r0
 8000f5c:	0763      	lsls	r3, r4, #29
 8000f5e:	d009      	beq.n	8000f74 <__aeabi_dadd+0x110>
 8000f60:	230f      	movs	r3, #15
 8000f62:	4023      	ands	r3, r4
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d005      	beq.n	8000f74 <__aeabi_dadd+0x110>
 8000f68:	1d23      	adds	r3, r4, #4
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	41a4      	sbcs	r4, r4
 8000f6e:	4264      	negs	r4, r4
 8000f70:	44a2      	add	sl, r4
 8000f72:	001c      	movs	r4, r3
 8000f74:	4653      	mov	r3, sl
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_dadd+0x118>
 8000f7a:	e09b      	b.n	80010b4 <__aeabi_dadd+0x250>
 8000f7c:	4b94      	ldr	r3, [pc, #592]	; (80011d0 <__aeabi_dadd+0x36c>)
 8000f7e:	3601      	adds	r6, #1
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0x122>
 8000f84:	e0b8      	b.n	80010f8 <__aeabi_dadd+0x294>
 8000f86:	4653      	mov	r3, sl
 8000f88:	4992      	ldr	r1, [pc, #584]	; (80011d4 <__aeabi_dadd+0x370>)
 8000f8a:	08e4      	lsrs	r4, r4, #3
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	0019      	movs	r1, r3
 8000f90:	075b      	lsls	r3, r3, #29
 8000f92:	4323      	orrs	r3, r4
 8000f94:	0572      	lsls	r2, r6, #21
 8000f96:	024c      	lsls	r4, r1, #9
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	0d52      	lsrs	r2, r2, #21
 8000f9c:	0512      	lsls	r2, r2, #20
 8000f9e:	07ed      	lsls	r5, r5, #31
 8000fa0:	4322      	orrs	r2, r4
 8000fa2:	432a      	orrs	r2, r5
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	bce0      	pop	{r5, r6, r7}
 8000faa:	46ba      	mov	sl, r7
 8000fac:	46b1      	mov	r9, r6
 8000fae:	46a8      	mov	r8, r5
 8000fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb2:	2f00      	cmp	r7, #0
 8000fb4:	d048      	beq.n	8001048 <__aeabi_dadd+0x1e4>
 8000fb6:	1b97      	subs	r7, r2, r6
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_dadd+0x15a>
 8000fbc:	e10e      	b.n	80011dc <__aeabi_dadd+0x378>
 8000fbe:	000c      	movs	r4, r1
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x162>
 8000fc4:	e1b7      	b.n	8001336 <__aeabi_dadd+0x4d2>
 8000fc6:	1e7c      	subs	r4, r7, #1
 8000fc8:	2f01      	cmp	r7, #1
 8000fca:	d100      	bne.n	8000fce <__aeabi_dadd+0x16a>
 8000fcc:	e226      	b.n	800141c <__aeabi_dadd+0x5b8>
 8000fce:	4d80      	ldr	r5, [pc, #512]	; (80011d0 <__aeabi_dadd+0x36c>)
 8000fd0:	42af      	cmp	r7, r5
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x172>
 8000fd4:	e1d5      	b.n	8001382 <__aeabi_dadd+0x51e>
 8000fd6:	0027      	movs	r7, r4
 8000fd8:	e107      	b.n	80011ea <__aeabi_dadd+0x386>
 8000fda:	2f00      	cmp	r7, #0
 8000fdc:	dc00      	bgt.n	8000fe0 <__aeabi_dadd+0x17c>
 8000fde:	e0b2      	b.n	8001146 <__aeabi_dadd+0x2e2>
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d047      	beq.n	8001074 <__aeabi_dadd+0x210>
 8000fe4:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <__aeabi_dadd+0x36c>)
 8000fe6:	4296      	cmp	r6, r2
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dadd+0x188>
 8000fea:	e089      	b.n	8001100 <__aeabi_dadd+0x29c>
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	464c      	mov	r4, r9
 8000ff0:	0412      	lsls	r2, r2, #16
 8000ff2:	4314      	orrs	r4, r2
 8000ff4:	46a1      	mov	r9, r4
 8000ff6:	2f38      	cmp	r7, #56	; 0x38
 8000ff8:	dc6b      	bgt.n	80010d2 <__aeabi_dadd+0x26e>
 8000ffa:	2f1f      	cmp	r7, #31
 8000ffc:	dc00      	bgt.n	8001000 <__aeabi_dadd+0x19c>
 8000ffe:	e16e      	b.n	80012de <__aeabi_dadd+0x47a>
 8001000:	003a      	movs	r2, r7
 8001002:	4648      	mov	r0, r9
 8001004:	3a20      	subs	r2, #32
 8001006:	40d0      	lsrs	r0, r2
 8001008:	4684      	mov	ip, r0
 800100a:	2f20      	cmp	r7, #32
 800100c:	d007      	beq.n	800101e <__aeabi_dadd+0x1ba>
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	4648      	mov	r0, r9
 8001012:	1bd2      	subs	r2, r2, r7
 8001014:	4090      	lsls	r0, r2
 8001016:	0002      	movs	r2, r0
 8001018:	4640      	mov	r0, r8
 800101a:	4310      	orrs	r0, r2
 800101c:	4680      	mov	r8, r0
 800101e:	4640      	mov	r0, r8
 8001020:	1e42      	subs	r2, r0, #1
 8001022:	4190      	sbcs	r0, r2
 8001024:	4662      	mov	r2, ip
 8001026:	0004      	movs	r4, r0
 8001028:	4314      	orrs	r4, r2
 800102a:	e057      	b.n	80010dc <__aeabi_dadd+0x278>
 800102c:	464a      	mov	r2, r9
 800102e:	4302      	orrs	r2, r0
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x1d0>
 8001032:	e103      	b.n	800123c <__aeabi_dadd+0x3d8>
 8001034:	1e7a      	subs	r2, r7, #1
 8001036:	2f01      	cmp	r7, #1
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x1d8>
 800103a:	e193      	b.n	8001364 <__aeabi_dadd+0x500>
 800103c:	4c64      	ldr	r4, [pc, #400]	; (80011d0 <__aeabi_dadd+0x36c>)
 800103e:	42a7      	cmp	r7, r4
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x1e0>
 8001042:	e18a      	b.n	800135a <__aeabi_dadd+0x4f6>
 8001044:	0017      	movs	r7, r2
 8001046:	e73b      	b.n	8000ec0 <__aeabi_dadd+0x5c>
 8001048:	4c63      	ldr	r4, [pc, #396]	; (80011d8 <__aeabi_dadd+0x374>)
 800104a:	1c72      	adds	r2, r6, #1
 800104c:	4222      	tst	r2, r4
 800104e:	d000      	beq.n	8001052 <__aeabi_dadd+0x1ee>
 8001050:	e0e0      	b.n	8001214 <__aeabi_dadd+0x3b0>
 8001052:	000a      	movs	r2, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	2e00      	cmp	r6, #0
 8001058:	d000      	beq.n	800105c <__aeabi_dadd+0x1f8>
 800105a:	e174      	b.n	8001346 <__aeabi_dadd+0x4e2>
 800105c:	2a00      	cmp	r2, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x1fe>
 8001060:	e1d0      	b.n	8001404 <__aeabi_dadd+0x5a0>
 8001062:	464a      	mov	r2, r9
 8001064:	4302      	orrs	r2, r0
 8001066:	d000      	beq.n	800106a <__aeabi_dadd+0x206>
 8001068:	e1e3      	b.n	8001432 <__aeabi_dadd+0x5ce>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	4313      	orrs	r3, r2
 8001070:	08c9      	lsrs	r1, r1, #3
 8001072:	e029      	b.n	80010c8 <__aeabi_dadd+0x264>
 8001074:	464a      	mov	r2, r9
 8001076:	4302      	orrs	r2, r0
 8001078:	d100      	bne.n	800107c <__aeabi_dadd+0x218>
 800107a:	e17d      	b.n	8001378 <__aeabi_dadd+0x514>
 800107c:	1e7a      	subs	r2, r7, #1
 800107e:	2f01      	cmp	r7, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_dadd+0x220>
 8001082:	e0e0      	b.n	8001246 <__aeabi_dadd+0x3e2>
 8001084:	4c52      	ldr	r4, [pc, #328]	; (80011d0 <__aeabi_dadd+0x36c>)
 8001086:	42a7      	cmp	r7, r4
 8001088:	d100      	bne.n	800108c <__aeabi_dadd+0x228>
 800108a:	e166      	b.n	800135a <__aeabi_dadd+0x4f6>
 800108c:	0017      	movs	r7, r2
 800108e:	e7b2      	b.n	8000ff6 <__aeabi_dadd+0x192>
 8001090:	0010      	movs	r0, r2
 8001092:	3b1f      	subs	r3, #31
 8001094:	40d8      	lsrs	r0, r3
 8001096:	2920      	cmp	r1, #32
 8001098:	d003      	beq.n	80010a2 <__aeabi_dadd+0x23e>
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	1a5b      	subs	r3, r3, r1
 800109e:	409a      	lsls	r2, r3
 80010a0:	4314      	orrs	r4, r2
 80010a2:	1e63      	subs	r3, r4, #1
 80010a4:	419c      	sbcs	r4, r3
 80010a6:	2300      	movs	r3, #0
 80010a8:	2600      	movs	r6, #0
 80010aa:	469a      	mov	sl, r3
 80010ac:	4304      	orrs	r4, r0
 80010ae:	0763      	lsls	r3, r4, #29
 80010b0:	d000      	beq.n	80010b4 <__aeabi_dadd+0x250>
 80010b2:	e755      	b.n	8000f60 <__aeabi_dadd+0xfc>
 80010b4:	4652      	mov	r2, sl
 80010b6:	08e3      	lsrs	r3, r4, #3
 80010b8:	0752      	lsls	r2, r2, #29
 80010ba:	4313      	orrs	r3, r2
 80010bc:	4652      	mov	r2, sl
 80010be:	0037      	movs	r7, r6
 80010c0:	08d1      	lsrs	r1, r2, #3
 80010c2:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <__aeabi_dadd+0x36c>)
 80010c4:	4297      	cmp	r7, r2
 80010c6:	d01f      	beq.n	8001108 <__aeabi_dadd+0x2a4>
 80010c8:	0309      	lsls	r1, r1, #12
 80010ca:	057a      	lsls	r2, r7, #21
 80010cc:	0b0c      	lsrs	r4, r1, #12
 80010ce:	0d52      	lsrs	r2, r2, #21
 80010d0:	e764      	b.n	8000f9c <__aeabi_dadd+0x138>
 80010d2:	4642      	mov	r2, r8
 80010d4:	464c      	mov	r4, r9
 80010d6:	4314      	orrs	r4, r2
 80010d8:	1e62      	subs	r2, r4, #1
 80010da:	4194      	sbcs	r4, r2
 80010dc:	18e4      	adds	r4, r4, r3
 80010de:	429c      	cmp	r4, r3
 80010e0:	4192      	sbcs	r2, r2
 80010e2:	4252      	negs	r2, r2
 80010e4:	4692      	mov	sl, r2
 80010e6:	448a      	add	sl, r1
 80010e8:	4653      	mov	r3, sl
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	d5df      	bpl.n	80010ae <__aeabi_dadd+0x24a>
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <__aeabi_dadd+0x36c>)
 80010f0:	3601      	adds	r6, #1
 80010f2:	429e      	cmp	r6, r3
 80010f4:	d000      	beq.n	80010f8 <__aeabi_dadd+0x294>
 80010f6:	e0b3      	b.n	8001260 <__aeabi_dadd+0x3fc>
 80010f8:	0032      	movs	r2, r6
 80010fa:	2400      	movs	r4, #0
 80010fc:	2300      	movs	r3, #0
 80010fe:	e74d      	b.n	8000f9c <__aeabi_dadd+0x138>
 8001100:	074a      	lsls	r2, r1, #29
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	4313      	orrs	r3, r2
 8001106:	08c9      	lsrs	r1, r1, #3
 8001108:	001a      	movs	r2, r3
 800110a:	430a      	orrs	r2, r1
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x2ac>
 800110e:	e200      	b.n	8001512 <__aeabi_dadd+0x6ae>
 8001110:	2480      	movs	r4, #128	; 0x80
 8001112:	0324      	lsls	r4, r4, #12
 8001114:	430c      	orrs	r4, r1
 8001116:	0324      	lsls	r4, r4, #12
 8001118:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <__aeabi_dadd+0x36c>)
 800111a:	0b24      	lsrs	r4, r4, #12
 800111c:	e73e      	b.n	8000f9c <__aeabi_dadd+0x138>
 800111e:	0020      	movs	r0, r4
 8001120:	f001 fd30 	bl	8002b84 <__clzsi2>
 8001124:	0003      	movs	r3, r0
 8001126:	3318      	adds	r3, #24
 8001128:	2b1f      	cmp	r3, #31
 800112a:	dc00      	bgt.n	800112e <__aeabi_dadd+0x2ca>
 800112c:	e6f7      	b.n	8000f1e <__aeabi_dadd+0xba>
 800112e:	0022      	movs	r2, r4
 8001130:	3808      	subs	r0, #8
 8001132:	4082      	lsls	r2, r0
 8001134:	2400      	movs	r4, #0
 8001136:	42b3      	cmp	r3, r6
 8001138:	db00      	blt.n	800113c <__aeabi_dadd+0x2d8>
 800113a:	e6fc      	b.n	8000f36 <__aeabi_dadd+0xd2>
 800113c:	1af6      	subs	r6, r6, r3
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <__aeabi_dadd+0x370>)
 8001140:	401a      	ands	r2, r3
 8001142:	4692      	mov	sl, r2
 8001144:	e70a      	b.n	8000f5c <__aeabi_dadd+0xf8>
 8001146:	2f00      	cmp	r7, #0
 8001148:	d02b      	beq.n	80011a2 <__aeabi_dadd+0x33e>
 800114a:	1b97      	subs	r7, r2, r6
 800114c:	2e00      	cmp	r6, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x2ee>
 8001150:	e0b8      	b.n	80012c4 <__aeabi_dadd+0x460>
 8001152:	4c1f      	ldr	r4, [pc, #124]	; (80011d0 <__aeabi_dadd+0x36c>)
 8001154:	42a2      	cmp	r2, r4
 8001156:	d100      	bne.n	800115a <__aeabi_dadd+0x2f6>
 8001158:	e11c      	b.n	8001394 <__aeabi_dadd+0x530>
 800115a:	2480      	movs	r4, #128	; 0x80
 800115c:	0424      	lsls	r4, r4, #16
 800115e:	4321      	orrs	r1, r4
 8001160:	2f38      	cmp	r7, #56	; 0x38
 8001162:	dd00      	ble.n	8001166 <__aeabi_dadd+0x302>
 8001164:	e11e      	b.n	80013a4 <__aeabi_dadd+0x540>
 8001166:	2f1f      	cmp	r7, #31
 8001168:	dd00      	ble.n	800116c <__aeabi_dadd+0x308>
 800116a:	e19e      	b.n	80014aa <__aeabi_dadd+0x646>
 800116c:	2620      	movs	r6, #32
 800116e:	000c      	movs	r4, r1
 8001170:	1bf6      	subs	r6, r6, r7
 8001172:	0018      	movs	r0, r3
 8001174:	40b3      	lsls	r3, r6
 8001176:	40b4      	lsls	r4, r6
 8001178:	40f8      	lsrs	r0, r7
 800117a:	1e5e      	subs	r6, r3, #1
 800117c:	41b3      	sbcs	r3, r6
 800117e:	40f9      	lsrs	r1, r7
 8001180:	4304      	orrs	r4, r0
 8001182:	431c      	orrs	r4, r3
 8001184:	4489      	add	r9, r1
 8001186:	4444      	add	r4, r8
 8001188:	4544      	cmp	r4, r8
 800118a:	419b      	sbcs	r3, r3
 800118c:	425b      	negs	r3, r3
 800118e:	444b      	add	r3, r9
 8001190:	469a      	mov	sl, r3
 8001192:	0016      	movs	r6, r2
 8001194:	e7a8      	b.n	80010e8 <__aeabi_dadd+0x284>
 8001196:	4642      	mov	r2, r8
 8001198:	464c      	mov	r4, r9
 800119a:	4314      	orrs	r4, r2
 800119c:	1e62      	subs	r2, r4, #1
 800119e:	4194      	sbcs	r4, r2
 80011a0:	e6a6      	b.n	8000ef0 <__aeabi_dadd+0x8c>
 80011a2:	4c0d      	ldr	r4, [pc, #52]	; (80011d8 <__aeabi_dadd+0x374>)
 80011a4:	1c72      	adds	r2, r6, #1
 80011a6:	4222      	tst	r2, r4
 80011a8:	d000      	beq.n	80011ac <__aeabi_dadd+0x348>
 80011aa:	e0a8      	b.n	80012fe <__aeabi_dadd+0x49a>
 80011ac:	000a      	movs	r2, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x352>
 80011b4:	e10a      	b.n	80013cc <__aeabi_dadd+0x568>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x358>
 80011ba:	e15e      	b.n	800147a <__aeabi_dadd+0x616>
 80011bc:	464a      	mov	r2, r9
 80011be:	4302      	orrs	r2, r0
 80011c0:	d000      	beq.n	80011c4 <__aeabi_dadd+0x360>
 80011c2:	e161      	b.n	8001488 <__aeabi_dadd+0x624>
 80011c4:	074a      	lsls	r2, r1, #29
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	08c9      	lsrs	r1, r1, #3
 80011cc:	e77c      	b.n	80010c8 <__aeabi_dadd+0x264>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	000007ff 	.word	0x000007ff
 80011d4:	ff7fffff 	.word	0xff7fffff
 80011d8:	000007fe 	.word	0x000007fe
 80011dc:	4ccf      	ldr	r4, [pc, #828]	; (800151c <__aeabi_dadd+0x6b8>)
 80011de:	42a2      	cmp	r2, r4
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x380>
 80011e2:	e0ce      	b.n	8001382 <__aeabi_dadd+0x51e>
 80011e4:	2480      	movs	r4, #128	; 0x80
 80011e6:	0424      	lsls	r4, r4, #16
 80011e8:	4321      	orrs	r1, r4
 80011ea:	2f38      	cmp	r7, #56	; 0x38
 80011ec:	dc5b      	bgt.n	80012a6 <__aeabi_dadd+0x442>
 80011ee:	2f1f      	cmp	r7, #31
 80011f0:	dd00      	ble.n	80011f4 <__aeabi_dadd+0x390>
 80011f2:	e0dc      	b.n	80013ae <__aeabi_dadd+0x54a>
 80011f4:	2520      	movs	r5, #32
 80011f6:	000c      	movs	r4, r1
 80011f8:	1bed      	subs	r5, r5, r7
 80011fa:	001e      	movs	r6, r3
 80011fc:	40ab      	lsls	r3, r5
 80011fe:	40ac      	lsls	r4, r5
 8001200:	40fe      	lsrs	r6, r7
 8001202:	1e5d      	subs	r5, r3, #1
 8001204:	41ab      	sbcs	r3, r5
 8001206:	4334      	orrs	r4, r6
 8001208:	40f9      	lsrs	r1, r7
 800120a:	431c      	orrs	r4, r3
 800120c:	464b      	mov	r3, r9
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	4699      	mov	r9, r3
 8001212:	e04c      	b.n	80012ae <__aeabi_dadd+0x44a>
 8001214:	464a      	mov	r2, r9
 8001216:	1a1c      	subs	r4, r3, r0
 8001218:	1a88      	subs	r0, r1, r2
 800121a:	42a3      	cmp	r3, r4
 800121c:	4192      	sbcs	r2, r2
 800121e:	4252      	negs	r2, r2
 8001220:	4692      	mov	sl, r2
 8001222:	0002      	movs	r2, r0
 8001224:	4650      	mov	r0, sl
 8001226:	1a12      	subs	r2, r2, r0
 8001228:	4692      	mov	sl, r2
 800122a:	0212      	lsls	r2, r2, #8
 800122c:	d478      	bmi.n	8001320 <__aeabi_dadd+0x4bc>
 800122e:	4653      	mov	r3, sl
 8001230:	4323      	orrs	r3, r4
 8001232:	d000      	beq.n	8001236 <__aeabi_dadd+0x3d2>
 8001234:	e66a      	b.n	8000f0c <__aeabi_dadd+0xa8>
 8001236:	2100      	movs	r1, #0
 8001238:	2500      	movs	r5, #0
 800123a:	e745      	b.n	80010c8 <__aeabi_dadd+0x264>
 800123c:	074a      	lsls	r2, r1, #29
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	4313      	orrs	r3, r2
 8001242:	08c9      	lsrs	r1, r1, #3
 8001244:	e73d      	b.n	80010c2 <__aeabi_dadd+0x25e>
 8001246:	181c      	adds	r4, r3, r0
 8001248:	429c      	cmp	r4, r3
 800124a:	419b      	sbcs	r3, r3
 800124c:	4449      	add	r1, r9
 800124e:	468a      	mov	sl, r1
 8001250:	425b      	negs	r3, r3
 8001252:	449a      	add	sl, r3
 8001254:	4653      	mov	r3, sl
 8001256:	2601      	movs	r6, #1
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	d400      	bmi.n	800125e <__aeabi_dadd+0x3fa>
 800125c:	e727      	b.n	80010ae <__aeabi_dadd+0x24a>
 800125e:	2602      	movs	r6, #2
 8001260:	4652      	mov	r2, sl
 8001262:	4baf      	ldr	r3, [pc, #700]	; (8001520 <__aeabi_dadd+0x6bc>)
 8001264:	2101      	movs	r1, #1
 8001266:	401a      	ands	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	4021      	ands	r1, r4
 800126c:	0862      	lsrs	r2, r4, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	07dc      	lsls	r4, r3, #31
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	469a      	mov	sl, r3
 8001276:	4314      	orrs	r4, r2
 8001278:	e670      	b.n	8000f5c <__aeabi_dadd+0xf8>
 800127a:	003a      	movs	r2, r7
 800127c:	464c      	mov	r4, r9
 800127e:	3a20      	subs	r2, #32
 8001280:	40d4      	lsrs	r4, r2
 8001282:	46a4      	mov	ip, r4
 8001284:	2f20      	cmp	r7, #32
 8001286:	d007      	beq.n	8001298 <__aeabi_dadd+0x434>
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	4648      	mov	r0, r9
 800128c:	1bd2      	subs	r2, r2, r7
 800128e:	4090      	lsls	r0, r2
 8001290:	0002      	movs	r2, r0
 8001292:	4640      	mov	r0, r8
 8001294:	4310      	orrs	r0, r2
 8001296:	4680      	mov	r8, r0
 8001298:	4640      	mov	r0, r8
 800129a:	1e42      	subs	r2, r0, #1
 800129c:	4190      	sbcs	r0, r2
 800129e:	4662      	mov	r2, ip
 80012a0:	0004      	movs	r4, r0
 80012a2:	4314      	orrs	r4, r2
 80012a4:	e624      	b.n	8000ef0 <__aeabi_dadd+0x8c>
 80012a6:	4319      	orrs	r1, r3
 80012a8:	000c      	movs	r4, r1
 80012aa:	1e63      	subs	r3, r4, #1
 80012ac:	419c      	sbcs	r4, r3
 80012ae:	4643      	mov	r3, r8
 80012b0:	1b1c      	subs	r4, r3, r4
 80012b2:	45a0      	cmp	r8, r4
 80012b4:	419b      	sbcs	r3, r3
 80012b6:	4649      	mov	r1, r9
 80012b8:	425b      	negs	r3, r3
 80012ba:	1acb      	subs	r3, r1, r3
 80012bc:	469a      	mov	sl, r3
 80012be:	4665      	mov	r5, ip
 80012c0:	0016      	movs	r6, r2
 80012c2:	e61b      	b.n	8000efc <__aeabi_dadd+0x98>
 80012c4:	000c      	movs	r4, r1
 80012c6:	431c      	orrs	r4, r3
 80012c8:	d100      	bne.n	80012cc <__aeabi_dadd+0x468>
 80012ca:	e0c7      	b.n	800145c <__aeabi_dadd+0x5f8>
 80012cc:	1e7c      	subs	r4, r7, #1
 80012ce:	2f01      	cmp	r7, #1
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x470>
 80012d2:	e0f9      	b.n	80014c8 <__aeabi_dadd+0x664>
 80012d4:	4e91      	ldr	r6, [pc, #580]	; (800151c <__aeabi_dadd+0x6b8>)
 80012d6:	42b7      	cmp	r7, r6
 80012d8:	d05c      	beq.n	8001394 <__aeabi_dadd+0x530>
 80012da:	0027      	movs	r7, r4
 80012dc:	e740      	b.n	8001160 <__aeabi_dadd+0x2fc>
 80012de:	2220      	movs	r2, #32
 80012e0:	464c      	mov	r4, r9
 80012e2:	4640      	mov	r0, r8
 80012e4:	1bd2      	subs	r2, r2, r7
 80012e6:	4094      	lsls	r4, r2
 80012e8:	40f8      	lsrs	r0, r7
 80012ea:	4304      	orrs	r4, r0
 80012ec:	4640      	mov	r0, r8
 80012ee:	4090      	lsls	r0, r2
 80012f0:	1e42      	subs	r2, r0, #1
 80012f2:	4190      	sbcs	r0, r2
 80012f4:	464a      	mov	r2, r9
 80012f6:	40fa      	lsrs	r2, r7
 80012f8:	4304      	orrs	r4, r0
 80012fa:	1889      	adds	r1, r1, r2
 80012fc:	e6ee      	b.n	80010dc <__aeabi_dadd+0x278>
 80012fe:	4c87      	ldr	r4, [pc, #540]	; (800151c <__aeabi_dadd+0x6b8>)
 8001300:	42a2      	cmp	r2, r4
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x4a2>
 8001304:	e6f9      	b.n	80010fa <__aeabi_dadd+0x296>
 8001306:	1818      	adds	r0, r3, r0
 8001308:	4298      	cmp	r0, r3
 800130a:	419b      	sbcs	r3, r3
 800130c:	4449      	add	r1, r9
 800130e:	425b      	negs	r3, r3
 8001310:	18cb      	adds	r3, r1, r3
 8001312:	07dc      	lsls	r4, r3, #31
 8001314:	0840      	lsrs	r0, r0, #1
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	469a      	mov	sl, r3
 800131a:	0016      	movs	r6, r2
 800131c:	4304      	orrs	r4, r0
 800131e:	e6c6      	b.n	80010ae <__aeabi_dadd+0x24a>
 8001320:	4642      	mov	r2, r8
 8001322:	1ad4      	subs	r4, r2, r3
 8001324:	45a0      	cmp	r8, r4
 8001326:	4180      	sbcs	r0, r0
 8001328:	464b      	mov	r3, r9
 800132a:	4240      	negs	r0, r0
 800132c:	1a59      	subs	r1, r3, r1
 800132e:	1a0b      	subs	r3, r1, r0
 8001330:	469a      	mov	sl, r3
 8001332:	4665      	mov	r5, ip
 8001334:	e5ea      	b.n	8000f0c <__aeabi_dadd+0xa8>
 8001336:	464b      	mov	r3, r9
 8001338:	464a      	mov	r2, r9
 800133a:	08c0      	lsrs	r0, r0, #3
 800133c:	075b      	lsls	r3, r3, #29
 800133e:	4665      	mov	r5, ip
 8001340:	4303      	orrs	r3, r0
 8001342:	08d1      	lsrs	r1, r2, #3
 8001344:	e6bd      	b.n	80010c2 <__aeabi_dadd+0x25e>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_dadd+0x4e8>
 800134a:	e08e      	b.n	800146a <__aeabi_dadd+0x606>
 800134c:	464b      	mov	r3, r9
 800134e:	4303      	orrs	r3, r0
 8001350:	d117      	bne.n	8001382 <__aeabi_dadd+0x51e>
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	2500      	movs	r5, #0
 8001356:	0309      	lsls	r1, r1, #12
 8001358:	e6da      	b.n	8001110 <__aeabi_dadd+0x2ac>
 800135a:	074a      	lsls	r2, r1, #29
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	4313      	orrs	r3, r2
 8001360:	08c9      	lsrs	r1, r1, #3
 8001362:	e6d1      	b.n	8001108 <__aeabi_dadd+0x2a4>
 8001364:	1a1c      	subs	r4, r3, r0
 8001366:	464a      	mov	r2, r9
 8001368:	42a3      	cmp	r3, r4
 800136a:	419b      	sbcs	r3, r3
 800136c:	1a89      	subs	r1, r1, r2
 800136e:	425b      	negs	r3, r3
 8001370:	1acb      	subs	r3, r1, r3
 8001372:	469a      	mov	sl, r3
 8001374:	2601      	movs	r6, #1
 8001376:	e5c1      	b.n	8000efc <__aeabi_dadd+0x98>
 8001378:	074a      	lsls	r2, r1, #29
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	4313      	orrs	r3, r2
 800137e:	08c9      	lsrs	r1, r1, #3
 8001380:	e69f      	b.n	80010c2 <__aeabi_dadd+0x25e>
 8001382:	4643      	mov	r3, r8
 8001384:	08d8      	lsrs	r0, r3, #3
 8001386:	464b      	mov	r3, r9
 8001388:	464a      	mov	r2, r9
 800138a:	075b      	lsls	r3, r3, #29
 800138c:	4665      	mov	r5, ip
 800138e:	4303      	orrs	r3, r0
 8001390:	08d1      	lsrs	r1, r2, #3
 8001392:	e6b9      	b.n	8001108 <__aeabi_dadd+0x2a4>
 8001394:	4643      	mov	r3, r8
 8001396:	08d8      	lsrs	r0, r3, #3
 8001398:	464b      	mov	r3, r9
 800139a:	464a      	mov	r2, r9
 800139c:	075b      	lsls	r3, r3, #29
 800139e:	4303      	orrs	r3, r0
 80013a0:	08d1      	lsrs	r1, r2, #3
 80013a2:	e6b1      	b.n	8001108 <__aeabi_dadd+0x2a4>
 80013a4:	4319      	orrs	r1, r3
 80013a6:	000c      	movs	r4, r1
 80013a8:	1e63      	subs	r3, r4, #1
 80013aa:	419c      	sbcs	r4, r3
 80013ac:	e6eb      	b.n	8001186 <__aeabi_dadd+0x322>
 80013ae:	003c      	movs	r4, r7
 80013b0:	000d      	movs	r5, r1
 80013b2:	3c20      	subs	r4, #32
 80013b4:	40e5      	lsrs	r5, r4
 80013b6:	2f20      	cmp	r7, #32
 80013b8:	d003      	beq.n	80013c2 <__aeabi_dadd+0x55e>
 80013ba:	2440      	movs	r4, #64	; 0x40
 80013bc:	1be4      	subs	r4, r4, r7
 80013be:	40a1      	lsls	r1, r4
 80013c0:	430b      	orrs	r3, r1
 80013c2:	001c      	movs	r4, r3
 80013c4:	1e63      	subs	r3, r4, #1
 80013c6:	419c      	sbcs	r4, r3
 80013c8:	432c      	orrs	r4, r5
 80013ca:	e770      	b.n	80012ae <__aeabi_dadd+0x44a>
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d0e1      	beq.n	8001394 <__aeabi_dadd+0x530>
 80013d0:	464a      	mov	r2, r9
 80013d2:	4302      	orrs	r2, r0
 80013d4:	d0c1      	beq.n	800135a <__aeabi_dadd+0x4f6>
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	4313      	orrs	r3, r2
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	0312      	lsls	r2, r2, #12
 80013e2:	4211      	tst	r1, r2
 80013e4:	d008      	beq.n	80013f8 <__aeabi_dadd+0x594>
 80013e6:	4648      	mov	r0, r9
 80013e8:	08c4      	lsrs	r4, r0, #3
 80013ea:	4214      	tst	r4, r2
 80013ec:	d104      	bne.n	80013f8 <__aeabi_dadd+0x594>
 80013ee:	4643      	mov	r3, r8
 80013f0:	0021      	movs	r1, r4
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	0742      	lsls	r2, r0, #29
 80013f6:	4313      	orrs	r3, r2
 80013f8:	0f5a      	lsrs	r2, r3, #29
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	0752      	lsls	r2, r2, #29
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	4313      	orrs	r3, r2
 8001402:	e681      	b.n	8001108 <__aeabi_dadd+0x2a4>
 8001404:	464b      	mov	r3, r9
 8001406:	4303      	orrs	r3, r0
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x5a8>
 800140a:	e714      	b.n	8001236 <__aeabi_dadd+0x3d2>
 800140c:	464b      	mov	r3, r9
 800140e:	464a      	mov	r2, r9
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	075b      	lsls	r3, r3, #29
 8001414:	4665      	mov	r5, ip
 8001416:	4303      	orrs	r3, r0
 8001418:	08d1      	lsrs	r1, r2, #3
 800141a:	e655      	b.n	80010c8 <__aeabi_dadd+0x264>
 800141c:	1ac4      	subs	r4, r0, r3
 800141e:	45a0      	cmp	r8, r4
 8001420:	4180      	sbcs	r0, r0
 8001422:	464b      	mov	r3, r9
 8001424:	4240      	negs	r0, r0
 8001426:	1a59      	subs	r1, r3, r1
 8001428:	1a0b      	subs	r3, r1, r0
 800142a:	469a      	mov	sl, r3
 800142c:	4665      	mov	r5, ip
 800142e:	2601      	movs	r6, #1
 8001430:	e564      	b.n	8000efc <__aeabi_dadd+0x98>
 8001432:	1a1c      	subs	r4, r3, r0
 8001434:	464a      	mov	r2, r9
 8001436:	42a3      	cmp	r3, r4
 8001438:	4180      	sbcs	r0, r0
 800143a:	1a8a      	subs	r2, r1, r2
 800143c:	4240      	negs	r0, r0
 800143e:	1a12      	subs	r2, r2, r0
 8001440:	4692      	mov	sl, r2
 8001442:	0212      	lsls	r2, r2, #8
 8001444:	d549      	bpl.n	80014da <__aeabi_dadd+0x676>
 8001446:	4642      	mov	r2, r8
 8001448:	1ad4      	subs	r4, r2, r3
 800144a:	45a0      	cmp	r8, r4
 800144c:	4180      	sbcs	r0, r0
 800144e:	464b      	mov	r3, r9
 8001450:	4240      	negs	r0, r0
 8001452:	1a59      	subs	r1, r3, r1
 8001454:	1a0b      	subs	r3, r1, r0
 8001456:	469a      	mov	sl, r3
 8001458:	4665      	mov	r5, ip
 800145a:	e57f      	b.n	8000f5c <__aeabi_dadd+0xf8>
 800145c:	464b      	mov	r3, r9
 800145e:	464a      	mov	r2, r9
 8001460:	08c0      	lsrs	r0, r0, #3
 8001462:	075b      	lsls	r3, r3, #29
 8001464:	4303      	orrs	r3, r0
 8001466:	08d1      	lsrs	r1, r2, #3
 8001468:	e62b      	b.n	80010c2 <__aeabi_dadd+0x25e>
 800146a:	464a      	mov	r2, r9
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	4302      	orrs	r2, r0
 8001470:	d138      	bne.n	80014e4 <__aeabi_dadd+0x680>
 8001472:	074a      	lsls	r2, r1, #29
 8001474:	4313      	orrs	r3, r2
 8001476:	08c9      	lsrs	r1, r1, #3
 8001478:	e646      	b.n	8001108 <__aeabi_dadd+0x2a4>
 800147a:	464b      	mov	r3, r9
 800147c:	464a      	mov	r2, r9
 800147e:	08c0      	lsrs	r0, r0, #3
 8001480:	075b      	lsls	r3, r3, #29
 8001482:	4303      	orrs	r3, r0
 8001484:	08d1      	lsrs	r1, r2, #3
 8001486:	e61f      	b.n	80010c8 <__aeabi_dadd+0x264>
 8001488:	181c      	adds	r4, r3, r0
 800148a:	429c      	cmp	r4, r3
 800148c:	419b      	sbcs	r3, r3
 800148e:	4449      	add	r1, r9
 8001490:	468a      	mov	sl, r1
 8001492:	425b      	negs	r3, r3
 8001494:	449a      	add	sl, r3
 8001496:	4653      	mov	r3, sl
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	d400      	bmi.n	800149e <__aeabi_dadd+0x63a>
 800149c:	e607      	b.n	80010ae <__aeabi_dadd+0x24a>
 800149e:	4652      	mov	r2, sl
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <__aeabi_dadd+0x6bc>)
 80014a2:	2601      	movs	r6, #1
 80014a4:	401a      	ands	r2, r3
 80014a6:	4692      	mov	sl, r2
 80014a8:	e601      	b.n	80010ae <__aeabi_dadd+0x24a>
 80014aa:	003c      	movs	r4, r7
 80014ac:	000e      	movs	r6, r1
 80014ae:	3c20      	subs	r4, #32
 80014b0:	40e6      	lsrs	r6, r4
 80014b2:	2f20      	cmp	r7, #32
 80014b4:	d003      	beq.n	80014be <__aeabi_dadd+0x65a>
 80014b6:	2440      	movs	r4, #64	; 0x40
 80014b8:	1be4      	subs	r4, r4, r7
 80014ba:	40a1      	lsls	r1, r4
 80014bc:	430b      	orrs	r3, r1
 80014be:	001c      	movs	r4, r3
 80014c0:	1e63      	subs	r3, r4, #1
 80014c2:	419c      	sbcs	r4, r3
 80014c4:	4334      	orrs	r4, r6
 80014c6:	e65e      	b.n	8001186 <__aeabi_dadd+0x322>
 80014c8:	4443      	add	r3, r8
 80014ca:	4283      	cmp	r3, r0
 80014cc:	4180      	sbcs	r0, r0
 80014ce:	4449      	add	r1, r9
 80014d0:	468a      	mov	sl, r1
 80014d2:	4240      	negs	r0, r0
 80014d4:	001c      	movs	r4, r3
 80014d6:	4482      	add	sl, r0
 80014d8:	e6bc      	b.n	8001254 <__aeabi_dadd+0x3f0>
 80014da:	4653      	mov	r3, sl
 80014dc:	4323      	orrs	r3, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x67e>
 80014e0:	e6a9      	b.n	8001236 <__aeabi_dadd+0x3d2>
 80014e2:	e5e4      	b.n	80010ae <__aeabi_dadd+0x24a>
 80014e4:	074a      	lsls	r2, r1, #29
 80014e6:	4313      	orrs	r3, r2
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	08c9      	lsrs	r1, r1, #3
 80014ec:	0312      	lsls	r2, r2, #12
 80014ee:	4211      	tst	r1, r2
 80014f0:	d009      	beq.n	8001506 <__aeabi_dadd+0x6a2>
 80014f2:	4648      	mov	r0, r9
 80014f4:	08c4      	lsrs	r4, r0, #3
 80014f6:	4214      	tst	r4, r2
 80014f8:	d105      	bne.n	8001506 <__aeabi_dadd+0x6a2>
 80014fa:	4643      	mov	r3, r8
 80014fc:	4665      	mov	r5, ip
 80014fe:	0021      	movs	r1, r4
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	0742      	lsls	r2, r0, #29
 8001504:	4313      	orrs	r3, r2
 8001506:	0f5a      	lsrs	r2, r3, #29
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	0752      	lsls	r2, r2, #29
 800150e:	4313      	orrs	r3, r2
 8001510:	e5fa      	b.n	8001108 <__aeabi_dadd+0x2a4>
 8001512:	2300      	movs	r3, #0
 8001514:	4a01      	ldr	r2, [pc, #4]	; (800151c <__aeabi_dadd+0x6b8>)
 8001516:	001c      	movs	r4, r3
 8001518:	e540      	b.n	8000f9c <__aeabi_dadd+0x138>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	000007ff 	.word	0x000007ff
 8001520:	ff7fffff 	.word	0xff7fffff

08001524 <__aeabi_ddiv>:
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	4657      	mov	r7, sl
 8001528:	464e      	mov	r6, r9
 800152a:	4645      	mov	r5, r8
 800152c:	46de      	mov	lr, fp
 800152e:	b5e0      	push	{r5, r6, r7, lr}
 8001530:	030c      	lsls	r4, r1, #12
 8001532:	001f      	movs	r7, r3
 8001534:	004b      	lsls	r3, r1, #1
 8001536:	4681      	mov	r9, r0
 8001538:	4692      	mov	sl, r2
 800153a:	0005      	movs	r5, r0
 800153c:	b085      	sub	sp, #20
 800153e:	0b24      	lsrs	r4, r4, #12
 8001540:	0d5b      	lsrs	r3, r3, #21
 8001542:	0fce      	lsrs	r6, r1, #31
 8001544:	2b00      	cmp	r3, #0
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x26>
 8001548:	e152      	b.n	80017f0 <__aeabi_ddiv+0x2cc>
 800154a:	4ad2      	ldr	r2, [pc, #840]	; (8001894 <__aeabi_ddiv+0x370>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d100      	bne.n	8001552 <__aeabi_ddiv+0x2e>
 8001550:	e16e      	b.n	8001830 <__aeabi_ddiv+0x30c>
 8001552:	0f42      	lsrs	r2, r0, #29
 8001554:	00e4      	lsls	r4, r4, #3
 8001556:	4314      	orrs	r4, r2
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	0412      	lsls	r2, r2, #16
 800155c:	4322      	orrs	r2, r4
 800155e:	4690      	mov	r8, r2
 8001560:	4acd      	ldr	r2, [pc, #820]	; (8001898 <__aeabi_ddiv+0x374>)
 8001562:	00c5      	lsls	r5, r0, #3
 8001564:	4693      	mov	fp, r2
 8001566:	449b      	add	fp, r3
 8001568:	2300      	movs	r3, #0
 800156a:	4699      	mov	r9, r3
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	033c      	lsls	r4, r7, #12
 8001570:	007b      	lsls	r3, r7, #1
 8001572:	4650      	mov	r0, sl
 8001574:	0b24      	lsrs	r4, r4, #12
 8001576:	0d5b      	lsrs	r3, r3, #21
 8001578:	0fff      	lsrs	r7, r7, #31
 800157a:	2b00      	cmp	r3, #0
 800157c:	d100      	bne.n	8001580 <__aeabi_ddiv+0x5c>
 800157e:	e11a      	b.n	80017b6 <__aeabi_ddiv+0x292>
 8001580:	4ac4      	ldr	r2, [pc, #784]	; (8001894 <__aeabi_ddiv+0x370>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d100      	bne.n	8001588 <__aeabi_ddiv+0x64>
 8001586:	e15e      	b.n	8001846 <__aeabi_ddiv+0x322>
 8001588:	0f42      	lsrs	r2, r0, #29
 800158a:	00e4      	lsls	r4, r4, #3
 800158c:	4322      	orrs	r2, r4
 800158e:	2480      	movs	r4, #128	; 0x80
 8001590:	0424      	lsls	r4, r4, #16
 8001592:	4314      	orrs	r4, r2
 8001594:	4ac0      	ldr	r2, [pc, #768]	; (8001898 <__aeabi_ddiv+0x374>)
 8001596:	00c1      	lsls	r1, r0, #3
 8001598:	4694      	mov	ip, r2
 800159a:	465a      	mov	r2, fp
 800159c:	4463      	add	r3, ip
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	469b      	mov	fp, r3
 80015a2:	2000      	movs	r0, #0
 80015a4:	0033      	movs	r3, r6
 80015a6:	407b      	eors	r3, r7
 80015a8:	469a      	mov	sl, r3
 80015aa:	464b      	mov	r3, r9
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d827      	bhi.n	8001600 <__aeabi_ddiv+0xdc>
 80015b0:	4aba      	ldr	r2, [pc, #744]	; (800189c <__aeabi_ddiv+0x378>)
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	58d3      	ldr	r3, [r2, r3]
 80015b6:	469f      	mov	pc, r3
 80015b8:	46b2      	mov	sl, r6
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d016      	beq.n	80015ee <__aeabi_ddiv+0xca>
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d100      	bne.n	80015c6 <__aeabi_ddiv+0xa2>
 80015c4:	e287      	b.n	8001ad6 <__aeabi_ddiv+0x5b2>
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d000      	beq.n	80015cc <__aeabi_ddiv+0xa8>
 80015ca:	e0d5      	b.n	8001778 <__aeabi_ddiv+0x254>
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	2500      	movs	r5, #0
 80015d2:	051b      	lsls	r3, r3, #20
 80015d4:	4313      	orrs	r3, r2
 80015d6:	4652      	mov	r2, sl
 80015d8:	07d2      	lsls	r2, r2, #31
 80015da:	4313      	orrs	r3, r2
 80015dc:	0028      	movs	r0, r5
 80015de:	0019      	movs	r1, r3
 80015e0:	b005      	add	sp, #20
 80015e2:	bcf0      	pop	{r4, r5, r6, r7}
 80015e4:	46bb      	mov	fp, r7
 80015e6:	46b2      	mov	sl, r6
 80015e8:	46a9      	mov	r9, r5
 80015ea:	46a0      	mov	r8, r4
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ee:	2200      	movs	r2, #0
 80015f0:	2500      	movs	r5, #0
 80015f2:	4ba8      	ldr	r3, [pc, #672]	; (8001894 <__aeabi_ddiv+0x370>)
 80015f4:	e7ed      	b.n	80015d2 <__aeabi_ddiv+0xae>
 80015f6:	46ba      	mov	sl, r7
 80015f8:	46a0      	mov	r8, r4
 80015fa:	000d      	movs	r5, r1
 80015fc:	9000      	str	r0, [sp, #0]
 80015fe:	e7dc      	b.n	80015ba <__aeabi_ddiv+0x96>
 8001600:	4544      	cmp	r4, r8
 8001602:	d200      	bcs.n	8001606 <__aeabi_ddiv+0xe2>
 8001604:	e1c4      	b.n	8001990 <__aeabi_ddiv+0x46c>
 8001606:	d100      	bne.n	800160a <__aeabi_ddiv+0xe6>
 8001608:	e1bf      	b.n	800198a <__aeabi_ddiv+0x466>
 800160a:	2301      	movs	r3, #1
 800160c:	425b      	negs	r3, r3
 800160e:	469c      	mov	ip, r3
 8001610:	002e      	movs	r6, r5
 8001612:	4640      	mov	r0, r8
 8001614:	2500      	movs	r5, #0
 8001616:	44e3      	add	fp, ip
 8001618:	0223      	lsls	r3, r4, #8
 800161a:	0e0c      	lsrs	r4, r1, #24
 800161c:	431c      	orrs	r4, r3
 800161e:	0c1b      	lsrs	r3, r3, #16
 8001620:	4699      	mov	r9, r3
 8001622:	0423      	lsls	r3, r4, #16
 8001624:	020a      	lsls	r2, r1, #8
 8001626:	0c1f      	lsrs	r7, r3, #16
 8001628:	4649      	mov	r1, r9
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	9701      	str	r7, [sp, #4]
 800162e:	f7fe fe0d 	bl	800024c <__aeabi_uidivmod>
 8001632:	0002      	movs	r2, r0
 8001634:	437a      	muls	r2, r7
 8001636:	040b      	lsls	r3, r1, #16
 8001638:	0c31      	lsrs	r1, r6, #16
 800163a:	4680      	mov	r8, r0
 800163c:	4319      	orrs	r1, r3
 800163e:	428a      	cmp	r2, r1
 8001640:	d907      	bls.n	8001652 <__aeabi_ddiv+0x12e>
 8001642:	2301      	movs	r3, #1
 8001644:	425b      	negs	r3, r3
 8001646:	469c      	mov	ip, r3
 8001648:	1909      	adds	r1, r1, r4
 800164a:	44e0      	add	r8, ip
 800164c:	428c      	cmp	r4, r1
 800164e:	d800      	bhi.n	8001652 <__aeabi_ddiv+0x12e>
 8001650:	e201      	b.n	8001a56 <__aeabi_ddiv+0x532>
 8001652:	1a88      	subs	r0, r1, r2
 8001654:	4649      	mov	r1, r9
 8001656:	f7fe fdf9 	bl	800024c <__aeabi_uidivmod>
 800165a:	9a01      	ldr	r2, [sp, #4]
 800165c:	0436      	lsls	r6, r6, #16
 800165e:	4342      	muls	r2, r0
 8001660:	0409      	lsls	r1, r1, #16
 8001662:	0c36      	lsrs	r6, r6, #16
 8001664:	0003      	movs	r3, r0
 8001666:	430e      	orrs	r6, r1
 8001668:	42b2      	cmp	r2, r6
 800166a:	d904      	bls.n	8001676 <__aeabi_ddiv+0x152>
 800166c:	1936      	adds	r6, r6, r4
 800166e:	3b01      	subs	r3, #1
 8001670:	42b4      	cmp	r4, r6
 8001672:	d800      	bhi.n	8001676 <__aeabi_ddiv+0x152>
 8001674:	e1e9      	b.n	8001a4a <__aeabi_ddiv+0x526>
 8001676:	1ab0      	subs	r0, r6, r2
 8001678:	4642      	mov	r2, r8
 800167a:	9e00      	ldr	r6, [sp, #0]
 800167c:	0412      	lsls	r2, r2, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	0c33      	lsrs	r3, r6, #16
 8001682:	001f      	movs	r7, r3
 8001684:	0c11      	lsrs	r1, r2, #16
 8001686:	4690      	mov	r8, r2
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	0413      	lsls	r3, r2, #16
 800168c:	0432      	lsls	r2, r6, #16
 800168e:	0c16      	lsrs	r6, r2, #16
 8001690:	0032      	movs	r2, r6
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	435a      	muls	r2, r3
 8001696:	9603      	str	r6, [sp, #12]
 8001698:	437b      	muls	r3, r7
 800169a:	434e      	muls	r6, r1
 800169c:	4379      	muls	r1, r7
 800169e:	0c17      	lsrs	r7, r2, #16
 80016a0:	46bc      	mov	ip, r7
 80016a2:	199b      	adds	r3, r3, r6
 80016a4:	4463      	add	r3, ip
 80016a6:	429e      	cmp	r6, r3
 80016a8:	d903      	bls.n	80016b2 <__aeabi_ddiv+0x18e>
 80016aa:	2680      	movs	r6, #128	; 0x80
 80016ac:	0276      	lsls	r6, r6, #9
 80016ae:	46b4      	mov	ip, r6
 80016b0:	4461      	add	r1, ip
 80016b2:	0c1e      	lsrs	r6, r3, #16
 80016b4:	1871      	adds	r1, r6, r1
 80016b6:	0416      	lsls	r6, r2, #16
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	0c36      	lsrs	r6, r6, #16
 80016bc:	199e      	adds	r6, r3, r6
 80016be:	4288      	cmp	r0, r1
 80016c0:	d302      	bcc.n	80016c8 <__aeabi_ddiv+0x1a4>
 80016c2:	d112      	bne.n	80016ea <__aeabi_ddiv+0x1c6>
 80016c4:	42b5      	cmp	r5, r6
 80016c6:	d210      	bcs.n	80016ea <__aeabi_ddiv+0x1c6>
 80016c8:	4643      	mov	r3, r8
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	9b00      	ldr	r3, [sp, #0]
 80016ce:	469c      	mov	ip, r3
 80016d0:	4465      	add	r5, ip
 80016d2:	001f      	movs	r7, r3
 80016d4:	429d      	cmp	r5, r3
 80016d6:	419b      	sbcs	r3, r3
 80016d8:	425b      	negs	r3, r3
 80016da:	191b      	adds	r3, r3, r4
 80016dc:	18c0      	adds	r0, r0, r3
 80016de:	4284      	cmp	r4, r0
 80016e0:	d200      	bcs.n	80016e4 <__aeabi_ddiv+0x1c0>
 80016e2:	e19e      	b.n	8001a22 <__aeabi_ddiv+0x4fe>
 80016e4:	d100      	bne.n	80016e8 <__aeabi_ddiv+0x1c4>
 80016e6:	e199      	b.n	8001a1c <__aeabi_ddiv+0x4f8>
 80016e8:	4690      	mov	r8, r2
 80016ea:	1bae      	subs	r6, r5, r6
 80016ec:	42b5      	cmp	r5, r6
 80016ee:	41ad      	sbcs	r5, r5
 80016f0:	1a40      	subs	r0, r0, r1
 80016f2:	426d      	negs	r5, r5
 80016f4:	1b40      	subs	r0, r0, r5
 80016f6:	4284      	cmp	r4, r0
 80016f8:	d100      	bne.n	80016fc <__aeabi_ddiv+0x1d8>
 80016fa:	e1d2      	b.n	8001aa2 <__aeabi_ddiv+0x57e>
 80016fc:	4649      	mov	r1, r9
 80016fe:	f7fe fda5 	bl	800024c <__aeabi_uidivmod>
 8001702:	9a01      	ldr	r2, [sp, #4]
 8001704:	040b      	lsls	r3, r1, #16
 8001706:	4342      	muls	r2, r0
 8001708:	0c31      	lsrs	r1, r6, #16
 800170a:	0005      	movs	r5, r0
 800170c:	4319      	orrs	r1, r3
 800170e:	428a      	cmp	r2, r1
 8001710:	d900      	bls.n	8001714 <__aeabi_ddiv+0x1f0>
 8001712:	e16c      	b.n	80019ee <__aeabi_ddiv+0x4ca>
 8001714:	1a88      	subs	r0, r1, r2
 8001716:	4649      	mov	r1, r9
 8001718:	f7fe fd98 	bl	800024c <__aeabi_uidivmod>
 800171c:	9a01      	ldr	r2, [sp, #4]
 800171e:	0436      	lsls	r6, r6, #16
 8001720:	4342      	muls	r2, r0
 8001722:	0409      	lsls	r1, r1, #16
 8001724:	0c36      	lsrs	r6, r6, #16
 8001726:	0003      	movs	r3, r0
 8001728:	430e      	orrs	r6, r1
 800172a:	42b2      	cmp	r2, r6
 800172c:	d900      	bls.n	8001730 <__aeabi_ddiv+0x20c>
 800172e:	e153      	b.n	80019d8 <__aeabi_ddiv+0x4b4>
 8001730:	9803      	ldr	r0, [sp, #12]
 8001732:	1ab6      	subs	r6, r6, r2
 8001734:	0002      	movs	r2, r0
 8001736:	042d      	lsls	r5, r5, #16
 8001738:	431d      	orrs	r5, r3
 800173a:	9f02      	ldr	r7, [sp, #8]
 800173c:	042b      	lsls	r3, r5, #16
 800173e:	0c1b      	lsrs	r3, r3, #16
 8001740:	435a      	muls	r2, r3
 8001742:	437b      	muls	r3, r7
 8001744:	469c      	mov	ip, r3
 8001746:	0c29      	lsrs	r1, r5, #16
 8001748:	4348      	muls	r0, r1
 800174a:	0c13      	lsrs	r3, r2, #16
 800174c:	4484      	add	ip, r0
 800174e:	4463      	add	r3, ip
 8001750:	4379      	muls	r1, r7
 8001752:	4298      	cmp	r0, r3
 8001754:	d903      	bls.n	800175e <__aeabi_ddiv+0x23a>
 8001756:	2080      	movs	r0, #128	; 0x80
 8001758:	0240      	lsls	r0, r0, #9
 800175a:	4684      	mov	ip, r0
 800175c:	4461      	add	r1, ip
 800175e:	0c18      	lsrs	r0, r3, #16
 8001760:	0412      	lsls	r2, r2, #16
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	0c12      	lsrs	r2, r2, #16
 8001766:	1840      	adds	r0, r0, r1
 8001768:	189b      	adds	r3, r3, r2
 800176a:	4286      	cmp	r6, r0
 800176c:	d200      	bcs.n	8001770 <__aeabi_ddiv+0x24c>
 800176e:	e100      	b.n	8001972 <__aeabi_ddiv+0x44e>
 8001770:	d100      	bne.n	8001774 <__aeabi_ddiv+0x250>
 8001772:	e0fb      	b.n	800196c <__aeabi_ddiv+0x448>
 8001774:	2301      	movs	r3, #1
 8001776:	431d      	orrs	r5, r3
 8001778:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <__aeabi_ddiv+0x37c>)
 800177a:	445b      	add	r3, fp
 800177c:	2b00      	cmp	r3, #0
 800177e:	dc00      	bgt.n	8001782 <__aeabi_ddiv+0x25e>
 8001780:	e0aa      	b.n	80018d8 <__aeabi_ddiv+0x3b4>
 8001782:	076a      	lsls	r2, r5, #29
 8001784:	d000      	beq.n	8001788 <__aeabi_ddiv+0x264>
 8001786:	e13d      	b.n	8001a04 <__aeabi_ddiv+0x4e0>
 8001788:	08e9      	lsrs	r1, r5, #3
 800178a:	4642      	mov	r2, r8
 800178c:	01d2      	lsls	r2, r2, #7
 800178e:	d506      	bpl.n	800179e <__aeabi_ddiv+0x27a>
 8001790:	4642      	mov	r2, r8
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <__aeabi_ddiv+0x380>)
 8001794:	401a      	ands	r2, r3
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	4690      	mov	r8, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	445b      	add	r3, fp
 800179e:	4a42      	ldr	r2, [pc, #264]	; (80018a8 <__aeabi_ddiv+0x384>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	dd00      	ble.n	80017a6 <__aeabi_ddiv+0x282>
 80017a4:	e723      	b.n	80015ee <__aeabi_ddiv+0xca>
 80017a6:	4642      	mov	r2, r8
 80017a8:	055b      	lsls	r3, r3, #21
 80017aa:	0755      	lsls	r5, r2, #29
 80017ac:	0252      	lsls	r2, r2, #9
 80017ae:	430d      	orrs	r5, r1
 80017b0:	0b12      	lsrs	r2, r2, #12
 80017b2:	0d5b      	lsrs	r3, r3, #21
 80017b4:	e70d      	b.n	80015d2 <__aeabi_ddiv+0xae>
 80017b6:	4651      	mov	r1, sl
 80017b8:	4321      	orrs	r1, r4
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0x29a>
 80017bc:	e07c      	b.n	80018b8 <__aeabi_ddiv+0x394>
 80017be:	2c00      	cmp	r4, #0
 80017c0:	d100      	bne.n	80017c4 <__aeabi_ddiv+0x2a0>
 80017c2:	e0fb      	b.n	80019bc <__aeabi_ddiv+0x498>
 80017c4:	0020      	movs	r0, r4
 80017c6:	f001 f9dd 	bl	8002b84 <__clzsi2>
 80017ca:	0002      	movs	r2, r0
 80017cc:	3a0b      	subs	r2, #11
 80017ce:	231d      	movs	r3, #29
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	4652      	mov	r2, sl
 80017d4:	0001      	movs	r1, r0
 80017d6:	40da      	lsrs	r2, r3
 80017d8:	4653      	mov	r3, sl
 80017da:	3908      	subs	r1, #8
 80017dc:	408b      	lsls	r3, r1
 80017de:	408c      	lsls	r4, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	4314      	orrs	r4, r2
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <__aeabi_ddiv+0x388>)
 80017e6:	4458      	add	r0, fp
 80017e8:	469b      	mov	fp, r3
 80017ea:	4483      	add	fp, r0
 80017ec:	2000      	movs	r0, #0
 80017ee:	e6d9      	b.n	80015a4 <__aeabi_ddiv+0x80>
 80017f0:	0003      	movs	r3, r0
 80017f2:	4323      	orrs	r3, r4
 80017f4:	4698      	mov	r8, r3
 80017f6:	d044      	beq.n	8001882 <__aeabi_ddiv+0x35e>
 80017f8:	2c00      	cmp	r4, #0
 80017fa:	d100      	bne.n	80017fe <__aeabi_ddiv+0x2da>
 80017fc:	e0cf      	b.n	800199e <__aeabi_ddiv+0x47a>
 80017fe:	0020      	movs	r0, r4
 8001800:	f001 f9c0 	bl	8002b84 <__clzsi2>
 8001804:	0001      	movs	r1, r0
 8001806:	0002      	movs	r2, r0
 8001808:	390b      	subs	r1, #11
 800180a:	231d      	movs	r3, #29
 800180c:	1a5b      	subs	r3, r3, r1
 800180e:	4649      	mov	r1, r9
 8001810:	0010      	movs	r0, r2
 8001812:	40d9      	lsrs	r1, r3
 8001814:	3808      	subs	r0, #8
 8001816:	4084      	lsls	r4, r0
 8001818:	000b      	movs	r3, r1
 800181a:	464d      	mov	r5, r9
 800181c:	4323      	orrs	r3, r4
 800181e:	4698      	mov	r8, r3
 8001820:	4085      	lsls	r5, r0
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <__aeabi_ddiv+0x38c>)
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	469b      	mov	fp, r3
 8001828:	2300      	movs	r3, #0
 800182a:	4699      	mov	r9, r3
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	e69e      	b.n	800156e <__aeabi_ddiv+0x4a>
 8001830:	0002      	movs	r2, r0
 8001832:	4322      	orrs	r2, r4
 8001834:	4690      	mov	r8, r2
 8001836:	d11d      	bne.n	8001874 <__aeabi_ddiv+0x350>
 8001838:	2208      	movs	r2, #8
 800183a:	469b      	mov	fp, r3
 800183c:	2302      	movs	r3, #2
 800183e:	2500      	movs	r5, #0
 8001840:	4691      	mov	r9, r2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	e693      	b.n	800156e <__aeabi_ddiv+0x4a>
 8001846:	4651      	mov	r1, sl
 8001848:	4321      	orrs	r1, r4
 800184a:	d109      	bne.n	8001860 <__aeabi_ddiv+0x33c>
 800184c:	2302      	movs	r3, #2
 800184e:	464a      	mov	r2, r9
 8001850:	431a      	orrs	r2, r3
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <__aeabi_ddiv+0x390>)
 8001854:	4691      	mov	r9, r2
 8001856:	469c      	mov	ip, r3
 8001858:	2400      	movs	r4, #0
 800185a:	2002      	movs	r0, #2
 800185c:	44e3      	add	fp, ip
 800185e:	e6a1      	b.n	80015a4 <__aeabi_ddiv+0x80>
 8001860:	2303      	movs	r3, #3
 8001862:	464a      	mov	r2, r9
 8001864:	431a      	orrs	r2, r3
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <__aeabi_ddiv+0x390>)
 8001868:	4691      	mov	r9, r2
 800186a:	469c      	mov	ip, r3
 800186c:	4651      	mov	r1, sl
 800186e:	2003      	movs	r0, #3
 8001870:	44e3      	add	fp, ip
 8001872:	e697      	b.n	80015a4 <__aeabi_ddiv+0x80>
 8001874:	220c      	movs	r2, #12
 8001876:	469b      	mov	fp, r3
 8001878:	2303      	movs	r3, #3
 800187a:	46a0      	mov	r8, r4
 800187c:	4691      	mov	r9, r2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	e675      	b.n	800156e <__aeabi_ddiv+0x4a>
 8001882:	2304      	movs	r3, #4
 8001884:	4699      	mov	r9, r3
 8001886:	2300      	movs	r3, #0
 8001888:	469b      	mov	fp, r3
 800188a:	3301      	adds	r3, #1
 800188c:	2500      	movs	r5, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	e66d      	b.n	800156e <__aeabi_ddiv+0x4a>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	000007ff 	.word	0x000007ff
 8001898:	fffffc01 	.word	0xfffffc01
 800189c:	0800a1c0 	.word	0x0800a1c0
 80018a0:	000003ff 	.word	0x000003ff
 80018a4:	feffffff 	.word	0xfeffffff
 80018a8:	000007fe 	.word	0x000007fe
 80018ac:	000003f3 	.word	0x000003f3
 80018b0:	fffffc0d 	.word	0xfffffc0d
 80018b4:	fffff801 	.word	0xfffff801
 80018b8:	464a      	mov	r2, r9
 80018ba:	2301      	movs	r3, #1
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	2400      	movs	r4, #0
 80018c2:	2001      	movs	r0, #1
 80018c4:	e66e      	b.n	80015a4 <__aeabi_ddiv+0x80>
 80018c6:	2300      	movs	r3, #0
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	469a      	mov	sl, r3
 80018cc:	2500      	movs	r5, #0
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <__aeabi_ddiv+0x5cc>)
 80018d0:	0312      	lsls	r2, r2, #12
 80018d2:	e67e      	b.n	80015d2 <__aeabi_ddiv+0xae>
 80018d4:	2501      	movs	r5, #1
 80018d6:	426d      	negs	r5, r5
 80018d8:	2201      	movs	r2, #1
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	2a38      	cmp	r2, #56	; 0x38
 80018de:	dd00      	ble.n	80018e2 <__aeabi_ddiv+0x3be>
 80018e0:	e674      	b.n	80015cc <__aeabi_ddiv+0xa8>
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dc00      	bgt.n	80018e8 <__aeabi_ddiv+0x3c4>
 80018e6:	e0bd      	b.n	8001a64 <__aeabi_ddiv+0x540>
 80018e8:	211f      	movs	r1, #31
 80018ea:	4249      	negs	r1, r1
 80018ec:	1acb      	subs	r3, r1, r3
 80018ee:	4641      	mov	r1, r8
 80018f0:	40d9      	lsrs	r1, r3
 80018f2:	000b      	movs	r3, r1
 80018f4:	2a20      	cmp	r2, #32
 80018f6:	d004      	beq.n	8001902 <__aeabi_ddiv+0x3de>
 80018f8:	4641      	mov	r1, r8
 80018fa:	4a7e      	ldr	r2, [pc, #504]	; (8001af4 <__aeabi_ddiv+0x5d0>)
 80018fc:	445a      	add	r2, fp
 80018fe:	4091      	lsls	r1, r2
 8001900:	430d      	orrs	r5, r1
 8001902:	0029      	movs	r1, r5
 8001904:	1e4a      	subs	r2, r1, #1
 8001906:	4191      	sbcs	r1, r2
 8001908:	4319      	orrs	r1, r3
 800190a:	2307      	movs	r3, #7
 800190c:	001d      	movs	r5, r3
 800190e:	2200      	movs	r2, #0
 8001910:	400d      	ands	r5, r1
 8001912:	420b      	tst	r3, r1
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x3f4>
 8001916:	e0d0      	b.n	8001aba <__aeabi_ddiv+0x596>
 8001918:	220f      	movs	r2, #15
 800191a:	2300      	movs	r3, #0
 800191c:	400a      	ands	r2, r1
 800191e:	2a04      	cmp	r2, #4
 8001920:	d100      	bne.n	8001924 <__aeabi_ddiv+0x400>
 8001922:	e0c7      	b.n	8001ab4 <__aeabi_ddiv+0x590>
 8001924:	1d0a      	adds	r2, r1, #4
 8001926:	428a      	cmp	r2, r1
 8001928:	4189      	sbcs	r1, r1
 800192a:	4249      	negs	r1, r1
 800192c:	185b      	adds	r3, r3, r1
 800192e:	0011      	movs	r1, r2
 8001930:	021a      	lsls	r2, r3, #8
 8001932:	d400      	bmi.n	8001936 <__aeabi_ddiv+0x412>
 8001934:	e0be      	b.n	8001ab4 <__aeabi_ddiv+0x590>
 8001936:	2301      	movs	r3, #1
 8001938:	2200      	movs	r2, #0
 800193a:	2500      	movs	r5, #0
 800193c:	e649      	b.n	80015d2 <__aeabi_ddiv+0xae>
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	4643      	mov	r3, r8
 8001942:	0312      	lsls	r2, r2, #12
 8001944:	4213      	tst	r3, r2
 8001946:	d008      	beq.n	800195a <__aeabi_ddiv+0x436>
 8001948:	4214      	tst	r4, r2
 800194a:	d106      	bne.n	800195a <__aeabi_ddiv+0x436>
 800194c:	4322      	orrs	r2, r4
 800194e:	0312      	lsls	r2, r2, #12
 8001950:	46ba      	mov	sl, r7
 8001952:	000d      	movs	r5, r1
 8001954:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <__aeabi_ddiv+0x5cc>)
 8001956:	0b12      	lsrs	r2, r2, #12
 8001958:	e63b      	b.n	80015d2 <__aeabi_ddiv+0xae>
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	4643      	mov	r3, r8
 800195e:	0312      	lsls	r2, r2, #12
 8001960:	431a      	orrs	r2, r3
 8001962:	0312      	lsls	r2, r2, #12
 8001964:	46b2      	mov	sl, r6
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <__aeabi_ddiv+0x5cc>)
 8001968:	0b12      	lsrs	r2, r2, #12
 800196a:	e632      	b.n	80015d2 <__aeabi_ddiv+0xae>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x44e>
 8001970:	e702      	b.n	8001778 <__aeabi_ddiv+0x254>
 8001972:	19a6      	adds	r6, r4, r6
 8001974:	1e6a      	subs	r2, r5, #1
 8001976:	42a6      	cmp	r6, r4
 8001978:	d200      	bcs.n	800197c <__aeabi_ddiv+0x458>
 800197a:	e089      	b.n	8001a90 <__aeabi_ddiv+0x56c>
 800197c:	4286      	cmp	r6, r0
 800197e:	d200      	bcs.n	8001982 <__aeabi_ddiv+0x45e>
 8001980:	e09f      	b.n	8001ac2 <__aeabi_ddiv+0x59e>
 8001982:	d100      	bne.n	8001986 <__aeabi_ddiv+0x462>
 8001984:	e0af      	b.n	8001ae6 <__aeabi_ddiv+0x5c2>
 8001986:	0015      	movs	r5, r2
 8001988:	e6f4      	b.n	8001774 <__aeabi_ddiv+0x250>
 800198a:	42a9      	cmp	r1, r5
 800198c:	d900      	bls.n	8001990 <__aeabi_ddiv+0x46c>
 800198e:	e63c      	b.n	800160a <__aeabi_ddiv+0xe6>
 8001990:	4643      	mov	r3, r8
 8001992:	07de      	lsls	r6, r3, #31
 8001994:	0858      	lsrs	r0, r3, #1
 8001996:	086b      	lsrs	r3, r5, #1
 8001998:	431e      	orrs	r6, r3
 800199a:	07ed      	lsls	r5, r5, #31
 800199c:	e63c      	b.n	8001618 <__aeabi_ddiv+0xf4>
 800199e:	f001 f8f1 	bl	8002b84 <__clzsi2>
 80019a2:	0001      	movs	r1, r0
 80019a4:	0002      	movs	r2, r0
 80019a6:	3115      	adds	r1, #21
 80019a8:	3220      	adds	r2, #32
 80019aa:	291c      	cmp	r1, #28
 80019ac:	dc00      	bgt.n	80019b0 <__aeabi_ddiv+0x48c>
 80019ae:	e72c      	b.n	800180a <__aeabi_ddiv+0x2e6>
 80019b0:	464b      	mov	r3, r9
 80019b2:	3808      	subs	r0, #8
 80019b4:	4083      	lsls	r3, r0
 80019b6:	2500      	movs	r5, #0
 80019b8:	4698      	mov	r8, r3
 80019ba:	e732      	b.n	8001822 <__aeabi_ddiv+0x2fe>
 80019bc:	f001 f8e2 	bl	8002b84 <__clzsi2>
 80019c0:	0003      	movs	r3, r0
 80019c2:	001a      	movs	r2, r3
 80019c4:	3215      	adds	r2, #21
 80019c6:	3020      	adds	r0, #32
 80019c8:	2a1c      	cmp	r2, #28
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_ddiv+0x4aa>
 80019cc:	e6ff      	b.n	80017ce <__aeabi_ddiv+0x2aa>
 80019ce:	4654      	mov	r4, sl
 80019d0:	3b08      	subs	r3, #8
 80019d2:	2100      	movs	r1, #0
 80019d4:	409c      	lsls	r4, r3
 80019d6:	e705      	b.n	80017e4 <__aeabi_ddiv+0x2c0>
 80019d8:	1936      	adds	r6, r6, r4
 80019da:	3b01      	subs	r3, #1
 80019dc:	42b4      	cmp	r4, r6
 80019de:	d900      	bls.n	80019e2 <__aeabi_ddiv+0x4be>
 80019e0:	e6a6      	b.n	8001730 <__aeabi_ddiv+0x20c>
 80019e2:	42b2      	cmp	r2, r6
 80019e4:	d800      	bhi.n	80019e8 <__aeabi_ddiv+0x4c4>
 80019e6:	e6a3      	b.n	8001730 <__aeabi_ddiv+0x20c>
 80019e8:	1e83      	subs	r3, r0, #2
 80019ea:	1936      	adds	r6, r6, r4
 80019ec:	e6a0      	b.n	8001730 <__aeabi_ddiv+0x20c>
 80019ee:	1909      	adds	r1, r1, r4
 80019f0:	3d01      	subs	r5, #1
 80019f2:	428c      	cmp	r4, r1
 80019f4:	d900      	bls.n	80019f8 <__aeabi_ddiv+0x4d4>
 80019f6:	e68d      	b.n	8001714 <__aeabi_ddiv+0x1f0>
 80019f8:	428a      	cmp	r2, r1
 80019fa:	d800      	bhi.n	80019fe <__aeabi_ddiv+0x4da>
 80019fc:	e68a      	b.n	8001714 <__aeabi_ddiv+0x1f0>
 80019fe:	1e85      	subs	r5, r0, #2
 8001a00:	1909      	adds	r1, r1, r4
 8001a02:	e687      	b.n	8001714 <__aeabi_ddiv+0x1f0>
 8001a04:	220f      	movs	r2, #15
 8001a06:	402a      	ands	r2, r5
 8001a08:	2a04      	cmp	r2, #4
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0x4ea>
 8001a0c:	e6bc      	b.n	8001788 <__aeabi_ddiv+0x264>
 8001a0e:	1d29      	adds	r1, r5, #4
 8001a10:	42a9      	cmp	r1, r5
 8001a12:	41ad      	sbcs	r5, r5
 8001a14:	426d      	negs	r5, r5
 8001a16:	08c9      	lsrs	r1, r1, #3
 8001a18:	44a8      	add	r8, r5
 8001a1a:	e6b6      	b.n	800178a <__aeabi_ddiv+0x266>
 8001a1c:	42af      	cmp	r7, r5
 8001a1e:	d900      	bls.n	8001a22 <__aeabi_ddiv+0x4fe>
 8001a20:	e662      	b.n	80016e8 <__aeabi_ddiv+0x1c4>
 8001a22:	4281      	cmp	r1, r0
 8001a24:	d804      	bhi.n	8001a30 <__aeabi_ddiv+0x50c>
 8001a26:	d000      	beq.n	8001a2a <__aeabi_ddiv+0x506>
 8001a28:	e65e      	b.n	80016e8 <__aeabi_ddiv+0x1c4>
 8001a2a:	42ae      	cmp	r6, r5
 8001a2c:	d800      	bhi.n	8001a30 <__aeabi_ddiv+0x50c>
 8001a2e:	e65b      	b.n	80016e8 <__aeabi_ddiv+0x1c4>
 8001a30:	2302      	movs	r3, #2
 8001a32:	425b      	negs	r3, r3
 8001a34:	469c      	mov	ip, r3
 8001a36:	9b00      	ldr	r3, [sp, #0]
 8001a38:	44e0      	add	r8, ip
 8001a3a:	469c      	mov	ip, r3
 8001a3c:	4465      	add	r5, ip
 8001a3e:	429d      	cmp	r5, r3
 8001a40:	419b      	sbcs	r3, r3
 8001a42:	425b      	negs	r3, r3
 8001a44:	191b      	adds	r3, r3, r4
 8001a46:	18c0      	adds	r0, r0, r3
 8001a48:	e64f      	b.n	80016ea <__aeabi_ddiv+0x1c6>
 8001a4a:	42b2      	cmp	r2, r6
 8001a4c:	d800      	bhi.n	8001a50 <__aeabi_ddiv+0x52c>
 8001a4e:	e612      	b.n	8001676 <__aeabi_ddiv+0x152>
 8001a50:	1e83      	subs	r3, r0, #2
 8001a52:	1936      	adds	r6, r6, r4
 8001a54:	e60f      	b.n	8001676 <__aeabi_ddiv+0x152>
 8001a56:	428a      	cmp	r2, r1
 8001a58:	d800      	bhi.n	8001a5c <__aeabi_ddiv+0x538>
 8001a5a:	e5fa      	b.n	8001652 <__aeabi_ddiv+0x12e>
 8001a5c:	1e83      	subs	r3, r0, #2
 8001a5e:	4698      	mov	r8, r3
 8001a60:	1909      	adds	r1, r1, r4
 8001a62:	e5f6      	b.n	8001652 <__aeabi_ddiv+0x12e>
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <__aeabi_ddiv+0x5d4>)
 8001a66:	0028      	movs	r0, r5
 8001a68:	445b      	add	r3, fp
 8001a6a:	4641      	mov	r1, r8
 8001a6c:	409d      	lsls	r5, r3
 8001a6e:	4099      	lsls	r1, r3
 8001a70:	40d0      	lsrs	r0, r2
 8001a72:	1e6b      	subs	r3, r5, #1
 8001a74:	419d      	sbcs	r5, r3
 8001a76:	4643      	mov	r3, r8
 8001a78:	4301      	orrs	r1, r0
 8001a7a:	4329      	orrs	r1, r5
 8001a7c:	40d3      	lsrs	r3, r2
 8001a7e:	074a      	lsls	r2, r1, #29
 8001a80:	d100      	bne.n	8001a84 <__aeabi_ddiv+0x560>
 8001a82:	e755      	b.n	8001930 <__aeabi_ddiv+0x40c>
 8001a84:	220f      	movs	r2, #15
 8001a86:	400a      	ands	r2, r1
 8001a88:	2a04      	cmp	r2, #4
 8001a8a:	d000      	beq.n	8001a8e <__aeabi_ddiv+0x56a>
 8001a8c:	e74a      	b.n	8001924 <__aeabi_ddiv+0x400>
 8001a8e:	e74f      	b.n	8001930 <__aeabi_ddiv+0x40c>
 8001a90:	0015      	movs	r5, r2
 8001a92:	4286      	cmp	r6, r0
 8001a94:	d000      	beq.n	8001a98 <__aeabi_ddiv+0x574>
 8001a96:	e66d      	b.n	8001774 <__aeabi_ddiv+0x250>
 8001a98:	9a00      	ldr	r2, [sp, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_ddiv+0x57c>
 8001a9e:	e669      	b.n	8001774 <__aeabi_ddiv+0x250>
 8001aa0:	e66a      	b.n	8001778 <__aeabi_ddiv+0x254>
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <__aeabi_ddiv+0x5d8>)
 8001aa4:	445b      	add	r3, fp
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_ddiv+0x588>
 8001aaa:	e713      	b.n	80018d4 <__aeabi_ddiv+0x3b0>
 8001aac:	2501      	movs	r5, #1
 8001aae:	2100      	movs	r1, #0
 8001ab0:	44a8      	add	r8, r5
 8001ab2:	e66a      	b.n	800178a <__aeabi_ddiv+0x266>
 8001ab4:	075d      	lsls	r5, r3, #29
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	0b1a      	lsrs	r2, r3, #12
 8001aba:	08c9      	lsrs	r1, r1, #3
 8001abc:	2300      	movs	r3, #0
 8001abe:	430d      	orrs	r5, r1
 8001ac0:	e587      	b.n	80015d2 <__aeabi_ddiv+0xae>
 8001ac2:	9900      	ldr	r1, [sp, #0]
 8001ac4:	3d02      	subs	r5, #2
 8001ac6:	004a      	lsls	r2, r1, #1
 8001ac8:	428a      	cmp	r2, r1
 8001aca:	41bf      	sbcs	r7, r7
 8001acc:	427f      	negs	r7, r7
 8001ace:	193f      	adds	r7, r7, r4
 8001ad0:	19f6      	adds	r6, r6, r7
 8001ad2:	9200      	str	r2, [sp, #0]
 8001ad4:	e7dd      	b.n	8001a92 <__aeabi_ddiv+0x56e>
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	4643      	mov	r3, r8
 8001ada:	0312      	lsls	r2, r2, #12
 8001adc:	431a      	orrs	r2, r3
 8001ade:	0312      	lsls	r2, r2, #12
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <__aeabi_ddiv+0x5cc>)
 8001ae2:	0b12      	lsrs	r2, r2, #12
 8001ae4:	e575      	b.n	80015d2 <__aeabi_ddiv+0xae>
 8001ae6:	9900      	ldr	r1, [sp, #0]
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	d3ea      	bcc.n	8001ac2 <__aeabi_ddiv+0x59e>
 8001aec:	0015      	movs	r5, r2
 8001aee:	e7d3      	b.n	8001a98 <__aeabi_ddiv+0x574>
 8001af0:	000007ff 	.word	0x000007ff
 8001af4:	0000043e 	.word	0x0000043e
 8001af8:	0000041e 	.word	0x0000041e
 8001afc:	000003ff 	.word	0x000003ff

08001b00 <__eqdf2>:
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b02:	464e      	mov	r6, r9
 8001b04:	4645      	mov	r5, r8
 8001b06:	46de      	mov	lr, fp
 8001b08:	4657      	mov	r7, sl
 8001b0a:	4690      	mov	r8, r2
 8001b0c:	b5e0      	push	{r5, r6, r7, lr}
 8001b0e:	0017      	movs	r7, r2
 8001b10:	031a      	lsls	r2, r3, #12
 8001b12:	0b12      	lsrs	r2, r2, #12
 8001b14:	0005      	movs	r5, r0
 8001b16:	4684      	mov	ip, r0
 8001b18:	4819      	ldr	r0, [pc, #100]	; (8001b80 <__eqdf2+0x80>)
 8001b1a:	030e      	lsls	r6, r1, #12
 8001b1c:	004c      	lsls	r4, r1, #1
 8001b1e:	4691      	mov	r9, r2
 8001b20:	005a      	lsls	r2, r3, #1
 8001b22:	0fdb      	lsrs	r3, r3, #31
 8001b24:	469b      	mov	fp, r3
 8001b26:	0b36      	lsrs	r6, r6, #12
 8001b28:	0d64      	lsrs	r4, r4, #21
 8001b2a:	0fc9      	lsrs	r1, r1, #31
 8001b2c:	0d52      	lsrs	r2, r2, #21
 8001b2e:	4284      	cmp	r4, r0
 8001b30:	d019      	beq.n	8001b66 <__eqdf2+0x66>
 8001b32:	4282      	cmp	r2, r0
 8001b34:	d010      	beq.n	8001b58 <__eqdf2+0x58>
 8001b36:	2001      	movs	r0, #1
 8001b38:	4294      	cmp	r4, r2
 8001b3a:	d10e      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b3c:	454e      	cmp	r6, r9
 8001b3e:	d10c      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b40:	2001      	movs	r0, #1
 8001b42:	45c4      	cmp	ip, r8
 8001b44:	d109      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b46:	4559      	cmp	r1, fp
 8001b48:	d017      	beq.n	8001b7a <__eqdf2+0x7a>
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	d105      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b4e:	0030      	movs	r0, r6
 8001b50:	4328      	orrs	r0, r5
 8001b52:	1e43      	subs	r3, r0, #1
 8001b54:	4198      	sbcs	r0, r3
 8001b56:	e000      	b.n	8001b5a <__eqdf2+0x5a>
 8001b58:	2001      	movs	r0, #1
 8001b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b5c:	46bb      	mov	fp, r7
 8001b5e:	46b2      	mov	sl, r6
 8001b60:	46a9      	mov	r9, r5
 8001b62:	46a0      	mov	r8, r4
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b66:	0033      	movs	r3, r6
 8001b68:	2001      	movs	r0, #1
 8001b6a:	432b      	orrs	r3, r5
 8001b6c:	d1f5      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b6e:	42a2      	cmp	r2, r4
 8001b70:	d1f3      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b72:	464b      	mov	r3, r9
 8001b74:	433b      	orrs	r3, r7
 8001b76:	d1f0      	bne.n	8001b5a <__eqdf2+0x5a>
 8001b78:	e7e2      	b.n	8001b40 <__eqdf2+0x40>
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e7ed      	b.n	8001b5a <__eqdf2+0x5a>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	000007ff 	.word	0x000007ff

08001b84 <__gedf2>:
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	4647      	mov	r7, r8
 8001b88:	46ce      	mov	lr, r9
 8001b8a:	0004      	movs	r4, r0
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	0016      	movs	r6, r2
 8001b90:	031b      	lsls	r3, r3, #12
 8001b92:	0b1b      	lsrs	r3, r3, #12
 8001b94:	4d2d      	ldr	r5, [pc, #180]	; (8001c4c <__gedf2+0xc8>)
 8001b96:	004a      	lsls	r2, r1, #1
 8001b98:	4699      	mov	r9, r3
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	0043      	lsls	r3, r0, #1
 8001b9e:	030f      	lsls	r7, r1, #12
 8001ba0:	46a4      	mov	ip, r4
 8001ba2:	46b0      	mov	r8, r6
 8001ba4:	0b3f      	lsrs	r7, r7, #12
 8001ba6:	0d52      	lsrs	r2, r2, #21
 8001ba8:	0fc9      	lsrs	r1, r1, #31
 8001baa:	0d5b      	lsrs	r3, r3, #21
 8001bac:	0fc0      	lsrs	r0, r0, #31
 8001bae:	42aa      	cmp	r2, r5
 8001bb0:	d021      	beq.n	8001bf6 <__gedf2+0x72>
 8001bb2:	42ab      	cmp	r3, r5
 8001bb4:	d013      	beq.n	8001bde <__gedf2+0x5a>
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d122      	bne.n	8001c00 <__gedf2+0x7c>
 8001bba:	433c      	orrs	r4, r7
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <__gedf2+0x42>
 8001bc0:	464d      	mov	r5, r9
 8001bc2:	432e      	orrs	r6, r5
 8001bc4:	d022      	beq.n	8001c0c <__gedf2+0x88>
 8001bc6:	2c00      	cmp	r4, #0
 8001bc8:	d010      	beq.n	8001bec <__gedf2+0x68>
 8001bca:	4281      	cmp	r1, r0
 8001bcc:	d022      	beq.n	8001c14 <__gedf2+0x90>
 8001bce:	2002      	movs	r0, #2
 8001bd0:	3901      	subs	r1, #1
 8001bd2:	4008      	ands	r0, r1
 8001bd4:	3801      	subs	r0, #1
 8001bd6:	bcc0      	pop	{r6, r7}
 8001bd8:	46b9      	mov	r9, r7
 8001bda:	46b0      	mov	r8, r6
 8001bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bde:	464d      	mov	r5, r9
 8001be0:	432e      	orrs	r6, r5
 8001be2:	d129      	bne.n	8001c38 <__gedf2+0xb4>
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d1f0      	bne.n	8001bca <__gedf2+0x46>
 8001be8:	433c      	orrs	r4, r7
 8001bea:	d1ee      	bne.n	8001bca <__gedf2+0x46>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d1f2      	bne.n	8001bd6 <__gedf2+0x52>
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	4240      	negs	r0, r0
 8001bf4:	e7ef      	b.n	8001bd6 <__gedf2+0x52>
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	4325      	orrs	r5, r4
 8001bfa:	d11d      	bne.n	8001c38 <__gedf2+0xb4>
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d0ee      	beq.n	8001bde <__gedf2+0x5a>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e2      	bne.n	8001bca <__gedf2+0x46>
 8001c04:	464c      	mov	r4, r9
 8001c06:	4326      	orrs	r6, r4
 8001c08:	d1df      	bne.n	8001bca <__gedf2+0x46>
 8001c0a:	e7e0      	b.n	8001bce <__gedf2+0x4a>
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d0e1      	beq.n	8001bd6 <__gedf2+0x52>
 8001c12:	e7dc      	b.n	8001bce <__gedf2+0x4a>
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dc0a      	bgt.n	8001c2e <__gedf2+0xaa>
 8001c18:	dbe8      	blt.n	8001bec <__gedf2+0x68>
 8001c1a:	454f      	cmp	r7, r9
 8001c1c:	d8d7      	bhi.n	8001bce <__gedf2+0x4a>
 8001c1e:	d00e      	beq.n	8001c3e <__gedf2+0xba>
 8001c20:	2000      	movs	r0, #0
 8001c22:	454f      	cmp	r7, r9
 8001c24:	d2d7      	bcs.n	8001bd6 <__gedf2+0x52>
 8001c26:	2900      	cmp	r1, #0
 8001c28:	d0e2      	beq.n	8001bf0 <__gedf2+0x6c>
 8001c2a:	0008      	movs	r0, r1
 8001c2c:	e7d3      	b.n	8001bd6 <__gedf2+0x52>
 8001c2e:	4243      	negs	r3, r0
 8001c30:	4158      	adcs	r0, r3
 8001c32:	0040      	lsls	r0, r0, #1
 8001c34:	3801      	subs	r0, #1
 8001c36:	e7ce      	b.n	8001bd6 <__gedf2+0x52>
 8001c38:	2002      	movs	r0, #2
 8001c3a:	4240      	negs	r0, r0
 8001c3c:	e7cb      	b.n	8001bd6 <__gedf2+0x52>
 8001c3e:	45c4      	cmp	ip, r8
 8001c40:	d8c5      	bhi.n	8001bce <__gedf2+0x4a>
 8001c42:	2000      	movs	r0, #0
 8001c44:	45c4      	cmp	ip, r8
 8001c46:	d2c6      	bcs.n	8001bd6 <__gedf2+0x52>
 8001c48:	e7ed      	b.n	8001c26 <__gedf2+0xa2>
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	000007ff 	.word	0x000007ff

08001c50 <__ledf2>:
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	4647      	mov	r7, r8
 8001c54:	46ce      	mov	lr, r9
 8001c56:	0004      	movs	r4, r0
 8001c58:	0018      	movs	r0, r3
 8001c5a:	0016      	movs	r6, r2
 8001c5c:	031b      	lsls	r3, r3, #12
 8001c5e:	0b1b      	lsrs	r3, r3, #12
 8001c60:	4d2c      	ldr	r5, [pc, #176]	; (8001d14 <__ledf2+0xc4>)
 8001c62:	004a      	lsls	r2, r1, #1
 8001c64:	4699      	mov	r9, r3
 8001c66:	b580      	push	{r7, lr}
 8001c68:	0043      	lsls	r3, r0, #1
 8001c6a:	030f      	lsls	r7, r1, #12
 8001c6c:	46a4      	mov	ip, r4
 8001c6e:	46b0      	mov	r8, r6
 8001c70:	0b3f      	lsrs	r7, r7, #12
 8001c72:	0d52      	lsrs	r2, r2, #21
 8001c74:	0fc9      	lsrs	r1, r1, #31
 8001c76:	0d5b      	lsrs	r3, r3, #21
 8001c78:	0fc0      	lsrs	r0, r0, #31
 8001c7a:	42aa      	cmp	r2, r5
 8001c7c:	d00d      	beq.n	8001c9a <__ledf2+0x4a>
 8001c7e:	42ab      	cmp	r3, r5
 8001c80:	d010      	beq.n	8001ca4 <__ledf2+0x54>
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d127      	bne.n	8001cd6 <__ledf2+0x86>
 8001c86:	433c      	orrs	r4, r7
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <__ledf2+0x60>
 8001c8c:	464d      	mov	r5, r9
 8001c8e:	432e      	orrs	r6, r5
 8001c90:	d10e      	bne.n	8001cb0 <__ledf2+0x60>
 8001c92:	2000      	movs	r0, #0
 8001c94:	2c00      	cmp	r4, #0
 8001c96:	d015      	beq.n	8001cc4 <__ledf2+0x74>
 8001c98:	e00e      	b.n	8001cb8 <__ledf2+0x68>
 8001c9a:	003d      	movs	r5, r7
 8001c9c:	4325      	orrs	r5, r4
 8001c9e:	d110      	bne.n	8001cc2 <__ledf2+0x72>
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d118      	bne.n	8001cd6 <__ledf2+0x86>
 8001ca4:	464d      	mov	r5, r9
 8001ca6:	432e      	orrs	r6, r5
 8001ca8:	d10b      	bne.n	8001cc2 <__ledf2+0x72>
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d102      	bne.n	8001cb4 <__ledf2+0x64>
 8001cae:	433c      	orrs	r4, r7
 8001cb0:	2c00      	cmp	r4, #0
 8001cb2:	d00b      	beq.n	8001ccc <__ledf2+0x7c>
 8001cb4:	4281      	cmp	r1, r0
 8001cb6:	d014      	beq.n	8001ce2 <__ledf2+0x92>
 8001cb8:	2002      	movs	r0, #2
 8001cba:	3901      	subs	r1, #1
 8001cbc:	4008      	ands	r0, r1
 8001cbe:	3801      	subs	r0, #1
 8001cc0:	e000      	b.n	8001cc4 <__ledf2+0x74>
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	bcc0      	pop	{r6, r7}
 8001cc6:	46b9      	mov	r9, r7
 8001cc8:	46b0      	mov	r8, r6
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d1f9      	bne.n	8001cc4 <__ledf2+0x74>
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	4240      	negs	r0, r0
 8001cd4:	e7f6      	b.n	8001cc4 <__ledf2+0x74>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ec      	bne.n	8001cb4 <__ledf2+0x64>
 8001cda:	464c      	mov	r4, r9
 8001cdc:	4326      	orrs	r6, r4
 8001cde:	d1e9      	bne.n	8001cb4 <__ledf2+0x64>
 8001ce0:	e7ea      	b.n	8001cb8 <__ledf2+0x68>
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dd04      	ble.n	8001cf0 <__ledf2+0xa0>
 8001ce6:	4243      	negs	r3, r0
 8001ce8:	4158      	adcs	r0, r3
 8001cea:	0040      	lsls	r0, r0, #1
 8001cec:	3801      	subs	r0, #1
 8001cee:	e7e9      	b.n	8001cc4 <__ledf2+0x74>
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbeb      	blt.n	8001ccc <__ledf2+0x7c>
 8001cf4:	454f      	cmp	r7, r9
 8001cf6:	d8df      	bhi.n	8001cb8 <__ledf2+0x68>
 8001cf8:	d006      	beq.n	8001d08 <__ledf2+0xb8>
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	454f      	cmp	r7, r9
 8001cfe:	d2e1      	bcs.n	8001cc4 <__ledf2+0x74>
 8001d00:	2900      	cmp	r1, #0
 8001d02:	d0e5      	beq.n	8001cd0 <__ledf2+0x80>
 8001d04:	0008      	movs	r0, r1
 8001d06:	e7dd      	b.n	8001cc4 <__ledf2+0x74>
 8001d08:	45c4      	cmp	ip, r8
 8001d0a:	d8d5      	bhi.n	8001cb8 <__ledf2+0x68>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	45c4      	cmp	ip, r8
 8001d10:	d2d8      	bcs.n	8001cc4 <__ledf2+0x74>
 8001d12:	e7f5      	b.n	8001d00 <__ledf2+0xb0>
 8001d14:	000007ff 	.word	0x000007ff

08001d18 <__aeabi_dmul>:
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	4645      	mov	r5, r8
 8001d1c:	46de      	mov	lr, fp
 8001d1e:	4657      	mov	r7, sl
 8001d20:	464e      	mov	r6, r9
 8001d22:	b5e0      	push	{r5, r6, r7, lr}
 8001d24:	001f      	movs	r7, r3
 8001d26:	030b      	lsls	r3, r1, #12
 8001d28:	0b1b      	lsrs	r3, r3, #12
 8001d2a:	469b      	mov	fp, r3
 8001d2c:	004d      	lsls	r5, r1, #1
 8001d2e:	0fcb      	lsrs	r3, r1, #31
 8001d30:	0004      	movs	r4, r0
 8001d32:	4691      	mov	r9, r2
 8001d34:	4698      	mov	r8, r3
 8001d36:	b087      	sub	sp, #28
 8001d38:	0d6d      	lsrs	r5, r5, #21
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dmul+0x26>
 8001d3c:	e1cd      	b.n	80020da <__aeabi_dmul+0x3c2>
 8001d3e:	4bce      	ldr	r3, [pc, #824]	; (8002078 <__aeabi_dmul+0x360>)
 8001d40:	429d      	cmp	r5, r3
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dmul+0x2e>
 8001d44:	e1e9      	b.n	800211a <__aeabi_dmul+0x402>
 8001d46:	465a      	mov	r2, fp
 8001d48:	0f43      	lsrs	r3, r0, #29
 8001d4a:	00d2      	lsls	r2, r2, #3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0412      	lsls	r2, r2, #16
 8001d52:	431a      	orrs	r2, r3
 8001d54:	00c3      	lsls	r3, r0, #3
 8001d56:	469a      	mov	sl, r3
 8001d58:	4bc8      	ldr	r3, [pc, #800]	; (800207c <__aeabi_dmul+0x364>)
 8001d5a:	4693      	mov	fp, r2
 8001d5c:	469c      	mov	ip, r3
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2600      	movs	r6, #0
 8001d62:	4465      	add	r5, ip
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	033c      	lsls	r4, r7, #12
 8001d68:	007b      	lsls	r3, r7, #1
 8001d6a:	4648      	mov	r0, r9
 8001d6c:	0b24      	lsrs	r4, r4, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	0fff      	lsrs	r7, r7, #31
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dmul+0x60>
 8001d76:	e189      	b.n	800208c <__aeabi_dmul+0x374>
 8001d78:	4abf      	ldr	r2, [pc, #764]	; (8002078 <__aeabi_dmul+0x360>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <__aeabi_dmul+0x9a>
 8001d7e:	0f42      	lsrs	r2, r0, #29
 8001d80:	00e4      	lsls	r4, r4, #3
 8001d82:	4322      	orrs	r2, r4
 8001d84:	2480      	movs	r4, #128	; 0x80
 8001d86:	0424      	lsls	r4, r4, #16
 8001d88:	4314      	orrs	r4, r2
 8001d8a:	4abc      	ldr	r2, [pc, #752]	; (800207c <__aeabi_dmul+0x364>)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4694      	mov	ip, r2
 8001d90:	4642      	mov	r2, r8
 8001d92:	4463      	add	r3, ip
 8001d94:	195b      	adds	r3, r3, r5
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	9b01      	ldr	r3, [sp, #4]
 8001d9a:	407a      	eors	r2, r7
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	00c0      	lsls	r0, r0, #3
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	2e0a      	cmp	r6, #10
 8001da6:	dd1c      	ble.n	8001de2 <__aeabi_dmul+0xca>
 8001da8:	003a      	movs	r2, r7
 8001daa:	2e0b      	cmp	r6, #11
 8001dac:	d05e      	beq.n	8001e6c <__aeabi_dmul+0x154>
 8001dae:	4647      	mov	r7, r8
 8001db0:	e056      	b.n	8001e60 <__aeabi_dmul+0x148>
 8001db2:	4649      	mov	r1, r9
 8001db4:	4bb0      	ldr	r3, [pc, #704]	; (8002078 <__aeabi_dmul+0x360>)
 8001db6:	4321      	orrs	r1, r4
 8001db8:	18eb      	adds	r3, r5, r3
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2900      	cmp	r1, #0
 8001dbe:	d12a      	bne.n	8001e16 <__aeabi_dmul+0xfe>
 8001dc0:	2080      	movs	r0, #128	; 0x80
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	0100      	lsls	r0, r0, #4
 8001dc6:	002b      	movs	r3, r5
 8001dc8:	4684      	mov	ip, r0
 8001dca:	4316      	orrs	r6, r2
 8001dcc:	4642      	mov	r2, r8
 8001dce:	4463      	add	r3, ip
 8001dd0:	407a      	eors	r2, r7
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2e0a      	cmp	r6, #10
 8001dd8:	dd00      	ble.n	8001ddc <__aeabi_dmul+0xc4>
 8001dda:	e231      	b.n	8002240 <__aeabi_dmul+0x528>
 8001ddc:	2000      	movs	r0, #0
 8001dde:	2400      	movs	r4, #0
 8001de0:	2102      	movs	r1, #2
 8001de2:	2e02      	cmp	r6, #2
 8001de4:	dc26      	bgt.n	8001e34 <__aeabi_dmul+0x11c>
 8001de6:	3e01      	subs	r6, #1
 8001de8:	2e01      	cmp	r6, #1
 8001dea:	d852      	bhi.n	8001e92 <__aeabi_dmul+0x17a>
 8001dec:	2902      	cmp	r1, #2
 8001dee:	d04c      	beq.n	8001e8a <__aeabi_dmul+0x172>
 8001df0:	2901      	cmp	r1, #1
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dmul+0xde>
 8001df4:	e118      	b.n	8002028 <__aeabi_dmul+0x310>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2400      	movs	r4, #0
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	4323      	orrs	r3, r4
 8001e00:	07d2      	lsls	r2, r2, #31
 8001e02:	4313      	orrs	r3, r2
 8001e04:	0028      	movs	r0, r5
 8001e06:	0019      	movs	r1, r3
 8001e08:	b007      	add	sp, #28
 8001e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0c:	46bb      	mov	fp, r7
 8001e0e:	46b2      	mov	sl, r6
 8001e10:	46a9      	mov	r9, r5
 8001e12:	46a0      	mov	r8, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	2203      	movs	r2, #3
 8001e1a:	0109      	lsls	r1, r1, #4
 8001e1c:	002b      	movs	r3, r5
 8001e1e:	468c      	mov	ip, r1
 8001e20:	4316      	orrs	r6, r2
 8001e22:	4642      	mov	r2, r8
 8001e24:	4463      	add	r3, ip
 8001e26:	407a      	eors	r2, r7
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	2e0a      	cmp	r6, #10
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dmul+0x11a>
 8001e30:	e228      	b.n	8002284 <__aeabi_dmul+0x56c>
 8001e32:	2103      	movs	r1, #3
 8001e34:	2501      	movs	r5, #1
 8001e36:	40b5      	lsls	r5, r6
 8001e38:	46ac      	mov	ip, r5
 8001e3a:	26a6      	movs	r6, #166	; 0xa6
 8001e3c:	4663      	mov	r3, ip
 8001e3e:	00f6      	lsls	r6, r6, #3
 8001e40:	4035      	ands	r5, r6
 8001e42:	4233      	tst	r3, r6
 8001e44:	d10b      	bne.n	8001e5e <__aeabi_dmul+0x146>
 8001e46:	2690      	movs	r6, #144	; 0x90
 8001e48:	00b6      	lsls	r6, r6, #2
 8001e4a:	4233      	tst	r3, r6
 8001e4c:	d118      	bne.n	8001e80 <__aeabi_dmul+0x168>
 8001e4e:	3eb9      	subs	r6, #185	; 0xb9
 8001e50:	3eff      	subs	r6, #255	; 0xff
 8001e52:	421e      	tst	r6, r3
 8001e54:	d01d      	beq.n	8001e92 <__aeabi_dmul+0x17a>
 8001e56:	46a3      	mov	fp, r4
 8001e58:	4682      	mov	sl, r0
 8001e5a:	9100      	str	r1, [sp, #0]
 8001e5c:	e000      	b.n	8001e60 <__aeabi_dmul+0x148>
 8001e5e:	0017      	movs	r7, r2
 8001e60:	9900      	ldr	r1, [sp, #0]
 8001e62:	003a      	movs	r2, r7
 8001e64:	2902      	cmp	r1, #2
 8001e66:	d010      	beq.n	8001e8a <__aeabi_dmul+0x172>
 8001e68:	465c      	mov	r4, fp
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	2903      	cmp	r1, #3
 8001e6e:	d1bf      	bne.n	8001df0 <__aeabi_dmul+0xd8>
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	431c      	orrs	r4, r3
 8001e76:	0324      	lsls	r4, r4, #12
 8001e78:	0005      	movs	r5, r0
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	; (8002078 <__aeabi_dmul+0x360>)
 8001e7c:	0b24      	lsrs	r4, r4, #12
 8001e7e:	e7bd      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8001e80:	2480      	movs	r4, #128	; 0x80
 8001e82:	2200      	movs	r2, #0
 8001e84:	4b7c      	ldr	r3, [pc, #496]	; (8002078 <__aeabi_dmul+0x360>)
 8001e86:	0324      	lsls	r4, r4, #12
 8001e88:	e7b8      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8001e8a:	2400      	movs	r4, #0
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <__aeabi_dmul+0x360>)
 8001e90:	e7b4      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8001e92:	4653      	mov	r3, sl
 8001e94:	041e      	lsls	r6, r3, #16
 8001e96:	0c36      	lsrs	r6, r6, #16
 8001e98:	0c1f      	lsrs	r7, r3, #16
 8001e9a:	0033      	movs	r3, r6
 8001e9c:	0c01      	lsrs	r1, r0, #16
 8001e9e:	0400      	lsls	r0, r0, #16
 8001ea0:	0c00      	lsrs	r0, r0, #16
 8001ea2:	4343      	muls	r3, r0
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	437b      	muls	r3, r7
 8001eaa:	4699      	mov	r9, r3
 8001eac:	0033      	movs	r3, r6
 8001eae:	434b      	muls	r3, r1
 8001eb0:	469c      	mov	ip, r3
 8001eb2:	4643      	mov	r3, r8
 8001eb4:	000d      	movs	r5, r1
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	469a      	mov	sl, r3
 8001eba:	437d      	muls	r5, r7
 8001ebc:	44cc      	add	ip, r9
 8001ebe:	44d4      	add	ip, sl
 8001ec0:	9500      	str	r5, [sp, #0]
 8001ec2:	45e1      	cmp	r9, ip
 8001ec4:	d904      	bls.n	8001ed0 <__aeabi_dmul+0x1b8>
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	4699      	mov	r9, r3
 8001ecc:	444d      	add	r5, r9
 8001ece:	9500      	str	r5, [sp, #0]
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	0c1b      	lsrs	r3, r3, #16
 8001ed4:	001d      	movs	r5, r3
 8001ed6:	4663      	mov	r3, ip
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	469c      	mov	ip, r3
 8001edc:	4643      	mov	r3, r8
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	4443      	add	r3, r8
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	0c23      	lsrs	r3, r4, #16
 8001eec:	4698      	mov	r8, r3
 8001eee:	0033      	movs	r3, r6
 8001ef0:	0424      	lsls	r4, r4, #16
 8001ef2:	0c24      	lsrs	r4, r4, #16
 8001ef4:	4363      	muls	r3, r4
 8001ef6:	469c      	mov	ip, r3
 8001ef8:	0023      	movs	r3, r4
 8001efa:	437b      	muls	r3, r7
 8001efc:	4699      	mov	r9, r3
 8001efe:	4643      	mov	r3, r8
 8001f00:	435e      	muls	r6, r3
 8001f02:	435f      	muls	r7, r3
 8001f04:	444e      	add	r6, r9
 8001f06:	4663      	mov	r3, ip
 8001f08:	46b2      	mov	sl, r6
 8001f0a:	0c1e      	lsrs	r6, r3, #16
 8001f0c:	4456      	add	r6, sl
 8001f0e:	45b1      	cmp	r9, r6
 8001f10:	d903      	bls.n	8001f1a <__aeabi_dmul+0x202>
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	025b      	lsls	r3, r3, #9
 8001f16:	4699      	mov	r9, r3
 8001f18:	444f      	add	r7, r9
 8001f1a:	0c33      	lsrs	r3, r6, #16
 8001f1c:	4699      	mov	r9, r3
 8001f1e:	003b      	movs	r3, r7
 8001f20:	444b      	add	r3, r9
 8001f22:	9305      	str	r3, [sp, #20]
 8001f24:	4663      	mov	r3, ip
 8001f26:	46ac      	mov	ip, r5
 8001f28:	041f      	lsls	r7, r3, #16
 8001f2a:	0c3f      	lsrs	r7, r7, #16
 8001f2c:	0436      	lsls	r6, r6, #16
 8001f2e:	19f6      	adds	r6, r6, r7
 8001f30:	44b4      	add	ip, r6
 8001f32:	4663      	mov	r3, ip
 8001f34:	9304      	str	r3, [sp, #16]
 8001f36:	465b      	mov	r3, fp
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	469c      	mov	ip, r3
 8001f3c:	465b      	mov	r3, fp
 8001f3e:	041f      	lsls	r7, r3, #16
 8001f40:	0c3f      	lsrs	r7, r7, #16
 8001f42:	003b      	movs	r3, r7
 8001f44:	4343      	muls	r3, r0
 8001f46:	4699      	mov	r9, r3
 8001f48:	4663      	mov	r3, ip
 8001f4a:	4343      	muls	r3, r0
 8001f4c:	469a      	mov	sl, r3
 8001f4e:	464b      	mov	r3, r9
 8001f50:	4660      	mov	r0, ip
 8001f52:	0c1b      	lsrs	r3, r3, #16
 8001f54:	469b      	mov	fp, r3
 8001f56:	4348      	muls	r0, r1
 8001f58:	4379      	muls	r1, r7
 8001f5a:	4451      	add	r1, sl
 8001f5c:	4459      	add	r1, fp
 8001f5e:	458a      	cmp	sl, r1
 8001f60:	d903      	bls.n	8001f6a <__aeabi_dmul+0x252>
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	469a      	mov	sl, r3
 8001f68:	4450      	add	r0, sl
 8001f6a:	0c0b      	lsrs	r3, r1, #16
 8001f6c:	469a      	mov	sl, r3
 8001f6e:	464b      	mov	r3, r9
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	0c1b      	lsrs	r3, r3, #16
 8001f74:	4699      	mov	r9, r3
 8001f76:	003b      	movs	r3, r7
 8001f78:	4363      	muls	r3, r4
 8001f7a:	0409      	lsls	r1, r1, #16
 8001f7c:	4645      	mov	r5, r8
 8001f7e:	4449      	add	r1, r9
 8001f80:	4699      	mov	r9, r3
 8001f82:	4663      	mov	r3, ip
 8001f84:	435c      	muls	r4, r3
 8001f86:	436b      	muls	r3, r5
 8001f88:	469c      	mov	ip, r3
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	4698      	mov	r8, r3
 8001f90:	436f      	muls	r7, r5
 8001f92:	193f      	adds	r7, r7, r4
 8001f94:	4447      	add	r7, r8
 8001f96:	4450      	add	r0, sl
 8001f98:	42bc      	cmp	r4, r7
 8001f9a:	d903      	bls.n	8001fa4 <__aeabi_dmul+0x28c>
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	44c4      	add	ip, r8
 8001fa4:	9b04      	ldr	r3, [sp, #16]
 8001fa6:	9d00      	ldr	r5, [sp, #0]
 8001fa8:	4698      	mov	r8, r3
 8001faa:	4445      	add	r5, r8
 8001fac:	42b5      	cmp	r5, r6
 8001fae:	41b6      	sbcs	r6, r6
 8001fb0:	4273      	negs	r3, r6
 8001fb2:	4698      	mov	r8, r3
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	041e      	lsls	r6, r3, #16
 8001fb8:	9b05      	ldr	r3, [sp, #20]
 8001fba:	043c      	lsls	r4, r7, #16
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	0c36      	lsrs	r6, r6, #16
 8001fc0:	19a4      	adds	r4, r4, r6
 8001fc2:	444c      	add	r4, r9
 8001fc4:	46a1      	mov	r9, r4
 8001fc6:	4683      	mov	fp, r0
 8001fc8:	186e      	adds	r6, r5, r1
 8001fca:	44c1      	add	r9, r8
 8001fcc:	428e      	cmp	r6, r1
 8001fce:	4189      	sbcs	r1, r1
 8001fd0:	44cb      	add	fp, r9
 8001fd2:	465d      	mov	r5, fp
 8001fd4:	4249      	negs	r1, r1
 8001fd6:	186d      	adds	r5, r5, r1
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	41a4      	sbcs	r4, r4
 8001fdc:	45c1      	cmp	r9, r8
 8001fde:	419b      	sbcs	r3, r3
 8001fe0:	4583      	cmp	fp, r0
 8001fe2:	4180      	sbcs	r0, r0
 8001fe4:	428d      	cmp	r5, r1
 8001fe6:	4189      	sbcs	r1, r1
 8001fe8:	425b      	negs	r3, r3
 8001fea:	4264      	negs	r4, r4
 8001fec:	431c      	orrs	r4, r3
 8001fee:	4240      	negs	r0, r0
 8001ff0:	9b03      	ldr	r3, [sp, #12]
 8001ff2:	4249      	negs	r1, r1
 8001ff4:	4301      	orrs	r1, r0
 8001ff6:	0270      	lsls	r0, r6, #9
 8001ff8:	0c3f      	lsrs	r7, r7, #16
 8001ffa:	4318      	orrs	r0, r3
 8001ffc:	19e4      	adds	r4, r4, r7
 8001ffe:	1e47      	subs	r7, r0, #1
 8002000:	41b8      	sbcs	r0, r7
 8002002:	1864      	adds	r4, r4, r1
 8002004:	4464      	add	r4, ip
 8002006:	0df6      	lsrs	r6, r6, #23
 8002008:	0261      	lsls	r1, r4, #9
 800200a:	4330      	orrs	r0, r6
 800200c:	0dec      	lsrs	r4, r5, #23
 800200e:	026e      	lsls	r6, r5, #9
 8002010:	430c      	orrs	r4, r1
 8002012:	4330      	orrs	r0, r6
 8002014:	01c9      	lsls	r1, r1, #7
 8002016:	d400      	bmi.n	800201a <__aeabi_dmul+0x302>
 8002018:	e0f1      	b.n	80021fe <__aeabi_dmul+0x4e6>
 800201a:	2101      	movs	r1, #1
 800201c:	0843      	lsrs	r3, r0, #1
 800201e:	4001      	ands	r1, r0
 8002020:	430b      	orrs	r3, r1
 8002022:	07e0      	lsls	r0, r4, #31
 8002024:	4318      	orrs	r0, r3
 8002026:	0864      	lsrs	r4, r4, #1
 8002028:	4915      	ldr	r1, [pc, #84]	; (8002080 <__aeabi_dmul+0x368>)
 800202a:	9b02      	ldr	r3, [sp, #8]
 800202c:	468c      	mov	ip, r1
 800202e:	4463      	add	r3, ip
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_dmul+0x31e>
 8002034:	e097      	b.n	8002166 <__aeabi_dmul+0x44e>
 8002036:	0741      	lsls	r1, r0, #29
 8002038:	d009      	beq.n	800204e <__aeabi_dmul+0x336>
 800203a:	210f      	movs	r1, #15
 800203c:	4001      	ands	r1, r0
 800203e:	2904      	cmp	r1, #4
 8002040:	d005      	beq.n	800204e <__aeabi_dmul+0x336>
 8002042:	1d01      	adds	r1, r0, #4
 8002044:	4281      	cmp	r1, r0
 8002046:	4180      	sbcs	r0, r0
 8002048:	4240      	negs	r0, r0
 800204a:	1824      	adds	r4, r4, r0
 800204c:	0008      	movs	r0, r1
 800204e:	01e1      	lsls	r1, r4, #7
 8002050:	d506      	bpl.n	8002060 <__aeabi_dmul+0x348>
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	00c9      	lsls	r1, r1, #3
 8002056:	468c      	mov	ip, r1
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <__aeabi_dmul+0x36c>)
 800205a:	401c      	ands	r4, r3
 800205c:	9b02      	ldr	r3, [sp, #8]
 800205e:	4463      	add	r3, ip
 8002060:	4909      	ldr	r1, [pc, #36]	; (8002088 <__aeabi_dmul+0x370>)
 8002062:	428b      	cmp	r3, r1
 8002064:	dd00      	ble.n	8002068 <__aeabi_dmul+0x350>
 8002066:	e710      	b.n	8001e8a <__aeabi_dmul+0x172>
 8002068:	0761      	lsls	r1, r4, #29
 800206a:	08c5      	lsrs	r5, r0, #3
 800206c:	0264      	lsls	r4, r4, #9
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	430d      	orrs	r5, r1
 8002072:	0b24      	lsrs	r4, r4, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e6c1      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8002078:	000007ff 	.word	0x000007ff
 800207c:	fffffc01 	.word	0xfffffc01
 8002080:	000003ff 	.word	0x000003ff
 8002084:	feffffff 	.word	0xfeffffff
 8002088:	000007fe 	.word	0x000007fe
 800208c:	464b      	mov	r3, r9
 800208e:	4323      	orrs	r3, r4
 8002090:	d059      	beq.n	8002146 <__aeabi_dmul+0x42e>
 8002092:	2c00      	cmp	r4, #0
 8002094:	d100      	bne.n	8002098 <__aeabi_dmul+0x380>
 8002096:	e0a3      	b.n	80021e0 <__aeabi_dmul+0x4c8>
 8002098:	0020      	movs	r0, r4
 800209a:	f000 fd73 	bl	8002b84 <__clzsi2>
 800209e:	0001      	movs	r1, r0
 80020a0:	0003      	movs	r3, r0
 80020a2:	390b      	subs	r1, #11
 80020a4:	221d      	movs	r2, #29
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	4649      	mov	r1, r9
 80020aa:	0018      	movs	r0, r3
 80020ac:	40d1      	lsrs	r1, r2
 80020ae:	464a      	mov	r2, r9
 80020b0:	3808      	subs	r0, #8
 80020b2:	4082      	lsls	r2, r0
 80020b4:	4084      	lsls	r4, r0
 80020b6:	0010      	movs	r0, r2
 80020b8:	430c      	orrs	r4, r1
 80020ba:	4a74      	ldr	r2, [pc, #464]	; (800228c <__aeabi_dmul+0x574>)
 80020bc:	1aeb      	subs	r3, r5, r3
 80020be:	4694      	mov	ip, r2
 80020c0:	4642      	mov	r2, r8
 80020c2:	4463      	add	r3, ip
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	9b01      	ldr	r3, [sp, #4]
 80020c8:	407a      	eors	r2, r7
 80020ca:	3301      	adds	r3, #1
 80020cc:	2100      	movs	r1, #0
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2e0a      	cmp	r6, #10
 80020d4:	dd00      	ble.n	80020d8 <__aeabi_dmul+0x3c0>
 80020d6:	e667      	b.n	8001da8 <__aeabi_dmul+0x90>
 80020d8:	e683      	b.n	8001de2 <__aeabi_dmul+0xca>
 80020da:	465b      	mov	r3, fp
 80020dc:	4303      	orrs	r3, r0
 80020de:	469a      	mov	sl, r3
 80020e0:	d02a      	beq.n	8002138 <__aeabi_dmul+0x420>
 80020e2:	465b      	mov	r3, fp
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d06d      	beq.n	80021c4 <__aeabi_dmul+0x4ac>
 80020e8:	4658      	mov	r0, fp
 80020ea:	f000 fd4b 	bl	8002b84 <__clzsi2>
 80020ee:	0001      	movs	r1, r0
 80020f0:	0003      	movs	r3, r0
 80020f2:	390b      	subs	r1, #11
 80020f4:	221d      	movs	r2, #29
 80020f6:	1a52      	subs	r2, r2, r1
 80020f8:	0021      	movs	r1, r4
 80020fa:	0018      	movs	r0, r3
 80020fc:	465d      	mov	r5, fp
 80020fe:	40d1      	lsrs	r1, r2
 8002100:	3808      	subs	r0, #8
 8002102:	4085      	lsls	r5, r0
 8002104:	000a      	movs	r2, r1
 8002106:	4084      	lsls	r4, r0
 8002108:	432a      	orrs	r2, r5
 800210a:	4693      	mov	fp, r2
 800210c:	46a2      	mov	sl, r4
 800210e:	4d5f      	ldr	r5, [pc, #380]	; (800228c <__aeabi_dmul+0x574>)
 8002110:	2600      	movs	r6, #0
 8002112:	1aed      	subs	r5, r5, r3
 8002114:	2300      	movs	r3, #0
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	e625      	b.n	8001d66 <__aeabi_dmul+0x4e>
 800211a:	465b      	mov	r3, fp
 800211c:	4303      	orrs	r3, r0
 800211e:	469a      	mov	sl, r3
 8002120:	d105      	bne.n	800212e <__aeabi_dmul+0x416>
 8002122:	2300      	movs	r3, #0
 8002124:	469b      	mov	fp, r3
 8002126:	3302      	adds	r3, #2
 8002128:	2608      	movs	r6, #8
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	e61b      	b.n	8001d66 <__aeabi_dmul+0x4e>
 800212e:	2303      	movs	r3, #3
 8002130:	4682      	mov	sl, r0
 8002132:	260c      	movs	r6, #12
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	e616      	b.n	8001d66 <__aeabi_dmul+0x4e>
 8002138:	2300      	movs	r3, #0
 800213a:	469b      	mov	fp, r3
 800213c:	3301      	adds	r3, #1
 800213e:	2604      	movs	r6, #4
 8002140:	2500      	movs	r5, #0
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	e60f      	b.n	8001d66 <__aeabi_dmul+0x4e>
 8002146:	4642      	mov	r2, r8
 8002148:	3301      	adds	r3, #1
 800214a:	9501      	str	r5, [sp, #4]
 800214c:	431e      	orrs	r6, r3
 800214e:	9b01      	ldr	r3, [sp, #4]
 8002150:	407a      	eors	r2, r7
 8002152:	3301      	adds	r3, #1
 8002154:	2400      	movs	r4, #0
 8002156:	2000      	movs	r0, #0
 8002158:	2101      	movs	r1, #1
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2e0a      	cmp	r6, #10
 8002160:	dd00      	ble.n	8002164 <__aeabi_dmul+0x44c>
 8002162:	e621      	b.n	8001da8 <__aeabi_dmul+0x90>
 8002164:	e63d      	b.n	8001de2 <__aeabi_dmul+0xca>
 8002166:	2101      	movs	r1, #1
 8002168:	1ac9      	subs	r1, r1, r3
 800216a:	2938      	cmp	r1, #56	; 0x38
 800216c:	dd00      	ble.n	8002170 <__aeabi_dmul+0x458>
 800216e:	e642      	b.n	8001df6 <__aeabi_dmul+0xde>
 8002170:	291f      	cmp	r1, #31
 8002172:	dd47      	ble.n	8002204 <__aeabi_dmul+0x4ec>
 8002174:	261f      	movs	r6, #31
 8002176:	0025      	movs	r5, r4
 8002178:	4276      	negs	r6, r6
 800217a:	1af3      	subs	r3, r6, r3
 800217c:	40dd      	lsrs	r5, r3
 800217e:	002b      	movs	r3, r5
 8002180:	2920      	cmp	r1, #32
 8002182:	d005      	beq.n	8002190 <__aeabi_dmul+0x478>
 8002184:	4942      	ldr	r1, [pc, #264]	; (8002290 <__aeabi_dmul+0x578>)
 8002186:	9d02      	ldr	r5, [sp, #8]
 8002188:	468c      	mov	ip, r1
 800218a:	4465      	add	r5, ip
 800218c:	40ac      	lsls	r4, r5
 800218e:	4320      	orrs	r0, r4
 8002190:	1e41      	subs	r1, r0, #1
 8002192:	4188      	sbcs	r0, r1
 8002194:	4318      	orrs	r0, r3
 8002196:	2307      	movs	r3, #7
 8002198:	001d      	movs	r5, r3
 800219a:	2400      	movs	r4, #0
 800219c:	4005      	ands	r5, r0
 800219e:	4203      	tst	r3, r0
 80021a0:	d04a      	beq.n	8002238 <__aeabi_dmul+0x520>
 80021a2:	230f      	movs	r3, #15
 80021a4:	2400      	movs	r4, #0
 80021a6:	4003      	ands	r3, r0
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d042      	beq.n	8002232 <__aeabi_dmul+0x51a>
 80021ac:	1d03      	adds	r3, r0, #4
 80021ae:	4283      	cmp	r3, r0
 80021b0:	4180      	sbcs	r0, r0
 80021b2:	4240      	negs	r0, r0
 80021b4:	1824      	adds	r4, r4, r0
 80021b6:	0018      	movs	r0, r3
 80021b8:	0223      	lsls	r3, r4, #8
 80021ba:	d53a      	bpl.n	8002232 <__aeabi_dmul+0x51a>
 80021bc:	2301      	movs	r3, #1
 80021be:	2400      	movs	r4, #0
 80021c0:	2500      	movs	r5, #0
 80021c2:	e61b      	b.n	8001dfc <__aeabi_dmul+0xe4>
 80021c4:	f000 fcde 	bl	8002b84 <__clzsi2>
 80021c8:	0001      	movs	r1, r0
 80021ca:	0003      	movs	r3, r0
 80021cc:	3115      	adds	r1, #21
 80021ce:	3320      	adds	r3, #32
 80021d0:	291c      	cmp	r1, #28
 80021d2:	dd8f      	ble.n	80020f4 <__aeabi_dmul+0x3dc>
 80021d4:	3808      	subs	r0, #8
 80021d6:	2200      	movs	r2, #0
 80021d8:	4084      	lsls	r4, r0
 80021da:	4692      	mov	sl, r2
 80021dc:	46a3      	mov	fp, r4
 80021de:	e796      	b.n	800210e <__aeabi_dmul+0x3f6>
 80021e0:	f000 fcd0 	bl	8002b84 <__clzsi2>
 80021e4:	0001      	movs	r1, r0
 80021e6:	0003      	movs	r3, r0
 80021e8:	3115      	adds	r1, #21
 80021ea:	3320      	adds	r3, #32
 80021ec:	291c      	cmp	r1, #28
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dmul+0x4da>
 80021f0:	e758      	b.n	80020a4 <__aeabi_dmul+0x38c>
 80021f2:	0002      	movs	r2, r0
 80021f4:	464c      	mov	r4, r9
 80021f6:	3a08      	subs	r2, #8
 80021f8:	2000      	movs	r0, #0
 80021fa:	4094      	lsls	r4, r2
 80021fc:	e75d      	b.n	80020ba <__aeabi_dmul+0x3a2>
 80021fe:	9b01      	ldr	r3, [sp, #4]
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	e711      	b.n	8002028 <__aeabi_dmul+0x310>
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <__aeabi_dmul+0x57c>)
 8002206:	0026      	movs	r6, r4
 8002208:	469c      	mov	ip, r3
 800220a:	0003      	movs	r3, r0
 800220c:	9d02      	ldr	r5, [sp, #8]
 800220e:	40cb      	lsrs	r3, r1
 8002210:	4465      	add	r5, ip
 8002212:	40ae      	lsls	r6, r5
 8002214:	431e      	orrs	r6, r3
 8002216:	0003      	movs	r3, r0
 8002218:	40ab      	lsls	r3, r5
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	4183      	sbcs	r3, r0
 800221e:	0030      	movs	r0, r6
 8002220:	4318      	orrs	r0, r3
 8002222:	40cc      	lsrs	r4, r1
 8002224:	0743      	lsls	r3, r0, #29
 8002226:	d0c7      	beq.n	80021b8 <__aeabi_dmul+0x4a0>
 8002228:	230f      	movs	r3, #15
 800222a:	4003      	ands	r3, r0
 800222c:	2b04      	cmp	r3, #4
 800222e:	d1bd      	bne.n	80021ac <__aeabi_dmul+0x494>
 8002230:	e7c2      	b.n	80021b8 <__aeabi_dmul+0x4a0>
 8002232:	0765      	lsls	r5, r4, #29
 8002234:	0264      	lsls	r4, r4, #9
 8002236:	0b24      	lsrs	r4, r4, #12
 8002238:	08c0      	lsrs	r0, r0, #3
 800223a:	2300      	movs	r3, #0
 800223c:	4305      	orrs	r5, r0
 800223e:	e5dd      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8002240:	2500      	movs	r5, #0
 8002242:	2302      	movs	r3, #2
 8002244:	2e0f      	cmp	r6, #15
 8002246:	d10c      	bne.n	8002262 <__aeabi_dmul+0x54a>
 8002248:	2480      	movs	r4, #128	; 0x80
 800224a:	465b      	mov	r3, fp
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	4223      	tst	r3, r4
 8002250:	d00e      	beq.n	8002270 <__aeabi_dmul+0x558>
 8002252:	4221      	tst	r1, r4
 8002254:	d10c      	bne.n	8002270 <__aeabi_dmul+0x558>
 8002256:	430c      	orrs	r4, r1
 8002258:	0324      	lsls	r4, r4, #12
 800225a:	003a      	movs	r2, r7
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <__aeabi_dmul+0x580>)
 800225e:	0b24      	lsrs	r4, r4, #12
 8002260:	e5cc      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8002262:	2e0b      	cmp	r6, #11
 8002264:	d000      	beq.n	8002268 <__aeabi_dmul+0x550>
 8002266:	e5a2      	b.n	8001dae <__aeabi_dmul+0x96>
 8002268:	468b      	mov	fp, r1
 800226a:	46aa      	mov	sl, r5
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	e5f7      	b.n	8001e60 <__aeabi_dmul+0x148>
 8002270:	2480      	movs	r4, #128	; 0x80
 8002272:	465b      	mov	r3, fp
 8002274:	0324      	lsls	r4, r4, #12
 8002276:	431c      	orrs	r4, r3
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	4642      	mov	r2, r8
 800227c:	4655      	mov	r5, sl
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <__aeabi_dmul+0x580>)
 8002280:	0b24      	lsrs	r4, r4, #12
 8002282:	e5bb      	b.n	8001dfc <__aeabi_dmul+0xe4>
 8002284:	464d      	mov	r5, r9
 8002286:	0021      	movs	r1, r4
 8002288:	2303      	movs	r3, #3
 800228a:	e7db      	b.n	8002244 <__aeabi_dmul+0x52c>
 800228c:	fffffc0d 	.word	0xfffffc0d
 8002290:	0000043e 	.word	0x0000043e
 8002294:	0000041e 	.word	0x0000041e
 8002298:	000007ff 	.word	0x000007ff

0800229c <__aeabi_dsub>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	4657      	mov	r7, sl
 80022a0:	464e      	mov	r6, r9
 80022a2:	4645      	mov	r5, r8
 80022a4:	46de      	mov	lr, fp
 80022a6:	b5e0      	push	{r5, r6, r7, lr}
 80022a8:	000d      	movs	r5, r1
 80022aa:	0004      	movs	r4, r0
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	032b      	lsls	r3, r5, #12
 80022b2:	0a5b      	lsrs	r3, r3, #9
 80022b4:	0f62      	lsrs	r2, r4, #29
 80022b6:	431a      	orrs	r2, r3
 80022b8:	00e3      	lsls	r3, r4, #3
 80022ba:	030c      	lsls	r4, r1, #12
 80022bc:	0a64      	lsrs	r4, r4, #9
 80022be:	0f47      	lsrs	r7, r0, #29
 80022c0:	4327      	orrs	r7, r4
 80022c2:	4cd0      	ldr	r4, [pc, #832]	; (8002604 <__aeabi_dsub+0x368>)
 80022c4:	006e      	lsls	r6, r5, #1
 80022c6:	4691      	mov	r9, r2
 80022c8:	b083      	sub	sp, #12
 80022ca:	004a      	lsls	r2, r1, #1
 80022cc:	00c0      	lsls	r0, r0, #3
 80022ce:	4698      	mov	r8, r3
 80022d0:	46a2      	mov	sl, r4
 80022d2:	0d76      	lsrs	r6, r6, #21
 80022d4:	0fed      	lsrs	r5, r5, #31
 80022d6:	0d52      	lsrs	r2, r2, #21
 80022d8:	0fc9      	lsrs	r1, r1, #31
 80022da:	9001      	str	r0, [sp, #4]
 80022dc:	42a2      	cmp	r2, r4
 80022de:	d100      	bne.n	80022e2 <__aeabi_dsub+0x46>
 80022e0:	e0b9      	b.n	8002456 <__aeabi_dsub+0x1ba>
 80022e2:	2401      	movs	r4, #1
 80022e4:	4061      	eors	r1, r4
 80022e6:	468b      	mov	fp, r1
 80022e8:	428d      	cmp	r5, r1
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x52>
 80022ec:	e08d      	b.n	800240a <__aeabi_dsub+0x16e>
 80022ee:	1ab4      	subs	r4, r6, r2
 80022f0:	46a4      	mov	ip, r4
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	dc00      	bgt.n	80022f8 <__aeabi_dsub+0x5c>
 80022f6:	e0b7      	b.n	8002468 <__aeabi_dsub+0x1cc>
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x62>
 80022fc:	e0cb      	b.n	8002496 <__aeabi_dsub+0x1fa>
 80022fe:	4ac1      	ldr	r2, [pc, #772]	; (8002604 <__aeabi_dsub+0x368>)
 8002300:	4296      	cmp	r6, r2
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x6a>
 8002304:	e186      	b.n	8002614 <__aeabi_dsub+0x378>
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4317      	orrs	r7, r2
 800230c:	4662      	mov	r2, ip
 800230e:	2a38      	cmp	r2, #56	; 0x38
 8002310:	dd00      	ble.n	8002314 <__aeabi_dsub+0x78>
 8002312:	e1a4      	b.n	800265e <__aeabi_dsub+0x3c2>
 8002314:	2a1f      	cmp	r2, #31
 8002316:	dd00      	ble.n	800231a <__aeabi_dsub+0x7e>
 8002318:	e21d      	b.n	8002756 <__aeabi_dsub+0x4ba>
 800231a:	4661      	mov	r1, ip
 800231c:	2220      	movs	r2, #32
 800231e:	003c      	movs	r4, r7
 8002320:	1a52      	subs	r2, r2, r1
 8002322:	0001      	movs	r1, r0
 8002324:	4090      	lsls	r0, r2
 8002326:	4094      	lsls	r4, r2
 8002328:	1e42      	subs	r2, r0, #1
 800232a:	4190      	sbcs	r0, r2
 800232c:	4662      	mov	r2, ip
 800232e:	46a0      	mov	r8, r4
 8002330:	4664      	mov	r4, ip
 8002332:	40d7      	lsrs	r7, r2
 8002334:	464a      	mov	r2, r9
 8002336:	40e1      	lsrs	r1, r4
 8002338:	4644      	mov	r4, r8
 800233a:	1bd2      	subs	r2, r2, r7
 800233c:	4691      	mov	r9, r2
 800233e:	430c      	orrs	r4, r1
 8002340:	4304      	orrs	r4, r0
 8002342:	1b1c      	subs	r4, r3, r4
 8002344:	42a3      	cmp	r3, r4
 8002346:	4192      	sbcs	r2, r2
 8002348:	464b      	mov	r3, r9
 800234a:	4252      	negs	r2, r2
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	469a      	mov	sl, r3
 8002350:	4653      	mov	r3, sl
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	d400      	bmi.n	8002358 <__aeabi_dsub+0xbc>
 8002356:	e12b      	b.n	80025b0 <__aeabi_dsub+0x314>
 8002358:	4653      	mov	r3, sl
 800235a:	025a      	lsls	r2, r3, #9
 800235c:	0a53      	lsrs	r3, r2, #9
 800235e:	469a      	mov	sl, r3
 8002360:	4653      	mov	r3, sl
 8002362:	2b00      	cmp	r3, #0
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0xcc>
 8002366:	e166      	b.n	8002636 <__aeabi_dsub+0x39a>
 8002368:	4650      	mov	r0, sl
 800236a:	f000 fc0b 	bl	8002b84 <__clzsi2>
 800236e:	0003      	movs	r3, r0
 8002370:	3b08      	subs	r3, #8
 8002372:	2220      	movs	r2, #32
 8002374:	0020      	movs	r0, r4
 8002376:	1ad2      	subs	r2, r2, r3
 8002378:	4651      	mov	r1, sl
 800237a:	40d0      	lsrs	r0, r2
 800237c:	4099      	lsls	r1, r3
 800237e:	0002      	movs	r2, r0
 8002380:	409c      	lsls	r4, r3
 8002382:	430a      	orrs	r2, r1
 8002384:	429e      	cmp	r6, r3
 8002386:	dd00      	ble.n	800238a <__aeabi_dsub+0xee>
 8002388:	e164      	b.n	8002654 <__aeabi_dsub+0x3b8>
 800238a:	1b9b      	subs	r3, r3, r6
 800238c:	1c59      	adds	r1, r3, #1
 800238e:	291f      	cmp	r1, #31
 8002390:	dd00      	ble.n	8002394 <__aeabi_dsub+0xf8>
 8002392:	e0fe      	b.n	8002592 <__aeabi_dsub+0x2f6>
 8002394:	2320      	movs	r3, #32
 8002396:	0010      	movs	r0, r2
 8002398:	0026      	movs	r6, r4
 800239a:	1a5b      	subs	r3, r3, r1
 800239c:	409c      	lsls	r4, r3
 800239e:	4098      	lsls	r0, r3
 80023a0:	40ce      	lsrs	r6, r1
 80023a2:	40ca      	lsrs	r2, r1
 80023a4:	1e63      	subs	r3, r4, #1
 80023a6:	419c      	sbcs	r4, r3
 80023a8:	4330      	orrs	r0, r6
 80023aa:	4692      	mov	sl, r2
 80023ac:	2600      	movs	r6, #0
 80023ae:	4304      	orrs	r4, r0
 80023b0:	0763      	lsls	r3, r4, #29
 80023b2:	d009      	beq.n	80023c8 <__aeabi_dsub+0x12c>
 80023b4:	230f      	movs	r3, #15
 80023b6:	4023      	ands	r3, r4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d005      	beq.n	80023c8 <__aeabi_dsub+0x12c>
 80023bc:	1d23      	adds	r3, r4, #4
 80023be:	42a3      	cmp	r3, r4
 80023c0:	41a4      	sbcs	r4, r4
 80023c2:	4264      	negs	r4, r4
 80023c4:	44a2      	add	sl, r4
 80023c6:	001c      	movs	r4, r3
 80023c8:	4653      	mov	r3, sl
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	d400      	bmi.n	80023d0 <__aeabi_dsub+0x134>
 80023ce:	e0f2      	b.n	80025b6 <__aeabi_dsub+0x31a>
 80023d0:	4b8c      	ldr	r3, [pc, #560]	; (8002604 <__aeabi_dsub+0x368>)
 80023d2:	3601      	adds	r6, #1
 80023d4:	429e      	cmp	r6, r3
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x13e>
 80023d8:	e10f      	b.n	80025fa <__aeabi_dsub+0x35e>
 80023da:	4653      	mov	r3, sl
 80023dc:	498a      	ldr	r1, [pc, #552]	; (8002608 <__aeabi_dsub+0x36c>)
 80023de:	08e4      	lsrs	r4, r4, #3
 80023e0:	400b      	ands	r3, r1
 80023e2:	0019      	movs	r1, r3
 80023e4:	075b      	lsls	r3, r3, #29
 80023e6:	4323      	orrs	r3, r4
 80023e8:	0572      	lsls	r2, r6, #21
 80023ea:	024c      	lsls	r4, r1, #9
 80023ec:	0b24      	lsrs	r4, r4, #12
 80023ee:	0d52      	lsrs	r2, r2, #21
 80023f0:	0512      	lsls	r2, r2, #20
 80023f2:	4322      	orrs	r2, r4
 80023f4:	07ed      	lsls	r5, r5, #31
 80023f6:	432a      	orrs	r2, r5
 80023f8:	0018      	movs	r0, r3
 80023fa:	0011      	movs	r1, r2
 80023fc:	b003      	add	sp, #12
 80023fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002400:	46bb      	mov	fp, r7
 8002402:	46b2      	mov	sl, r6
 8002404:	46a9      	mov	r9, r5
 8002406:	46a0      	mov	r8, r4
 8002408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240a:	1ab4      	subs	r4, r6, r2
 800240c:	46a4      	mov	ip, r4
 800240e:	2c00      	cmp	r4, #0
 8002410:	dd59      	ble.n	80024c6 <__aeabi_dsub+0x22a>
 8002412:	2a00      	cmp	r2, #0
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x17c>
 8002416:	e0b0      	b.n	800257a <__aeabi_dsub+0x2de>
 8002418:	4556      	cmp	r6, sl
 800241a:	d100      	bne.n	800241e <__aeabi_dsub+0x182>
 800241c:	e0fa      	b.n	8002614 <__aeabi_dsub+0x378>
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	0412      	lsls	r2, r2, #16
 8002422:	4317      	orrs	r7, r2
 8002424:	4662      	mov	r2, ip
 8002426:	2a38      	cmp	r2, #56	; 0x38
 8002428:	dd00      	ble.n	800242c <__aeabi_dsub+0x190>
 800242a:	e0d4      	b.n	80025d6 <__aeabi_dsub+0x33a>
 800242c:	2a1f      	cmp	r2, #31
 800242e:	dc00      	bgt.n	8002432 <__aeabi_dsub+0x196>
 8002430:	e1c0      	b.n	80027b4 <__aeabi_dsub+0x518>
 8002432:	0039      	movs	r1, r7
 8002434:	3a20      	subs	r2, #32
 8002436:	40d1      	lsrs	r1, r2
 8002438:	4662      	mov	r2, ip
 800243a:	2a20      	cmp	r2, #32
 800243c:	d006      	beq.n	800244c <__aeabi_dsub+0x1b0>
 800243e:	4664      	mov	r4, ip
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	1b12      	subs	r2, r2, r4
 8002444:	003c      	movs	r4, r7
 8002446:	4094      	lsls	r4, r2
 8002448:	4304      	orrs	r4, r0
 800244a:	9401      	str	r4, [sp, #4]
 800244c:	9c01      	ldr	r4, [sp, #4]
 800244e:	1e62      	subs	r2, r4, #1
 8002450:	4194      	sbcs	r4, r2
 8002452:	430c      	orrs	r4, r1
 8002454:	e0c3      	b.n	80025de <__aeabi_dsub+0x342>
 8002456:	003c      	movs	r4, r7
 8002458:	4304      	orrs	r4, r0
 800245a:	d02b      	beq.n	80024b4 <__aeabi_dsub+0x218>
 800245c:	468b      	mov	fp, r1
 800245e:	428d      	cmp	r5, r1
 8002460:	d02e      	beq.n	80024c0 <__aeabi_dsub+0x224>
 8002462:	4c6a      	ldr	r4, [pc, #424]	; (800260c <__aeabi_dsub+0x370>)
 8002464:	46a4      	mov	ip, r4
 8002466:	44b4      	add	ip, r6
 8002468:	4664      	mov	r4, ip
 800246a:	2c00      	cmp	r4, #0
 800246c:	d05f      	beq.n	800252e <__aeabi_dsub+0x292>
 800246e:	1b94      	subs	r4, r2, r6
 8002470:	46a4      	mov	ip, r4
 8002472:	2e00      	cmp	r6, #0
 8002474:	d000      	beq.n	8002478 <__aeabi_dsub+0x1dc>
 8002476:	e120      	b.n	80026ba <__aeabi_dsub+0x41e>
 8002478:	464c      	mov	r4, r9
 800247a:	431c      	orrs	r4, r3
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x1e4>
 800247e:	e1c7      	b.n	8002810 <__aeabi_dsub+0x574>
 8002480:	4661      	mov	r1, ip
 8002482:	1e4c      	subs	r4, r1, #1
 8002484:	2901      	cmp	r1, #1
 8002486:	d100      	bne.n	800248a <__aeabi_dsub+0x1ee>
 8002488:	e223      	b.n	80028d2 <__aeabi_dsub+0x636>
 800248a:	4d5e      	ldr	r5, [pc, #376]	; (8002604 <__aeabi_dsub+0x368>)
 800248c:	45ac      	cmp	ip, r5
 800248e:	d100      	bne.n	8002492 <__aeabi_dsub+0x1f6>
 8002490:	e1d8      	b.n	8002844 <__aeabi_dsub+0x5a8>
 8002492:	46a4      	mov	ip, r4
 8002494:	e11a      	b.n	80026cc <__aeabi_dsub+0x430>
 8002496:	003a      	movs	r2, r7
 8002498:	4302      	orrs	r2, r0
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0x202>
 800249c:	e0e4      	b.n	8002668 <__aeabi_dsub+0x3cc>
 800249e:	0022      	movs	r2, r4
 80024a0:	3a01      	subs	r2, #1
 80024a2:	2c01      	cmp	r4, #1
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x20c>
 80024a6:	e1c3      	b.n	8002830 <__aeabi_dsub+0x594>
 80024a8:	4956      	ldr	r1, [pc, #344]	; (8002604 <__aeabi_dsub+0x368>)
 80024aa:	428c      	cmp	r4, r1
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x214>
 80024ae:	e0b1      	b.n	8002614 <__aeabi_dsub+0x378>
 80024b0:	4694      	mov	ip, r2
 80024b2:	e72b      	b.n	800230c <__aeabi_dsub+0x70>
 80024b4:	2401      	movs	r4, #1
 80024b6:	4061      	eors	r1, r4
 80024b8:	468b      	mov	fp, r1
 80024ba:	428d      	cmp	r5, r1
 80024bc:	d000      	beq.n	80024c0 <__aeabi_dsub+0x224>
 80024be:	e716      	b.n	80022ee <__aeabi_dsub+0x52>
 80024c0:	4952      	ldr	r1, [pc, #328]	; (800260c <__aeabi_dsub+0x370>)
 80024c2:	468c      	mov	ip, r1
 80024c4:	44b4      	add	ip, r6
 80024c6:	4664      	mov	r4, ip
 80024c8:	2c00      	cmp	r4, #0
 80024ca:	d100      	bne.n	80024ce <__aeabi_dsub+0x232>
 80024cc:	e0d3      	b.n	8002676 <__aeabi_dsub+0x3da>
 80024ce:	1b91      	subs	r1, r2, r6
 80024d0:	468c      	mov	ip, r1
 80024d2:	2e00      	cmp	r6, #0
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x23c>
 80024d6:	e15e      	b.n	8002796 <__aeabi_dsub+0x4fa>
 80024d8:	494a      	ldr	r1, [pc, #296]	; (8002604 <__aeabi_dsub+0x368>)
 80024da:	428a      	cmp	r2, r1
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x244>
 80024de:	e1be      	b.n	800285e <__aeabi_dsub+0x5c2>
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	464c      	mov	r4, r9
 80024e4:	0409      	lsls	r1, r1, #16
 80024e6:	430c      	orrs	r4, r1
 80024e8:	46a1      	mov	r9, r4
 80024ea:	4661      	mov	r1, ip
 80024ec:	2938      	cmp	r1, #56	; 0x38
 80024ee:	dd00      	ble.n	80024f2 <__aeabi_dsub+0x256>
 80024f0:	e1ba      	b.n	8002868 <__aeabi_dsub+0x5cc>
 80024f2:	291f      	cmp	r1, #31
 80024f4:	dd00      	ble.n	80024f8 <__aeabi_dsub+0x25c>
 80024f6:	e227      	b.n	8002948 <__aeabi_dsub+0x6ac>
 80024f8:	2420      	movs	r4, #32
 80024fa:	1a64      	subs	r4, r4, r1
 80024fc:	4649      	mov	r1, r9
 80024fe:	40a1      	lsls	r1, r4
 8002500:	001e      	movs	r6, r3
 8002502:	4688      	mov	r8, r1
 8002504:	4661      	mov	r1, ip
 8002506:	40a3      	lsls	r3, r4
 8002508:	40ce      	lsrs	r6, r1
 800250a:	4641      	mov	r1, r8
 800250c:	1e5c      	subs	r4, r3, #1
 800250e:	41a3      	sbcs	r3, r4
 8002510:	4331      	orrs	r1, r6
 8002512:	4319      	orrs	r1, r3
 8002514:	000c      	movs	r4, r1
 8002516:	4663      	mov	r3, ip
 8002518:	4649      	mov	r1, r9
 800251a:	40d9      	lsrs	r1, r3
 800251c:	187f      	adds	r7, r7, r1
 800251e:	1824      	adds	r4, r4, r0
 8002520:	4284      	cmp	r4, r0
 8002522:	419b      	sbcs	r3, r3
 8002524:	425b      	negs	r3, r3
 8002526:	469a      	mov	sl, r3
 8002528:	0016      	movs	r6, r2
 800252a:	44ba      	add	sl, r7
 800252c:	e05d      	b.n	80025ea <__aeabi_dsub+0x34e>
 800252e:	4c38      	ldr	r4, [pc, #224]	; (8002610 <__aeabi_dsub+0x374>)
 8002530:	1c72      	adds	r2, r6, #1
 8002532:	4222      	tst	r2, r4
 8002534:	d000      	beq.n	8002538 <__aeabi_dsub+0x29c>
 8002536:	e0df      	b.n	80026f8 <__aeabi_dsub+0x45c>
 8002538:	464a      	mov	r2, r9
 800253a:	431a      	orrs	r2, r3
 800253c:	2e00      	cmp	r6, #0
 800253e:	d000      	beq.n	8002542 <__aeabi_dsub+0x2a6>
 8002540:	e15c      	b.n	80027fc <__aeabi_dsub+0x560>
 8002542:	2a00      	cmp	r2, #0
 8002544:	d100      	bne.n	8002548 <__aeabi_dsub+0x2ac>
 8002546:	e1cf      	b.n	80028e8 <__aeabi_dsub+0x64c>
 8002548:	003a      	movs	r2, r7
 800254a:	4302      	orrs	r2, r0
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x2b4>
 800254e:	e17f      	b.n	8002850 <__aeabi_dsub+0x5b4>
 8002550:	1a1c      	subs	r4, r3, r0
 8002552:	464a      	mov	r2, r9
 8002554:	42a3      	cmp	r3, r4
 8002556:	4189      	sbcs	r1, r1
 8002558:	1bd2      	subs	r2, r2, r7
 800255a:	4249      	negs	r1, r1
 800255c:	1a52      	subs	r2, r2, r1
 800255e:	4692      	mov	sl, r2
 8002560:	0212      	lsls	r2, r2, #8
 8002562:	d400      	bmi.n	8002566 <__aeabi_dsub+0x2ca>
 8002564:	e20a      	b.n	800297c <__aeabi_dsub+0x6e0>
 8002566:	1ac4      	subs	r4, r0, r3
 8002568:	42a0      	cmp	r0, r4
 800256a:	4180      	sbcs	r0, r0
 800256c:	464b      	mov	r3, r9
 800256e:	4240      	negs	r0, r0
 8002570:	1aff      	subs	r7, r7, r3
 8002572:	1a3b      	subs	r3, r7, r0
 8002574:	469a      	mov	sl, r3
 8002576:	465d      	mov	r5, fp
 8002578:	e71a      	b.n	80023b0 <__aeabi_dsub+0x114>
 800257a:	003a      	movs	r2, r7
 800257c:	4302      	orrs	r2, r0
 800257e:	d073      	beq.n	8002668 <__aeabi_dsub+0x3cc>
 8002580:	0022      	movs	r2, r4
 8002582:	3a01      	subs	r2, #1
 8002584:	2c01      	cmp	r4, #1
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x2ee>
 8002588:	e0cb      	b.n	8002722 <__aeabi_dsub+0x486>
 800258a:	4554      	cmp	r4, sl
 800258c:	d042      	beq.n	8002614 <__aeabi_dsub+0x378>
 800258e:	4694      	mov	ip, r2
 8002590:	e748      	b.n	8002424 <__aeabi_dsub+0x188>
 8002592:	0010      	movs	r0, r2
 8002594:	3b1f      	subs	r3, #31
 8002596:	40d8      	lsrs	r0, r3
 8002598:	2920      	cmp	r1, #32
 800259a:	d003      	beq.n	80025a4 <__aeabi_dsub+0x308>
 800259c:	2340      	movs	r3, #64	; 0x40
 800259e:	1a5b      	subs	r3, r3, r1
 80025a0:	409a      	lsls	r2, r3
 80025a2:	4314      	orrs	r4, r2
 80025a4:	1e63      	subs	r3, r4, #1
 80025a6:	419c      	sbcs	r4, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	2600      	movs	r6, #0
 80025ac:	469a      	mov	sl, r3
 80025ae:	4304      	orrs	r4, r0
 80025b0:	0763      	lsls	r3, r4, #29
 80025b2:	d000      	beq.n	80025b6 <__aeabi_dsub+0x31a>
 80025b4:	e6fe      	b.n	80023b4 <__aeabi_dsub+0x118>
 80025b6:	4652      	mov	r2, sl
 80025b8:	08e3      	lsrs	r3, r4, #3
 80025ba:	0752      	lsls	r2, r2, #29
 80025bc:	4313      	orrs	r3, r2
 80025be:	4652      	mov	r2, sl
 80025c0:	46b4      	mov	ip, r6
 80025c2:	08d2      	lsrs	r2, r2, #3
 80025c4:	490f      	ldr	r1, [pc, #60]	; (8002604 <__aeabi_dsub+0x368>)
 80025c6:	458c      	cmp	ip, r1
 80025c8:	d02a      	beq.n	8002620 <__aeabi_dsub+0x384>
 80025ca:	0312      	lsls	r2, r2, #12
 80025cc:	0b14      	lsrs	r4, r2, #12
 80025ce:	4662      	mov	r2, ip
 80025d0:	0552      	lsls	r2, r2, #21
 80025d2:	0d52      	lsrs	r2, r2, #21
 80025d4:	e70c      	b.n	80023f0 <__aeabi_dsub+0x154>
 80025d6:	003c      	movs	r4, r7
 80025d8:	4304      	orrs	r4, r0
 80025da:	1e62      	subs	r2, r4, #1
 80025dc:	4194      	sbcs	r4, r2
 80025de:	18e4      	adds	r4, r4, r3
 80025e0:	429c      	cmp	r4, r3
 80025e2:	4192      	sbcs	r2, r2
 80025e4:	4252      	negs	r2, r2
 80025e6:	444a      	add	r2, r9
 80025e8:	4692      	mov	sl, r2
 80025ea:	4653      	mov	r3, sl
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	d5df      	bpl.n	80025b0 <__aeabi_dsub+0x314>
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__aeabi_dsub+0x368>)
 80025f2:	3601      	adds	r6, #1
 80025f4:	429e      	cmp	r6, r3
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x35e>
 80025f8:	e0a0      	b.n	800273c <__aeabi_dsub+0x4a0>
 80025fa:	0032      	movs	r2, r6
 80025fc:	2400      	movs	r4, #0
 80025fe:	2300      	movs	r3, #0
 8002600:	e6f6      	b.n	80023f0 <__aeabi_dsub+0x154>
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	000007ff 	.word	0x000007ff
 8002608:	ff7fffff 	.word	0xff7fffff
 800260c:	fffff801 	.word	0xfffff801
 8002610:	000007fe 	.word	0x000007fe
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	464a      	mov	r2, r9
 8002618:	0752      	lsls	r2, r2, #29
 800261a:	4313      	orrs	r3, r2
 800261c:	464a      	mov	r2, r9
 800261e:	08d2      	lsrs	r2, r2, #3
 8002620:	0019      	movs	r1, r3
 8002622:	4311      	orrs	r1, r2
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x38c>
 8002626:	e1b5      	b.n	8002994 <__aeabi_dsub+0x6f8>
 8002628:	2480      	movs	r4, #128	; 0x80
 800262a:	0324      	lsls	r4, r4, #12
 800262c:	4314      	orrs	r4, r2
 800262e:	0324      	lsls	r4, r4, #12
 8002630:	4ad5      	ldr	r2, [pc, #852]	; (8002988 <__aeabi_dsub+0x6ec>)
 8002632:	0b24      	lsrs	r4, r4, #12
 8002634:	e6dc      	b.n	80023f0 <__aeabi_dsub+0x154>
 8002636:	0020      	movs	r0, r4
 8002638:	f000 faa4 	bl	8002b84 <__clzsi2>
 800263c:	0003      	movs	r3, r0
 800263e:	3318      	adds	r3, #24
 8002640:	2b1f      	cmp	r3, #31
 8002642:	dc00      	bgt.n	8002646 <__aeabi_dsub+0x3aa>
 8002644:	e695      	b.n	8002372 <__aeabi_dsub+0xd6>
 8002646:	0022      	movs	r2, r4
 8002648:	3808      	subs	r0, #8
 800264a:	4082      	lsls	r2, r0
 800264c:	2400      	movs	r4, #0
 800264e:	429e      	cmp	r6, r3
 8002650:	dc00      	bgt.n	8002654 <__aeabi_dsub+0x3b8>
 8002652:	e69a      	b.n	800238a <__aeabi_dsub+0xee>
 8002654:	1af6      	subs	r6, r6, r3
 8002656:	4bcd      	ldr	r3, [pc, #820]	; (800298c <__aeabi_dsub+0x6f0>)
 8002658:	401a      	ands	r2, r3
 800265a:	4692      	mov	sl, r2
 800265c:	e6a8      	b.n	80023b0 <__aeabi_dsub+0x114>
 800265e:	003c      	movs	r4, r7
 8002660:	4304      	orrs	r4, r0
 8002662:	1e62      	subs	r2, r4, #1
 8002664:	4194      	sbcs	r4, r2
 8002666:	e66c      	b.n	8002342 <__aeabi_dsub+0xa6>
 8002668:	464a      	mov	r2, r9
 800266a:	08db      	lsrs	r3, r3, #3
 800266c:	0752      	lsls	r2, r2, #29
 800266e:	4313      	orrs	r3, r2
 8002670:	464a      	mov	r2, r9
 8002672:	08d2      	lsrs	r2, r2, #3
 8002674:	e7a6      	b.n	80025c4 <__aeabi_dsub+0x328>
 8002676:	4cc6      	ldr	r4, [pc, #792]	; (8002990 <__aeabi_dsub+0x6f4>)
 8002678:	1c72      	adds	r2, r6, #1
 800267a:	4222      	tst	r2, r4
 800267c:	d000      	beq.n	8002680 <__aeabi_dsub+0x3e4>
 800267e:	e0ac      	b.n	80027da <__aeabi_dsub+0x53e>
 8002680:	464a      	mov	r2, r9
 8002682:	431a      	orrs	r2, r3
 8002684:	2e00      	cmp	r6, #0
 8002686:	d000      	beq.n	800268a <__aeabi_dsub+0x3ee>
 8002688:	e105      	b.n	8002896 <__aeabi_dsub+0x5fa>
 800268a:	2a00      	cmp	r2, #0
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x3f4>
 800268e:	e156      	b.n	800293e <__aeabi_dsub+0x6a2>
 8002690:	003a      	movs	r2, r7
 8002692:	4302      	orrs	r2, r0
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x3fc>
 8002696:	e0db      	b.n	8002850 <__aeabi_dsub+0x5b4>
 8002698:	181c      	adds	r4, r3, r0
 800269a:	429c      	cmp	r4, r3
 800269c:	419b      	sbcs	r3, r3
 800269e:	444f      	add	r7, r9
 80026a0:	46ba      	mov	sl, r7
 80026a2:	425b      	negs	r3, r3
 80026a4:	449a      	add	sl, r3
 80026a6:	4653      	mov	r3, sl
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	d400      	bmi.n	80026ae <__aeabi_dsub+0x412>
 80026ac:	e780      	b.n	80025b0 <__aeabi_dsub+0x314>
 80026ae:	4652      	mov	r2, sl
 80026b0:	4bb6      	ldr	r3, [pc, #728]	; (800298c <__aeabi_dsub+0x6f0>)
 80026b2:	2601      	movs	r6, #1
 80026b4:	401a      	ands	r2, r3
 80026b6:	4692      	mov	sl, r2
 80026b8:	e77a      	b.n	80025b0 <__aeabi_dsub+0x314>
 80026ba:	4cb3      	ldr	r4, [pc, #716]	; (8002988 <__aeabi_dsub+0x6ec>)
 80026bc:	42a2      	cmp	r2, r4
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x426>
 80026c0:	e0c0      	b.n	8002844 <__aeabi_dsub+0x5a8>
 80026c2:	2480      	movs	r4, #128	; 0x80
 80026c4:	464d      	mov	r5, r9
 80026c6:	0424      	lsls	r4, r4, #16
 80026c8:	4325      	orrs	r5, r4
 80026ca:	46a9      	mov	r9, r5
 80026cc:	4664      	mov	r4, ip
 80026ce:	2c38      	cmp	r4, #56	; 0x38
 80026d0:	dc53      	bgt.n	800277a <__aeabi_dsub+0x4de>
 80026d2:	4661      	mov	r1, ip
 80026d4:	2c1f      	cmp	r4, #31
 80026d6:	dd00      	ble.n	80026da <__aeabi_dsub+0x43e>
 80026d8:	e0cd      	b.n	8002876 <__aeabi_dsub+0x5da>
 80026da:	2520      	movs	r5, #32
 80026dc:	001e      	movs	r6, r3
 80026de:	1b2d      	subs	r5, r5, r4
 80026e0:	464c      	mov	r4, r9
 80026e2:	40ab      	lsls	r3, r5
 80026e4:	40ac      	lsls	r4, r5
 80026e6:	40ce      	lsrs	r6, r1
 80026e8:	1e5d      	subs	r5, r3, #1
 80026ea:	41ab      	sbcs	r3, r5
 80026ec:	4334      	orrs	r4, r6
 80026ee:	4323      	orrs	r3, r4
 80026f0:	464c      	mov	r4, r9
 80026f2:	40cc      	lsrs	r4, r1
 80026f4:	1b3f      	subs	r7, r7, r4
 80026f6:	e045      	b.n	8002784 <__aeabi_dsub+0x4e8>
 80026f8:	464a      	mov	r2, r9
 80026fa:	1a1c      	subs	r4, r3, r0
 80026fc:	1bd1      	subs	r1, r2, r7
 80026fe:	42a3      	cmp	r3, r4
 8002700:	4192      	sbcs	r2, r2
 8002702:	4252      	negs	r2, r2
 8002704:	4692      	mov	sl, r2
 8002706:	000a      	movs	r2, r1
 8002708:	4651      	mov	r1, sl
 800270a:	1a52      	subs	r2, r2, r1
 800270c:	4692      	mov	sl, r2
 800270e:	0212      	lsls	r2, r2, #8
 8002710:	d500      	bpl.n	8002714 <__aeabi_dsub+0x478>
 8002712:	e083      	b.n	800281c <__aeabi_dsub+0x580>
 8002714:	4653      	mov	r3, sl
 8002716:	4323      	orrs	r3, r4
 8002718:	d000      	beq.n	800271c <__aeabi_dsub+0x480>
 800271a:	e621      	b.n	8002360 <__aeabi_dsub+0xc4>
 800271c:	2200      	movs	r2, #0
 800271e:	2500      	movs	r5, #0
 8002720:	e753      	b.n	80025ca <__aeabi_dsub+0x32e>
 8002722:	181c      	adds	r4, r3, r0
 8002724:	429c      	cmp	r4, r3
 8002726:	419b      	sbcs	r3, r3
 8002728:	444f      	add	r7, r9
 800272a:	46ba      	mov	sl, r7
 800272c:	425b      	negs	r3, r3
 800272e:	449a      	add	sl, r3
 8002730:	4653      	mov	r3, sl
 8002732:	2601      	movs	r6, #1
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0x49e>
 8002738:	e73a      	b.n	80025b0 <__aeabi_dsub+0x314>
 800273a:	2602      	movs	r6, #2
 800273c:	4652      	mov	r2, sl
 800273e:	4b93      	ldr	r3, [pc, #588]	; (800298c <__aeabi_dsub+0x6f0>)
 8002740:	2101      	movs	r1, #1
 8002742:	401a      	ands	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	4021      	ands	r1, r4
 8002748:	0862      	lsrs	r2, r4, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	07dc      	lsls	r4, r3, #31
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	469a      	mov	sl, r3
 8002752:	4314      	orrs	r4, r2
 8002754:	e62c      	b.n	80023b0 <__aeabi_dsub+0x114>
 8002756:	0039      	movs	r1, r7
 8002758:	3a20      	subs	r2, #32
 800275a:	40d1      	lsrs	r1, r2
 800275c:	4662      	mov	r2, ip
 800275e:	2a20      	cmp	r2, #32
 8002760:	d006      	beq.n	8002770 <__aeabi_dsub+0x4d4>
 8002762:	4664      	mov	r4, ip
 8002764:	2240      	movs	r2, #64	; 0x40
 8002766:	1b12      	subs	r2, r2, r4
 8002768:	003c      	movs	r4, r7
 800276a:	4094      	lsls	r4, r2
 800276c:	4304      	orrs	r4, r0
 800276e:	9401      	str	r4, [sp, #4]
 8002770:	9c01      	ldr	r4, [sp, #4]
 8002772:	1e62      	subs	r2, r4, #1
 8002774:	4194      	sbcs	r4, r2
 8002776:	430c      	orrs	r4, r1
 8002778:	e5e3      	b.n	8002342 <__aeabi_dsub+0xa6>
 800277a:	4649      	mov	r1, r9
 800277c:	4319      	orrs	r1, r3
 800277e:	000b      	movs	r3, r1
 8002780:	1e5c      	subs	r4, r3, #1
 8002782:	41a3      	sbcs	r3, r4
 8002784:	1ac4      	subs	r4, r0, r3
 8002786:	42a0      	cmp	r0, r4
 8002788:	419b      	sbcs	r3, r3
 800278a:	425b      	negs	r3, r3
 800278c:	1afb      	subs	r3, r7, r3
 800278e:	469a      	mov	sl, r3
 8002790:	465d      	mov	r5, fp
 8002792:	0016      	movs	r6, r2
 8002794:	e5dc      	b.n	8002350 <__aeabi_dsub+0xb4>
 8002796:	4649      	mov	r1, r9
 8002798:	4319      	orrs	r1, r3
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x502>
 800279c:	e0ae      	b.n	80028fc <__aeabi_dsub+0x660>
 800279e:	4661      	mov	r1, ip
 80027a0:	4664      	mov	r4, ip
 80027a2:	3901      	subs	r1, #1
 80027a4:	2c01      	cmp	r4, #1
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x50e>
 80027a8:	e0e0      	b.n	800296c <__aeabi_dsub+0x6d0>
 80027aa:	4c77      	ldr	r4, [pc, #476]	; (8002988 <__aeabi_dsub+0x6ec>)
 80027ac:	45a4      	cmp	ip, r4
 80027ae:	d056      	beq.n	800285e <__aeabi_dsub+0x5c2>
 80027b0:	468c      	mov	ip, r1
 80027b2:	e69a      	b.n	80024ea <__aeabi_dsub+0x24e>
 80027b4:	4661      	mov	r1, ip
 80027b6:	2220      	movs	r2, #32
 80027b8:	003c      	movs	r4, r7
 80027ba:	1a52      	subs	r2, r2, r1
 80027bc:	4094      	lsls	r4, r2
 80027be:	0001      	movs	r1, r0
 80027c0:	4090      	lsls	r0, r2
 80027c2:	46a0      	mov	r8, r4
 80027c4:	4664      	mov	r4, ip
 80027c6:	1e42      	subs	r2, r0, #1
 80027c8:	4190      	sbcs	r0, r2
 80027ca:	4662      	mov	r2, ip
 80027cc:	40e1      	lsrs	r1, r4
 80027ce:	4644      	mov	r4, r8
 80027d0:	40d7      	lsrs	r7, r2
 80027d2:	430c      	orrs	r4, r1
 80027d4:	4304      	orrs	r4, r0
 80027d6:	44b9      	add	r9, r7
 80027d8:	e701      	b.n	80025de <__aeabi_dsub+0x342>
 80027da:	496b      	ldr	r1, [pc, #428]	; (8002988 <__aeabi_dsub+0x6ec>)
 80027dc:	428a      	cmp	r2, r1
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x546>
 80027e0:	e70c      	b.n	80025fc <__aeabi_dsub+0x360>
 80027e2:	1818      	adds	r0, r3, r0
 80027e4:	4298      	cmp	r0, r3
 80027e6:	419b      	sbcs	r3, r3
 80027e8:	444f      	add	r7, r9
 80027ea:	425b      	negs	r3, r3
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	07dc      	lsls	r4, r3, #31
 80027f0:	0840      	lsrs	r0, r0, #1
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	469a      	mov	sl, r3
 80027f6:	0016      	movs	r6, r2
 80027f8:	4304      	orrs	r4, r0
 80027fa:	e6d9      	b.n	80025b0 <__aeabi_dsub+0x314>
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x566>
 8002800:	e081      	b.n	8002906 <__aeabi_dsub+0x66a>
 8002802:	003b      	movs	r3, r7
 8002804:	4303      	orrs	r3, r0
 8002806:	d11d      	bne.n	8002844 <__aeabi_dsub+0x5a8>
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	2500      	movs	r5, #0
 800280c:	0312      	lsls	r2, r2, #12
 800280e:	e70b      	b.n	8002628 <__aeabi_dsub+0x38c>
 8002810:	08c0      	lsrs	r0, r0, #3
 8002812:	077b      	lsls	r3, r7, #29
 8002814:	465d      	mov	r5, fp
 8002816:	4303      	orrs	r3, r0
 8002818:	08fa      	lsrs	r2, r7, #3
 800281a:	e6d3      	b.n	80025c4 <__aeabi_dsub+0x328>
 800281c:	1ac4      	subs	r4, r0, r3
 800281e:	42a0      	cmp	r0, r4
 8002820:	4180      	sbcs	r0, r0
 8002822:	464b      	mov	r3, r9
 8002824:	4240      	negs	r0, r0
 8002826:	1aff      	subs	r7, r7, r3
 8002828:	1a3b      	subs	r3, r7, r0
 800282a:	469a      	mov	sl, r3
 800282c:	465d      	mov	r5, fp
 800282e:	e597      	b.n	8002360 <__aeabi_dsub+0xc4>
 8002830:	1a1c      	subs	r4, r3, r0
 8002832:	464a      	mov	r2, r9
 8002834:	42a3      	cmp	r3, r4
 8002836:	419b      	sbcs	r3, r3
 8002838:	1bd7      	subs	r7, r2, r7
 800283a:	425b      	negs	r3, r3
 800283c:	1afb      	subs	r3, r7, r3
 800283e:	469a      	mov	sl, r3
 8002840:	2601      	movs	r6, #1
 8002842:	e585      	b.n	8002350 <__aeabi_dsub+0xb4>
 8002844:	08c0      	lsrs	r0, r0, #3
 8002846:	077b      	lsls	r3, r7, #29
 8002848:	465d      	mov	r5, fp
 800284a:	4303      	orrs	r3, r0
 800284c:	08fa      	lsrs	r2, r7, #3
 800284e:	e6e7      	b.n	8002620 <__aeabi_dsub+0x384>
 8002850:	464a      	mov	r2, r9
 8002852:	08db      	lsrs	r3, r3, #3
 8002854:	0752      	lsls	r2, r2, #29
 8002856:	4313      	orrs	r3, r2
 8002858:	464a      	mov	r2, r9
 800285a:	08d2      	lsrs	r2, r2, #3
 800285c:	e6b5      	b.n	80025ca <__aeabi_dsub+0x32e>
 800285e:	08c0      	lsrs	r0, r0, #3
 8002860:	077b      	lsls	r3, r7, #29
 8002862:	4303      	orrs	r3, r0
 8002864:	08fa      	lsrs	r2, r7, #3
 8002866:	e6db      	b.n	8002620 <__aeabi_dsub+0x384>
 8002868:	4649      	mov	r1, r9
 800286a:	4319      	orrs	r1, r3
 800286c:	000b      	movs	r3, r1
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	418b      	sbcs	r3, r1
 8002872:	001c      	movs	r4, r3
 8002874:	e653      	b.n	800251e <__aeabi_dsub+0x282>
 8002876:	464d      	mov	r5, r9
 8002878:	3c20      	subs	r4, #32
 800287a:	40e5      	lsrs	r5, r4
 800287c:	2920      	cmp	r1, #32
 800287e:	d005      	beq.n	800288c <__aeabi_dsub+0x5f0>
 8002880:	2440      	movs	r4, #64	; 0x40
 8002882:	1a64      	subs	r4, r4, r1
 8002884:	4649      	mov	r1, r9
 8002886:	40a1      	lsls	r1, r4
 8002888:	430b      	orrs	r3, r1
 800288a:	4698      	mov	r8, r3
 800288c:	4643      	mov	r3, r8
 800288e:	1e5c      	subs	r4, r3, #1
 8002890:	41a3      	sbcs	r3, r4
 8002892:	432b      	orrs	r3, r5
 8002894:	e776      	b.n	8002784 <__aeabi_dsub+0x4e8>
 8002896:	2a00      	cmp	r2, #0
 8002898:	d0e1      	beq.n	800285e <__aeabi_dsub+0x5c2>
 800289a:	003a      	movs	r2, r7
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	4302      	orrs	r2, r0
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x608>
 80028a2:	e6b8      	b.n	8002616 <__aeabi_dsub+0x37a>
 80028a4:	464a      	mov	r2, r9
 80028a6:	0752      	lsls	r2, r2, #29
 80028a8:	2480      	movs	r4, #128	; 0x80
 80028aa:	4313      	orrs	r3, r2
 80028ac:	464a      	mov	r2, r9
 80028ae:	0324      	lsls	r4, r4, #12
 80028b0:	08d2      	lsrs	r2, r2, #3
 80028b2:	4222      	tst	r2, r4
 80028b4:	d007      	beq.n	80028c6 <__aeabi_dsub+0x62a>
 80028b6:	08fe      	lsrs	r6, r7, #3
 80028b8:	4226      	tst	r6, r4
 80028ba:	d104      	bne.n	80028c6 <__aeabi_dsub+0x62a>
 80028bc:	465d      	mov	r5, fp
 80028be:	0032      	movs	r2, r6
 80028c0:	08c3      	lsrs	r3, r0, #3
 80028c2:	077f      	lsls	r7, r7, #29
 80028c4:	433b      	orrs	r3, r7
 80028c6:	0f59      	lsrs	r1, r3, #29
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	0749      	lsls	r1, r1, #29
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	430b      	orrs	r3, r1
 80028d0:	e6a6      	b.n	8002620 <__aeabi_dsub+0x384>
 80028d2:	1ac4      	subs	r4, r0, r3
 80028d4:	42a0      	cmp	r0, r4
 80028d6:	4180      	sbcs	r0, r0
 80028d8:	464b      	mov	r3, r9
 80028da:	4240      	negs	r0, r0
 80028dc:	1aff      	subs	r7, r7, r3
 80028de:	1a3b      	subs	r3, r7, r0
 80028e0:	469a      	mov	sl, r3
 80028e2:	465d      	mov	r5, fp
 80028e4:	2601      	movs	r6, #1
 80028e6:	e533      	b.n	8002350 <__aeabi_dsub+0xb4>
 80028e8:	003b      	movs	r3, r7
 80028ea:	4303      	orrs	r3, r0
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x654>
 80028ee:	e715      	b.n	800271c <__aeabi_dsub+0x480>
 80028f0:	08c0      	lsrs	r0, r0, #3
 80028f2:	077b      	lsls	r3, r7, #29
 80028f4:	465d      	mov	r5, fp
 80028f6:	4303      	orrs	r3, r0
 80028f8:	08fa      	lsrs	r2, r7, #3
 80028fa:	e666      	b.n	80025ca <__aeabi_dsub+0x32e>
 80028fc:	08c0      	lsrs	r0, r0, #3
 80028fe:	077b      	lsls	r3, r7, #29
 8002900:	4303      	orrs	r3, r0
 8002902:	08fa      	lsrs	r2, r7, #3
 8002904:	e65e      	b.n	80025c4 <__aeabi_dsub+0x328>
 8002906:	003a      	movs	r2, r7
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	4302      	orrs	r2, r0
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x674>
 800290e:	e682      	b.n	8002616 <__aeabi_dsub+0x37a>
 8002910:	464a      	mov	r2, r9
 8002912:	0752      	lsls	r2, r2, #29
 8002914:	2480      	movs	r4, #128	; 0x80
 8002916:	4313      	orrs	r3, r2
 8002918:	464a      	mov	r2, r9
 800291a:	0324      	lsls	r4, r4, #12
 800291c:	08d2      	lsrs	r2, r2, #3
 800291e:	4222      	tst	r2, r4
 8002920:	d007      	beq.n	8002932 <__aeabi_dsub+0x696>
 8002922:	08fe      	lsrs	r6, r7, #3
 8002924:	4226      	tst	r6, r4
 8002926:	d104      	bne.n	8002932 <__aeabi_dsub+0x696>
 8002928:	465d      	mov	r5, fp
 800292a:	0032      	movs	r2, r6
 800292c:	08c3      	lsrs	r3, r0, #3
 800292e:	077f      	lsls	r7, r7, #29
 8002930:	433b      	orrs	r3, r7
 8002932:	0f59      	lsrs	r1, r3, #29
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	08db      	lsrs	r3, r3, #3
 8002938:	0749      	lsls	r1, r1, #29
 800293a:	430b      	orrs	r3, r1
 800293c:	e670      	b.n	8002620 <__aeabi_dsub+0x384>
 800293e:	08c0      	lsrs	r0, r0, #3
 8002940:	077b      	lsls	r3, r7, #29
 8002942:	4303      	orrs	r3, r0
 8002944:	08fa      	lsrs	r2, r7, #3
 8002946:	e640      	b.n	80025ca <__aeabi_dsub+0x32e>
 8002948:	464c      	mov	r4, r9
 800294a:	3920      	subs	r1, #32
 800294c:	40cc      	lsrs	r4, r1
 800294e:	4661      	mov	r1, ip
 8002950:	2920      	cmp	r1, #32
 8002952:	d006      	beq.n	8002962 <__aeabi_dsub+0x6c6>
 8002954:	4666      	mov	r6, ip
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	1b89      	subs	r1, r1, r6
 800295a:	464e      	mov	r6, r9
 800295c:	408e      	lsls	r6, r1
 800295e:	4333      	orrs	r3, r6
 8002960:	4698      	mov	r8, r3
 8002962:	4643      	mov	r3, r8
 8002964:	1e59      	subs	r1, r3, #1
 8002966:	418b      	sbcs	r3, r1
 8002968:	431c      	orrs	r4, r3
 800296a:	e5d8      	b.n	800251e <__aeabi_dsub+0x282>
 800296c:	181c      	adds	r4, r3, r0
 800296e:	4284      	cmp	r4, r0
 8002970:	4180      	sbcs	r0, r0
 8002972:	444f      	add	r7, r9
 8002974:	46ba      	mov	sl, r7
 8002976:	4240      	negs	r0, r0
 8002978:	4482      	add	sl, r0
 800297a:	e6d9      	b.n	8002730 <__aeabi_dsub+0x494>
 800297c:	4653      	mov	r3, sl
 800297e:	4323      	orrs	r3, r4
 8002980:	d100      	bne.n	8002984 <__aeabi_dsub+0x6e8>
 8002982:	e6cb      	b.n	800271c <__aeabi_dsub+0x480>
 8002984:	e614      	b.n	80025b0 <__aeabi_dsub+0x314>
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	000007ff 	.word	0x000007ff
 800298c:	ff7fffff 	.word	0xff7fffff
 8002990:	000007fe 	.word	0x000007fe
 8002994:	2300      	movs	r3, #0
 8002996:	4a01      	ldr	r2, [pc, #4]	; (800299c <__aeabi_dsub+0x700>)
 8002998:	001c      	movs	r4, r3
 800299a:	e529      	b.n	80023f0 <__aeabi_dsub+0x154>
 800299c:	000007ff 	.word	0x000007ff

080029a0 <__aeabi_dcmpun>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	0005      	movs	r5, r0
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <__aeabi_dcmpun+0x38>)
 80029a6:	031c      	lsls	r4, r3, #12
 80029a8:	0016      	movs	r6, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	030a      	lsls	r2, r1, #12
 80029ae:	0049      	lsls	r1, r1, #1
 80029b0:	0b12      	lsrs	r2, r2, #12
 80029b2:	0d49      	lsrs	r1, r1, #21
 80029b4:	0b24      	lsrs	r4, r4, #12
 80029b6:	0d5b      	lsrs	r3, r3, #21
 80029b8:	4281      	cmp	r1, r0
 80029ba:	d008      	beq.n	80029ce <__aeabi_dcmpun+0x2e>
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <__aeabi_dcmpun+0x38>)
 80029be:	2000      	movs	r0, #0
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <__aeabi_dcmpun+0x2c>
 80029c4:	0020      	movs	r0, r4
 80029c6:	4330      	orrs	r0, r6
 80029c8:	1e43      	subs	r3, r0, #1
 80029ca:	4198      	sbcs	r0, r3
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
 80029ce:	2001      	movs	r0, #1
 80029d0:	432a      	orrs	r2, r5
 80029d2:	d1fb      	bne.n	80029cc <__aeabi_dcmpun+0x2c>
 80029d4:	e7f2      	b.n	80029bc <__aeabi_dcmpun+0x1c>
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	000007ff 	.word	0x000007ff

080029dc <__aeabi_d2iz>:
 80029dc:	000a      	movs	r2, r1
 80029de:	b530      	push	{r4, r5, lr}
 80029e0:	4c13      	ldr	r4, [pc, #76]	; (8002a30 <__aeabi_d2iz+0x54>)
 80029e2:	0053      	lsls	r3, r2, #1
 80029e4:	0309      	lsls	r1, r1, #12
 80029e6:	0005      	movs	r5, r0
 80029e8:	0b09      	lsrs	r1, r1, #12
 80029ea:	2000      	movs	r0, #0
 80029ec:	0d5b      	lsrs	r3, r3, #21
 80029ee:	0fd2      	lsrs	r2, r2, #31
 80029f0:	42a3      	cmp	r3, r4
 80029f2:	dd04      	ble.n	80029fe <__aeabi_d2iz+0x22>
 80029f4:	480f      	ldr	r0, [pc, #60]	; (8002a34 <__aeabi_d2iz+0x58>)
 80029f6:	4283      	cmp	r3, r0
 80029f8:	dd02      	ble.n	8002a00 <__aeabi_d2iz+0x24>
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <__aeabi_d2iz+0x5c>)
 80029fc:	18d0      	adds	r0, r2, r3
 80029fe:	bd30      	pop	{r4, r5, pc}
 8002a00:	2080      	movs	r0, #128	; 0x80
 8002a02:	0340      	lsls	r0, r0, #13
 8002a04:	4301      	orrs	r1, r0
 8002a06:	480d      	ldr	r0, [pc, #52]	; (8002a3c <__aeabi_d2iz+0x60>)
 8002a08:	1ac0      	subs	r0, r0, r3
 8002a0a:	281f      	cmp	r0, #31
 8002a0c:	dd08      	ble.n	8002a20 <__aeabi_d2iz+0x44>
 8002a0e:	480c      	ldr	r0, [pc, #48]	; (8002a40 <__aeabi_d2iz+0x64>)
 8002a10:	1ac3      	subs	r3, r0, r3
 8002a12:	40d9      	lsrs	r1, r3
 8002a14:	000b      	movs	r3, r1
 8002a16:	4258      	negs	r0, r3
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d1f0      	bne.n	80029fe <__aeabi_d2iz+0x22>
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	e7ee      	b.n	80029fe <__aeabi_d2iz+0x22>
 8002a20:	4c08      	ldr	r4, [pc, #32]	; (8002a44 <__aeabi_d2iz+0x68>)
 8002a22:	40c5      	lsrs	r5, r0
 8002a24:	46a4      	mov	ip, r4
 8002a26:	4463      	add	r3, ip
 8002a28:	4099      	lsls	r1, r3
 8002a2a:	000b      	movs	r3, r1
 8002a2c:	432b      	orrs	r3, r5
 8002a2e:	e7f2      	b.n	8002a16 <__aeabi_d2iz+0x3a>
 8002a30:	000003fe 	.word	0x000003fe
 8002a34:	0000041d 	.word	0x0000041d
 8002a38:	7fffffff 	.word	0x7fffffff
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	fffffbed 	.word	0xfffffbed

08002a48 <__aeabi_i2d>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d016      	beq.n	8002a7c <__aeabi_i2d+0x34>
 8002a4e:	17c3      	asrs	r3, r0, #31
 8002a50:	18c5      	adds	r5, r0, r3
 8002a52:	405d      	eors	r5, r3
 8002a54:	0fc4      	lsrs	r4, r0, #31
 8002a56:	0028      	movs	r0, r5
 8002a58:	f000 f894 	bl	8002b84 <__clzsi2>
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <__aeabi_i2d+0x5c>)
 8002a5e:	1a1b      	subs	r3, r3, r0
 8002a60:	280a      	cmp	r0, #10
 8002a62:	dc16      	bgt.n	8002a92 <__aeabi_i2d+0x4a>
 8002a64:	0002      	movs	r2, r0
 8002a66:	002e      	movs	r6, r5
 8002a68:	3215      	adds	r2, #21
 8002a6a:	4096      	lsls	r6, r2
 8002a6c:	220b      	movs	r2, #11
 8002a6e:	1a12      	subs	r2, r2, r0
 8002a70:	40d5      	lsrs	r5, r2
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	032d      	lsls	r5, r5, #12
 8002a76:	0b2d      	lsrs	r5, r5, #12
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	e003      	b.n	8002a84 <__aeabi_i2d+0x3c>
 8002a7c:	2400      	movs	r4, #0
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2500      	movs	r5, #0
 8002a82:	2600      	movs	r6, #0
 8002a84:	051b      	lsls	r3, r3, #20
 8002a86:	432b      	orrs	r3, r5
 8002a88:	07e4      	lsls	r4, r4, #31
 8002a8a:	4323      	orrs	r3, r4
 8002a8c:	0030      	movs	r0, r6
 8002a8e:	0019      	movs	r1, r3
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
 8002a92:	380b      	subs	r0, #11
 8002a94:	4085      	lsls	r5, r0
 8002a96:	055b      	lsls	r3, r3, #21
 8002a98:	032d      	lsls	r5, r5, #12
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	0b2d      	lsrs	r5, r5, #12
 8002a9e:	0d5b      	lsrs	r3, r3, #21
 8002aa0:	e7f0      	b.n	8002a84 <__aeabi_i2d+0x3c>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	0000041e 	.word	0x0000041e

08002aa8 <__aeabi_ui2d>:
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	1e04      	subs	r4, r0, #0
 8002aac:	d010      	beq.n	8002ad0 <__aeabi_ui2d+0x28>
 8002aae:	f000 f869 	bl	8002b84 <__clzsi2>
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <__aeabi_ui2d+0x48>)
 8002ab4:	1a1b      	subs	r3, r3, r0
 8002ab6:	280a      	cmp	r0, #10
 8002ab8:	dc11      	bgt.n	8002ade <__aeabi_ui2d+0x36>
 8002aba:	220b      	movs	r2, #11
 8002abc:	0021      	movs	r1, r4
 8002abe:	1a12      	subs	r2, r2, r0
 8002ac0:	40d1      	lsrs	r1, r2
 8002ac2:	3015      	adds	r0, #21
 8002ac4:	030a      	lsls	r2, r1, #12
 8002ac6:	055b      	lsls	r3, r3, #21
 8002ac8:	4084      	lsls	r4, r0
 8002aca:	0b12      	lsrs	r2, r2, #12
 8002acc:	0d5b      	lsrs	r3, r3, #21
 8002ace:	e001      	b.n	8002ad4 <__aeabi_ui2d+0x2c>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	051b      	lsls	r3, r3, #20
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	0020      	movs	r0, r4
 8002ada:	0019      	movs	r1, r3
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	0022      	movs	r2, r4
 8002ae0:	380b      	subs	r0, #11
 8002ae2:	4082      	lsls	r2, r0
 8002ae4:	055b      	lsls	r3, r3, #21
 8002ae6:	0312      	lsls	r2, r2, #12
 8002ae8:	2400      	movs	r4, #0
 8002aea:	0b12      	lsrs	r2, r2, #12
 8002aec:	0d5b      	lsrs	r3, r3, #21
 8002aee:	e7f1      	b.n	8002ad4 <__aeabi_ui2d+0x2c>
 8002af0:	0000041e 	.word	0x0000041e

08002af4 <__aeabi_f2d>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	0242      	lsls	r2, r0, #9
 8002af8:	0043      	lsls	r3, r0, #1
 8002afa:	0fc4      	lsrs	r4, r0, #31
 8002afc:	20fe      	movs	r0, #254	; 0xfe
 8002afe:	0e1b      	lsrs	r3, r3, #24
 8002b00:	1c59      	adds	r1, r3, #1
 8002b02:	0a55      	lsrs	r5, r2, #9
 8002b04:	4208      	tst	r0, r1
 8002b06:	d00c      	beq.n	8002b22 <__aeabi_f2d+0x2e>
 8002b08:	21e0      	movs	r1, #224	; 0xe0
 8002b0a:	0089      	lsls	r1, r1, #2
 8002b0c:	468c      	mov	ip, r1
 8002b0e:	076d      	lsls	r5, r5, #29
 8002b10:	0b12      	lsrs	r2, r2, #12
 8002b12:	4463      	add	r3, ip
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	4313      	orrs	r3, r2
 8002b18:	07e4      	lsls	r4, r4, #31
 8002b1a:	4323      	orrs	r3, r4
 8002b1c:	0028      	movs	r0, r5
 8002b1e:	0019      	movs	r1, r3
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d114      	bne.n	8002b50 <__aeabi_f2d+0x5c>
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	d01b      	beq.n	8002b62 <__aeabi_f2d+0x6e>
 8002b2a:	0028      	movs	r0, r5
 8002b2c:	f000 f82a 	bl	8002b84 <__clzsi2>
 8002b30:	280a      	cmp	r0, #10
 8002b32:	dc1c      	bgt.n	8002b6e <__aeabi_f2d+0x7a>
 8002b34:	230b      	movs	r3, #11
 8002b36:	002a      	movs	r2, r5
 8002b38:	1a1b      	subs	r3, r3, r0
 8002b3a:	40da      	lsrs	r2, r3
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	3315      	adds	r3, #21
 8002b40:	409d      	lsls	r5, r3
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <__aeabi_f2d+0x88>)
 8002b44:	0312      	lsls	r2, r2, #12
 8002b46:	1a1b      	subs	r3, r3, r0
 8002b48:	055b      	lsls	r3, r3, #21
 8002b4a:	0b12      	lsrs	r2, r2, #12
 8002b4c:	0d5b      	lsrs	r3, r3, #21
 8002b4e:	e7e1      	b.n	8002b14 <__aeabi_f2d+0x20>
 8002b50:	2d00      	cmp	r5, #0
 8002b52:	d009      	beq.n	8002b68 <__aeabi_f2d+0x74>
 8002b54:	0b13      	lsrs	r3, r2, #12
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	0312      	lsls	r2, r2, #12
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	076d      	lsls	r5, r5, #29
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <__aeabi_f2d+0x8c>)
 8002b60:	e7d8      	b.n	8002b14 <__aeabi_f2d+0x20>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2200      	movs	r2, #0
 8002b66:	e7d5      	b.n	8002b14 <__aeabi_f2d+0x20>
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <__aeabi_f2d+0x8c>)
 8002b6c:	e7d2      	b.n	8002b14 <__aeabi_f2d+0x20>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	002a      	movs	r2, r5
 8002b72:	3b0b      	subs	r3, #11
 8002b74:	409a      	lsls	r2, r3
 8002b76:	2500      	movs	r5, #0
 8002b78:	e7e3      	b.n	8002b42 <__aeabi_f2d+0x4e>
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	00000389 	.word	0x00000389
 8002b80:	000007ff 	.word	0x000007ff

08002b84 <__clzsi2>:
 8002b84:	211c      	movs	r1, #28
 8002b86:	2301      	movs	r3, #1
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	4298      	cmp	r0, r3
 8002b8c:	d301      	bcc.n	8002b92 <__clzsi2+0xe>
 8002b8e:	0c00      	lsrs	r0, r0, #16
 8002b90:	3910      	subs	r1, #16
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	4298      	cmp	r0, r3
 8002b96:	d301      	bcc.n	8002b9c <__clzsi2+0x18>
 8002b98:	0a00      	lsrs	r0, r0, #8
 8002b9a:	3908      	subs	r1, #8
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	4298      	cmp	r0, r3
 8002ba0:	d301      	bcc.n	8002ba6 <__clzsi2+0x22>
 8002ba2:	0900      	lsrs	r0, r0, #4
 8002ba4:	3904      	subs	r1, #4
 8002ba6:	a202      	add	r2, pc, #8	; (adr r2, 8002bb0 <__clzsi2+0x2c>)
 8002ba8:	5c10      	ldrb	r0, [r2, r0]
 8002baa:	1840      	adds	r0, r0, r1
 8002bac:	4770      	bx	lr
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	02020304 	.word	0x02020304
 8002bb4:	01010101 	.word	0x01010101
	...

08002bc0 <__clzdi2>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	2900      	cmp	r1, #0
 8002bc4:	d103      	bne.n	8002bce <__clzdi2+0xe>
 8002bc6:	f7ff ffdd 	bl	8002b84 <__clzsi2>
 8002bca:	3020      	adds	r0, #32
 8002bcc:	e002      	b.n	8002bd4 <__clzdi2+0x14>
 8002bce:	0008      	movs	r0, r1
 8002bd0:	f7ff ffd8 	bl	8002b84 <__clzsi2>
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)

08002bd8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


   ldr   r0, =_estack
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bdc:	f001 f950 	bl	8003e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002be2:	490d      	ldr	r1, [pc, #52]	; (8002c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <LoopForever+0xe>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be8:	e002      	b.n	8002bf0 <LoopCopyDataInit>

08002bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bee:	3304      	adds	r3, #4

08002bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf4:	d3f9      	bcc.n	8002bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bf8:	4c0a      	ldr	r4, [pc, #40]	; (8002c24 <LoopForever+0x16>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bfc:	e001      	b.n	8002c02 <LoopFillZerobss>

08002bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c00:	3204      	adds	r2, #4

08002c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c04:	d3fb      	bcc.n	8002bfe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002c06:	f005 f8e1 	bl	8007dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c0a:	f000 f91b 	bl	8002e44 <main>

08002c0e <LoopForever>:

LoopForever:
    b LoopForever
 8002c0e:	e7fe      	b.n	8002c0e <LoopForever>
   ldr   r0, =_estack
 8002c10:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c18:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 8002c1c:	0800a614 	.word	0x0800a614
  ldr r2, =_sbss
 8002c20:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8002c24:	2000079c 	.word	0x2000079c

08002c28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c28:	e7fe      	b.n	8002c28 <ADC1_COMP_IRQHandler>
	...

08002c2c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	0002      	movs	r2, r0
 8002c34:	1dfb      	adds	r3, r7, #7
 8002c36:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002c38:	200f      	movs	r0, #15
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	1dfa      	adds	r2, r7, #7
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	210f      	movs	r1, #15
 8002c42:	438a      	bics	r2, r1
 8002c44:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	011a      	lsls	r2, r3, #4
 8002c4c:	240e      	movs	r4, #14
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c52:	183b      	adds	r3, r7, r0
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	220c      	movs	r2, #12
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	2108      	movs	r1, #8
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2208      	movs	r2, #8
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	220c      	movs	r2, #12
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2208      	movs	r2, #8
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 300);
 8002c8c:	187a      	adds	r2, r7, r1
 8002c8e:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <lcd_send_cmd+0x7c>)
 8002c90:	2396      	movs	r3, #150	; 0x96
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2304      	movs	r3, #4
 8002c98:	214e      	movs	r1, #78	; 0x4e
 8002c9a:	f001 fcb7 	bl	800460c <HAL_I2C_Master_Transmit>
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b005      	add	sp, #20
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000454 	.word	0x20000454

08002cac <lcd_send_data>:

void lcd_send_data (char data)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	1dfb      	adds	r3, r7, #7
 8002cb6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002cb8:	200f      	movs	r0, #15
 8002cba:	183b      	adds	r3, r7, r0
 8002cbc:	1dfa      	adds	r2, r7, #7
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	210f      	movs	r1, #15
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8002cc6:	1dfb      	adds	r3, r7, #7
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	011a      	lsls	r2, r3, #4
 8002ccc:	240e      	movs	r4, #14
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	220d      	movs	r2, #13
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	2108      	movs	r1, #8
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ce2:	183b      	adds	r3, r7, r0
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2209      	movs	r2, #9
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	220d      	movs	r2, #13
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2209      	movs	r2, #9
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 300);
 8002d0c:	187a      	adds	r2, r7, r1
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <lcd_send_data+0x7c>)
 8002d10:	2396      	movs	r3, #150	; 0x96
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2304      	movs	r3, #4
 8002d18:	214e      	movs	r1, #78	; 0x4e
 8002d1a:	f001 fc77 	bl	800460c <HAL_I2C_Master_Transmit>
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b005      	add	sp, #20
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000454 	.word	0x20000454

08002d2c <lcd_clear>:

void lcd_clear (void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8002d32:	2080      	movs	r0, #128	; 0x80
 8002d34:	f7ff ff7a 	bl	8002c2c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	e005      	b.n	8002d4a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8002d3e:	2020      	movs	r0, #32
 8002d40:	f7ff ffb4 	bl	8002cac <lcd_send_data>
	for (int i=0; i<70; i++)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b45      	cmp	r3, #69	; 0x45
 8002d4e:	ddf6      	ble.n	8002d3e <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0);
 8002d50:	2100      	movs	r1, #0
 8002d52:	2000      	movs	r0, #0
 8002d54:	f000 f804 	bl	8002d60 <lcd_put_cur>
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    switch (row)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <lcd_put_cur+0x18>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <lcd_put_cur+0x22>
 8002d76:	e009      	b.n	8002d8c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	603b      	str	r3, [r7, #0]
            break;
 8002d80:	e004      	b.n	8002d8c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	22c0      	movs	r2, #192	; 0xc0
 8002d86:	4313      	orrs	r3, r2
 8002d88:	603b      	str	r3, [r7, #0]
            break;
 8002d8a:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff ff4b 	bl	8002c2c <lcd_send_cmd>
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <lcd_init>:


void lcd_init (void)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002da2:	2032      	movs	r0, #50	; 0x32
 8002da4:	f001 f8e2 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002da8:	2030      	movs	r0, #48	; 0x30
 8002daa:	f7ff ff3f 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(15);  // wait for >4.1ms
 8002dae:	200f      	movs	r0, #15
 8002db0:	f001 f8dc 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002db4:	2030      	movs	r0, #48	; 0x30
 8002db6:	f7ff ff39 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(15);  // wait for >100us
 8002dba:	200f      	movs	r0, #15
 8002dbc:	f001 f8d6 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002dc0:	2030      	movs	r0, #48	; 0x30
 8002dc2:	f7ff ff33 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(15);
 8002dc6:	200f      	movs	r0, #15
 8002dc8:	f001 f8d0 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002dcc:	2020      	movs	r0, #32
 8002dce:	f7ff ff2d 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(15);
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	f001 f8ca 	bl	8003f6c <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002dd8:	2028      	movs	r0, #40	; 0x28
 8002dda:	f7ff ff27 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f001 f8c4 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002de4:	2008      	movs	r0, #8
 8002de6:	f7ff ff21 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f001 f8be 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7ff ff1b 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(1);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f001 f8b8 	bl	8003f6c <HAL_Delay>
	HAL_Delay(1);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f001 f8b5 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002e02:	2006      	movs	r0, #6
 8002e04:	f7ff ff12 	bl	8002c2c <lcd_send_cmd>
	HAL_Delay(1);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f001 f8af 	bl	8003f6c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002e0e:	200c      	movs	r0, #12
 8002e10:	f7ff ff0c 	bl	8002c2c <lcd_send_cmd>
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <lcd_send_string>:

void lcd_send_string (const char *str)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002e22:	e006      	b.n	8002e32 <lcd_send_string+0x18>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff ff3d 	bl	8002cac <lcd_send_data>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f4      	bne.n	8002e24 <lcd_send_string+0xa>
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e48:	f001 f820 	bl	8003e8c <HAL_Init>

	//HAL_TIM_Base_Start(&htim3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e4c:	f000 f82a 	bl	8002ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e50:	f000 fa00 	bl	8003254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e54:	f000 f912 	bl	800307c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002e58:	f000 f9a4 	bl	80031a4 <MX_TIM3_Init>
  MX_RTC_Init();
 8002e5c:	f000 f93e 	bl	80030dc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8002e60:	f000 f8de 	bl	8003020 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8002e64:	f000 f89c 	bl	8002fa0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	0059      	lsls	r1, r3, #1
 8002e6c:	23a0      	movs	r3, #160	; 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2201      	movs	r2, #1
 8002e72:	0018      	movs	r0, r3
 8002e74:	f001 fafa 	bl	800446c <HAL_GPIO_WritePin>
	lcd_init();
 8002e78:	f7ff ff91 	bl	8002d9e <lcd_init>
	lcd_put_cur(row,col);
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <main+0x58>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <main+0x5c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0019      	movs	r1, r3
 8002e86:	0010      	movs	r0, r2
 8002e88:	f7ff ff6a 	bl	8002d60 <lcd_put_cur>
	lcd_clear ();
 8002e8c:	f7ff ff4e 	bl	8002d2c <lcd_clear>
	menuInit(); // display first screen
 8002e90:	f000 fa98 	bl	80033c4 <menuInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		menu();
 8002e94:	f000 fb44 	bl	8003520 <menu>
 8002e98:	e7fc      	b.n	8002e94 <main+0x50>
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	2000061c 	.word	0x2000061c
 8002ea0:	20000620 	.word	0x20000620

08002ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b09f      	sub	sp, #124	; 0x7c
 8002ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eaa:	2440      	movs	r4, #64	; 0x40
 8002eac:	193b      	adds	r3, r7, r4
 8002eae:	0018      	movs	r0, r3
 8002eb0:	2338      	movs	r3, #56	; 0x38
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f004 ff29 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eba:	232c      	movs	r3, #44	; 0x2c
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	2314      	movs	r3, #20
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f004 ff21 	bl	8007d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	0018      	movs	r0, r3
 8002ece:	2328      	movs	r3, #40	; 0x28
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f004 ff1a 	bl	8007d0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed8:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <SystemClock_Config+0xf4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <SystemClock_Config+0xf8>)
 8002ede:	401a      	ands	r2, r3
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <SystemClock_Config+0xf4>)
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	0109      	lsls	r1, r1, #4
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	2209      	movs	r2, #9
 8002eee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	22a0      	movs	r2, #160	; 0xa0
 8002ef4:	02d2      	lsls	r2, r2, #11
 8002ef6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ef8:	0021      	movs	r1, r4
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2201      	movs	r2, #1
 8002efe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2202      	movs	r2, #2
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0252      	lsls	r2, r2, #9
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8002f0e:	187b      	adds	r3, r7, r1
 8002f10:	22c0      	movs	r2, #192	; 0xc0
 8002f12:	0312      	lsls	r2, r2, #12
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	03d2      	lsls	r2, r2, #15
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 ff47 	bl	8004db4 <HAL_RCC_OscConfig>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d001      	beq.n	8002f2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002f2a:	f000 fa45 	bl	80033b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	220f      	movs	r2, #15
 8002f34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	2101      	movs	r1, #1
 8002f52:	0018      	movs	r0, r3
 8002f54:	f002 fb02 	bl	800555c <HAL_RCC_ClockConfig>
 8002f58:	1e03      	subs	r3, r0, #0
 8002f5a:	d001      	beq.n	8002f60 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002f5c:	f000 fa2c 	bl	80033b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	222e      	movs	r2, #46	; 0x2e
 8002f64:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2200      	movs	r2, #0
 8002f70:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	0292      	lsls	r2, r2, #10
 8002f7e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	0018      	movs	r0, r3
 8002f84:	f002 fd0e 	bl	80059a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d001      	beq.n	8002f90 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002f8c:	f000 fa14 	bl	80033b8 <Error_Handler>
  }
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b01f      	add	sp, #124	; 0x7c
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	ffffe7ff 	.word	0xffffe7ff

08002fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <MX_I2C1_Init+0x78>)
 8002fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <MX_I2C1_Init+0x7c>)
 8002fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f001 fa7f 	bl	80044e0 <HAL_I2C_Init>
 8002fe2:	1e03      	subs	r3, r0, #0
 8002fe4:	d001      	beq.n	8002fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002fe6:	f000 f9e7 	bl	80033b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <MX_I2C1_Init+0x74>)
 8002fec:	2100      	movs	r1, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f001 fe48 	bl	8004c84 <HAL_I2CEx_ConfigAnalogFilter>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ff8:	f000 f9de 	bl	80033b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <MX_I2C1_Init+0x74>)
 8002ffe:	2100      	movs	r1, #0
 8003000:	0018      	movs	r0, r3
 8003002:	f001 fe8b 	bl	8004d1c <HAL_I2CEx_ConfigDigitalFilter>
 8003006:	1e03      	subs	r3, r0, #0
 8003008:	d001      	beq.n	800300e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800300a:	f000 f9d5 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000454 	.word	0x20000454
 8003018:	40005400 	.word	0x40005400
 800301c:	00707cbb 	.word	0x00707cbb

08003020 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <MX_LPUART1_UART_Init+0x58>)
 8003028:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 800302c:	2296      	movs	r2, #150	; 0x96
 800302e:	0192      	lsls	r2, r2, #6
 8003030:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	0552      	lsls	r2, r2, #21
 8003038:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 8003048:	220c      	movs	r2, #12
 800304a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <MX_LPUART1_UART_Init+0x54>)
 8003060:	0018      	movs	r0, r3
 8003062:	f003 fb39 	bl	80066d8 <HAL_UART_Init>
 8003066:	1e03      	subs	r3, r0, #0
 8003068:	d001      	beq.n	800306e <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 800306a:	f000 f9a5 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200004a8 	.word	0x200004a8
 8003078:	40004800 	.word	0x40004800

0800307c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 8003082:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <MX_USART2_UART_Init+0x5c>)
 8003084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 8003088:	2296      	movs	r2, #150	; 0x96
 800308a:	0192      	lsls	r2, r2, #6
 800308c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 80030a2:	220c      	movs	r2, #12
 80030a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <MX_USART2_UART_Init+0x58>)
 80030c0:	0018      	movs	r0, r3
 80030c2:	f003 fb09 	bl	80066d8 <HAL_UART_Init>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d001      	beq.n	80030ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80030ca:	f000 f975 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000530 	.word	0x20000530
 80030d8:	40004400 	.word	0x40004400

080030dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	0018      	movs	r0, r3
 80030e6:	2314      	movs	r3, #20
 80030e8:	001a      	movs	r2, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	f004 fe0e 	bl	8007d0c <memset>
  RTC_DateTypeDef sDate = {0};
 80030f0:	003b      	movs	r3, r7
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <MX_RTC_Init+0xc0>)
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <MX_RTC_Init+0xc4>)
 80030fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <MX_RTC_Init+0xc0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <MX_RTC_Init+0xc0>)
 8003104:	227f      	movs	r2, #127	; 0x7f
 8003106:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <MX_RTC_Init+0xc0>)
 800310a:	22ff      	movs	r2, #255	; 0xff
 800310c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <MX_RTC_Init+0xc0>)
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <MX_RTC_Init+0xc0>)
 8003116:	2200      	movs	r2, #0
 8003118:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <MX_RTC_Init+0xc0>)
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <MX_RTC_Init+0xc0>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <MX_RTC_Init+0xc0>)
 8003128:	0018      	movs	r0, r3
 800312a:	f002 fdd9 	bl	8005ce0 <HAL_RTC_Init>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003132:	f000 f941 	bl	80033b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2210      	movs	r2, #16
 800313a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x27;
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	2227      	movs	r2, #39	; 0x27
 8003140:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	2200      	movs	r2, #0
 8003146:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003154:	1d39      	adds	r1, r7, #4
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <MX_RTC_Init+0xc0>)
 8003158:	2201      	movs	r2, #1
 800315a:	0018      	movs	r0, r3
 800315c:	f002 fe5c 	bl	8005e18 <HAL_RTC_SetTime>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d001      	beq.n	8003168 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8003164:	f000 f928 	bl	80033b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003168:	003b      	movs	r3, r7
 800316a:	2202      	movs	r2, #2
 800316c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 800316e:	003b      	movs	r3, r7
 8003170:	2206      	movs	r2, #6
 8003172:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x13;
 8003174:	003b      	movs	r3, r7
 8003176:	2213      	movs	r2, #19
 8003178:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800317a:	003b      	movs	r3, r7
 800317c:	2200      	movs	r2, #0
 800317e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003180:	0039      	movs	r1, r7
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <MX_RTC_Init+0xc0>)
 8003184:	2201      	movs	r2, #1
 8003186:	0018      	movs	r0, r3
 8003188:	f002 fef0 	bl	8005f6c <HAL_RTC_SetDate>
 800318c:	1e03      	subs	r3, r0, #0
 800318e:	d001      	beq.n	8003194 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8003190:	f000 f912 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200005b8 	.word	0x200005b8
 80031a0:	40002800 	.word	0x40002800

080031a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031aa:	2308      	movs	r3, #8
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	0018      	movs	r0, r3
 80031b0:	2310      	movs	r3, #16
 80031b2:	001a      	movs	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	f004 fda9 	bl	8007d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ba:	003b      	movs	r3, r7
 80031bc:	0018      	movs	r0, r3
 80031be:	2308      	movs	r3, #8
 80031c0:	001a      	movs	r2, r3
 80031c2:	2100      	movs	r1, #0
 80031c4:	f004 fda2 	bl	8007d0c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <MX_TIM3_Init+0xa4>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000 - 1;
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <MX_TIM3_Init+0xa8>)
 80031d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <MX_TIM3_Init+0xac>)
 80031de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e6:	4b17      	ldr	r3, [pc, #92]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <MX_TIM3_Init+0xa0>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f003 f807 	bl	8006202 <HAL_TIM_Base_Init>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80031f8:	f000 f8de 	bl	80033b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fc:	2108      	movs	r1, #8
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	0152      	lsls	r2, r2, #5
 8003204:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003206:	187a      	adds	r2, r7, r1
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_TIM3_Init+0xa0>)
 800320a:	0011      	movs	r1, r2
 800320c:	0018      	movs	r0, r3
 800320e:	f003 f839 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8003212:	1e03      	subs	r3, r0, #0
 8003214:	d001      	beq.n	800321a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003216:	f000 f8cf 	bl	80033b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800321a:	003b      	movs	r3, r7
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003220:	003b      	movs	r3, r7
 8003222:	2200      	movs	r2, #0
 8003224:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003226:	003a      	movs	r2, r7
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_TIM3_Init+0xa0>)
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f003 f9f5 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d001      	beq.n	800323a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003236:	f000 f8bf 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b006      	add	sp, #24
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	200005dc 	.word	0x200005dc
 8003248:	40000400 	.word	0x40000400
 800324c:	00007cff 	.word	0x00007cff
 8003250:	0000ffff 	.word	0x0000ffff

08003254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b08b      	sub	sp, #44	; 0x2c
 8003258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325a:	2414      	movs	r4, #20
 800325c:	193b      	adds	r3, r7, r4
 800325e:	0018      	movs	r0, r3
 8003260:	2314      	movs	r3, #20
 8003262:	001a      	movs	r2, r3
 8003264:	2100      	movs	r1, #0
 8003266:	f004 fd51 	bl	8007d0c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <MX_GPIO_Init+0x154>)
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	4b4e      	ldr	r3, [pc, #312]	; (80033a8 <MX_GPIO_Init+0x154>)
 8003270:	2104      	movs	r1, #4
 8003272:	430a      	orrs	r2, r1
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <MX_GPIO_Init+0x154>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	2204      	movs	r2, #4
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <MX_GPIO_Init+0x154>)
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4b48      	ldr	r3, [pc, #288]	; (80033a8 <MX_GPIO_Init+0x154>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	430a      	orrs	r2, r1
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <MX_GPIO_Init+0x154>)
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <MX_GPIO_Init+0x154>)
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <MX_GPIO_Init+0x154>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a6:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <MX_GPIO_Init+0x154>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <MX_GPIO_Init+0x154>)
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <MX_GPIO_Init+0x154>)
 80032b8:	2102      	movs	r1, #2
 80032ba:	430a      	orrs	r2, r1
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <MX_GPIO_Init+0x154>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	2202      	movs	r2, #2
 80032c4:	4013      	ands	r3, r2
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80032ca:	2334      	movs	r3, #52	; 0x34
 80032cc:	33ff      	adds	r3, #255	; 0xff
 80032ce:	0019      	movs	r1, r3
 80032d0:	23a0      	movs	r3, #160	; 0xa0
 80032d2:	05db      	lsls	r3, r3, #23
 80032d4:	2200      	movs	r2, #0
 80032d6:	0018      	movs	r0, r3
 80032d8:	f001 f8c8 	bl	800446c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80032dc:	4b33      	ldr	r3, [pc, #204]	; (80033ac <MX_GPIO_Init+0x158>)
 80032de:	2200      	movs	r2, #0
 80032e0:	2101      	movs	r1, #1
 80032e2:	0018      	movs	r0, r3
 80032e4:	f001 f8c2 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80032e8:	23a0      	movs	r3, #160	; 0xa0
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4830      	ldr	r0, [pc, #192]	; (80033b0 <MX_GPIO_Init+0x15c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	0019      	movs	r1, r3
 80032f2:	f001 f8bb 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	2234      	movs	r2, #52	; 0x34
 80032fa:	32ff      	adds	r2, #255	; 0xff
 80032fc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2201      	movs	r2, #1
 8003302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003310:	193a      	adds	r2, r7, r4
 8003312:	23a0      	movs	r3, #160	; 0xa0
 8003314:	05db      	lsls	r3, r3, #23
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f000 ff29 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2201      	movs	r2, #1
 8003328:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	193b      	adds	r3, r7, r4
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <MX_GPIO_Init+0x158>)
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f000 ff17 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRZYCISK_1_Pin PRZYCISK_4_Pin PRZYCISK_3_Pin PRZYCISK_2_Pin */
  GPIO_InitStruct.Pin = PRZYCISK_1_Pin|PRZYCISK_4_Pin|PRZYCISK_3_Pin|PRZYCISK_2_Pin;
 8003342:	0021      	movs	r1, r4
 8003344:	187b      	adds	r3, r7, r1
 8003346:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <MX_GPIO_Init+0x160>)
 8003348:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2288      	movs	r2, #136	; 0x88
 800334e:	0352      	lsls	r2, r2, #13
 8003350:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	000c      	movs	r4, r1
 800335a:	187b      	adds	r3, r7, r1
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <MX_GPIO_Init+0x158>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f000 ff05 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8003366:	0021      	movs	r1, r4
 8003368:	187b      	adds	r3, r7, r1
 800336a:	22a0      	movs	r2, #160	; 0xa0
 800336c:	0052      	lsls	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2201      	movs	r2, #1
 8003374:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003382:	187b      	adds	r3, r7, r1
 8003384:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <MX_GPIO_Init+0x15c>)
 8003386:	0019      	movs	r1, r3
 8003388:	0010      	movs	r0, r2
 800338a:	f000 fef1 	bl	8004170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800338e:	2200      	movs	r2, #0
 8003390:	2100      	movs	r1, #0
 8003392:	2007      	movs	r0, #7
 8003394:	f000 feba 	bl	800410c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003398:	2007      	movs	r0, #7
 800339a:	f000 fecc 	bl	8004136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b00b      	add	sp, #44	; 0x2c
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	40021000 	.word	0x40021000
 80033ac:	50000400 	.word	0x50000400
 80033b0:	50000800 	.word	0x50000800
 80033b4:	0000e002 	.word	0x0000e002

080033b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033bc:	b672      	cpsid	i
}
 80033be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80033c0:	e7fe      	b.n	80033c0 <Error_Handler+0x8>
	...

080033c4 <menuInit>:
uint8_t flag = 0;
uint8_t actionFlag = 0;
char number[1];

void menuInit(void) //display first menu
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	lcd_clear();
 80033c8:	f7ff fcb0 	bl	8002d2c <lcd_clear>
	lcd_put_cur(0,0);
 80033cc:	2100      	movs	r1, #0
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7ff fcc6 	bl	8002d60 <lcd_put_cur>
	lcd_send_data('>'); //shows which line will be chosen if key SELECT pressed
 80033d4:	203e      	movs	r0, #62	; 0x3e
 80033d6:	f7ff fc69 	bl	8002cac <lcd_send_data>
	lcd_put_cur(0,1);
 80033da:	2101      	movs	r1, #1
 80033dc:	2000      	movs	r0, #0
 80033de:	f7ff fcbf 	bl	8002d60 <lcd_put_cur>
	lcd_send_string(select.text);
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <menuInit+0x40>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff fd17 	bl	8002e1a <lcd_send_string>
	lcd_put_cur(1,1);
 80033ec:	2101      	movs	r1, #1
 80033ee:	2001      	movs	r0, #1
 80033f0:	f7ff fcb6 	bl	8002d60 <lcd_put_cur>
	lcd_send_string(newM.text);
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <menuInit+0x44>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fd0e 	bl	8002e1a <lcd_send_string>
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000000 	.word	0x20000000
 8003408:	20000020 	.word	0x20000020

0800340c <displayCur>:

void displayCur(void) //displays the current 2-lines menu
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
		lcd_clear();
 8003410:	f7ff fc8c 	bl	8002d2c <lcd_clear>
		lcd_put_cur(0,0);
 8003414:	2100      	movs	r1, #0
 8003416:	2000      	movs	r0, #0
 8003418:	f7ff fca2 	bl	8002d60 <lcd_put_cur>
		lcd_send_data('>');
 800341c:	203e      	movs	r0, #62	; 0x3e
 800341e:	f7ff fc45 	bl	8002cac <lcd_send_data>
		lcd_put_cur(curIndex % 2,1);
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <displayCur+0xc8>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	001a      	movs	r2, r3
 8003428:	2301      	movs	r3, #1
 800342a:	4013      	ands	r3, r2
 800342c:	2101      	movs	r1, #1
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff fc96 	bl	8002d60 <lcd_put_cur>
		lcd_send_string(currentMenu->text);
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <displayCur+0xcc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff fced 	bl	8002e1a <lcd_send_string>
		lcd_put_cur((curIndex+1) % 2,1);
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <displayCur+0xc8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <displayCur+0xd0>)
 8003448:	4013      	ands	r3, r2
 800344a:	d504      	bpl.n	8003456 <displayCur+0x4a>
 800344c:	3b01      	subs	r3, #1
 800344e:	2202      	movs	r2, #2
 8003450:	4252      	negs	r2, r2
 8003452:	4313      	orrs	r3, r2
 8003454:	3301      	adds	r3, #1
 8003456:	2101      	movs	r1, #1
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff fc81 	bl	8002d60 <lcd_put_cur>
		if(currentMenu->next!=NULL){
 800345e:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <displayCur+0xcc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <displayCur+0x6c>
			lcd_send_string(currentMenu->next->text);
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <displayCur+0xcc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fcd2 	bl	8002e1a <lcd_send_string>
			//itoa(run.velocity,number,10);
			lcd_send_string(number);
			lcd_put_cur(1,0);
			lcd_send_string("Press button");
		}
}
 8003476:	e02a      	b.n	80034ce <displayCur+0xc2>
			lcd_put_cur(0,3);
 8003478:	2103      	movs	r1, #3
 800347a:	2000      	movs	r0, #0
 800347c:	f7ff fc70 	bl	8002d60 <lcd_put_cur>
			itoa(run.dose,number,10);
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <displayCur+0xd4>)
 8003482:	7d1b      	ldrb	r3, [r3, #20]
 8003484:	0018      	movs	r0, r3
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <displayCur+0xd8>)
 8003488:	220a      	movs	r2, #10
 800348a:	0019      	movs	r1, r3
 800348c:	f003 fe58 	bl	8007140 <itoa>
			lcd_send_string(number);
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <displayCur+0xd8>)
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff fcc1 	bl	8002e1a <lcd_send_string>
			lcd_put_cur(0,9);
 8003498:	2109      	movs	r1, #9
 800349a:	2000      	movs	r0, #0
 800349c:	f7ff fc60 	bl	8002d60 <lcd_put_cur>
			sprintf(number, "%.1f", run.velocity);
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <displayCur+0xd4>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	1c18      	adds	r0, r3, #0
 80034a6:	f7ff fb25 	bl	8002af4 <__aeabi_f2d>
 80034aa:	0002      	movs	r2, r0
 80034ac:	000b      	movs	r3, r1
 80034ae:	490e      	ldr	r1, [pc, #56]	; (80034e8 <displayCur+0xdc>)
 80034b0:	480c      	ldr	r0, [pc, #48]	; (80034e4 <displayCur+0xd8>)
 80034b2:	f004 fbbf 	bl	8007c34 <siprintf>
			lcd_send_string(number);
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <displayCur+0xd8>)
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fcae 	bl	8002e1a <lcd_send_string>
			lcd_put_cur(1,0);
 80034be:	2100      	movs	r1, #0
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7ff fc4d 	bl	8002d60 <lcd_put_cur>
			lcd_send_string("Press button");
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <displayCur+0xe0>)
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fca6 	bl	8002e1a <lcd_send_string>
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000640 	.word	0x20000640
 80034d8:	20000260 	.word	0x20000260
 80034dc:	80000001 	.word	0x80000001
 80034e0:	20000040 	.word	0x20000040
 80034e4:	20000644 	.word	0x20000644
 80034e8:	0800a118 	.word	0x0800a118
 80034ec:	0800a120 	.word	0x0800a120

080034f0 <stepInto>:
void stepInto(void) //enter into sub-menu
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	if(currentMenu->child!=NULL)
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <stepInto+0x28>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <stepInto+0x22>
	{
		curIndex = 0;
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <stepInto+0x2c>)
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
		currentMenu = currentMenu->child;
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <stepInto+0x28>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <stepInto+0x28>)
 800350c:	601a      	str	r2, [r3, #0]
		displayCur();
 800350e:	f7ff ff7d 	bl	800340c <displayCur>
	}
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000260 	.word	0x20000260
 800351c:	20000640 	.word	0x20000640

08003520 <menu>:

void menu(void) //check which key was pressed and move in menu
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	if(actionFlag != 0)
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <menu+0x90>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03a      	beq.n	80035a2 <menu+0x82>
	{
		if(flag == 1)
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <menu+0x94>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10c      	bne.n	800354e <menu+0x2e>
		{
			if(currentMenu->next!=NULL)
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <menu+0x98>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d031      	beq.n	80035a2 <menu+0x82>
			{
			currentMenu = currentMenu->next;
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <menu+0x98>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <menu+0x98>)
 8003546:	601a      	str	r2, [r3, #0]
			displayCur();
 8003548:	f7ff ff60 	bl	800340c <displayCur>
 800354c:	e029      	b.n	80035a2 <menu+0x82>
			}
		}
		else if(flag == 2)
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <menu+0x94>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d10c      	bne.n	8003570 <menu+0x50>
		{
			if(currentMenu->previous!=NULL)
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <menu+0x98>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <menu+0x82>
			{
			currentMenu = currentMenu->previous;
 8003560:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <menu+0x98>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <menu+0x98>)
 8003568:	601a      	str	r2, [r3, #0]
			displayCur();
 800356a:	f7ff ff4f 	bl	800340c <displayCur>
 800356e:	e018      	b.n	80035a2 <menu+0x82>
			}
		}
		else if(flag == 3)
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <menu+0x94>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d104      	bne.n	8003582 <menu+0x62>
		{
			currentMenu ->menu_function();
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <menu+0x98>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4798      	blx	r3
 8003580:	e00f      	b.n	80035a2 <menu+0x82>
		}
		else if(flag == 4)
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <menu+0x94>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d10b      	bne.n	80035a2 <menu+0x82>
		{
			if(currentMenu->parent!=NULL)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <menu+0x98>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <menu+0x82>
			{
			currentMenu = currentMenu->parent;
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <menu+0x98>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <menu+0x98>)
 800359c:	601a      	str	r2, [r3, #0]
			displayCur();
 800359e:	f7ff ff35 	bl	800340c <displayCur>
			}
		}
	}
	actionFlag = 0;
 80035a2:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <menu+0x90>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	20000642 	.word	0x20000642
 80035b4:	20000641 	.word	0x20000641
 80035b8:	20000260 	.word	0x20000260

080035bc <setParameters>:

void setParameters(void) //take the velocity and dose values from chosen menu
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	if(currentMenu->velocity != 0)
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <setParameters+0x50>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2100      	movs	r1, #0
 80035c8:	1c18      	adds	r0, r3, #0
 80035ca:	f7fc ff79 	bl	80004c0 <__aeabi_fcmpeq>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d104      	bne.n	80035dc <setParameters+0x20>
	{
		run.velocity = currentMenu->velocity;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <setParameters+0x50>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <setParameters+0x54>)
 80035da:	619a      	str	r2, [r3, #24]
	}
	if(currentMenu->dose != 0)
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <setParameters+0x50>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	7d1b      	ldrb	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <setParameters+0x34>
	{
		run.dose = currentMenu->dose;
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <setParameters+0x50>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	7d1a      	ldrb	r2, [r3, #20]
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <setParameters+0x54>)
 80035ee:	751a      	strb	r2, [r3, #20]
	}
	currentMenu = currentMenu->child;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <setParameters+0x50>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <setParameters+0x50>)
 80035f8:	601a      	str	r2, [r3, #0]
	curIndex = 0;
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <setParameters+0x58>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
	displayCur();
 8003600:	f7ff ff04 	bl	800340c <displayCur>
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	20000260 	.word	0x20000260
 8003610:	20000040 	.word	0x20000040
 8003614:	20000640 	.word	0x20000640

08003618 <start>:

void start(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
	//move the motor by the right angle with right speed
	lcd_clear();
 800361c:	f7ff fb86 	bl	8002d2c <lcd_clear>
	lcd_put_cur(0,0);
 8003620:	2100      	movs	r1, #0
 8003622:	2000      	movs	r0, #0
 8003624:	f7ff fb9c 	bl	8002d60 <lcd_put_cur>
	step_distance(currentMenu->dose, 0, currentMenu->velocity);
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <start+0x4c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	7d1b      	ldrb	r3, [r3, #20]
 800362e:	0018      	movs	r0, r3
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <start+0x4c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	1c1a      	adds	r2, r3, #0
 8003638:	2100      	movs	r1, #0
 800363a:	f000 f999 	bl	8003970 <step_distance>

    //come back to the previous position
    step_distance(currentMenu->dose, 1, currentMenu->velocity); //zmien predkosc na stala
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <start+0x4c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	7d1b      	ldrb	r3, [r3, #20]
 8003644:	0018      	movs	r0, r3
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <start+0x4c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	1c1a      	adds	r2, r3, #0
 800364e:	2101      	movs	r1, #1
 8003650:	f000 f98e 	bl	8003970 <step_distance>
	currentMenu = &end;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <start+0x4c>)
 8003656:	4a04      	ldr	r2, [pc, #16]	; (8003668 <start+0x50>)
 8003658:	601a      	str	r2, [r3, #0]
	lastDisplay();
 800365a:	f000 f81b 	bl	8003694 <lastDisplay>
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000260 	.word	0x20000260
 8003668:	20000240 	.word	0x20000240

0800366c <restart>:
void restart(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
	currentMenu = &select;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <restart+0x1c>)
 8003672:	4a06      	ldr	r2, [pc, #24]	; (800368c <restart+0x20>)
 8003674:	601a      	str	r2, [r3, #0]
	curIndex = 0;
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <restart+0x24>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
	displayCur();
 800367c:	f7ff fec6 	bl	800340c <displayCur>
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000260 	.word	0x20000260
 800368c:	20000000 	.word	0x20000000
 8003690:	20000640 	.word	0x20000640

08003694 <lastDisplay>:
void lastDisplay(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	lcd_clear();
 8003698:	f7ff fb48 	bl	8002d2c <lcd_clear>
	lcd_put_cur(0,6);
 800369c:	2106      	movs	r1, #6
 800369e:	2000      	movs	r0, #0
 80036a0:	f7ff fb5e 	bl	8002d60 <lcd_put_cur>
	lcd_send_string(currentMenu->text);
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <lastDisplay+0x24>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7ff fbb5 	bl	8002e1a <lcd_send_string>
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	20000260 	.word	0x20000260

080036bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //interrupts from keyboard
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	0002      	movs	r2, r0
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	801a      	strh	r2, [r3, #0]
  currentMillis = HAL_GetTick();
 80036c8:	f000 fc46 	bl	8003f58 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_GPIO_EXTI_Callback+0xc0>)
 80036d0:	601a      	str	r2, [r3, #0]
  if (currentMillis - previousMillis > 10)
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <HAL_GPIO_EXTI_Callback+0xc0>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <HAL_GPIO_EXTI_Callback+0xc4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b0a      	cmp	r3, #10
 80036de:	d948      	bls.n	8003772 <HAL_GPIO_EXTI_Callback+0xb6>
  {
	    /*Configure GPIO pins : PRZYCISK_1_Pin PRZYCISK_4_Pin PRZYCISK_3_Pin PRZYCISK_2_Pin */
	  GPIO_InitStructPrivate.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
 80036e0:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <HAL_GPIO_EXTI_Callback+0xcc>)
 80036e4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80036e6:	4b27      	ldr	r3, [pc, #156]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 80036e8:	2288      	movs	r2, #136	; 0x88
 80036ea:	0352      	lsls	r2, r2, #13
 80036ec:	605a      	str	r2, [r3, #4]
	  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80036ee:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80036f4:	4b23      	ldr	r3, [pc, #140]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 80036f6:	4a25      	ldr	r2, [pc, #148]	; (800378c <HAL_GPIO_EXTI_Callback+0xd0>)
 80036f8:	0019      	movs	r1, r3
 80036fa:	0010      	movs	r0, r2
 80036fc:	f000 fd38 	bl	8004170 <HAL_GPIO_Init>

	actionFlag=1;
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]

    if(GPIO_Pin == GPIO_PIN_1)
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	flag = 1;
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e01c      	b.n	8003750 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_15)
 8003716:	1dbb      	adds	r3, r7, #6
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	429a      	cmp	r2, r3
 8003720:	d103      	bne.n	800372a <HAL_GPIO_EXTI_Callback+0x6e>
    {
    	flag = 2;
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003724:	2202      	movs	r2, #2
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e012      	b.n	8003750 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_14)
 800372a:	1dbb      	adds	r3, r7, #6
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	01db      	lsls	r3, r3, #7
 8003732:	429a      	cmp	r2, r3
 8003734:	d103      	bne.n	800373e <HAL_GPIO_EXTI_Callback+0x82>
    {
    	flag = 3;
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003738:	2203      	movs	r2, #3
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e008      	b.n	8003750 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if(GPIO_Pin == GPIO_PIN_13)
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	429a      	cmp	r2, r3
 8003748:	d102      	bne.n	8003750 <HAL_GPIO_EXTI_Callback+0x94>
    {
    	flag = 4;
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_GPIO_EXTI_Callback+0xd8>)
 800374c:	2204      	movs	r2, #4
 800374e:	701a      	strb	r2, [r3, #0]
    }

    /*Configure GPIO pins : PB3 PB5 PB4 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003752:	2288      	movs	r2, #136	; 0x88
 8003754:	0352      	lsls	r2, r2, #13
 8003756:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 800375a:	2202      	movs	r2, #2
 800375c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_GPIO_EXTI_Callback+0xd0>)
 8003762:	0019      	movs	r1, r3
 8003764:	0010      	movs	r0, r2
 8003766:	f000 fd03 	bl	8004170 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <HAL_GPIO_EXTI_Callback+0xc0>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <HAL_GPIO_EXTI_Callback+0xc4>)
 8003770:	601a      	str	r2, [r3, #0]
  }
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	2000063c 	.word	0x2000063c
 8003780:	20000638 	.word	0x20000638
 8003784:	20000624 	.word	0x20000624
 8003788:	0000e002 	.word	0x0000e002
 800378c:	50000400 	.word	0x50000400
 8003790:	20000642 	.word	0x20000642
 8003794:	20000641 	.word	0x20000641

08003798 <calc_steps>:
 */
#include "stepper.h"
#include "stdlib.h"
#include <string.h>

int calc_steps (int doseinml) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	int steps = (((doseinml * 1000) / area) / linear_step);
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	0013      	movs	r3, r2
 80037a4:	015b      	lsls	r3, r3, #5
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7ff f94a 	bl	8002a48 <__aeabi_i2d>
 80037b4:	2200      	movs	r2, #0
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <calc_steps+0x50>)
 80037b8:	f7fd feb4 	bl	8001524 <__aeabi_ddiv>
 80037bc:	0002      	movs	r2, r0
 80037be:	000b      	movs	r3, r1
 80037c0:	0010      	movs	r0, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	4a09      	ldr	r2, [pc, #36]	; (80037ec <calc_steps+0x54>)
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <calc_steps+0x58>)
 80037c8:	f7fd feac 	bl	8001524 <__aeabi_ddiv>
 80037cc:	0002      	movs	r2, r0
 80037ce:	000b      	movs	r3, r1
 80037d0:	0010      	movs	r0, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	f7ff f902 	bl	80029dc <__aeabi_d2iz>
 80037d8:	0003      	movs	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
	return steps;
 80037dc:	68fb      	ldr	r3, [r7, #12]
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	40540000 	.word	0x40540000
 80037ec:	25460aa6 	.word	0x25460aa6
 80037f0:	3f9a0275 	.word	0x3f9a0275

080037f4 <set_speed>:

void set_speed (float mlforsec) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	float mmforsec = mlforsec * 1000 / area;
 80037fc:	4911      	ldr	r1, [pc, #68]	; (8003844 <set_speed+0x50>)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f970 	bl	8000ae4 <__aeabi_fmul>
 8003804:	1c03      	adds	r3, r0, #0
 8003806:	4910      	ldr	r1, [pc, #64]	; (8003848 <set_speed+0x54>)
 8003808:	1c18      	adds	r0, r3, #0
 800380a:	f7fc ffa1 	bl	8000750 <__aeabi_fdiv>
 800380e:	1c03      	adds	r3, r0, #0
 8003810:	60fb      	str	r3, [r7, #12]
	int delayms = (1000 * linear_step) / mmforsec;
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff f96e 	bl	8002af4 <__aeabi_f2d>
 8003818:	0002      	movs	r2, r0
 800381a:	000b      	movs	r3, r1
 800381c:	480b      	ldr	r0, [pc, #44]	; (800384c <set_speed+0x58>)
 800381e:	490c      	ldr	r1, [pc, #48]	; (8003850 <set_speed+0x5c>)
 8003820:	f7fd fe80 	bl	8001524 <__aeabi_ddiv>
 8003824:	0002      	movs	r2, r0
 8003826:	000b      	movs	r3, r1
 8003828:	0010      	movs	r0, r2
 800382a:	0019      	movs	r1, r3
 800382c:	f7ff f8d6 	bl	80029dc <__aeabi_d2iz>
 8003830:	0003      	movs	r3, r0
 8003832:	60bb      	str	r3, [r7, #8]
	HAL_Delay(delayms);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fb98 	bl	8003f6c <HAL_Delay>
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}
 8003844:	447a0000 	.word	0x447a0000
 8003848:	42a00000 	.word	0x42a00000
 800384c:	66666666 	.word	0x66666666
 8003850:	40396666 	.word	0x40396666

08003854 <stepping>:

void stepping (int step)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	switch (step)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d064      	beq.n	800392c <stepping+0xd8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b03      	cmp	r3, #3
 8003866:	dd00      	ble.n	800386a <stepping+0x16>
 8003868:	e07c      	b.n	8003964 <stepping+0x110>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d041      	beq.n	80038f4 <stepping+0xa0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	dc76      	bgt.n	8003964 <stepping+0x110>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <stepping+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d01c      	beq.n	80038bc <stepping+0x68>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		break;
	}
}
 8003882:	e06f      	b.n	8003964 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003884:	23a0      	movs	r3, #160	; 0xa0
 8003886:	05db      	lsls	r3, r3, #23
 8003888:	2201      	movs	r2, #1
 800388a:	2101      	movs	r1, #1
 800388c:	0018      	movs	r0, r3
 800388e:	f000 fded 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8003892:	23a0      	movs	r3, #160	; 0xa0
 8003894:	05db      	lsls	r3, r3, #23
 8003896:	2201      	movs	r2, #1
 8003898:	2102      	movs	r1, #2
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fde6 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80038a0:	23a0      	movs	r3, #160	; 0xa0
 80038a2:	05db      	lsls	r3, r3, #23
 80038a4:	2200      	movs	r2, #0
 80038a6:	2110      	movs	r1, #16
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fddf 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80038ae:	4b2f      	ldr	r3, [pc, #188]	; (800396c <stepping+0x118>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	2101      	movs	r1, #1
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fdd9 	bl	800446c <HAL_GPIO_WritePin>
		break;
 80038ba:	e053      	b.n	8003964 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80038bc:	23a0      	movs	r3, #160	; 0xa0
 80038be:	05db      	lsls	r3, r3, #23
 80038c0:	2200      	movs	r2, #0
 80038c2:	2101      	movs	r1, #1
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fdd1 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80038ca:	23a0      	movs	r3, #160	; 0xa0
 80038cc:	05db      	lsls	r3, r3, #23
 80038ce:	2201      	movs	r2, #1
 80038d0:	2102      	movs	r1, #2
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 fdca 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80038d8:	23a0      	movs	r3, #160	; 0xa0
 80038da:	05db      	lsls	r3, r3, #23
 80038dc:	2201      	movs	r2, #1
 80038de:	2110      	movs	r1, #16
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 fdc3 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80038e6:	4b21      	ldr	r3, [pc, #132]	; (800396c <stepping+0x118>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	2101      	movs	r1, #1
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fdbd 	bl	800446c <HAL_GPIO_WritePin>
		break;
 80038f2:	e037      	b.n	8003964 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80038f4:	23a0      	movs	r3, #160	; 0xa0
 80038f6:	05db      	lsls	r3, r3, #23
 80038f8:	2200      	movs	r2, #0
 80038fa:	2101      	movs	r1, #1
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 fdb5 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003902:	23a0      	movs	r3, #160	; 0xa0
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	2200      	movs	r2, #0
 8003908:	2102      	movs	r1, #2
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fdae 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003910:	23a0      	movs	r3, #160	; 0xa0
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	2201      	movs	r2, #1
 8003916:	2110      	movs	r1, #16
 8003918:	0018      	movs	r0, r3
 800391a:	f000 fda7 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <stepping+0x118>)
 8003920:	2201      	movs	r2, #1
 8003922:	2101      	movs	r1, #1
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fda1 	bl	800446c <HAL_GPIO_WritePin>
		break;
 800392a:	e01b      	b.n	8003964 <stepping+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800392c:	23a0      	movs	r3, #160	; 0xa0
 800392e:	05db      	lsls	r3, r3, #23
 8003930:	2201      	movs	r2, #1
 8003932:	2101      	movs	r1, #1
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fd99 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800393a:	23a0      	movs	r3, #160	; 0xa0
 800393c:	05db      	lsls	r3, r3, #23
 800393e:	2200      	movs	r2, #0
 8003940:	2102      	movs	r1, #2
 8003942:	0018      	movs	r0, r3
 8003944:	f000 fd92 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003948:	23a0      	movs	r3, #160	; 0xa0
 800394a:	05db      	lsls	r3, r3, #23
 800394c:	2200      	movs	r2, #0
 800394e:	2110      	movs	r1, #16
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fd8b 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <stepping+0x118>)
 8003958:	2201      	movs	r2, #1
 800395a:	2101      	movs	r1, #1
 800395c:	0018      	movs	r0, r3
 800395e:	f000 fd85 	bl	800446c <HAL_GPIO_WritePin>
		break;
 8003962:	46c0      	nop			; (mov r8, r8)
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	50000400 	.word	0x50000400

08003970 <step_distance>:

void step_distance(int doseinml, int direction, float mlforsec) {
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b08d      	sub	sp, #52	; 0x34
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
	int numberofsteps = calc_steps(doseinml);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff ff0a 	bl	8003798 <calc_steps>
 8003984:	0003      	movs	r3, r0
 8003986:	61fb      	str	r3, [r7, #28]
	int numberofsequences = numberofsteps / 4;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da00      	bge.n	8003990 <step_distance+0x20>
 800398e:	3303      	adds	r3, #3
 8003990:	109b      	asrs	r3, r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <step_distance+0x130>)
 8003996:	2201      	movs	r2, #1
 8003998:	2140      	movs	r1, #64	; 0x40
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fd66 	bl	800446c <HAL_GPIO_WritePin>
	if (direction == 0)  // for clockwise
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d14c      	bne.n	8003a40 <step_distance+0xd0>
	{
		for (int seq = 0; seq < numberofsequences; seq ++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	e044      	b.n	8003a36 <step_distance+0xc6>
		{
			for (int step = 3; step >= 0; step --)
 80039ac:	2303      	movs	r3, #3
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b0:	e00a      	b.n	80039c8 <step_distance+0x58>
			{
				stepping(step);
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff ff4d 	bl	8003854 <stepping>
				set_speed(mlforsec);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7ff ff19 	bl	80037f4 <set_speed>
			for (int step = 3; step >= 0; step --)
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	3b01      	subs	r3, #1
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	daf1      	bge.n	80039b2 <step_distance+0x42>
			}
			//displaying the progress value on the screen from 0 to 100%
			lcd_put_cur(1,0);
 80039ce:	2100      	movs	r1, #0
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7ff f9c5 	bl	8002d60 <lcd_put_cur>
			int progress = (float)seq/(float)numberofsequences * 100;
 80039d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039d8:	f7fd f9f2 	bl	8000dc0 <__aeabi_i2f>
 80039dc:	1c04      	adds	r4, r0, #0
 80039de:	69b8      	ldr	r0, [r7, #24]
 80039e0:	f7fd f9ee 	bl	8000dc0 <__aeabi_i2f>
 80039e4:	1c03      	adds	r3, r0, #0
 80039e6:	1c19      	adds	r1, r3, #0
 80039e8:	1c20      	adds	r0, r4, #0
 80039ea:	f7fc feb1 	bl	8000750 <__aeabi_fdiv>
 80039ee:	1c03      	adds	r3, r0, #0
 80039f0:	492c      	ldr	r1, [pc, #176]	; (8003aa4 <step_distance+0x134>)
 80039f2:	1c18      	adds	r0, r3, #0
 80039f4:	f7fd f876 	bl	8000ae4 <__aeabi_fmul>
 80039f8:	1c03      	adds	r3, r0, #0
 80039fa:	1c18      	adds	r0, r3, #0
 80039fc:	f7fd f9c0 	bl	8000d80 <__aeabi_f2iz>
 8003a00:	0003      	movs	r3, r0
 8003a02:	617b      	str	r3, [r7, #20]
			if(progress % 5 == 0) {
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2105      	movs	r1, #5
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7fc fd09 	bl	8000420 <__aeabi_idivmod>
 8003a0e:	1e0b      	subs	r3, r1, #0
 8003a10:	d10e      	bne.n	8003a30 <step_distance+0xc0>
			char buffer[3];
			itoa(progress, buffer,10);
 8003a12:	2410      	movs	r4, #16
 8003a14:	1939      	adds	r1, r7, r4
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	220a      	movs	r2, #10
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f003 fb90 	bl	8007140 <itoa>
			lcd_send_string(buffer);
 8003a20:	193b      	adds	r3, r7, r4
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7ff f9f9 	bl	8002e1a <lcd_send_string>
			lcd_send_string("%");
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <step_distance+0x138>)
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff f9f5 	bl	8002e1a <lcd_send_string>
		for (int seq = 0; seq < numberofsequences; seq ++)
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	3301      	adds	r3, #1
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	dbb6      	blt.n	80039ac <step_distance+0x3c>
 8003a3e:	e025      	b.n	8003a8c <step_distance+0x11c>
			}
		}
	}

	else if (direction == 1)  // for anti-clockwise
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d122      	bne.n	8003a8c <step_distance+0x11c>
	{
		for (int seq = 0; seq < numberofsequences; seq++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e01b      	b.n	8003a84 <step_distance+0x114>
		{
			for (int step = 0; step <= 3; step++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	623b      	str	r3, [r7, #32]
 8003a50:	e00a      	b.n	8003a68 <step_distance+0xf8>
			{
				stepping(step);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff fefd 	bl	8003854 <stepping>
				set_speed(mlforsec);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1c18      	adds	r0, r3, #0
 8003a5e:	f7ff fec9 	bl	80037f4 <set_speed>
			for (int step = 0; step <= 3; step++)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	3301      	adds	r3, #1
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	ddf1      	ble.n	8003a52 <step_distance+0xe2>
			}
			lcd_put_cur(1,0);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7ff f975 	bl	8002d60 <lcd_put_cur>
			lcd_send_string("Return...");
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <step_distance+0x13c>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff f9ce 	bl	8002e1a <lcd_send_string>
		for (int seq = 0; seq < numberofsequences; seq++)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3301      	adds	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dbdf      	blt.n	8003a4c <step_distance+0xdc>

		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <step_distance+0x130>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fcea 	bl	800446c <HAL_GPIO_WritePin>
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b00d      	add	sp, #52	; 0x34
 8003a9e:	bd90      	pop	{r4, r7, pc}
 8003aa0:	50000800 	.word	0x50000800
 8003aa4:	42c80000 	.word	0x42c80000
 8003aa8:	0800a130 	.word	0x0800a130
 8003aac:	0800a134 	.word	0x0800a134

08003ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_MspInit+0x24>)
 8003ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_MspInit+0x24>)
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_MspInit+0x24>)
 8003ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_MspInit+0x24>)
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	0549      	lsls	r1, r1, #21
 8003aca:	430a      	orrs	r2, r1
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b089      	sub	sp, #36	; 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	240c      	movs	r4, #12
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	2314      	movs	r3, #20
 8003ae8:	001a      	movs	r2, r3
 8003aea:	2100      	movs	r1, #0
 8003aec:	f004 f90e 	bl	8007d0c <memset>
  if(hi2c->Instance==I2C1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_I2C_MspInit+0x80>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d129      	bne.n	8003b4e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_I2C_MspInit+0x84>)
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_I2C_MspInit+0x84>)
 8003b00:	2102      	movs	r1, #2
 8003b02:	430a      	orrs	r2, r1
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_I2C_MspInit+0x84>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	22c0      	movs	r2, #192	; 0xc0
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1a:	0021      	movs	r1, r4
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	2212      	movs	r2, #18
 8003b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	2204      	movs	r2, #4
 8003b32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_I2C_MspInit+0x88>)
 8003b38:	0019      	movs	r1, r3
 8003b3a:	0010      	movs	r0, r2
 8003b3c:	f000 fb18 	bl	8004170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_I2C_MspInit+0x84>)
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_I2C_MspInit+0x84>)
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	0389      	lsls	r1, r1, #14
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b009      	add	sp, #36	; 0x24
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40005400 	.word	0x40005400
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	50000400 	.word	0x50000400

08003b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b08b      	sub	sp, #44	; 0x2c
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	2414      	movs	r4, #20
 8003b6e:	193b      	adds	r3, r7, r4
 8003b70:	0018      	movs	r0, r3
 8003b72:	2314      	movs	r3, #20
 8003b74:	001a      	movs	r2, r3
 8003b76:	2100      	movs	r1, #0
 8003b78:	f004 f8c8 	bl	8007d0c <memset>
  if(huart->Instance==LPUART1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2f      	ldr	r2, [pc, #188]	; (8003c40 <HAL_UART_MspInit+0xdc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d129      	bne.n	8003bda <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b86:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	02c9      	lsls	r1, r1, #11
 8003b90:	430a      	orrs	r2, r1
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b94:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bac:	0021      	movs	r1, r4
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	2230      	movs	r2, #48	; 0x30
 8003bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2202      	movs	r2, #2
 8003bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_UART_MspInit+0xe4>)
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	0010      	movs	r0, r2
 8003bd4:	f000 facc 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bd8:	e02e      	b.n	8003c38 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <HAL_UART_MspInit+0xe8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d129      	bne.n	8003c38 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be8:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003bea:	2180      	movs	r1, #128	; 0x80
 8003bec:	0289      	lsls	r1, r1, #10
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_UART_MspInit+0xe0>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c0a:	2114      	movs	r1, #20
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	220c      	movs	r2, #12
 8003c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2202      	movs	r2, #2
 8003c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1e:	187b      	adds	r3, r7, r1
 8003c20:	2203      	movs	r2, #3
 8003c22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	2204      	movs	r2, #4
 8003c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	187a      	adds	r2, r7, r1
 8003c2c:	23a0      	movs	r3, #160	; 0xa0
 8003c2e:	05db      	lsls	r3, r3, #23
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 fa9c 	bl	8004170 <HAL_GPIO_Init>
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b00b      	add	sp, #44	; 0x2c
 8003c3e:	bd90      	pop	{r4, r7, pc}
 8003c40:	40004800 	.word	0x40004800
 8003c44:	40021000 	.word	0x40021000
 8003c48:	50000800 	.word	0x50000800
 8003c4c:	40004400 	.word	0x40004400

08003c50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a06      	ldr	r2, [pc, #24]	; (8003c78 <HAL_RTC_MspInit+0x28>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d106      	bne.n	8003c70 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RTC_MspInit+0x2c>)
 8003c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RTC_MspInit+0x2c>)
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	02c9      	lsls	r1, r1, #11
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40002800 	.word	0x40002800
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <HAL_TIM_Base_MspInit+0x28>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d105      	bne.n	8003c9e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_TIM_Base_MspInit+0x2c>)
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_TIM_Base_MspInit+0x2c>)
 8003c98:	2102      	movs	r1, #2
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40021000 	.word	0x40021000

08003cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <NMI_Handler+0x4>

08003cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cba:	e7fe      	b.n	8003cba <HardFault_Handler+0x4>

08003cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd4:	f000 f92e 	bl	8003f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_4_Pin);
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 fbde 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_3_Pin);
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	01db      	lsls	r3, r3, #7
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fbd9 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PRZYCISK_2_Pin);
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 fbd4 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	af00      	add	r7, sp, #0
  return 1;
 8003d0a:	2301      	movs	r3, #1
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_kill>:

int _kill(int pid, int sig)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d1c:	f004 f850 	bl	8007dc0 <__errno>
 8003d20:	0003      	movs	r3, r0
 8003d22:	2216      	movs	r2, #22
 8003d24:	601a      	str	r2, [r3, #0]
  return -1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	425b      	negs	r3, r3
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_exit>:

void _exit (int status)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	425a      	negs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff ffe5 	bl	8003d12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d48:	e7fe      	b.n	8003d48 <_exit+0x16>

08003d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e00a      	b.n	8003d72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d5c:	e000      	b.n	8003d60 <_read+0x16>
 8003d5e:	bf00      	nop
 8003d60:	0001      	movs	r1, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	60ba      	str	r2, [r7, #8]
 8003d68:	b2ca      	uxtb	r2, r1
 8003d6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	dbf0      	blt.n	8003d5c <_read+0x12>
  }

  return len;
 8003d7a:	687b      	ldr	r3, [r7, #4]
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b006      	add	sp, #24
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e009      	b.n	8003daa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	60ba      	str	r2, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	e000      	b.n	8003da4 <_write+0x20>
 8003da2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3301      	adds	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	dbf1      	blt.n	8003d96 <_write+0x12>
  }
  return len;
 8003db2:	687b      	ldr	r3, [r7, #4]
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b006      	add	sp, #24
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_close>:

int _close(int file)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	425b      	negs	r3, r3
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	0192      	lsls	r2, r2, #6
 8003de0:	605a      	str	r2, [r3, #4]
  return 0;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_isatty>:

int _isatty(int file)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003df4:	2301      	movs	r3, #1
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b004      	add	sp, #16
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <_sbrk+0x5c>)
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <_sbrk+0x60>)
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <_sbrk+0x64>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <_sbrk+0x64>)
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <_sbrk+0x68>)
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <_sbrk+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	18d3      	adds	r3, r2, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d207      	bcs.n	8003e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e44:	f003 ffbc 	bl	8007dc0 <__errno>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	425b      	negs	r3, r3
 8003e52:	e009      	b.n	8003e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	18d2      	adds	r2, r2, r3
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <_sbrk+0x64>)
 8003e64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b006      	add	sp, #24
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20005000 	.word	0x20005000
 8003e74:	00000400 	.word	0x00000400
 8003e78:	20000648 	.word	0x20000648
 8003e7c:	200007a0 	.word	0x200007a0

08003e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e92:	1dfb      	adds	r3, r7, #7
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_Init+0x3c>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_Init+0x3c>)
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f000 f811 	bl	8003ecc <HAL_InitTick>
 8003eaa:	1e03      	subs	r3, r0, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e001      	b.n	8003eba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eb6:	f7ff fdfb 	bl	8003ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eba:	1dfb      	adds	r3, r7, #7
 8003ebc:	781b      	ldrb	r3, [r3, #0]
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	40022000 	.word	0x40022000

08003ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_InitTick+0x5c>)
 8003ed6:	681c      	ldr	r4, [r3, #0]
 8003ed8:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_InitTick+0x60>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	0019      	movs	r1, r3
 8003ede:	23fa      	movs	r3, #250	; 0xfa
 8003ee0:	0098      	lsls	r0, r3, #2
 8003ee2:	f7fc f92d 	bl	8000140 <__udivsi3>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	0019      	movs	r1, r3
 8003eea:	0020      	movs	r0, r4
 8003eec:	f7fc f928 	bl	8000140 <__udivsi3>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f92f 	bl	8004156 <HAL_SYSTICK_Config>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e00f      	b.n	8003f20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d80b      	bhi.n	8003f1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f8fc 	bl	800410c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_InitTick+0x64>)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b003      	add	sp, #12
 8003f26:	bd90      	pop	{r4, r7, pc}
 8003f28:	20000264 	.word	0x20000264
 8003f2c:	2000026c 	.word	0x2000026c
 8003f30:	20000268 	.word	0x20000268

08003f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_IncTick+0x1c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_IncTick+0x20>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	18d2      	adds	r2, r2, r3
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_IncTick+0x20>)
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	2000026c 	.word	0x2000026c
 8003f54:	2000064c 	.word	0x2000064c

08003f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f5c:	4b02      	ldr	r3, [pc, #8]	; (8003f68 <HAL_GetTick+0x10>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	2000064c 	.word	0x2000064c

08003f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f74:	f7ff fff0 	bl	8003f58 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3301      	adds	r3, #1
 8003f84:	d005      	beq.n	8003f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_Delay+0x44>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	f7ff ffe0 	bl	8003f58 <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d8f7      	bhi.n	8003f94 <HAL_Delay+0x28>
  {
  }
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b004      	add	sp, #16
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	2000026c 	.word	0x2000026c

08003fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	0002      	movs	r2, r0
 8003fbc:	1dfb      	adds	r3, r7, #7
 8003fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003fc0:	1dfb      	adds	r3, r7, #7
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc6:	d809      	bhi.n	8003fdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc8:	1dfb      	adds	r3, r7, #7
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	001a      	movs	r2, r3
 8003fce:	231f      	movs	r3, #31
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <__NVIC_EnableIRQ+0x30>)
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4091      	lsls	r1, r2
 8003fd8:	000a      	movs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
  }
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	e000e100 	.word	0xe000e100

08003fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	0002      	movs	r2, r0
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ff6:	1dfb      	adds	r3, r7, #7
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8003ffc:	d828      	bhi.n	8004050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ffe:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <__NVIC_SetPriority+0xd4>)
 8004000:	1dfb      	adds	r3, r7, #7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b25b      	sxtb	r3, r3
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	33c0      	adds	r3, #192	; 0xc0
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	589b      	ldr	r3, [r3, r2]
 800400e:	1dfa      	adds	r2, r7, #7
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	0011      	movs	r1, r2
 8004014:	2203      	movs	r2, #3
 8004016:	400a      	ands	r2, r1
 8004018:	00d2      	lsls	r2, r2, #3
 800401a:	21ff      	movs	r1, #255	; 0xff
 800401c:	4091      	lsls	r1, r2
 800401e:	000a      	movs	r2, r1
 8004020:	43d2      	mvns	r2, r2
 8004022:	401a      	ands	r2, r3
 8004024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	401a      	ands	r2, r3
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	0018      	movs	r0, r3
 8004034:	2303      	movs	r3, #3
 8004036:	4003      	ands	r3, r0
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800403c:	481f      	ldr	r0, [pc, #124]	; (80040bc <__NVIC_SetPriority+0xd4>)
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b25b      	sxtb	r3, r3
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	430a      	orrs	r2, r1
 8004048:	33c0      	adds	r3, #192	; 0xc0
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800404e:	e031      	b.n	80040b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <__NVIC_SetPriority+0xd8>)
 8004052:	1dfb      	adds	r3, r7, #7
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	0019      	movs	r1, r3
 8004058:	230f      	movs	r3, #15
 800405a:	400b      	ands	r3, r1
 800405c:	3b08      	subs	r3, #8
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3306      	adds	r3, #6
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	18d3      	adds	r3, r2, r3
 8004066:	3304      	adds	r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1dfa      	adds	r2, r7, #7
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	0011      	movs	r1, r2
 8004070:	2203      	movs	r2, #3
 8004072:	400a      	ands	r2, r1
 8004074:	00d2      	lsls	r2, r2, #3
 8004076:	21ff      	movs	r1, #255	; 0xff
 8004078:	4091      	lsls	r1, r2
 800407a:	000a      	movs	r2, r1
 800407c:	43d2      	mvns	r2, r2
 800407e:	401a      	ands	r2, r3
 8004080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	22ff      	movs	r2, #255	; 0xff
 8004088:	401a      	ands	r2, r3
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	0018      	movs	r0, r3
 8004090:	2303      	movs	r3, #3
 8004092:	4003      	ands	r3, r0
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004098:	4809      	ldr	r0, [pc, #36]	; (80040c0 <__NVIC_SetPriority+0xd8>)
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	001c      	movs	r4, r3
 80040a0:	230f      	movs	r3, #15
 80040a2:	4023      	ands	r3, r4
 80040a4:	3b08      	subs	r3, #8
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	430a      	orrs	r2, r1
 80040aa:	3306      	adds	r3, #6
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	18c3      	adds	r3, r0, r3
 80040b0:	3304      	adds	r3, #4
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b003      	add	sp, #12
 80040ba:	bd90      	pop	{r4, r7, pc}
 80040bc:	e000e100 	.word	0xe000e100
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1e5a      	subs	r2, r3, #1
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	045b      	lsls	r3, r3, #17
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d301      	bcc.n	80040dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d8:	2301      	movs	r3, #1
 80040da:	e010      	b.n	80040fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <SysTick_Config+0x44>)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	3a01      	subs	r2, #1
 80040e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e4:	2301      	movs	r3, #1
 80040e6:	425b      	negs	r3, r3
 80040e8:	2103      	movs	r1, #3
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7ff ff7c 	bl	8003fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <SysTick_Config+0x44>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f6:	4b04      	ldr	r3, [pc, #16]	; (8004108 <SysTick_Config+0x44>)
 80040f8:	2207      	movs	r2, #7
 80040fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	e000e010 	.word	0xe000e010

0800410c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	210f      	movs	r1, #15
 8004118:	187b      	adds	r3, r7, r1
 800411a:	1c02      	adds	r2, r0, #0
 800411c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	187b      	adds	r3, r7, r1
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b25b      	sxtb	r3, r3
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff ff5d 	bl	8003fe8 <__NVIC_SetPriority>
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	0002      	movs	r2, r0
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b25b      	sxtb	r3, r3
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff ff33 	bl	8003fb4 <__NVIC_EnableIRQ>
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b002      	add	sp, #8
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff ffaf 	bl	80040c4 <SysTick_Config>
 8004166:	0003      	movs	r3, r0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b002      	add	sp, #8
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004186:	e155      	b.n	8004434 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2101      	movs	r1, #1
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4091      	lsls	r1, r2
 8004192:	000a      	movs	r2, r1
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d100      	bne.n	80041a0 <HAL_GPIO_Init+0x30>
 800419e:	e146      	b.n	800442e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d005      	beq.n	80041b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d130      	bne.n	800421a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	409a      	lsls	r2, r3
 80041c6:	0013      	movs	r3, r2
 80041c8:	43da      	mvns	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	409a      	lsls	r2, r3
 80041da:	0013      	movs	r3, r2
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ee:	2201      	movs	r2, #1
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	409a      	lsls	r2, r3
 80041f4:	0013      	movs	r3, r2
 80041f6:	43da      	mvns	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	2201      	movs	r2, #1
 8004206:	401a      	ands	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	409a      	lsls	r2, r3
 800420c:	0013      	movs	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2203      	movs	r2, #3
 8004220:	4013      	ands	r3, r2
 8004222:	2b03      	cmp	r3, #3
 8004224:	d017      	beq.n	8004256 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	409a      	lsls	r2, r3
 8004234:	0013      	movs	r3, r2
 8004236:	43da      	mvns	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	0013      	movs	r3, r2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2203      	movs	r2, #3
 800425c:	4013      	ands	r3, r2
 800425e:	2b02      	cmp	r3, #2
 8004260:	d123      	bne.n	80042aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	08da      	lsrs	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3208      	adds	r2, #8
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	58d3      	ldr	r3, [r2, r3]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2207      	movs	r2, #7
 8004274:	4013      	ands	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	409a      	lsls	r2, r3
 800427c:	0013      	movs	r3, r2
 800427e:	43da      	mvns	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2107      	movs	r1, #7
 800428e:	400b      	ands	r3, r1
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	409a      	lsls	r2, r3
 8004294:	0013      	movs	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	6939      	ldr	r1, [r7, #16]
 80042a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	2203      	movs	r2, #3
 80042b6:	409a      	lsls	r2, r3
 80042b8:	0013      	movs	r3, r2
 80042ba:	43da      	mvns	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2203      	movs	r2, #3
 80042c8:	401a      	ands	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	0013      	movs	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	23c0      	movs	r3, #192	; 0xc0
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	4013      	ands	r3, r2
 80042e8:	d100      	bne.n	80042ec <HAL_GPIO_Init+0x17c>
 80042ea:	e0a0      	b.n	800442e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_GPIO_Init+0x2dc>)
 80042ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f0:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_GPIO_Init+0x2dc>)
 80042f2:	2101      	movs	r1, #1
 80042f4:	430a      	orrs	r2, r1
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f8:	4a55      	ldr	r2, [pc, #340]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	589b      	ldr	r3, [r3, r2]
 8004304:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2203      	movs	r2, #3
 800430a:	4013      	ands	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	220f      	movs	r2, #15
 8004310:	409a      	lsls	r2, r3
 8004312:	0013      	movs	r3, r2
 8004314:	43da      	mvns	r2, r3
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	23a0      	movs	r3, #160	; 0xa0
 8004320:	05db      	lsls	r3, r3, #23
 8004322:	429a      	cmp	r2, r3
 8004324:	d01f      	beq.n	8004366 <HAL_GPIO_Init+0x1f6>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <HAL_GPIO_Init+0x2e4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d019      	beq.n	8004362 <HAL_GPIO_Init+0x1f2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a49      	ldr	r2, [pc, #292]	; (8004458 <HAL_GPIO_Init+0x2e8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_GPIO_Init+0x1ee>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a48      	ldr	r2, [pc, #288]	; (800445c <HAL_GPIO_Init+0x2ec>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00d      	beq.n	800435a <HAL_GPIO_Init+0x1ea>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_GPIO_Init+0x2f0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <HAL_GPIO_Init+0x1e6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a46      	ldr	r2, [pc, #280]	; (8004464 <HAL_GPIO_Init+0x2f4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_GPIO_Init+0x1e2>
 800434e:	2305      	movs	r3, #5
 8004350:	e00a      	b.n	8004368 <HAL_GPIO_Init+0x1f8>
 8004352:	2306      	movs	r3, #6
 8004354:	e008      	b.n	8004368 <HAL_GPIO_Init+0x1f8>
 8004356:	2304      	movs	r3, #4
 8004358:	e006      	b.n	8004368 <HAL_GPIO_Init+0x1f8>
 800435a:	2303      	movs	r3, #3
 800435c:	e004      	b.n	8004368 <HAL_GPIO_Init+0x1f8>
 800435e:	2302      	movs	r3, #2
 8004360:	e002      	b.n	8004368 <HAL_GPIO_Init+0x1f8>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_GPIO_Init+0x1f8>
 8004366:	2300      	movs	r3, #0
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	2103      	movs	r1, #3
 800436c:	400a      	ands	r2, r1
 800436e:	0092      	lsls	r2, r2, #2
 8004370:	4093      	lsls	r3, r2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004378:	4935      	ldr	r1, [pc, #212]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	3302      	adds	r3, #2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004386:	4b38      	ldr	r3, [pc, #224]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43da      	mvns	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	035b      	lsls	r3, r3, #13
 800439e:	4013      	ands	r3, r2
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043aa:	4b2f      	ldr	r3, [pc, #188]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43da      	mvns	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	039b      	lsls	r3, r3, #14
 80043c8:	4013      	ands	r3, r2
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043d4:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	4013      	ands	r3, r2
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004404:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	43da      	mvns	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	025b      	lsls	r3, r3, #9
 800441c:	4013      	ands	r3, r2
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <HAL_GPIO_Init+0x2f8>)
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	3301      	adds	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	40da      	lsrs	r2, r3
 800443c:	1e13      	subs	r3, r2, #0
 800443e:	d000      	beq.n	8004442 <HAL_GPIO_Init+0x2d2>
 8004440:	e6a2      	b.n	8004188 <HAL_GPIO_Init+0x18>
  }
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b006      	add	sp, #24
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	40010000 	.word	0x40010000
 8004454:	50000400 	.word	0x50000400
 8004458:	50000800 	.word	0x50000800
 800445c:	50000c00 	.word	0x50000c00
 8004460:	50001000 	.word	0x50001000
 8004464:	50001c00 	.word	0x50001c00
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	0008      	movs	r0, r1
 8004476:	0011      	movs	r1, r2
 8004478:	1cbb      	adds	r3, r7, #2
 800447a:	1c02      	adds	r2, r0, #0
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	1c7b      	adds	r3, r7, #1
 8004480:	1c0a      	adds	r2, r1, #0
 8004482:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004484:	1c7b      	adds	r3, r7, #1
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448c:	1cbb      	adds	r3, r7, #2
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004494:	e003      	b.n	800449e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004496:	1cbb      	adds	r3, r7, #2
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	0002      	movs	r2, r0
 80044b0:	1dbb      	adds	r3, r7, #6
 80044b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	1dba      	adds	r2, r7, #6
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	4013      	ands	r3, r2
 80044be:	d008      	beq.n	80044d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044c2:	1dba      	adds	r2, r7, #6
 80044c4:	8812      	ldrh	r2, [r2, #0]
 80044c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044c8:	1dbb      	adds	r3, r7, #6
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7ff f8f5 	bl	80036bc <HAL_GPIO_EXTI_Callback>
  }
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e082      	b.n	80045f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2241      	movs	r2, #65	; 0x41
 80044f6:	5c9b      	ldrb	r3, [r3, r2]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2240      	movs	r2, #64	; 0x40
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f7ff fae5 	bl	8003ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2241      	movs	r2, #65	; 0x41
 8004512:	2124      	movs	r1, #36	; 0x24
 8004514:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2101      	movs	r1, #1
 8004522:	438a      	bics	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4934      	ldr	r1, [pc, #208]	; (8004600 <HAL_I2C_Init+0x120>)
 8004530:	400a      	ands	r2, r1
 8004532:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4931      	ldr	r1, [pc, #196]	; (8004604 <HAL_I2C_Init+0x124>)
 8004540:	400a      	ands	r2, r1
 8004542:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d108      	bne.n	800455e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0209      	lsls	r1, r1, #8
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e007      	b.n	800456e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2184      	movs	r1, #132	; 0x84
 8004568:	0209      	lsls	r1, r1, #8
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d104      	bne.n	8004580 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	491f      	ldr	r1, [pc, #124]	; (8004608 <HAL_I2C_Init+0x128>)
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	491a      	ldr	r1, [pc, #104]	; (8004604 <HAL_I2C_Init+0x124>)
 800459c:	400a      	ands	r2, r1
 800459e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69d9      	ldr	r1, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2101      	movs	r1, #1
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2241      	movs	r2, #65	; 0x41
 80045e4:	2120      	movs	r1, #32
 80045e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2242      	movs	r2, #66	; 0x42
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b002      	add	sp, #8
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	f0ffffff 	.word	0xf0ffffff
 8004604:	ffff7fff 	.word	0xffff7fff
 8004608:	02008000 	.word	0x02008000

0800460c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b089      	sub	sp, #36	; 0x24
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	0008      	movs	r0, r1
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	0019      	movs	r1, r3
 800461a:	230a      	movs	r3, #10
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	1c02      	adds	r2, r0, #0
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	2308      	movs	r3, #8
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	1c0a      	adds	r2, r1, #0
 8004628:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2241      	movs	r2, #65	; 0x41
 800462e:	5c9b      	ldrb	r3, [r3, r2]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	d000      	beq.n	8004638 <HAL_I2C_Master_Transmit+0x2c>
 8004636:	e0e7      	b.n	8004808 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2240      	movs	r2, #64	; 0x40
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_I2C_Master_Transmit+0x3a>
 8004642:	2302      	movs	r3, #2
 8004644:	e0e1      	b.n	800480a <HAL_I2C_Master_Transmit+0x1fe>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800464e:	f7ff fc83 	bl	8003f58 <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	0219      	lsls	r1, r3, #8
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2319      	movs	r3, #25
 8004662:	2201      	movs	r2, #1
 8004664:	f000 f8fc 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0cc      	b.n	800480a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2241      	movs	r2, #65	; 0x41
 8004674:	2121      	movs	r1, #33	; 0x21
 8004676:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2242      	movs	r2, #66	; 0x42
 800467c:	2110      	movs	r1, #16
 800467e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2208      	movs	r2, #8
 8004690:	18ba      	adds	r2, r7, r2
 8004692:	8812      	ldrh	r2, [r2, #0]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	d911      	bls.n	80046ca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	22ff      	movs	r2, #255	; 0xff
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	045c      	lsls	r4, r3, #17
 80046b6:	230a      	movs	r3, #10
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	8819      	ldrh	r1, [r3, #0]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	4b55      	ldr	r3, [pc, #340]	; (8004814 <HAL_I2C_Master_Transmit+0x208>)
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	0023      	movs	r3, r4
 80046c4:	f000 faa4 	bl	8004c10 <I2C_TransferConfig>
 80046c8:	e075      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	049c      	lsls	r4, r3, #18
 80046de:	230a      	movs	r3, #10
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	8819      	ldrh	r1, [r3, #0]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <HAL_I2C_Master_Transmit+0x208>)
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	0023      	movs	r3, r4
 80046ec:	f000 fa90 	bl	8004c10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046f0:	e061      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 f8ff 	bl	80048fc <I2C_WaitOnTXISFlagUntilTimeout>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e081      	b.n	800480a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03a      	beq.n	80047b6 <HAL_I2C_Master_Transmit+0x1aa>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d136      	bne.n	80047b6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	0013      	movs	r3, r2
 8004752:	2200      	movs	r2, #0
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	f000 f883 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 800475a:	1e03      	subs	r3, r0, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e053      	b.n	800480a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2bff      	cmp	r3, #255	; 0xff
 800476a:	d911      	bls.n	8004790 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	22ff      	movs	r2, #255	; 0xff
 8004770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	b2da      	uxtb	r2, r3
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	045c      	lsls	r4, r3, #17
 800477c:	230a      	movs	r3, #10
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	8819      	ldrh	r1, [r3, #0]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	2300      	movs	r3, #0
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	0023      	movs	r3, r4
 800478a:	f000 fa41 	bl	8004c10 <I2C_TransferConfig>
 800478e:	e012      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	049c      	lsls	r4, r3, #18
 80047a4:	230a      	movs	r3, #10
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	8819      	ldrh	r1, [r3, #0]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	2300      	movs	r3, #0
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	0023      	movs	r3, r4
 80047b2:	f000 fa2d 	bl	8004c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d198      	bne.n	80046f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 f8de 	bl	8004988 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e01a      	b.n	800480a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2220      	movs	r2, #32
 80047da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	490c      	ldr	r1, [pc, #48]	; (8004818 <HAL_I2C_Master_Transmit+0x20c>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2241      	movs	r2, #65	; 0x41
 80047f0:	2120      	movs	r1, #32
 80047f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2242      	movs	r2, #66	; 0x42
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b007      	add	sp, #28
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	80002000 	.word	0x80002000
 8004818:	fe00e800 	.word	0xfe00e800

0800481c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d103      	bne.n	800483a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2201      	movs	r2, #1
 8004842:	4013      	ands	r3, r2
 8004844:	2b01      	cmp	r3, #1
 8004846:	d007      	beq.n	8004858 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	430a      	orrs	r2, r1
 8004856:	619a      	str	r2, [r3, #24]
  }
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	1dfb      	adds	r3, r7, #7
 800486e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004870:	e030      	b.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	d02d      	beq.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004878:	f7ff fb6e 	bl	8003f58 <HAL_GetTick>
 800487c:	0002      	movs	r2, r0
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d122      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	425a      	negs	r2, r3
 800489e:	4153      	adcs	r3, r2
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	001a      	movs	r2, r3
 80048a4:	1dfb      	adds	r3, r7, #7
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d113      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	2220      	movs	r2, #32
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2241      	movs	r2, #65	; 0x41
 80048bc:	2120      	movs	r1, #32
 80048be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2242      	movs	r2, #66	; 0x42
 80048c4:	2100      	movs	r1, #0
 80048c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	2100      	movs	r1, #0
 80048ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e00f      	b.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	425a      	negs	r2, r3
 80048e4:	4153      	adcs	r3, r2
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	001a      	movs	r2, r3
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d0bf      	beq.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b004      	add	sp, #16
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004908:	e032      	b.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f87d 	bl	8004a10 <I2C_IsErrorOccurred>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d001      	beq.n	800491e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e030      	b.n	8004980 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	3301      	adds	r3, #1
 8004922:	d025      	beq.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7ff fb18 	bl	8003f58 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11a      	bne.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2202      	movs	r2, #2
 8004942:	4013      	ands	r3, r2
 8004944:	2b02      	cmp	r3, #2
 8004946:	d013      	beq.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	2220      	movs	r2, #32
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2241      	movs	r2, #65	; 0x41
 8004958:	2120      	movs	r1, #32
 800495a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2242      	movs	r2, #66	; 0x42
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e007      	b.n	8004980 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2202      	movs	r2, #2
 8004978:	4013      	ands	r3, r2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d1c5      	bne.n	800490a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	b004      	add	sp, #16
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004994:	e02f      	b.n	80049f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	0018      	movs	r0, r3
 800499e:	f000 f837 	bl	8004a10 <I2C_IsErrorOccurred>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d001      	beq.n	80049aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e02d      	b.n	8004a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049aa:	f7ff fad5 	bl	8003f58 <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11a      	bne.n	80049f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2220      	movs	r2, #32
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d013      	beq.n	80049f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	2220      	movs	r2, #32
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2241      	movs	r2, #65	; 0x41
 80049de:	2120      	movs	r1, #32
 80049e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2242      	movs	r2, #66	; 0x42
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e007      	b.n	8004a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2220      	movs	r2, #32
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d1c8      	bne.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b004      	add	sp, #16
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2327      	movs	r3, #39	; 0x27
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2210      	movs	r2, #16
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <I2C_IsErrorOccurred+0x2e>
 8004a3c:	e082      	b.n	8004b44 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2210      	movs	r2, #16
 8004a44:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a46:	e060      	b.n	8004b0a <I2C_IsErrorOccurred+0xfa>
 8004a48:	2427      	movs	r4, #39	; 0x27
 8004a4a:	193b      	adds	r3, r7, r4
 8004a4c:	193a      	adds	r2, r7, r4
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	3301      	adds	r3, #1
 8004a56:	d058      	beq.n	8004b0a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7ff fa7e 	bl	8003f58 <HAL_GetTick>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d306      	bcc.n	8004a76 <I2C_IsErrorOccurred+0x66>
 8004a68:	193b      	adds	r3, r7, r4
 8004a6a:	193a      	adds	r2, r7, r4
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d149      	bne.n	8004b0a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	4013      	ands	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a84:	2013      	movs	r0, #19
 8004a86:	183b      	adds	r3, r7, r0
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	2142      	movs	r1, #66	; 0x42
 8004a8c:	5c52      	ldrb	r2, [r2, r1]
 8004a8e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d126      	bne.n	8004af2 <I2C_IsErrorOccurred+0xe2>
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	01db      	lsls	r3, r3, #7
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d021      	beq.n	8004af2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004aae:	183b      	adds	r3, r7, r0
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d01d      	beq.n	8004af2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	01c9      	lsls	r1, r1, #7
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ac8:	f7ff fa46 	bl	8003f58 <HAL_GetTick>
 8004acc:	0003      	movs	r3, r0
 8004ace:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad0:	e00f      	b.n	8004af2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ad2:	f7ff fa41 	bl	8003f58 <HAL_GetTick>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b19      	cmp	r3, #25
 8004ade:	d908      	bls.n	8004af2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ae8:	2327      	movs	r3, #39	; 0x27
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]

              break;
 8004af0:	e00b      	b.n	8004b0a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2220      	movs	r2, #32
 8004afa:	4013      	ands	r3, r2
 8004afc:	2127      	movs	r1, #39	; 0x27
 8004afe:	187a      	adds	r2, r7, r1
 8004b00:	1879      	adds	r1, r7, r1
 8004b02:	7809      	ldrb	r1, [r1, #0]
 8004b04:	7011      	strb	r1, [r2, #0]
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d1e3      	bne.n	8004ad2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2220      	movs	r2, #32
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d004      	beq.n	8004b22 <I2C_IsErrorOccurred+0x112>
 8004b18:	2327      	movs	r3, #39	; 0x27
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d092      	beq.n	8004a48 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b22:	2327      	movs	r3, #39	; 0x27
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2220      	movs	r2, #32
 8004b32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2204      	movs	r2, #4
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b3c:	2327      	movs	r3, #39	; 0x27
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4013      	ands	r3, r2
 8004b54:	d00c      	beq.n	8004b70 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	0052      	lsls	r2, r2, #1
 8004b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b68:	2327      	movs	r3, #39	; 0x27
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00c      	beq.n	8004b94 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	00d2      	lsls	r2, r2, #3
 8004b8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b8c:	2327      	movs	r3, #39	; 0x27
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d00c      	beq.n	8004bb8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bb0:	2327      	movs	r3, #39	; 0x27
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004bb8:	2327      	movs	r3, #39	; 0x27
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01d      	beq.n	8004bfe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7ff fe29 	bl	800481c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	490d      	ldr	r1, [pc, #52]	; (8004c0c <I2C_IsErrorOccurred+0x1fc>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2241      	movs	r2, #65	; 0x41
 8004bea:	2120      	movs	r1, #32
 8004bec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2242      	movs	r2, #66	; 0x42
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004bfe:	2327      	movs	r3, #39	; 0x27
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	781b      	ldrb	r3, [r3, #0]
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b00b      	add	sp, #44	; 0x2c
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	fe00e800 	.word	0xfe00e800

08004c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	0008      	movs	r0, r1
 8004c1a:	0011      	movs	r1, r2
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	240a      	movs	r4, #10
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	1c02      	adds	r2, r0, #0
 8004c24:	801a      	strh	r2, [r3, #0]
 8004c26:	2009      	movs	r0, #9
 8004c28:	183b      	adds	r3, r7, r0
 8004c2a:	1c0a      	adds	r2, r1, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c2e:	193b      	adds	r3, r7, r4
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	059b      	lsls	r3, r3, #22
 8004c34:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c36:	183b      	adds	r3, r7, r0
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	0419      	lsls	r1, r3, #16
 8004c3c:	23ff      	movs	r3, #255	; 0xff
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c42:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5a:	0d51      	lsrs	r1, r2, #21
 8004c5c:	2280      	movs	r2, #128	; 0x80
 8004c5e:	00d2      	lsls	r2, r2, #3
 8004c60:	400a      	ands	r2, r1
 8004c62:	4907      	ldr	r1, [pc, #28]	; (8004c80 <I2C_TransferConfig+0x70>)
 8004c64:	430a      	orrs	r2, r1
 8004c66:	43d2      	mvns	r2, r2
 8004c68:	401a      	ands	r2, r3
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b007      	add	sp, #28
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	03ff63ff 	.word	0x03ff63ff

08004c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2241      	movs	r2, #65	; 0x41
 8004c92:	5c9b      	ldrb	r3, [r3, r2]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d138      	bne.n	8004d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2240      	movs	r2, #64	; 0x40
 8004c9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e032      	b.n	8004d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2240      	movs	r2, #64	; 0x40
 8004cac:	2101      	movs	r1, #1
 8004cae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2241      	movs	r2, #65	; 0x41
 8004cb4:	2124      	movs	r1, #36	; 0x24
 8004cb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4911      	ldr	r1, [pc, #68]	; (8004d18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2241      	movs	r2, #65	; 0x41
 8004cfc:	2120      	movs	r1, #32
 8004cfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2240      	movs	r2, #64	; 0x40
 8004d04:	2100      	movs	r1, #0
 8004d06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	ffffefff 	.word	0xffffefff

08004d1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2241      	movs	r2, #65	; 0x41
 8004d2a:	5c9b      	ldrb	r3, [r3, r2]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d139      	bne.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2240      	movs	r2, #64	; 0x40
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e033      	b.n	8004da8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	2101      	movs	r1, #1
 8004d46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2241      	movs	r2, #65	; 0x41
 8004d4c:	2124      	movs	r1, #36	; 0x24
 8004d4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	438a      	bics	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2241      	movs	r2, #65	; 0x41
 8004d96:	2120      	movs	r1, #32
 8004d98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2240      	movs	r2, #64	; 0x40
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e000      	b.n	8004da8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
  }
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	fffff0ff 	.word	0xfffff0ff

08004db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db4:	b5b0      	push	{r4, r5, r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f000 fbbf 	bl	8005546 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc8:	4bc9      	ldr	r3, [pc, #804]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	220c      	movs	r2, #12
 8004dce:	4013      	ands	r3, r2
 8004dd0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd2:	4bc7      	ldr	r3, [pc, #796]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	d100      	bne.n	8004dea <HAL_RCC_OscConfig+0x36>
 8004de8:	e07e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d007      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d112      	bne.n	8004e1c <HAL_RCC_OscConfig+0x68>
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	025b      	lsls	r3, r3, #9
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d10d      	bne.n	8004e1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e00:	4bbb      	ldr	r3, [pc, #748]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <HAL_RCC_OscConfig+0x5a>
 8004e0c:	e06b      	b.n	8004ee6 <HAL_RCC_OscConfig+0x132>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d167      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f000 fb95 	bl	8005546 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	025b      	lsls	r3, r3, #9
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d107      	bne.n	8004e38 <HAL_RCC_OscConfig+0x84>
 8004e28:	4bb1      	ldr	r3, [pc, #708]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4bb0      	ldr	r3, [pc, #704]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	0249      	lsls	r1, r1, #9
 8004e32:	430a      	orrs	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e027      	b.n	8004e88 <HAL_RCC_OscConfig+0xd4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	23a0      	movs	r3, #160	; 0xa0
 8004e3e:	02db      	lsls	r3, r3, #11
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d10e      	bne.n	8004e62 <HAL_RCC_OscConfig+0xae>
 8004e44:	4baa      	ldr	r3, [pc, #680]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4ba9      	ldr	r3, [pc, #676]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e4a:	2180      	movs	r1, #128	; 0x80
 8004e4c:	02c9      	lsls	r1, r1, #11
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	4ba7      	ldr	r3, [pc, #668]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4ba6      	ldr	r3, [pc, #664]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	0249      	lsls	r1, r1, #9
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e012      	b.n	8004e88 <HAL_RCC_OscConfig+0xd4>
 8004e62:	4ba3      	ldr	r3, [pc, #652]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4ba2      	ldr	r3, [pc, #648]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e68:	49a2      	ldr	r1, [pc, #648]	; (80050f4 <HAL_RCC_OscConfig+0x340>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4ba0      	ldr	r3, [pc, #640]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	025b      	lsls	r3, r3, #9
 8004e76:	4013      	ands	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b9b      	ldr	r3, [pc, #620]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004e82:	499d      	ldr	r1, [pc, #628]	; (80050f8 <HAL_RCC_OscConfig+0x344>)
 8004e84:	400a      	ands	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7ff f862 	bl	8003f58 <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e98:	e009      	b.n	8004eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e9a:	f7ff f85d 	bl	8003f58 <HAL_GetTick>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b64      	cmp	r3, #100	; 0x64
 8004ea6:	d902      	bls.n	8004eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	f000 fb4c 	bl	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eae:	4b90      	ldr	r3, [pc, #576]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	029b      	lsls	r3, r3, #10
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d0ef      	beq.n	8004e9a <HAL_RCC_OscConfig+0xe6>
 8004eba:	e015      	b.n	8004ee8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7ff f84c 	bl	8003f58 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec6:	f7ff f847 	bl	8003f58 <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b64      	cmp	r3, #100	; 0x64
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e336      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ed8:	4b85      	ldr	r3, [pc, #532]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	029b      	lsls	r3, r3, #10
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x112>
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2202      	movs	r2, #2
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d100      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x140>
 8004ef2:	e099      	b.n	8005028 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	2220      	movs	r2, #32
 8004efe:	4013      	ands	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004f02:	4b7b      	ldr	r3, [pc, #492]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b7a      	ldr	r3, [pc, #488]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f08:	2120      	movs	r1, #32
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	2220      	movs	r2, #32
 8004f12:	4393      	bics	r3, r2
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d13e      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1ec>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d13b      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004f28:	4b71      	ldr	r3, [pc, #452]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_RCC_OscConfig+0x188>
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e304      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3c:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a6e      	ldr	r2, [pc, #440]	; (80050fc <HAL_RCC_OscConfig+0x348>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	4b68      	ldr	r3, [pc, #416]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f52:	4b67      	ldr	r3, [pc, #412]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2209      	movs	r2, #9
 8004f58:	4393      	bics	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f64:	f000 fc42 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 8004f68:	0001      	movs	r1, r0
 8004f6a:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	220f      	movs	r2, #15
 8004f72:	4013      	ands	r3, r2
 8004f74:	4a62      	ldr	r2, [pc, #392]	; (8005100 <HAL_RCC_OscConfig+0x34c>)
 8004f76:	5cd3      	ldrb	r3, [r2, r3]
 8004f78:	000a      	movs	r2, r1
 8004f7a:	40da      	lsrs	r2, r3
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <HAL_RCC_OscConfig+0x350>)
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004f80:	4b61      	ldr	r3, [pc, #388]	; (8005108 <HAL_RCC_OscConfig+0x354>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2513      	movs	r5, #19
 8004f86:	197c      	adds	r4, r7, r5
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7fe ff9f 	bl	8003ecc <HAL_InitTick>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004f92:	197b      	adds	r3, r7, r5
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d046      	beq.n	8005028 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004f9a:	197b      	adds	r3, r7, r5
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	e2d2      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d027      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004fa6:	4b52      	ldr	r3, [pc, #328]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2209      	movs	r2, #9
 8004fac:	4393      	bics	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	4b4f      	ldr	r3, [pc, #316]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fe ffce 	bl	8003f58 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc2:	f7fe ffc9 	bl	8003f58 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e2b8      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fd4:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d0f1      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b44      	ldr	r3, [pc, #272]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4a46      	ldr	r2, [pc, #280]	; (80050fc <HAL_RCC_OscConfig+0x348>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	e018      	b.n	8005028 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff6:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	438a      	bics	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005002:	f7fe ffa9 	bl	8003f58 <HAL_GetTick>
 8005006:	0003      	movs	r3, r0
 8005008:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500c:	f7fe ffa4 	bl	8003f58 <HAL_GetTick>
 8005010:	0002      	movs	r2, r0
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e293      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2204      	movs	r2, #4
 8005024:	4013      	ands	r3, r2
 8005026:	d1f1      	bne.n	800500c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2210      	movs	r2, #16
 800502e:	4013      	ands	r3, r2
 8005030:	d100      	bne.n	8005034 <HAL_RCC_OscConfig+0x280>
 8005032:	e0a2      	b.n	800517a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d140      	bne.n	80050bc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4013      	ands	r3, r2
 8005044:	d005      	beq.n	8005052 <HAL_RCC_OscConfig+0x29e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e279      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4a2d      	ldr	r2, [pc, #180]	; (800510c <HAL_RCC_OscConfig+0x358>)
 8005058:	4013      	ands	r3, r2
 800505a:	0019      	movs	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	0a19      	lsrs	r1, r3, #8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	061a      	lsls	r2, r3, #24
 8005074:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	0b5b      	lsrs	r3, r3, #13
 8005080:	3301      	adds	r3, #1
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	0212      	lsls	r2, r2, #8
 8005086:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	210f      	movs	r1, #15
 8005090:	400b      	ands	r3, r1
 8005092:	491b      	ldr	r1, [pc, #108]	; (8005100 <HAL_RCC_OscConfig+0x34c>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <HAL_RCC_OscConfig+0x350>)
 800509a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800509c:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <HAL_RCC_OscConfig+0x354>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2513      	movs	r5, #19
 80050a2:	197c      	adds	r4, r7, r5
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fe ff11 	bl	8003ecc <HAL_InitTick>
 80050aa:	0003      	movs	r3, r0
 80050ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80050ae:	197b      	adds	r3, r7, r5
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d061      	beq.n	800517a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80050b6:	197b      	adds	r3, r7, r5
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	e244      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d040      	beq.n	8005146 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_OscConfig+0x33c>)
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	0049      	lsls	r1, r1, #1
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d2:	f7fe ff41 	bl	8003f58 <HAL_GetTick>
 80050d6:	0003      	movs	r3, r0
 80050d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050da:	e019      	b.n	8005110 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050dc:	f7fe ff3c 	bl	8003f58 <HAL_GetTick>
 80050e0:	0002      	movs	r2, r0
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d912      	bls.n	8005110 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e22b      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	40021000 	.word	0x40021000
 80050f4:	fffeffff 	.word	0xfffeffff
 80050f8:	fffbffff 	.word	0xfffbffff
 80050fc:	ffffe0ff 	.word	0xffffe0ff
 8005100:	0800a200 	.word	0x0800a200
 8005104:	20000264 	.word	0x20000264
 8005108:	20000268 	.word	0x20000268
 800510c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005110:	4bca      	ldr	r3, [pc, #808]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4013      	ands	r3, r2
 800511a:	d0df      	beq.n	80050dc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800511c:	4bc7      	ldr	r3, [pc, #796]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4ac7      	ldr	r2, [pc, #796]	; (8005440 <HAL_RCC_OscConfig+0x68c>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800512a:	4bc4      	ldr	r3, [pc, #784]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005130:	4bc2      	ldr	r3, [pc, #776]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	0a19      	lsrs	r1, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	061a      	lsls	r2, r3, #24
 800513e:	4bbf      	ldr	r3, [pc, #764]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	e019      	b.n	800517a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005146:	4bbd      	ldr	r3, [pc, #756]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4bbc      	ldr	r3, [pc, #752]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800514c:	49bd      	ldr	r1, [pc, #756]	; (8005444 <HAL_RCC_OscConfig+0x690>)
 800514e:	400a      	ands	r2, r1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fe ff01 	bl	8003f58 <HAL_GetTick>
 8005156:	0003      	movs	r3, r0
 8005158:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515c:	f7fe fefc 	bl	8003f58 <HAL_GetTick>
 8005160:	0002      	movs	r2, r0
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1eb      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800516e:	4bb3      	ldr	r3, [pc, #716]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2208      	movs	r2, #8
 8005180:	4013      	ands	r3, r2
 8005182:	d036      	beq.n	80051f2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d019      	beq.n	80051c0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518c:	4bab      	ldr	r3, [pc, #684]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800518e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005190:	4baa      	ldr	r3, [pc, #680]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005192:	2101      	movs	r1, #1
 8005194:	430a      	orrs	r2, r1
 8005196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005198:	f7fe fede 	bl	8003f58 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fe fed9 	bl	8003f58 <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1c8      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051b4:	4ba1      	ldr	r3, [pc, #644]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	2202      	movs	r2, #2
 80051ba:	4013      	ands	r3, r2
 80051bc:	d0f1      	beq.n	80051a2 <HAL_RCC_OscConfig+0x3ee>
 80051be:	e018      	b.n	80051f2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c0:	4b9e      	ldr	r3, [pc, #632]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80051c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051c4:	4b9d      	ldr	r3, [pc, #628]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80051c6:	2101      	movs	r1, #1
 80051c8:	438a      	bics	r2, r1
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051cc:	f7fe fec4 	bl	8003f58 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d6:	f7fe febf 	bl	8003f58 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e1ae      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051e8:	4b94      	ldr	r3, [pc, #592]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80051ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ec:	2202      	movs	r2, #2
 80051ee:	4013      	ands	r3, r2
 80051f0:	d1f1      	bne.n	80051d6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2204      	movs	r2, #4
 80051f8:	4013      	ands	r3, r2
 80051fa:	d100      	bne.n	80051fe <HAL_RCC_OscConfig+0x44a>
 80051fc:	e0ae      	b.n	800535c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	2023      	movs	r0, #35	; 0x23
 8005200:	183b      	adds	r3, r7, r0
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005206:	4b8d      	ldr	r3, [pc, #564]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	055b      	lsls	r3, r3, #21
 800520e:	4013      	ands	r3, r2
 8005210:	d109      	bne.n	8005226 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005212:	4b8a      	ldr	r3, [pc, #552]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005216:	4b89      	ldr	r3, [pc, #548]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	0549      	lsls	r1, r1, #21
 800521c:	430a      	orrs	r2, r1
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005220:	183b      	adds	r3, r7, r0
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	4b88      	ldr	r3, [pc, #544]	; (8005448 <HAL_RCC_OscConfig+0x694>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4013      	ands	r3, r2
 8005230:	d11a      	bne.n	8005268 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005232:	4b85      	ldr	r3, [pc, #532]	; (8005448 <HAL_RCC_OscConfig+0x694>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b84      	ldr	r3, [pc, #528]	; (8005448 <HAL_RCC_OscConfig+0x694>)
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	0049      	lsls	r1, r1, #1
 800523c:	430a      	orrs	r2, r1
 800523e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005240:	f7fe fe8a 	bl	8003f58 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fe fe85 	bl	8003f58 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b64      	cmp	r3, #100	; 0x64
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e174      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b7a      	ldr	r3, [pc, #488]	; (8005448 <HAL_RCC_OscConfig+0x694>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4013      	ands	r3, r2
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	429a      	cmp	r2, r3
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x4d0>
 8005274:	4b71      	ldr	r3, [pc, #452]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005278:	4b70      	ldr	r3, [pc, #448]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	0049      	lsls	r1, r1, #1
 800527e:	430a      	orrs	r2, r1
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
 8005282:	e031      	b.n	80052e8 <HAL_RCC_OscConfig+0x534>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10c      	bne.n	80052a6 <HAL_RCC_OscConfig+0x4f2>
 800528c:	4b6b      	ldr	r3, [pc, #428]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800528e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005290:	4b6a      	ldr	r3, [pc, #424]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005292:	496c      	ldr	r1, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x690>)
 8005294:	400a      	ands	r2, r1
 8005296:	651a      	str	r2, [r3, #80]	; 0x50
 8005298:	4b68      	ldr	r3, [pc, #416]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800529a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800529c:	4b67      	ldr	r3, [pc, #412]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800529e:	496b      	ldr	r1, [pc, #428]	; (800544c <HAL_RCC_OscConfig+0x698>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50
 80052a4:	e020      	b.n	80052e8 <HAL_RCC_OscConfig+0x534>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	23a0      	movs	r3, #160	; 0xa0
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d10e      	bne.n	80052d0 <HAL_RCC_OscConfig+0x51c>
 80052b2:	4b62      	ldr	r3, [pc, #392]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b6:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	00c9      	lsls	r1, r1, #3
 80052bc:	430a      	orrs	r2, r1
 80052be:	651a      	str	r2, [r3, #80]	; 0x50
 80052c0:	4b5e      	ldr	r3, [pc, #376]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c4:	4b5d      	ldr	r3, [pc, #372]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	0049      	lsls	r1, r1, #1
 80052ca:	430a      	orrs	r2, r1
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0x534>
 80052d0:	4b5a      	ldr	r3, [pc, #360]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052d4:	4b59      	ldr	r3, [pc, #356]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052d6:	495b      	ldr	r1, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x690>)
 80052d8:	400a      	ands	r2, r1
 80052da:	651a      	str	r2, [r3, #80]	; 0x50
 80052dc:	4b57      	ldr	r3, [pc, #348]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052e0:	4b56      	ldr	r3, [pc, #344]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80052e2:	495a      	ldr	r1, [pc, #360]	; (800544c <HAL_RCC_OscConfig+0x698>)
 80052e4:	400a      	ands	r2, r1
 80052e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f0:	f7fe fe32 	bl	8003f58 <HAL_GetTick>
 80052f4:	0003      	movs	r3, r0
 80052f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052f8:	e009      	b.n	800530e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fe fe2d 	bl	8003f58 <HAL_GetTick>
 80052fe:	0002      	movs	r2, r0
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	4a52      	ldr	r2, [pc, #328]	; (8005450 <HAL_RCC_OscConfig+0x69c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e11b      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530e:	4b4b      	ldr	r3, [pc, #300]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4013      	ands	r3, r2
 8005318:	d0ef      	beq.n	80052fa <HAL_RCC_OscConfig+0x546>
 800531a:	e014      	b.n	8005346 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531c:	f7fe fe1c 	bl	8003f58 <HAL_GetTick>
 8005320:	0003      	movs	r3, r0
 8005322:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005324:	e009      	b.n	800533a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005326:	f7fe fe17 	bl	8003f58 <HAL_GetTick>
 800532a:	0002      	movs	r2, r0
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	4a47      	ldr	r2, [pc, #284]	; (8005450 <HAL_RCC_OscConfig+0x69c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e105      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800533a:	4b40      	ldr	r3, [pc, #256]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800533c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4013      	ands	r3, r2
 8005344:	d1ef      	bne.n	8005326 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005346:	2323      	movs	r3, #35	; 0x23
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005350:	4b3a      	ldr	r3, [pc, #232]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005354:	4b39      	ldr	r3, [pc, #228]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005356:	493f      	ldr	r1, [pc, #252]	; (8005454 <HAL_RCC_OscConfig+0x6a0>)
 8005358:	400a      	ands	r2, r1
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2220      	movs	r2, #32
 8005362:	4013      	ands	r3, r2
 8005364:	d049      	beq.n	80053fa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d026      	beq.n	80053bc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800536e:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	4b32      	ldr	r3, [pc, #200]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005374:	2101      	movs	r1, #1
 8005376:	430a      	orrs	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800537c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005380:	2101      	movs	r1, #1
 8005382:	430a      	orrs	r2, r1
 8005384:	635a      	str	r2, [r3, #52]	; 0x34
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_RCC_OscConfig+0x6a4>)
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	4b33      	ldr	r3, [pc, #204]	; (8005458 <HAL_RCC_OscConfig+0x6a4>)
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	0189      	lsls	r1, r1, #6
 8005390:	430a      	orrs	r2, r1
 8005392:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fe fde0 	bl	8003f58 <HAL_GetTick>
 8005398:	0003      	movs	r3, r0
 800539a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800539e:	f7fe fddb 	bl	8003f58 <HAL_GetTick>
 80053a2:	0002      	movs	r2, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e0ca      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053b0:	4b22      	ldr	r3, [pc, #136]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d0f1      	beq.n	800539e <HAL_RCC_OscConfig+0x5ea>
 80053ba:	e01e      	b.n	80053fa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80053bc:	4b1f      	ldr	r3, [pc, #124]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	4b1e      	ldr	r3, [pc, #120]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80053c2:	2101      	movs	r1, #1
 80053c4:	438a      	bics	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_RCC_OscConfig+0x6a4>)
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_RCC_OscConfig+0x6a4>)
 80053ce:	4923      	ldr	r1, [pc, #140]	; (800545c <HAL_RCC_OscConfig+0x6a8>)
 80053d0:	400a      	ands	r2, r1
 80053d2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fe fdc0 	bl	8003f58 <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053de:	f7fe fdbb 	bl	8003f58 <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0aa      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053f0:	4b12      	ldr	r3, [pc, #72]	; (800543c <HAL_RCC_OscConfig+0x688>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2202      	movs	r2, #2
 80053f6:	4013      	ands	r3, r2
 80053f8:	d1f1      	bne.n	80053de <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d100      	bne.n	8005404 <HAL_RCC_OscConfig+0x650>
 8005402:	e09f      	b.n	8005544 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b0c      	cmp	r3, #12
 8005408:	d100      	bne.n	800540c <HAL_RCC_OscConfig+0x658>
 800540a:	e078      	b.n	80054fe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	2b02      	cmp	r3, #2
 8005412:	d159      	bne.n	80054c8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_OscConfig+0x688>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <HAL_RCC_OscConfig+0x688>)
 800541a:	4911      	ldr	r1, [pc, #68]	; (8005460 <HAL_RCC_OscConfig+0x6ac>)
 800541c:	400a      	ands	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fe fd9a 	bl	8003f58 <HAL_GetTick>
 8005424:	0003      	movs	r3, r0
 8005426:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005428:	e01c      	b.n	8005464 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542a:	f7fe fd95 	bl	8003f58 <HAL_GetTick>
 800542e:	0002      	movs	r2, r0
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d915      	bls.n	8005464 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e084      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
 800543c:	40021000 	.word	0x40021000
 8005440:	ffff1fff 	.word	0xffff1fff
 8005444:	fffffeff 	.word	0xfffffeff
 8005448:	40007000 	.word	0x40007000
 800544c:	fffffbff 	.word	0xfffffbff
 8005450:	00001388 	.word	0x00001388
 8005454:	efffffff 	.word	0xefffffff
 8005458:	40010000 	.word	0x40010000
 800545c:	ffffdfff 	.word	0xffffdfff
 8005460:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005464:	4b3a      	ldr	r3, [pc, #232]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	049b      	lsls	r3, r3, #18
 800546c:	4013      	ands	r3, r2
 800546e:	d1dc      	bne.n	800542a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005470:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a37      	ldr	r2, [pc, #220]	; (8005554 <HAL_RCC_OscConfig+0x7a0>)
 8005476:	4013      	ands	r3, r2
 8005478:	0019      	movs	r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005488:	431a      	orrs	r2, r3
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 800548c:	430a      	orrs	r2, r1
 800548e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005490:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	0449      	lsls	r1, r1, #17
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549e:	f7fe fd5b 	bl	8003f58 <HAL_GetTick>
 80054a2:	0003      	movs	r3, r0
 80054a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fe fd56 	bl	8003f58 <HAL_GetTick>
 80054ac:	0002      	movs	r2, r0
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e045      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	049b      	lsls	r3, r3, #18
 80054c2:	4013      	ands	r3, r2
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x6f4>
 80054c6:	e03d      	b.n	8005544 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c8:	4b21      	ldr	r3, [pc, #132]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 80054ce:	4922      	ldr	r1, [pc, #136]	; (8005558 <HAL_RCC_OscConfig+0x7a4>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fe fd40 	bl	8003f58 <HAL_GetTick>
 80054d8:	0003      	movs	r3, r0
 80054da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054de:	f7fe fd3b 	bl	8003f58 <HAL_GetTick>
 80054e2:	0002      	movs	r2, r0
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e02a      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	049b      	lsls	r3, r3, #18
 80054f8:	4013      	ands	r3, r2
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x72a>
 80054fc:	e022      	b.n	8005544 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e01d      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <HAL_RCC_OscConfig+0x79c>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	025b      	lsls	r3, r3, #9
 8005516:	401a      	ands	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	429a      	cmp	r2, r3
 800551e:	d10f      	bne.n	8005540 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	23f0      	movs	r3, #240	; 0xf0
 8005524:	039b      	lsls	r3, r3, #14
 8005526:	401a      	ands	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d107      	bne.n	8005540 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	23c0      	movs	r3, #192	; 0xc0
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	401a      	ands	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b00a      	add	sp, #40	; 0x28
 800554c:	bdb0      	pop	{r4, r5, r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	40021000 	.word	0x40021000
 8005554:	ff02ffff 	.word	0xff02ffff
 8005558:	feffffff 	.word	0xfeffffff

0800555c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e128      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005570:	4b96      	ldr	r3, [pc, #600]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	4013      	ands	r3, r2
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d91e      	bls.n	80055bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b93      	ldr	r3, [pc, #588]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	4393      	bics	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	4b90      	ldr	r3, [pc, #576]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005590:	f7fe fce2 	bl	8003f58 <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005598:	e009      	b.n	80055ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559a:	f7fe fcdd 	bl	8003f58 <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	4a8a      	ldr	r2, [pc, #552]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e109      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b87      	ldr	r3, [pc, #540]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1ee      	bne.n	800559a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c6:	4b83      	ldr	r3, [pc, #524]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	22f0      	movs	r2, #240	; 0xf0
 80055cc:	4393      	bics	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b7f      	ldr	r3, [pc, #508]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	4013      	ands	r3, r2
 80055e2:	d100      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x8a>
 80055e4:	e089      	b.n	80056fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d107      	bne.n	80055fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055ee:	4b79      	ldr	r3, [pc, #484]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	4013      	ands	r3, r2
 80055f8:	d120      	bne.n	800563c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e0e1      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005606:	4b73      	ldr	r3, [pc, #460]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	049b      	lsls	r3, r3, #18
 800560e:	4013      	ands	r3, r2
 8005610:	d114      	bne.n	800563c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0d5      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d106      	bne.n	800562c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800561e:	4b6d      	ldr	r3, [pc, #436]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	d109      	bne.n	800563c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0ca      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800562c:	4b69      	ldr	r3, [pc, #420]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4013      	ands	r3, r2
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0c2      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800563c:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2203      	movs	r2, #3
 8005642:	4393      	bics	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 800564c:	430a      	orrs	r2, r1
 800564e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005650:	f7fe fc82 	bl	8003f58 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d111      	bne.n	8005684 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005660:	e009      	b.n	8005676 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005662:	f7fe fc79 	bl	8003f58 <HAL_GetTick>
 8005666:	0002      	movs	r2, r0
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	4a58      	ldr	r2, [pc, #352]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0a5      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005676:	4b57      	ldr	r3, [pc, #348]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	220c      	movs	r2, #12
 800567c:	4013      	ands	r3, r2
 800567e:	2b08      	cmp	r3, #8
 8005680:	d1ef      	bne.n	8005662 <HAL_RCC_ClockConfig+0x106>
 8005682:	e03a      	b.n	80056fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d111      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800568c:	e009      	b.n	80056a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800568e:	f7fe fc63 	bl	8003f58 <HAL_GetTick>
 8005692:	0002      	movs	r2, r0
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	4a4d      	ldr	r2, [pc, #308]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e08f      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056a2:	4b4c      	ldr	r3, [pc, #304]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	220c      	movs	r2, #12
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d1ef      	bne.n	800568e <HAL_RCC_ClockConfig+0x132>
 80056ae:	e024      	b.n	80056fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d11b      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056b8:	e009      	b.n	80056ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ba:	f7fe fc4d 	bl	8003f58 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	4a42      	ldr	r2, [pc, #264]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e079      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ce:	4b41      	ldr	r3, [pc, #260]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	220c      	movs	r2, #12
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d1ef      	bne.n	80056ba <HAL_RCC_ClockConfig+0x15e>
 80056da:	e00e      	b.n	80056fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fe fc3c 	bl	8003f58 <HAL_GetTick>
 80056e0:	0002      	movs	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	4a3a      	ldr	r2, [pc, #232]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e068      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80056f0:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	220c      	movs	r2, #12
 80056f6:	4013      	ands	r3, r2
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056fa:	4b34      	ldr	r3, [pc, #208]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2201      	movs	r2, #1
 8005700:	4013      	ands	r3, r2
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d21e      	bcs.n	8005746 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005708:	4b30      	ldr	r3, [pc, #192]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2201      	movs	r2, #1
 800570e:	4393      	bics	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800571a:	f7fe fc1d 	bl	8003f58 <HAL_GetTick>
 800571e:	0003      	movs	r3, r0
 8005720:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	e009      	b.n	8005738 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005724:	f7fe fc18 	bl	8003f58 <HAL_GetTick>
 8005728:	0002      	movs	r2, r0
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e044      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005738:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2201      	movs	r2, #1
 800573e:	4013      	ands	r3, r2
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d1ee      	bne.n	8005724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2204      	movs	r2, #4
 800574c:	4013      	ands	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <HAL_RCC_ClockConfig+0x27c>)
 8005756:	4013      	ands	r3, r2
 8005758:	0019      	movs	r1, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005760:	430a      	orrs	r2, r1
 8005762:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2208      	movs	r2, #8
 800576a:	4013      	ands	r3, r2
 800576c:	d00a      	beq.n	8005784 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <HAL_RCC_ClockConfig+0x280>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	00da      	lsls	r2, r3, #3
 800577e:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 8005780:	430a      	orrs	r2, r1
 8005782:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005784:	f000 f832 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 8005788:	0001      	movs	r1, r0
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <HAL_RCC_ClockConfig+0x278>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	220f      	movs	r2, #15
 8005792:	4013      	ands	r3, r2
 8005794:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <HAL_RCC_ClockConfig+0x284>)
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	000a      	movs	r2, r1
 800579a:	40da      	lsrs	r2, r3
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 800579e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057a0:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <HAL_RCC_ClockConfig+0x28c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	250b      	movs	r5, #11
 80057a6:	197c      	adds	r4, r7, r5
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7fe fb8f 	bl	8003ecc <HAL_InitTick>
 80057ae:	0003      	movs	r3, r0
 80057b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80057b2:	197b      	adds	r3, r7, r5
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80057ba:	197b      	adds	r3, r7, r5
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	e000      	b.n	80057c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b004      	add	sp, #16
 80057c8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	40022000 	.word	0x40022000
 80057d0:	00001388 	.word	0x00001388
 80057d4:	40021000 	.word	0x40021000
 80057d8:	fffff8ff 	.word	0xfffff8ff
 80057dc:	ffffc7ff 	.word	0xffffc7ff
 80057e0:	0800a200 	.word	0x0800a200
 80057e4:	20000264 	.word	0x20000264
 80057e8:	20000268 	.word	0x20000268

080057ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ec:	b5b0      	push	{r4, r5, r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80057f2:	4b4c      	ldr	r3, [pc, #304]	; (8005924 <HAL_RCC_GetSysClockFreq+0x138>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fa:	230c      	movs	r3, #12
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d014      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x40>
 8005802:	d900      	bls.n	8005806 <HAL_RCC_GetSysClockFreq+0x1a>
 8005804:	e07b      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x112>
 8005806:	2b04      	cmp	r3, #4
 8005808:	d002      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x24>
 800580a:	2b08      	cmp	r3, #8
 800580c:	d00b      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0x3a>
 800580e:	e076      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005810:	4b44      	ldr	r3, [pc, #272]	; (8005924 <HAL_RCC_GetSysClockFreq+0x138>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2210      	movs	r2, #16
 8005816:	4013      	ands	r3, r2
 8005818:	d002      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800581a:	4b43      	ldr	r3, [pc, #268]	; (8005928 <HAL_RCC_GetSysClockFreq+0x13c>)
 800581c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800581e:	e07c      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005820:	4b42      	ldr	r3, [pc, #264]	; (800592c <HAL_RCC_GetSysClockFreq+0x140>)
 8005822:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005824:	e079      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005826:	4b42      	ldr	r3, [pc, #264]	; (8005930 <HAL_RCC_GetSysClockFreq+0x144>)
 8005828:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800582a:	e076      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	0c9a      	lsrs	r2, r3, #18
 8005830:	230f      	movs	r3, #15
 8005832:	401a      	ands	r2, r3
 8005834:	4b3f      	ldr	r3, [pc, #252]	; (8005934 <HAL_RCC_GetSysClockFreq+0x148>)
 8005836:	5c9b      	ldrb	r3, [r3, r2]
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	0d9a      	lsrs	r2, r3, #22
 800583e:	2303      	movs	r3, #3
 8005840:	4013      	ands	r3, r2
 8005842:	3301      	adds	r3, #1
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005846:	4b37      	ldr	r3, [pc, #220]	; (8005924 <HAL_RCC_GetSysClockFreq+0x138>)
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	025b      	lsls	r3, r3, #9
 800584e:	4013      	ands	r3, r2
 8005850:	d01a      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	4a35      	ldr	r2, [pc, #212]	; (8005930 <HAL_RCC_GetSysClockFreq+0x144>)
 800585c:	2300      	movs	r3, #0
 800585e:	69b8      	ldr	r0, [r7, #24]
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	f7fa fe7b 	bl	800055c <__aeabi_lmul>
 8005866:	0002      	movs	r2, r0
 8005868:	000b      	movs	r3, r1
 800586a:	0010      	movs	r0, r2
 800586c:	0019      	movs	r1, r3
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f7fa fe4f 	bl	800051c <__aeabi_uldivmod>
 800587e:	0002      	movs	r2, r0
 8005880:	000b      	movs	r3, r1
 8005882:	0013      	movs	r3, r2
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
 8005886:	e037      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005888:	4b26      	ldr	r3, [pc, #152]	; (8005924 <HAL_RCC_GetSysClockFreq+0x138>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2210      	movs	r2, #16
 800588e:	4013      	ands	r3, r2
 8005890:	d01a      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	4a23      	ldr	r2, [pc, #140]	; (8005928 <HAL_RCC_GetSysClockFreq+0x13c>)
 800589c:	2300      	movs	r3, #0
 800589e:	68b8      	ldr	r0, [r7, #8]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	f7fa fe5b 	bl	800055c <__aeabi_lmul>
 80058a6:	0002      	movs	r2, r0
 80058a8:	000b      	movs	r3, r1
 80058aa:	0010      	movs	r0, r2
 80058ac:	0019      	movs	r1, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f7fa fe2f 	bl	800051c <__aeabi_uldivmod>
 80058be:	0002      	movs	r2, r0
 80058c0:	000b      	movs	r3, r1
 80058c2:	0013      	movs	r3, r2
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	e017      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	0018      	movs	r0, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	0019      	movs	r1, r3
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_RCC_GetSysClockFreq+0x140>)
 80058d2:	2300      	movs	r3, #0
 80058d4:	f7fa fe42 	bl	800055c <__aeabi_lmul>
 80058d8:	0002      	movs	r2, r0
 80058da:	000b      	movs	r3, r1
 80058dc:	0010      	movs	r0, r2
 80058de:	0019      	movs	r1, r3
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	001c      	movs	r4, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	001d      	movs	r5, r3
 80058e8:	0022      	movs	r2, r4
 80058ea:	002b      	movs	r3, r5
 80058ec:	f7fa fe16 	bl	800051c <__aeabi_uldivmod>
 80058f0:	0002      	movs	r2, r0
 80058f2:	000b      	movs	r3, r1
 80058f4:	0013      	movs	r3, r2
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058fc:	e00d      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <HAL_RCC_GetSysClockFreq+0x138>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	0b5b      	lsrs	r3, r3, #13
 8005904:	2207      	movs	r2, #7
 8005906:	4013      	ands	r3, r2
 8005908:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	3301      	adds	r3, #1
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	0212      	lsls	r2, r2, #8
 8005912:	409a      	lsls	r2, r3
 8005914:	0013      	movs	r3, r2
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005918:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	b00e      	add	sp, #56	; 0x38
 8005922:	bdb0      	pop	{r4, r5, r7, pc}
 8005924:	40021000 	.word	0x40021000
 8005928:	003d0900 	.word	0x003d0900
 800592c:	00f42400 	.word	0x00f42400
 8005930:	007a1200 	.word	0x007a1200
 8005934:	0800a218 	.word	0x0800a218

08005938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <HAL_RCC_GetHCLKFreq+0x10>)
 800593e:	681b      	ldr	r3, [r3, #0]
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	20000264 	.word	0x20000264

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005950:	f7ff fff2 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005954:	0001      	movs	r1, r0
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	0a1b      	lsrs	r3, r3, #8
 800595c:	2207      	movs	r2, #7
 800595e:	4013      	ands	r3, r2
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005962:	5cd3      	ldrb	r3, [r2, r3]
 8005964:	40d9      	lsrs	r1, r3
 8005966:	000b      	movs	r3, r1
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	40021000 	.word	0x40021000
 8005974:	0800a210 	.word	0x0800a210

08005978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800597c:	f7ff ffdc 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005980:	0001      	movs	r1, r0
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	0adb      	lsrs	r3, r3, #11
 8005988:	2207      	movs	r2, #7
 800598a:	4013      	ands	r3, r2
 800598c:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800598e:	5cd3      	ldrb	r3, [r2, r3]
 8005990:	40d9      	lsrs	r1, r3
 8005992:	000b      	movs	r3, r1
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	40021000 	.word	0x40021000
 80059a0:	0800a210 	.word	0x0800a210

080059a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80059ac:	2317      	movs	r3, #23
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2220      	movs	r2, #32
 80059ba:	4013      	ands	r3, r2
 80059bc:	d106      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	4013      	ands	r3, r2
 80059c8:	d100      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80059ca:	e104      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059cc:	4bb9      	ldr	r3, [pc, #740]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	055b      	lsls	r3, r3, #21
 80059d4:	4013      	ands	r3, r2
 80059d6:	d10a      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d8:	4bb6      	ldr	r3, [pc, #728]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059dc:	4bb5      	ldr	r3, [pc, #724]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	0549      	lsls	r1, r1, #21
 80059e2:	430a      	orrs	r2, r1
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80059e6:	2317      	movs	r3, #23
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ee:	4bb2      	ldr	r3, [pc, #712]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4013      	ands	r3, r2
 80059f8:	d11a      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fa:	4baf      	ldr	r3, [pc, #700]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4bae      	ldr	r3, [pc, #696]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	0049      	lsls	r1, r1, #1
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a08:	f7fe faa6 	bl	8003f58 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a10:	e008      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a12:	f7fe faa1 	bl	8003f58 <HAL_GetTick>
 8005a16:	0002      	movs	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e143      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a24:	4ba4      	ldr	r3, [pc, #656]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a30:	4ba0      	ldr	r3, [pc, #640]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	23c0      	movs	r3, #192	; 0xc0
 8005a36:	039b      	lsls	r3, r3, #14
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	23c0      	movs	r3, #192	; 0xc0
 8005a42:	039b      	lsls	r3, r3, #14
 8005a44:	4013      	ands	r3, r2
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d107      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	23c0      	movs	r3, #192	; 0xc0
 8005a52:	039b      	lsls	r3, r3, #14
 8005a54:	4013      	ands	r3, r2
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d013      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	23c0      	movs	r3, #192	; 0xc0
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	401a      	ands	r2, r3
 8005a66:	23c0      	movs	r3, #192	; 0xc0
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d10a      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a6e:	4b91      	ldr	r3, [pc, #580]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	401a      	ands	r2, r3
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e113      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005a84:	4b8b      	ldr	r3, [pc, #556]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a88:	23c0      	movs	r3, #192	; 0xc0
 8005a8a:	029b      	lsls	r3, r3, #10
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d049      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	23c0      	movs	r3, #192	; 0xc0
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d004      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	4013      	ands	r3, r2
 8005aae:	d10d      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	23c0      	movs	r3, #192	; 0xc0
 8005ab6:	029b      	lsls	r3, r3, #10
 8005ab8:	4013      	ands	r3, r2
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d034      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d02e      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005acc:	4b79      	ldr	r3, [pc, #484]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad0:	4a7a      	ldr	r2, [pc, #488]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ad6:	4b77      	ldr	r3, [pc, #476]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ada:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	0309      	lsls	r1, r1, #12
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae4:	4b73      	ldr	r3, [pc, #460]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ae8:	4b72      	ldr	r3, [pc, #456]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005aea:	4975      	ldr	r1, [pc, #468]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005aec:	400a      	ands	r2, r1
 8005aee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005af0:	4b70      	ldr	r3, [pc, #448]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4013      	ands	r3, r2
 8005afe:	d014      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fe fa2a 	bl	8003f58 <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b08:	e009      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fe fa25 	bl	8003f58 <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	4a6b      	ldr	r2, [pc, #428]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e0c6      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b1e:	4b65      	ldr	r3, [pc, #404]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4013      	ands	r3, r2
 8005b28:	d0ef      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	2380      	movs	r3, #128	; 0x80
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	4013      	ands	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	23c0      	movs	r3, #192	; 0xc0
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	401a      	ands	r2, r3
 8005b40:	23c0      	movs	r3, #192	; 0xc0
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d10c      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005b48:	4b5a      	ldr	r3, [pc, #360]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5e      	ldr	r2, [pc, #376]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	0019      	movs	r1, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	23c0      	movs	r3, #192	; 0xc0
 8005b58:	039b      	lsls	r3, r3, #14
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	4b55      	ldr	r3, [pc, #340]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	4b54      	ldr	r3, [pc, #336]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	23c0      	movs	r3, #192	; 0xc0
 8005b6c:	029b      	lsls	r3, r3, #10
 8005b6e:	401a      	ands	r2, r3
 8005b70:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b72:	430a      	orrs	r2, r1
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d01f      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	23c0      	movs	r3, #192	; 0xc0
 8005b86:	029b      	lsls	r3, r3, #10
 8005b88:	401a      	ands	r2, r3
 8005b8a:	23c0      	movs	r3, #192	; 0xc0
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d10c      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005b92:	4b48      	ldr	r3, [pc, #288]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a4c      	ldr	r2, [pc, #304]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	23c0      	movs	r3, #192	; 0xc0
 8005ba2:	039b      	lsls	r3, r3, #14
 8005ba4:	401a      	ands	r2, r3
 8005ba6:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	4b41      	ldr	r3, [pc, #260]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	23c0      	movs	r3, #192	; 0xc0
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	401a      	ands	r2, r3
 8005bba:	4b3e      	ldr	r3, [pc, #248]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bc0:	2317      	movs	r3, #23
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bca:	4b3a      	ldr	r3, [pc, #232]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bce:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bd0:	493e      	ldr	r1, [pc, #248]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005bd2:	400a      	ands	r2, r1
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d009      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be0:	4b34      	ldr	r3, [pc, #208]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be4:	2203      	movs	r2, #3
 8005be6:	4393      	bics	r3, r2
 8005be8:	0019      	movs	r1, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	4b31      	ldr	r3, [pc, #196]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	220c      	movs	r2, #12
 8005c04:	4393      	bics	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2204      	movs	r2, #4
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c1c:	4b25      	ldr	r3, [pc, #148]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c20:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	0019      	movs	r1, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	4013      	ands	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c3a:	4b1e      	ldr	r3, [pc, #120]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4013      	ands	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	0019      	movs	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	4013      	ands	r3, r2
 8005c76:	d009      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	0019      	movs	r1, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	4013      	ands	r3, r2
 8005c94:	d009      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9a:	4a10      	ldr	r2, [pc, #64]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b006      	add	sp, #24
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
 8005cbc:	fffcffff 	.word	0xfffcffff
 8005cc0:	fff7ffff 	.word	0xfff7ffff
 8005cc4:	00001388 	.word	0x00001388
 8005cc8:	ffcfffff 	.word	0xffcfffff
 8005ccc:	efffffff 	.word	0xefffffff
 8005cd0:	fffff3ff 	.word	0xfffff3ff
 8005cd4:	ffffcfff 	.word	0xffffcfff
 8005cd8:	fbffffff 	.word	0xfbffffff
 8005cdc:	fff3ffff 	.word	0xfff3ffff

08005ce0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ce0:	b5b0      	push	{r4, r5, r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ce8:	230f      	movs	r3, #15
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e088      	b.n	8005e0c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d107      	bne.n	8005d16 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7fd ff9d 	bl	8003c50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2221      	movs	r2, #33	; 0x21
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2210      	movs	r2, #16
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d05f      	beq.n	8005dec <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	22ca      	movs	r2, #202	; 0xca
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2253      	movs	r2, #83	; 0x53
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005d3c:	250f      	movs	r5, #15
 8005d3e:	197c      	adds	r4, r7, r5
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 f9ce 	bl	80060e4 <RTC_EnterInitMode>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8005d4c:	0028      	movs	r0, r5
 8005d4e:	183b      	adds	r3, r7, r0
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12c      	bne.n	8005db0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	492c      	ldr	r1, [pc, #176]	; (8005e14 <HAL_RTC_Init+0x134>)
 8005d62:	400a      	ands	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6899      	ldr	r1, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68d2      	ldr	r2, [r2, #12]
 8005d8c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6919      	ldr	r1, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	041a      	lsls	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005da2:	183c      	adds	r4, r7, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f000 f9e0 	bl	800616c <RTC_ExitInitMode>
 8005dac:	0003      	movs	r3, r0
 8005dae:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005db0:	230f      	movs	r3, #15
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2103      	movs	r1, #3
 8005dc6:	438a      	bics	r2, r1
 8005dc8:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	22ff      	movs	r2, #255	; 0xff
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
 8005dea:	e003      	b.n	8005df4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005dec:	230f      	movs	r3, #15
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005df4:	230f      	movs	r3, #15
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2221      	movs	r2, #33	; 0x21
 8005e02:	2101      	movs	r1, #1
 8005e04:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005e06:	230f      	movs	r3, #15
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	781b      	ldrb	r3, [r3, #0]
}
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b004      	add	sp, #16
 8005e12:	bdb0      	pop	{r4, r5, r7, pc}
 8005e14:	ff8fffbf 	.word	0xff8fffbf

08005e18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e18:	b5b0      	push	{r4, r5, r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	5c9b      	ldrb	r3, [r3, r2]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_RTC_SetTime+0x1e>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e092      	b.n	8005f5c <HAL_RTC_SetTime+0x144>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2221      	movs	r2, #33	; 0x21
 8005e42:	2102      	movs	r1, #2
 8005e44:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d125      	bne.n	8005e98 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2240      	movs	r2, #64	; 0x40
 8005e54:	4013      	ands	r3, r2
 8005e56:	d102      	bne.n	8005e5e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 f9ac 	bl	80061c0 <RTC_ByteToBcd2>
 8005e68:	0003      	movs	r3, r0
 8005e6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f000 f9a5 	bl	80061c0 <RTC_ByteToBcd2>
 8005e76:	0003      	movs	r3, r0
 8005e78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	789b      	ldrb	r3, [r3, #2]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 f99d 	bl	80061c0 <RTC_ByteToBcd2>
 8005e86:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e88:	0022      	movs	r2, r4
 8005e8a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	78db      	ldrb	r3, [r3, #3]
 8005e90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	e017      	b.n	8005ec8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d102      	bne.n	8005eaa <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005eb6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ebc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	78db      	ldrb	r3, [r3, #3]
 8005ec2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	22ca      	movs	r2, #202	; 0xca
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2253      	movs	r2, #83	; 0x53
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ed8:	2513      	movs	r5, #19
 8005eda:	197c      	adds	r4, r7, r5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 f900 	bl	80060e4 <RTC_EnterInitMode>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005ee8:	0028      	movs	r0, r5
 8005eea:	183b      	adds	r3, r7, r0
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d120      	bne.n	8005f34 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	491a      	ldr	r1, [pc, #104]	; (8005f64 <HAL_RTC_SetTime+0x14c>)
 8005efa:	400a      	ands	r2, r1
 8005efc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4917      	ldr	r1, [pc, #92]	; (8005f68 <HAL_RTC_SetTime+0x150>)
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6899      	ldr	r1, [r3, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f26:	183c      	adds	r4, r7, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f000 f91e 	bl	800616c <RTC_ExitInitMode>
 8005f30:	0003      	movs	r3, r0
 8005f32:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8005f34:	2313      	movs	r3, #19
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2221      	movs	r2, #33	; 0x21
 8005f42:	2101      	movs	r1, #1
 8005f44:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	22ff      	movs	r2, #255	; 0xff
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	2100      	movs	r1, #0
 8005f54:	5499      	strb	r1, [r3, r2]

  return status;
 8005f56:	2313      	movs	r3, #19
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b006      	add	sp, #24
 8005f62:	bdb0      	pop	{r4, r5, r7, pc}
 8005f64:	007f7f7f 	.word	0x007f7f7f
 8005f68:	fffbffff 	.word	0xfffbffff

08005f6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f6c:	b5b0      	push	{r4, r5, r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	5c9b      	ldrb	r3, [r3, r2]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_RTC_SetDate+0x1e>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e07e      	b.n	8006088 <HAL_RTC_SetDate+0x11c>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	2101      	movs	r1, #1
 8005f90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2221      	movs	r2, #33	; 0x21
 8005f96:	2102      	movs	r1, #2
 8005f98:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10e      	bne.n	8005fbe <HAL_RTC_SetDate+0x52>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d008      	beq.n	8005fbe <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	4393      	bics	r3, r2
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	330a      	adds	r3, #10
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11c      	bne.n	8005ffe <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 f8f9 	bl	80061c0 <RTC_ByteToBcd2>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f8f2 	bl	80061c0 <RTC_ByteToBcd2>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005fe0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	789b      	ldrb	r3, [r3, #2]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f000 f8ea 	bl	80061c0 <RTC_ByteToBcd2>
 8005fec:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fee:	0022      	movs	r2, r4
 8005ff0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e00e      	b.n	800601c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800600a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006010:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	22ca      	movs	r2, #202	; 0xca
 8006022:	625a      	str	r2, [r3, #36]	; 0x24
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2253      	movs	r2, #83	; 0x53
 800602a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800602c:	2513      	movs	r5, #19
 800602e:	197c      	adds	r4, r7, r5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	0018      	movs	r0, r3
 8006034:	f000 f856 	bl	80060e4 <RTC_EnterInitMode>
 8006038:	0003      	movs	r3, r0
 800603a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800603c:	0028      	movs	r0, r5
 800603e:	183b      	adds	r3, r7, r0
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4910      	ldr	r1, [pc, #64]	; (8006090 <HAL_RTC_SetDate+0x124>)
 800604e:	400a      	ands	r2, r1
 8006050:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006052:	183c      	adds	r4, r7, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f888 	bl	800616c <RTC_ExitInitMode>
 800605c:	0003      	movs	r3, r0
 800605e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006060:	2313      	movs	r3, #19
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2221      	movs	r2, #33	; 0x21
 800606e:	2101      	movs	r1, #1
 8006070:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	22ff      	movs	r2, #255	; 0xff
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	2100      	movs	r1, #0
 8006080:	5499      	strb	r1, [r3, r2]

  return status;
 8006082:	2313      	movs	r3, #19
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	781b      	ldrb	r3, [r3, #0]
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b006      	add	sp, #24
 800608e:	bdb0      	pop	{r4, r5, r7, pc}
 8006090:	00ffff3f 	.word	0x00ffff3f

08006094 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_RTC_WaitForSynchro+0x4c>)
 80060a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060a8:	f7fd ff56 	bl	8003f58 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060b0:	e00a      	b.n	80060c8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060b2:	f7fd ff51 	bl	8003f58 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	23fa      	movs	r3, #250	; 0xfa
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d901      	bls.n	80060c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e006      	b.n	80060d6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	4013      	ands	r3, r2
 80060d2:	d0ee      	beq.n	80060b2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	0018      	movs	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	b004      	add	sp, #16
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	0001ff5f 	.word	0x0001ff5f

080060e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	230f      	movs	r3, #15
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	2240      	movs	r2, #64	; 0x40
 8006100:	4013      	ands	r3, r2
 8006102:	d12c      	bne.n	800615e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	430a      	orrs	r2, r1
 8006112:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006114:	f7fd ff20 	bl	8003f58 <HAL_GetTick>
 8006118:	0003      	movs	r3, r0
 800611a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800611c:	e014      	b.n	8006148 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800611e:	f7fd ff1b 	bl	8003f58 <HAL_GetTick>
 8006122:	0002      	movs	r2, r0
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	200f      	movs	r0, #15
 800612a:	183b      	adds	r3, r7, r0
 800612c:	1839      	adds	r1, r7, r0
 800612e:	7809      	ldrb	r1, [r1, #0]
 8006130:	7019      	strb	r1, [r3, #0]
 8006132:	23fa      	movs	r3, #250	; 0xfa
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	429a      	cmp	r2, r3
 8006138:	d906      	bls.n	8006148 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	2104      	movs	r1, #4
 8006140:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8006142:	183b      	adds	r3, r7, r0
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	4013      	ands	r3, r2
 8006152:	d104      	bne.n	800615e <RTC_EnterInitMode+0x7a>
 8006154:	230f      	movs	r3, #15
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d1df      	bne.n	800611e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800615e:	230f      	movs	r3, #15
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	781b      	ldrb	r3, [r3, #0]
}
 8006164:	0018      	movs	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	b004      	add	sp, #16
 800616a:	bd80      	pop	{r7, pc}

0800616c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	240f      	movs	r4, #15
 8006176:	193b      	adds	r3, r7, r4
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	438a      	bics	r2, r1
 800618a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2220      	movs	r2, #32
 8006194:	4013      	ands	r3, r2
 8006196:	d10c      	bne.n	80061b2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0018      	movs	r0, r3
 800619c:	f7ff ff7a 	bl	8006094 <HAL_RTC_WaitForSynchro>
 80061a0:	1e03      	subs	r3, r0, #0
 80061a2:	d006      	beq.n	80061b2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2221      	movs	r2, #33	; 0x21
 80061a8:	2104      	movs	r1, #4
 80061aa:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80061ac:	193b      	adds	r3, r7, r4
 80061ae:	2201      	movs	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80061b2:	230f      	movs	r3, #15
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	781b      	ldrb	r3, [r3, #0]
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b005      	add	sp, #20
 80061be:	bd90      	pop	{r4, r7, pc}

080061c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	0002      	movs	r2, r0
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80061d0:	e007      	b.n	80061e2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80061d8:	1dfb      	adds	r3, r7, #7
 80061da:	1dfa      	adds	r2, r7, #7
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	3a0a      	subs	r2, #10
 80061e0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80061e2:	1dfb      	adds	r3, r7, #7
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d8f3      	bhi.n	80061d2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	1dfb      	adds	r3, r7, #7
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b2db      	uxtb	r3, r3
}
 80061fa:	0018      	movs	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b004      	add	sp, #16
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e032      	b.n	800627a <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2239      	movs	r2, #57	; 0x39
 8006218:	5c9b      	ldrb	r3, [r3, r2]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2238      	movs	r2, #56	; 0x38
 8006224:	2100      	movs	r1, #0
 8006226:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	0018      	movs	r0, r3
 800622c:	f7fd fd28 	bl	8003c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2239      	movs	r2, #57	; 0x39
 8006234:	2102      	movs	r1, #2
 8006236:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	0019      	movs	r1, r3
 8006242:	0010      	movs	r0, r2
 8006244:	f000 f8f2 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	223e      	movs	r2, #62	; 0x3e
 800624c:	2101      	movs	r1, #1
 800624e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	223a      	movs	r2, #58	; 0x3a
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	223b      	movs	r2, #59	; 0x3b
 800625c:	2101      	movs	r1, #1
 800625e:	5499      	strb	r1, [r3, r2]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	223c      	movs	r2, #60	; 0x3c
 8006264:	2101      	movs	r1, #1
 8006266:	5499      	strb	r1, [r3, r2]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	223d      	movs	r2, #61	; 0x3d
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2239      	movs	r2, #57	; 0x39
 8006274:	2101      	movs	r1, #1
 8006276:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	0018      	movs	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	b002      	add	sp, #8
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	230f      	movs	r3, #15
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2238      	movs	r2, #56	; 0x38
 800629a:	5c9b      	ldrb	r3, [r3, r2]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_TIM_ConfigClockSource+0x20>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0bc      	b.n	800641e <HAL_TIM_ConfigClockSource+0x19a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2238      	movs	r2, #56	; 0x38
 80062a8:	2101      	movs	r1, #1
 80062aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2239      	movs	r2, #57	; 0x39
 80062b0:	2102      	movs	r1, #2
 80062b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2277      	movs	r2, #119	; 0x77
 80062c0:	4393      	bics	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a58      	ldr	r2, [pc, #352]	; (8006428 <HAL_TIM_ConfigClockSource+0x1a4>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	0192      	lsls	r2, r2, #6
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0xde>
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	0192      	lsls	r2, r2, #6
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d900      	bls.n	80062ea <HAL_TIM_ConfigClockSource+0x66>
 80062e8:	e088      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	0152      	lsls	r2, r2, #5
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d100      	bne.n	80062f4 <HAL_TIM_ConfigClockSource+0x70>
 80062f2:	e088      	b.n	8006406 <HAL_TIM_ConfigClockSource+0x182>
 80062f4:	2280      	movs	r2, #128	; 0x80
 80062f6:	0152      	lsls	r2, r2, #5
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d900      	bls.n	80062fe <HAL_TIM_ConfigClockSource+0x7a>
 80062fc:	e07e      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 80062fe:	2b70      	cmp	r3, #112	; 0x70
 8006300:	d018      	beq.n	8006334 <HAL_TIM_ConfigClockSource+0xb0>
 8006302:	d900      	bls.n	8006306 <HAL_TIM_ConfigClockSource+0x82>
 8006304:	e07a      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 8006306:	2b60      	cmp	r3, #96	; 0x60
 8006308:	d04f      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x126>
 800630a:	d900      	bls.n	800630e <HAL_TIM_ConfigClockSource+0x8a>
 800630c:	e076      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 800630e:	2b50      	cmp	r3, #80	; 0x50
 8006310:	d03b      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x106>
 8006312:	d900      	bls.n	8006316 <HAL_TIM_ConfigClockSource+0x92>
 8006314:	e072      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d057      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x146>
 800631a:	d900      	bls.n	800631e <HAL_TIM_ConfigClockSource+0x9a>
 800631c:	e06e      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d063      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x166>
 8006322:	d86b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d060      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x166>
 8006328:	d868      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d05d      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x166>
 800632e:	2b10      	cmp	r3, #16
 8006330:	d05b      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x166>
 8006332:	e063      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	f000 f94a 	bl	80065dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2277      	movs	r2, #119	; 0x77
 8006354:	4313      	orrs	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	609a      	str	r2, [r3, #8]
      break;
 8006360:	e052      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006372:	f000 f933 	bl	80065dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2180      	movs	r1, #128	; 0x80
 8006382:	01c9      	lsls	r1, r1, #7
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
      break;
 8006388:	e03e      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006396:	001a      	movs	r2, r3
 8006398:	f000 f8a6 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2150      	movs	r1, #80	; 0x50
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 f900 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e02e      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b6:	001a      	movs	r2, r3
 80063b8:	f000 f8c4 	bl	8006544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2160      	movs	r1, #96	; 0x60
 80063c2:	0018      	movs	r0, r3
 80063c4:	f000 f8f0 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e01e      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d6:	001a      	movs	r2, r3
 80063d8:	f000 f886 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	0018      	movs	r0, r3
 80063e4:	f000 f8e0 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e00e      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	0019      	movs	r1, r3
 80063f4:	0010      	movs	r0, r2
 80063f6:	f000 f8d7 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 80063fa:	e005      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80063fc:	230f      	movs	r3, #15
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2201      	movs	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
      break;
 8006404:	e000      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006406:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2239      	movs	r2, #57	; 0x39
 800640c:	2101      	movs	r1, #1
 800640e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2238      	movs	r2, #56	; 0x38
 8006414:	2100      	movs	r1, #0
 8006416:	5499      	strb	r1, [r3, r2]

  return status;
 8006418:	230f      	movs	r3, #15
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	781b      	ldrb	r3, [r3, #0]
}
 800641e:	0018      	movs	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	b004      	add	sp, #16
 8006424:	bd80      	pop	{r7, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	ffff00ff 	.word	0xffff00ff

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	05db      	lsls	r3, r3, #23
 8006442:	429a      	cmp	r2, r3
 8006444:	d00b      	beq.n	800645e <TIM_Base_SetConfig+0x32>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a23      	ldr	r2, [pc, #140]	; (80064d8 <TIM_Base_SetConfig+0xac>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_Base_SetConfig+0x32>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a22      	ldr	r2, [pc, #136]	; (80064dc <TIM_Base_SetConfig+0xb0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_Base_SetConfig+0x32>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <TIM_Base_SetConfig+0xb4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d108      	bne.n	8006470 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2270      	movs	r2, #112	; 0x70
 8006462:	4393      	bics	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	05db      	lsls	r3, r3, #23
 8006476:	429a      	cmp	r2, r3
 8006478:	d00b      	beq.n	8006492 <TIM_Base_SetConfig+0x66>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_Base_SetConfig+0xac>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_Base_SetConfig+0x66>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <TIM_Base_SetConfig+0xb0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_Base_SetConfig+0x66>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a14      	ldr	r2, [pc, #80]	; (80064e0 <TIM_Base_SetConfig+0xb4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <TIM_Base_SetConfig+0xb8>)
 8006496:	4013      	ands	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	4393      	bics	r3, r2
 80064aa:	001a      	movs	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	615a      	str	r2, [r3, #20]
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b004      	add	sp, #16
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40010800 	.word	0x40010800
 80064e0:	40011400 	.word	0x40011400
 80064e4:	fffffcff 	.word	0xfffffcff

080064e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	2201      	movs	r2, #1
 8006500:	4393      	bics	r3, r2
 8006502:	001a      	movs	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	22f0      	movs	r2, #240	; 0xf0
 8006512:	4393      	bics	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	220a      	movs	r2, #10
 8006524:	4393      	bics	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46bd      	mov	sp, r7
 8006540:	b006      	add	sp, #24
 8006542:	bd80      	pop	{r7, pc}

08006544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	2210      	movs	r2, #16
 8006556:	4393      	bics	r3, r2
 8006558:	001a      	movs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <TIM_TI2_ConfigInputStage+0x60>)
 800656e:	4013      	ands	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	031b      	lsls	r3, r3, #12
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	22a0      	movs	r2, #160	; 0xa0
 8006580:	4393      	bics	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	b006      	add	sp, #24
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	ffff0fff 	.word	0xffff0fff

080065a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2270      	movs	r2, #112	; 0x70
 80065bc:	4393      	bics	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	2207      	movs	r2, #7
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	609a      	str	r2, [r3, #8]
}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b004      	add	sp, #16
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4a09      	ldr	r2, [pc, #36]	; (8006618 <TIM_ETR_SetConfig+0x3c>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	021a      	lsls	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	431a      	orrs	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	46bd      	mov	sp, r7
 8006614:	b006      	add	sp, #24
 8006616:	bd80      	pop	{r7, pc}
 8006618:	ffff00ff 	.word	0xffff00ff

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2238      	movs	r2, #56	; 0x38
 800662a:	5c9b      	ldrb	r3, [r3, r2]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e047      	b.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2238      	movs	r2, #56	; 0x38
 8006638:	2101      	movs	r1, #1
 800663a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2239      	movs	r2, #57	; 0x39
 8006640:	2102      	movs	r1, #2
 8006642:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2270      	movs	r2, #112	; 0x70
 8006658:	4393      	bics	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	05db      	lsls	r3, r3, #23
 8006676:	429a      	cmp	r2, r3
 8006678:	d00e      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a13      	ldr	r2, [pc, #76]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a10      	ldr	r2, [pc, #64]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d10c      	bne.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	4393      	bics	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2239      	movs	r2, #57	; 0x39
 80066b6:	2101      	movs	r1, #1
 80066b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2238      	movs	r2, #56	; 0x38
 80066be:	2100      	movs	r1, #0
 80066c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b004      	add	sp, #16
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40010800 	.word	0x40010800
 80066d4:	40011400 	.word	0x40011400

080066d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e044      	b.n	8006774 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2278      	movs	r2, #120	; 0x78
 80066f6:	2100      	movs	r1, #0
 80066f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	0018      	movs	r0, r3
 80066fe:	f7fd fa31 	bl	8003b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2224      	movs	r2, #36	; 0x24
 8006706:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2101      	movs	r1, #1
 8006714:	438a      	bics	r2, r1
 8006716:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	0018      	movs	r0, r3
 800671c:	f000 f830 	bl	8006780 <UART_SetConfig>
 8006720:	0003      	movs	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e024      	b.n	8006774 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	0018      	movs	r0, r3
 8006736:	f000 fac1 	bl	8006cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	490d      	ldr	r1, [pc, #52]	; (800677c <HAL_UART_Init+0xa4>)
 8006746:	400a      	ands	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	212a      	movs	r1, #42	; 0x2a
 8006756:	438a      	bics	r2, r1
 8006758:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2101      	movs	r1, #1
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0018      	movs	r0, r3
 800676e:	f000 fb59 	bl	8006e24 <UART_CheckIdleState>
 8006772:	0003      	movs	r3, r0
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}
 800677c:	ffffb7ff 	.word	0xffffb7ff

08006780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b08e      	sub	sp, #56	; 0x38
 8006784:	af00      	add	r7, sp, #0
 8006786:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006788:	231a      	movs	r3, #26
 800678a:	2218      	movs	r2, #24
 800678c:	189b      	adds	r3, r3, r2
 800678e:	19db      	adds	r3, r3, r7
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4ac3      	ldr	r2, [pc, #780]	; (8006ac0 <UART_SetConfig+0x340>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	0019      	movs	r1, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4abe      	ldr	r2, [pc, #760]	; (8006ac4 <UART_SetConfig+0x344>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4ab8      	ldr	r2, [pc, #736]	; (8006ac8 <UART_SetConfig+0x348>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f0:	4313      	orrs	r3, r2
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4ab4      	ldr	r2, [pc, #720]	; (8006acc <UART_SetConfig+0x34c>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	0019      	movs	r1, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4ab0      	ldr	r2, [pc, #704]	; (8006ad0 <UART_SetConfig+0x350>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d131      	bne.n	8006878 <UART_SetConfig+0xf8>
 8006814:	4baf      	ldr	r3, [pc, #700]	; (8006ad4 <UART_SetConfig+0x354>)
 8006816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006818:	2203      	movs	r2, #3
 800681a:	4013      	ands	r3, r2
 800681c:	2b03      	cmp	r3, #3
 800681e:	d01d      	beq.n	800685c <UART_SetConfig+0xdc>
 8006820:	d823      	bhi.n	800686a <UART_SetConfig+0xea>
 8006822:	2b02      	cmp	r3, #2
 8006824:	d00c      	beq.n	8006840 <UART_SetConfig+0xc0>
 8006826:	d820      	bhi.n	800686a <UART_SetConfig+0xea>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <UART_SetConfig+0xb2>
 800682c:	2b01      	cmp	r3, #1
 800682e:	d00e      	beq.n	800684e <UART_SetConfig+0xce>
 8006830:	e01b      	b.n	800686a <UART_SetConfig+0xea>
 8006832:	231b      	movs	r3, #27
 8006834:	2218      	movs	r2, #24
 8006836:	189b      	adds	r3, r3, r2
 8006838:	19db      	adds	r3, r3, r7
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e0b4      	b.n	80069aa <UART_SetConfig+0x22a>
 8006840:	231b      	movs	r3, #27
 8006842:	2218      	movs	r2, #24
 8006844:	189b      	adds	r3, r3, r2
 8006846:	19db      	adds	r3, r3, r7
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e0ad      	b.n	80069aa <UART_SetConfig+0x22a>
 800684e:	231b      	movs	r3, #27
 8006850:	2218      	movs	r2, #24
 8006852:	189b      	adds	r3, r3, r2
 8006854:	19db      	adds	r3, r3, r7
 8006856:	2204      	movs	r2, #4
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e0a6      	b.n	80069aa <UART_SetConfig+0x22a>
 800685c:	231b      	movs	r3, #27
 800685e:	2218      	movs	r2, #24
 8006860:	189b      	adds	r3, r3, r2
 8006862:	19db      	adds	r3, r3, r7
 8006864:	2208      	movs	r2, #8
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e09f      	b.n	80069aa <UART_SetConfig+0x22a>
 800686a:	231b      	movs	r3, #27
 800686c:	2218      	movs	r2, #24
 800686e:	189b      	adds	r3, r3, r2
 8006870:	19db      	adds	r3, r3, r7
 8006872:	2210      	movs	r2, #16
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e098      	b.n	80069aa <UART_SetConfig+0x22a>
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a96      	ldr	r2, [pc, #600]	; (8006ad8 <UART_SetConfig+0x358>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d131      	bne.n	80068e6 <UART_SetConfig+0x166>
 8006882:	4b94      	ldr	r3, [pc, #592]	; (8006ad4 <UART_SetConfig+0x354>)
 8006884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006886:	220c      	movs	r2, #12
 8006888:	4013      	ands	r3, r2
 800688a:	2b0c      	cmp	r3, #12
 800688c:	d01d      	beq.n	80068ca <UART_SetConfig+0x14a>
 800688e:	d823      	bhi.n	80068d8 <UART_SetConfig+0x158>
 8006890:	2b08      	cmp	r3, #8
 8006892:	d00c      	beq.n	80068ae <UART_SetConfig+0x12e>
 8006894:	d820      	bhi.n	80068d8 <UART_SetConfig+0x158>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <UART_SetConfig+0x120>
 800689a:	2b04      	cmp	r3, #4
 800689c:	d00e      	beq.n	80068bc <UART_SetConfig+0x13c>
 800689e:	e01b      	b.n	80068d8 <UART_SetConfig+0x158>
 80068a0:	231b      	movs	r3, #27
 80068a2:	2218      	movs	r2, #24
 80068a4:	189b      	adds	r3, r3, r2
 80068a6:	19db      	adds	r3, r3, r7
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e07d      	b.n	80069aa <UART_SetConfig+0x22a>
 80068ae:	231b      	movs	r3, #27
 80068b0:	2218      	movs	r2, #24
 80068b2:	189b      	adds	r3, r3, r2
 80068b4:	19db      	adds	r3, r3, r7
 80068b6:	2202      	movs	r2, #2
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e076      	b.n	80069aa <UART_SetConfig+0x22a>
 80068bc:	231b      	movs	r3, #27
 80068be:	2218      	movs	r2, #24
 80068c0:	189b      	adds	r3, r3, r2
 80068c2:	19db      	adds	r3, r3, r7
 80068c4:	2204      	movs	r2, #4
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e06f      	b.n	80069aa <UART_SetConfig+0x22a>
 80068ca:	231b      	movs	r3, #27
 80068cc:	2218      	movs	r2, #24
 80068ce:	189b      	adds	r3, r3, r2
 80068d0:	19db      	adds	r3, r3, r7
 80068d2:	2208      	movs	r2, #8
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e068      	b.n	80069aa <UART_SetConfig+0x22a>
 80068d8:	231b      	movs	r3, #27
 80068da:	2218      	movs	r2, #24
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	19db      	adds	r3, r3, r7
 80068e0:	2210      	movs	r2, #16
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	e061      	b.n	80069aa <UART_SetConfig+0x22a>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a7c      	ldr	r2, [pc, #496]	; (8006adc <UART_SetConfig+0x35c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d106      	bne.n	80068fe <UART_SetConfig+0x17e>
 80068f0:	231b      	movs	r3, #27
 80068f2:	2218      	movs	r2, #24
 80068f4:	189b      	adds	r3, r3, r2
 80068f6:	19db      	adds	r3, r3, r7
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e055      	b.n	80069aa <UART_SetConfig+0x22a>
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a77      	ldr	r2, [pc, #476]	; (8006ae0 <UART_SetConfig+0x360>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d106      	bne.n	8006916 <UART_SetConfig+0x196>
 8006908:	231b      	movs	r3, #27
 800690a:	2218      	movs	r2, #24
 800690c:	189b      	adds	r3, r3, r2
 800690e:	19db      	adds	r3, r3, r7
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e049      	b.n	80069aa <UART_SetConfig+0x22a>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6b      	ldr	r2, [pc, #428]	; (8006ac8 <UART_SetConfig+0x348>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d13e      	bne.n	800699e <UART_SetConfig+0x21e>
 8006920:	4b6c      	ldr	r3, [pc, #432]	; (8006ad4 <UART_SetConfig+0x354>)
 8006922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006924:	23c0      	movs	r3, #192	; 0xc0
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	4013      	ands	r3, r2
 800692a:	22c0      	movs	r2, #192	; 0xc0
 800692c:	0112      	lsls	r2, r2, #4
 800692e:	4293      	cmp	r3, r2
 8006930:	d027      	beq.n	8006982 <UART_SetConfig+0x202>
 8006932:	22c0      	movs	r2, #192	; 0xc0
 8006934:	0112      	lsls	r2, r2, #4
 8006936:	4293      	cmp	r3, r2
 8006938:	d82a      	bhi.n	8006990 <UART_SetConfig+0x210>
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	0112      	lsls	r2, r2, #4
 800693e:	4293      	cmp	r3, r2
 8006940:	d011      	beq.n	8006966 <UART_SetConfig+0x1e6>
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	0112      	lsls	r2, r2, #4
 8006946:	4293      	cmp	r3, r2
 8006948:	d822      	bhi.n	8006990 <UART_SetConfig+0x210>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <UART_SetConfig+0x1d8>
 800694e:	2280      	movs	r2, #128	; 0x80
 8006950:	00d2      	lsls	r2, r2, #3
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <UART_SetConfig+0x1f4>
 8006956:	e01b      	b.n	8006990 <UART_SetConfig+0x210>
 8006958:	231b      	movs	r3, #27
 800695a:	2218      	movs	r2, #24
 800695c:	189b      	adds	r3, r3, r2
 800695e:	19db      	adds	r3, r3, r7
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e021      	b.n	80069aa <UART_SetConfig+0x22a>
 8006966:	231b      	movs	r3, #27
 8006968:	2218      	movs	r2, #24
 800696a:	189b      	adds	r3, r3, r2
 800696c:	19db      	adds	r3, r3, r7
 800696e:	2202      	movs	r2, #2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	e01a      	b.n	80069aa <UART_SetConfig+0x22a>
 8006974:	231b      	movs	r3, #27
 8006976:	2218      	movs	r2, #24
 8006978:	189b      	adds	r3, r3, r2
 800697a:	19db      	adds	r3, r3, r7
 800697c:	2204      	movs	r2, #4
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e013      	b.n	80069aa <UART_SetConfig+0x22a>
 8006982:	231b      	movs	r3, #27
 8006984:	2218      	movs	r2, #24
 8006986:	189b      	adds	r3, r3, r2
 8006988:	19db      	adds	r3, r3, r7
 800698a:	2208      	movs	r2, #8
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e00c      	b.n	80069aa <UART_SetConfig+0x22a>
 8006990:	231b      	movs	r3, #27
 8006992:	2218      	movs	r2, #24
 8006994:	189b      	adds	r3, r3, r2
 8006996:	19db      	adds	r3, r3, r7
 8006998:	2210      	movs	r2, #16
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e005      	b.n	80069aa <UART_SetConfig+0x22a>
 800699e:	231b      	movs	r3, #27
 80069a0:	2218      	movs	r2, #24
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	19db      	adds	r3, r3, r7
 80069a6:	2210      	movs	r2, #16
 80069a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a46      	ldr	r2, [pc, #280]	; (8006ac8 <UART_SetConfig+0x348>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d000      	beq.n	80069b6 <UART_SetConfig+0x236>
 80069b4:	e09a      	b.n	8006aec <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069b6:	231b      	movs	r3, #27
 80069b8:	2218      	movs	r2, #24
 80069ba:	189b      	adds	r3, r3, r2
 80069bc:	19db      	adds	r3, r3, r7
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d01d      	beq.n	8006a00 <UART_SetConfig+0x280>
 80069c4:	dc20      	bgt.n	8006a08 <UART_SetConfig+0x288>
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d015      	beq.n	80069f6 <UART_SetConfig+0x276>
 80069ca:	dc1d      	bgt.n	8006a08 <UART_SetConfig+0x288>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <UART_SetConfig+0x256>
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d005      	beq.n	80069e0 <UART_SetConfig+0x260>
 80069d4:	e018      	b.n	8006a08 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d6:	f7fe ffb9 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 80069da:	0003      	movs	r3, r0
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069de:	e01c      	b.n	8006a1a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e0:	4b3c      	ldr	r3, [pc, #240]	; (8006ad4 <UART_SetConfig+0x354>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2210      	movs	r2, #16
 80069e6:	4013      	ands	r3, r2
 80069e8:	d002      	beq.n	80069f0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80069ea:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <UART_SetConfig+0x364>)
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069ee:	e014      	b.n	8006a1a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80069f0:	4b3d      	ldr	r3, [pc, #244]	; (8006ae8 <UART_SetConfig+0x368>)
 80069f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069f4:	e011      	b.n	8006a1a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f6:	f7fe fef9 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 80069fa:	0003      	movs	r3, r0
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069fe:	e00c      	b.n	8006a1a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a06:	e008      	b.n	8006a1a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a0c:	231a      	movs	r3, #26
 8006a0e:	2218      	movs	r2, #24
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	19db      	adds	r3, r3, r7
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
        break;
 8006a18:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d100      	bne.n	8006a22 <UART_SetConfig+0x2a2>
 8006a20:	e133      	b.n	8006c8a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	0013      	movs	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d305      	bcc.n	8006a3e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d906      	bls.n	8006a4c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006a3e:	231a      	movs	r3, #26
 8006a40:	2218      	movs	r2, #24
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	19db      	adds	r3, r3, r7
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e11e      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	6939      	ldr	r1, [r7, #16]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	000b      	movs	r3, r1
 8006a5a:	0e1b      	lsrs	r3, r3, #24
 8006a5c:	0010      	movs	r0, r2
 8006a5e:	0205      	lsls	r5, r0, #8
 8006a60:	431d      	orrs	r5, r3
 8006a62:	000b      	movs	r3, r1
 8006a64:	021c      	lsls	r4, r3, #8
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	68b8      	ldr	r0, [r7, #8]
 8006a74:	68f9      	ldr	r1, [r7, #12]
 8006a76:	1900      	adds	r0, r0, r4
 8006a78:	4169      	adcs	r1, r5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f7f9 fd48 	bl	800051c <__aeabi_uldivmod>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	000b      	movs	r3, r1
 8006a90:	0013      	movs	r3, r2
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a96:	23c0      	movs	r3, #192	; 0xc0
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d309      	bcc.n	8006ab2 <UART_SetConfig+0x332>
 8006a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	035b      	lsls	r3, r3, #13
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d204      	bcs.n	8006ab2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aae:	60da      	str	r2, [r3, #12]
 8006ab0:	e0eb      	b.n	8006c8a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006ab2:	231a      	movs	r3, #26
 8006ab4:	2218      	movs	r2, #24
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	19db      	adds	r3, r3, r7
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e0e4      	b.n	8006c8a <UART_SetConfig+0x50a>
 8006ac0:	efff69f3 	.word	0xefff69f3
 8006ac4:	ffffcfff 	.word	0xffffcfff
 8006ac8:	40004800 	.word	0x40004800
 8006acc:	fffff4ff 	.word	0xfffff4ff
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40004400 	.word	0x40004400
 8006adc:	40004c00 	.word	0x40004c00
 8006ae0:	40005000 	.word	0x40005000
 8006ae4:	003d0900 	.word	0x003d0900
 8006ae8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d000      	beq.n	8006afa <UART_SetConfig+0x37a>
 8006af8:	e070      	b.n	8006bdc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006afa:	231b      	movs	r3, #27
 8006afc:	2218      	movs	r2, #24
 8006afe:	189b      	adds	r3, r3, r2
 8006b00:	19db      	adds	r3, r3, r7
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d822      	bhi.n	8006b4e <UART_SetConfig+0x3ce>
 8006b08:	009a      	lsls	r2, r3, #2
 8006b0a:	4b67      	ldr	r3, [pc, #412]	; (8006ca8 <UART_SetConfig+0x528>)
 8006b0c:	18d3      	adds	r3, r2, r3
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b12:	f7fe ff1b 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8006b16:	0003      	movs	r3, r0
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b1a:	e021      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1c:	f7fe ff2c 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 8006b20:	0003      	movs	r3, r0
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b24:	e01c      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b26:	4b61      	ldr	r3, [pc, #388]	; (8006cac <UART_SetConfig+0x52c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	d002      	beq.n	8006b36 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b30:	4b5f      	ldr	r3, [pc, #380]	; (8006cb0 <UART_SetConfig+0x530>)
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b34:	e014      	b.n	8006b60 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006b36:	4b5f      	ldr	r3, [pc, #380]	; (8006cb4 <UART_SetConfig+0x534>)
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b3a:	e011      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3c:	f7fe fe56 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 8006b40:	0003      	movs	r3, r0
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b44:	e00c      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4c:	e008      	b.n	8006b60 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b52:	231a      	movs	r3, #26
 8006b54:	2218      	movs	r2, #24
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	19db      	adds	r3, r3, r7
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
        break;
 8006b5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d100      	bne.n	8006b68 <UART_SetConfig+0x3e8>
 8006b66:	e090      	b.n	8006c8a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	005a      	lsls	r2, r3, #1
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	18d2      	adds	r2, r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	0019      	movs	r1, r3
 8006b7a:	0010      	movs	r0, r2
 8006b7c:	f7f9 fae0 	bl	8000140 <__udivsi3>
 8006b80:	0003      	movs	r3, r0
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	d921      	bls.n	8006bce <UART_SetConfig+0x44e>
 8006b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	025b      	lsls	r3, r3, #9
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d21c      	bcs.n	8006bce <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	200e      	movs	r0, #14
 8006b9a:	2418      	movs	r4, #24
 8006b9c:	1903      	adds	r3, r0, r4
 8006b9e:	19db      	adds	r3, r3, r7
 8006ba0:	210f      	movs	r1, #15
 8006ba2:	438a      	bics	r2, r1
 8006ba4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2207      	movs	r2, #7
 8006bae:	4013      	ands	r3, r2
 8006bb0:	b299      	uxth	r1, r3
 8006bb2:	1903      	adds	r3, r0, r4
 8006bb4:	19db      	adds	r3, r3, r7
 8006bb6:	1902      	adds	r2, r0, r4
 8006bb8:	19d2      	adds	r2, r2, r7
 8006bba:	8812      	ldrh	r2, [r2, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	1902      	adds	r2, r0, r4
 8006bc6:	19d2      	adds	r2, r2, r7
 8006bc8:	8812      	ldrh	r2, [r2, #0]
 8006bca:	60da      	str	r2, [r3, #12]
 8006bcc:	e05d      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bce:	231a      	movs	r3, #26
 8006bd0:	2218      	movs	r2, #24
 8006bd2:	189b      	adds	r3, r3, r2
 8006bd4:	19db      	adds	r3, r3, r7
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e056      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bdc:	231b      	movs	r3, #27
 8006bde:	2218      	movs	r2, #24
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	19db      	adds	r3, r3, r7
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d822      	bhi.n	8006c30 <UART_SetConfig+0x4b0>
 8006bea:	009a      	lsls	r2, r3, #2
 8006bec:	4b32      	ldr	r3, [pc, #200]	; (8006cb8 <UART_SetConfig+0x538>)
 8006bee:	18d3      	adds	r3, r2, r3
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fe feaa 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bfc:	e021      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bfe:	f7fe febb 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 8006c02:	0003      	movs	r3, r0
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c06:	e01c      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <UART_SetConfig+0x52c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2210      	movs	r2, #16
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d002      	beq.n	8006c18 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c12:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <UART_SetConfig+0x530>)
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c16:	e014      	b.n	8006c42 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <UART_SetConfig+0x534>)
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c1c:	e011      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fe fde5 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 8006c22:	0003      	movs	r3, r0
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c26:	e00c      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2e:	e008      	b.n	8006c42 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c34:	231a      	movs	r3, #26
 8006c36:	2218      	movs	r2, #24
 8006c38:	189b      	adds	r3, r3, r2
 8006c3a:	19db      	adds	r3, r3, r7
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
        break;
 8006c40:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d020      	beq.n	8006c8a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	085a      	lsrs	r2, r3, #1
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	18d2      	adds	r2, r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	0019      	movs	r1, r3
 8006c58:	0010      	movs	r0, r2
 8006c5a:	f7f9 fa71 	bl	8000140 <__udivsi3>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	2b0f      	cmp	r3, #15
 8006c66:	d90a      	bls.n	8006c7e <UART_SetConfig+0x4fe>
 8006c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	025b      	lsls	r3, r3, #9
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d205      	bcs.n	8006c7e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	e005      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c7e:	231a      	movs	r3, #26
 8006c80:	2218      	movs	r2, #24
 8006c82:	189b      	adds	r3, r3, r2
 8006c84:	19db      	adds	r3, r3, r7
 8006c86:	2201      	movs	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2200      	movs	r2, #0
 8006c94:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c96:	231a      	movs	r3, #26
 8006c98:	2218      	movs	r2, #24
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	19db      	adds	r3, r3, r7
 8006c9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b00e      	add	sp, #56	; 0x38
 8006ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca8:	0800a224 	.word	0x0800a224
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	003d0900 	.word	0x003d0900
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	0800a248 	.word	0x0800a248

08006cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2201      	movs	r2, #1
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <UART_AdvFeatureConfig+0x144>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	0019      	movs	r1, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2202      	movs	r2, #2
 8006cec:	4013      	ands	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4a43      	ldr	r2, [pc, #268]	; (8006e04 <UART_AdvFeatureConfig+0x148>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a3b      	ldr	r2, [pc, #236]	; (8006e08 <UART_AdvFeatureConfig+0x14c>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2208      	movs	r2, #8
 8006d30:	4013      	ands	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	4a34      	ldr	r2, [pc, #208]	; (8006e0c <UART_AdvFeatureConfig+0x150>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	0019      	movs	r1, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2210      	movs	r2, #16
 8006d52:	4013      	ands	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4a2c      	ldr	r2, [pc, #176]	; (8006e10 <UART_AdvFeatureConfig+0x154>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	0019      	movs	r1, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	2220      	movs	r2, #32
 8006d74:	4013      	ands	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	4a25      	ldr	r2, [pc, #148]	; (8006e14 <UART_AdvFeatureConfig+0x158>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	0019      	movs	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2240      	movs	r2, #64	; 0x40
 8006d96:	4013      	ands	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <UART_AdvFeatureConfig+0x15c>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	0019      	movs	r1, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db6:	2380      	movs	r3, #128	; 0x80
 8006db8:	035b      	lsls	r3, r3, #13
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10b      	bne.n	8006dd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <UART_AdvFeatureConfig+0x160>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	0019      	movs	r1, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d00b      	beq.n	8006df8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4a0e      	ldr	r2, [pc, #56]	; (8006e20 <UART_AdvFeatureConfig+0x164>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	0019      	movs	r1, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	fffdffff 	.word	0xfffdffff
 8006e04:	fffeffff 	.word	0xfffeffff
 8006e08:	fffbffff 	.word	0xfffbffff
 8006e0c:	ffff7fff 	.word	0xffff7fff
 8006e10:	ffffefff 	.word	0xffffefff
 8006e14:	ffffdfff 	.word	0xffffdfff
 8006e18:	ffefffff 	.word	0xffefffff
 8006e1c:	ff9fffff 	.word	0xff9fffff
 8006e20:	fff7ffff 	.word	0xfff7ffff

08006e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b092      	sub	sp, #72	; 0x48
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2284      	movs	r2, #132	; 0x84
 8006e30:	2100      	movs	r1, #0
 8006e32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e34:	f7fd f890 	bl	8003f58 <HAL_GetTick>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2208      	movs	r2, #8
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d12c      	bne.n	8006ea4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	2280      	movs	r2, #128	; 0x80
 8006e4e:	0391      	lsls	r1, r2, #14
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4a46      	ldr	r2, [pc, #280]	; (8006f6c <UART_CheckIdleState+0x148>)
 8006e54:	9200      	str	r2, [sp, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f000 f88c 	bl	8006f74 <UART_WaitOnFlagUntilTimeout>
 8006e5c:	1e03      	subs	r3, r0, #0
 8006e5e:	d021      	beq.n	8006ea4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	f383 8810 	msr	PRIMASK, r3
}
 8006e74:	46c0      	nop			; (mov r8, r8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	438a      	bics	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	f383 8810 	msr	PRIMASK, r3
}
 8006e90:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2278      	movs	r2, #120	; 0x78
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e05f      	b.n	8006f64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d146      	bne.n	8006f40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	2280      	movs	r2, #128	; 0x80
 8006eb6:	03d1      	lsls	r1, r2, #15
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4a2c      	ldr	r2, [pc, #176]	; (8006f6c <UART_CheckIdleState+0x148>)
 8006ebc:	9200      	str	r2, [sp, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f000 f858 	bl	8006f74 <UART_WaitOnFlagUntilTimeout>
 8006ec4:	1e03      	subs	r3, r0, #0
 8006ec6:	d03b      	beq.n	8006f40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ece:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f383 8810 	msr	PRIMASK, r3
}
 8006edc:	46c0      	nop			; (mov r8, r8)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4921      	ldr	r1, [pc, #132]	; (8006f70 <UART_CheckIdleState+0x14c>)
 8006eea:	400a      	ands	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f383 8810 	msr	PRIMASK, r3
}
 8006ef8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efa:	f3ef 8310 	mrs	r3, PRIMASK
 8006efe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
 8006f04:	2301      	movs	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	438a      	bics	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2280      	movs	r2, #128	; 0x80
 8006f30:	2120      	movs	r1, #32
 8006f32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2278      	movs	r2, #120	; 0x78
 8006f38:	2100      	movs	r1, #0
 8006f3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e011      	b.n	8006f64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2280      	movs	r2, #128	; 0x80
 8006f4a:	2120      	movs	r1, #32
 8006f4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2278      	movs	r2, #120	; 0x78
 8006f5e:	2100      	movs	r1, #0
 8006f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	0018      	movs	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b010      	add	sp, #64	; 0x40
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	01ffffff 	.word	0x01ffffff
 8006f70:	fffffedf 	.word	0xfffffedf

08006f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	1dfb      	adds	r3, r7, #7
 8006f82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f84:	e04b      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	d048      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8c:	f7fc ffe4 	bl	8003f58 <HAL_GetTick>
 8006f90:	0002      	movs	r2, r0
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d302      	bcc.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e04b      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2204      	movs	r2, #4
 8006fae:	4013      	ands	r3, r2
 8006fb0:	d035      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d111      	bne.n	8006fe4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f83c 	bl	8007048 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2284      	movs	r2, #132	; 0x84
 8006fd4:	2108      	movs	r1, #8
 8006fd6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2278      	movs	r2, #120	; 0x78
 8006fdc:	2100      	movs	r1, #0
 8006fde:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e02c      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69da      	ldr	r2, [r3, #28]
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	401a      	ands	r2, r3
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d112      	bne.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2280      	movs	r2, #128	; 0x80
 8006ffe:	0112      	lsls	r2, r2, #4
 8007000:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	0018      	movs	r0, r3
 8007006:	f000 f81f 	bl	8007048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2284      	movs	r2, #132	; 0x84
 800700e:	2120      	movs	r1, #32
 8007010:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2278      	movs	r2, #120	; 0x78
 8007016:	2100      	movs	r1, #0
 8007018:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e00f      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	425a      	negs	r2, r3
 800702e:	4153      	adcs	r3, r2
 8007030:	b2db      	uxtb	r3, r3
 8007032:	001a      	movs	r2, r3
 8007034:	1dfb      	adds	r3, r7, #7
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d0a4      	beq.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	0018      	movs	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	b004      	add	sp, #16
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	617b      	str	r3, [r7, #20]
  return(result);
 8007056:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
 800705a:	2301      	movs	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4926      	ldr	r1, [pc, #152]	; (800710c <UART_EndRxTransfer+0xc4>)
 8007072:	400a      	ands	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007082:	f3ef 8310 	mrs	r3, PRIMASK
 8007086:	623b      	str	r3, [r7, #32]
  return(result);
 8007088:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
 800708c:	2301      	movs	r3, #1
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	f383 8810 	msr	PRIMASK, r3
}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2101      	movs	r1, #1
 80070a4:	438a      	bics	r2, r1
 80070a6:	609a      	str	r2, [r3, #8]
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	f383 8810 	msr	PRIMASK, r3
}
 80070b2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d118      	bne.n	80070ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070bc:	f3ef 8310 	mrs	r3, PRIMASK
 80070c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c6:	2301      	movs	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f383 8810 	msr	PRIMASK, r3
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2110      	movs	r1, #16
 80070de:	438a      	bics	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f383 8810 	msr	PRIMASK, r3
}
 80070ec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2280      	movs	r2, #128	; 0x80
 80070f2:	2120      	movs	r1, #32
 80070f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	46bd      	mov	sp, r7
 8007106:	b00e      	add	sp, #56	; 0x38
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	fffffedf 	.word	0xfffffedf

08007110 <__itoa>:
 8007110:	1e93      	subs	r3, r2, #2
 8007112:	b510      	push	{r4, lr}
 8007114:	000c      	movs	r4, r1
 8007116:	2b22      	cmp	r3, #34	; 0x22
 8007118:	d904      	bls.n	8007124 <__itoa+0x14>
 800711a:	2300      	movs	r3, #0
 800711c:	001c      	movs	r4, r3
 800711e:	700b      	strb	r3, [r1, #0]
 8007120:	0020      	movs	r0, r4
 8007122:	bd10      	pop	{r4, pc}
 8007124:	2a0a      	cmp	r2, #10
 8007126:	d109      	bne.n	800713c <__itoa+0x2c>
 8007128:	2800      	cmp	r0, #0
 800712a:	da07      	bge.n	800713c <__itoa+0x2c>
 800712c:	232d      	movs	r3, #45	; 0x2d
 800712e:	700b      	strb	r3, [r1, #0]
 8007130:	2101      	movs	r1, #1
 8007132:	4240      	negs	r0, r0
 8007134:	1861      	adds	r1, r4, r1
 8007136:	f000 f807 	bl	8007148 <__utoa>
 800713a:	e7f1      	b.n	8007120 <__itoa+0x10>
 800713c:	2100      	movs	r1, #0
 800713e:	e7f9      	b.n	8007134 <__itoa+0x24>

08007140 <itoa>:
 8007140:	b510      	push	{r4, lr}
 8007142:	f7ff ffe5 	bl	8007110 <__itoa>
 8007146:	bd10      	pop	{r4, pc}

08007148 <__utoa>:
 8007148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714a:	000c      	movs	r4, r1
 800714c:	0016      	movs	r6, r2
 800714e:	b08d      	sub	sp, #52	; 0x34
 8007150:	2225      	movs	r2, #37	; 0x25
 8007152:	0007      	movs	r7, r0
 8007154:	4915      	ldr	r1, [pc, #84]	; (80071ac <__utoa+0x64>)
 8007156:	a802      	add	r0, sp, #8
 8007158:	f000 fe6a 	bl	8007e30 <memcpy>
 800715c:	1e62      	subs	r2, r4, #1
 800715e:	1eb3      	subs	r3, r6, #2
 8007160:	2500      	movs	r5, #0
 8007162:	9201      	str	r2, [sp, #4]
 8007164:	2b22      	cmp	r3, #34	; 0x22
 8007166:	d904      	bls.n	8007172 <__utoa+0x2a>
 8007168:	7025      	strb	r5, [r4, #0]
 800716a:	002c      	movs	r4, r5
 800716c:	0020      	movs	r0, r4
 800716e:	b00d      	add	sp, #52	; 0x34
 8007170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007172:	0038      	movs	r0, r7
 8007174:	0031      	movs	r1, r6
 8007176:	f7f9 f869 	bl	800024c <__aeabi_uidivmod>
 800717a:	000b      	movs	r3, r1
 800717c:	aa02      	add	r2, sp, #8
 800717e:	5cd3      	ldrb	r3, [r2, r3]
 8007180:	9a01      	ldr	r2, [sp, #4]
 8007182:	0029      	movs	r1, r5
 8007184:	3501      	adds	r5, #1
 8007186:	5553      	strb	r3, [r2, r5]
 8007188:	003b      	movs	r3, r7
 800718a:	0007      	movs	r7, r0
 800718c:	429e      	cmp	r6, r3
 800718e:	d9f0      	bls.n	8007172 <__utoa+0x2a>
 8007190:	2300      	movs	r3, #0
 8007192:	0022      	movs	r2, r4
 8007194:	5563      	strb	r3, [r4, r5]
 8007196:	000b      	movs	r3, r1
 8007198:	1ac8      	subs	r0, r1, r3
 800719a:	4283      	cmp	r3, r0
 800719c:	dde6      	ble.n	800716c <__utoa+0x24>
 800719e:	7810      	ldrb	r0, [r2, #0]
 80071a0:	5ce5      	ldrb	r5, [r4, r3]
 80071a2:	7015      	strb	r5, [r2, #0]
 80071a4:	54e0      	strb	r0, [r4, r3]
 80071a6:	3201      	adds	r2, #1
 80071a8:	3b01      	subs	r3, #1
 80071aa:	e7f5      	b.n	8007198 <__utoa+0x50>
 80071ac:	0800a26c 	.word	0x0800a26c

080071b0 <__cvt>:
 80071b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b2:	001e      	movs	r6, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	0014      	movs	r4, r2
 80071b8:	b08b      	sub	sp, #44	; 0x2c
 80071ba:	429e      	cmp	r6, r3
 80071bc:	da04      	bge.n	80071c8 <__cvt+0x18>
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	0609      	lsls	r1, r1, #24
 80071c2:	1873      	adds	r3, r6, r1
 80071c4:	001e      	movs	r6, r3
 80071c6:	232d      	movs	r3, #45	; 0x2d
 80071c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071cc:	7013      	strb	r3, [r2, #0]
 80071ce:	2320      	movs	r3, #32
 80071d0:	2203      	movs	r2, #3
 80071d2:	439f      	bics	r7, r3
 80071d4:	2f46      	cmp	r7, #70	; 0x46
 80071d6:	d007      	beq.n	80071e8 <__cvt+0x38>
 80071d8:	003b      	movs	r3, r7
 80071da:	3b45      	subs	r3, #69	; 0x45
 80071dc:	4259      	negs	r1, r3
 80071de:	414b      	adcs	r3, r1
 80071e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80071e2:	3a01      	subs	r2, #1
 80071e4:	18cb      	adds	r3, r1, r3
 80071e6:	9310      	str	r3, [sp, #64]	; 0x40
 80071e8:	ab09      	add	r3, sp, #36	; 0x24
 80071ea:	9304      	str	r3, [sp, #16]
 80071ec:	ab08      	add	r3, sp, #32
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071f2:	9200      	str	r2, [sp, #0]
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071f8:	0022      	movs	r2, r4
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	0033      	movs	r3, r6
 80071fe:	f000 feaf 	bl	8007f60 <_dtoa_r>
 8007202:	0005      	movs	r5, r0
 8007204:	2f47      	cmp	r7, #71	; 0x47
 8007206:	d102      	bne.n	800720e <__cvt+0x5e>
 8007208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800720a:	07db      	lsls	r3, r3, #31
 800720c:	d528      	bpl.n	8007260 <__cvt+0xb0>
 800720e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007210:	18eb      	adds	r3, r5, r3
 8007212:	9307      	str	r3, [sp, #28]
 8007214:	2f46      	cmp	r7, #70	; 0x46
 8007216:	d114      	bne.n	8007242 <__cvt+0x92>
 8007218:	782b      	ldrb	r3, [r5, #0]
 800721a:	2b30      	cmp	r3, #48	; 0x30
 800721c:	d10c      	bne.n	8007238 <__cvt+0x88>
 800721e:	2200      	movs	r2, #0
 8007220:	2300      	movs	r3, #0
 8007222:	0020      	movs	r0, r4
 8007224:	0031      	movs	r1, r6
 8007226:	f7f9 f911 	bl	800044c <__aeabi_dcmpeq>
 800722a:	2800      	cmp	r0, #0
 800722c:	d104      	bne.n	8007238 <__cvt+0x88>
 800722e:	2301      	movs	r3, #1
 8007230:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800723a:	9a07      	ldr	r2, [sp, #28]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	18d3      	adds	r3, r2, r3
 8007240:	9307      	str	r3, [sp, #28]
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	0020      	movs	r0, r4
 8007248:	0031      	movs	r1, r6
 800724a:	f7f9 f8ff 	bl	800044c <__aeabi_dcmpeq>
 800724e:	2800      	cmp	r0, #0
 8007250:	d001      	beq.n	8007256 <__cvt+0xa6>
 8007252:	9b07      	ldr	r3, [sp, #28]
 8007254:	9309      	str	r3, [sp, #36]	; 0x24
 8007256:	2230      	movs	r2, #48	; 0x30
 8007258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725a:	9907      	ldr	r1, [sp, #28]
 800725c:	428b      	cmp	r3, r1
 800725e:	d306      	bcc.n	800726e <__cvt+0xbe>
 8007260:	0028      	movs	r0, r5
 8007262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007264:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007266:	1b5b      	subs	r3, r3, r5
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	b00b      	add	sp, #44	; 0x2c
 800726c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	9109      	str	r1, [sp, #36]	; 0x24
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e7f0      	b.n	8007258 <__cvt+0xa8>

08007276 <__exponent>:
 8007276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007278:	1c83      	adds	r3, r0, #2
 800727a:	b087      	sub	sp, #28
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	0005      	movs	r5, r0
 8007280:	000c      	movs	r4, r1
 8007282:	232b      	movs	r3, #43	; 0x2b
 8007284:	7002      	strb	r2, [r0, #0]
 8007286:	2900      	cmp	r1, #0
 8007288:	da01      	bge.n	800728e <__exponent+0x18>
 800728a:	424c      	negs	r4, r1
 800728c:	3302      	adds	r3, #2
 800728e:	706b      	strb	r3, [r5, #1]
 8007290:	2c09      	cmp	r4, #9
 8007292:	dd2f      	ble.n	80072f4 <__exponent+0x7e>
 8007294:	270a      	movs	r7, #10
 8007296:	ab04      	add	r3, sp, #16
 8007298:	1dde      	adds	r6, r3, #7
 800729a:	0020      	movs	r0, r4
 800729c:	0039      	movs	r1, r7
 800729e:	9601      	str	r6, [sp, #4]
 80072a0:	f7f9 f8be 	bl	8000420 <__aeabi_idivmod>
 80072a4:	3e01      	subs	r6, #1
 80072a6:	3130      	adds	r1, #48	; 0x30
 80072a8:	0020      	movs	r0, r4
 80072aa:	7031      	strb	r1, [r6, #0]
 80072ac:	0039      	movs	r1, r7
 80072ae:	9402      	str	r4, [sp, #8]
 80072b0:	f7f8 ffd0 	bl	8000254 <__divsi3>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	0004      	movs	r4, r0
 80072b8:	2b63      	cmp	r3, #99	; 0x63
 80072ba:	dcee      	bgt.n	800729a <__exponent+0x24>
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	3430      	adds	r4, #48	; 0x30
 80072c0:	1e9a      	subs	r2, r3, #2
 80072c2:	0013      	movs	r3, r2
 80072c4:	9903      	ldr	r1, [sp, #12]
 80072c6:	7014      	strb	r4, [r2, #0]
 80072c8:	a804      	add	r0, sp, #16
 80072ca:	3007      	adds	r0, #7
 80072cc:	4298      	cmp	r0, r3
 80072ce:	d80c      	bhi.n	80072ea <__exponent+0x74>
 80072d0:	2300      	movs	r3, #0
 80072d2:	4282      	cmp	r2, r0
 80072d4:	d804      	bhi.n	80072e0 <__exponent+0x6a>
 80072d6:	aa04      	add	r2, sp, #16
 80072d8:	3309      	adds	r3, #9
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	9a01      	ldr	r2, [sp, #4]
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	9a03      	ldr	r2, [sp, #12]
 80072e2:	18d3      	adds	r3, r2, r3
 80072e4:	1b58      	subs	r0, r3, r5
 80072e6:	b007      	add	sp, #28
 80072e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ea:	7818      	ldrb	r0, [r3, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	7008      	strb	r0, [r1, #0]
 80072f0:	3101      	adds	r1, #1
 80072f2:	e7e9      	b.n	80072c8 <__exponent+0x52>
 80072f4:	2330      	movs	r3, #48	; 0x30
 80072f6:	3430      	adds	r4, #48	; 0x30
 80072f8:	70ab      	strb	r3, [r5, #2]
 80072fa:	70ec      	strb	r4, [r5, #3]
 80072fc:	1d2b      	adds	r3, r5, #4
 80072fe:	e7f1      	b.n	80072e4 <__exponent+0x6e>

08007300 <_printf_float>:
 8007300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007302:	b095      	sub	sp, #84	; 0x54
 8007304:	000c      	movs	r4, r1
 8007306:	9208      	str	r2, [sp, #32]
 8007308:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800730a:	9309      	str	r3, [sp, #36]	; 0x24
 800730c:	0007      	movs	r7, r0
 800730e:	f000 fd05 	bl	8007d1c <_localeconv_r>
 8007312:	6803      	ldr	r3, [r0, #0]
 8007314:	0018      	movs	r0, r3
 8007316:	930c      	str	r3, [sp, #48]	; 0x30
 8007318:	f7f8 fef6 	bl	8000108 <strlen>
 800731c:	2300      	movs	r3, #0
 800731e:	9312      	str	r3, [sp, #72]	; 0x48
 8007320:	7e23      	ldrb	r3, [r4, #24]
 8007322:	2207      	movs	r2, #7
 8007324:	930a      	str	r3, [sp, #40]	; 0x28
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	900d      	str	r0, [sp, #52]	; 0x34
 800732a:	930b      	str	r3, [sp, #44]	; 0x2c
 800732c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800732e:	682b      	ldr	r3, [r5, #0]
 8007330:	05c9      	lsls	r1, r1, #23
 8007332:	d547      	bpl.n	80073c4 <_printf_float+0xc4>
 8007334:	189b      	adds	r3, r3, r2
 8007336:	4393      	bics	r3, r2
 8007338:	001a      	movs	r2, r3
 800733a:	3208      	adds	r2, #8
 800733c:	602a      	str	r2, [r5, #0]
 800733e:	681e      	ldr	r6, [r3, #0]
 8007340:	685d      	ldr	r5, [r3, #4]
 8007342:	0032      	movs	r2, r6
 8007344:	002b      	movs	r3, r5
 8007346:	64a2      	str	r2, [r4, #72]	; 0x48
 8007348:	64e3      	str	r3, [r4, #76]	; 0x4c
 800734a:	2201      	movs	r2, #1
 800734c:	006b      	lsls	r3, r5, #1
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	930e      	str	r3, [sp, #56]	; 0x38
 8007352:	0030      	movs	r0, r6
 8007354:	4bab      	ldr	r3, [pc, #684]	; (8007604 <_printf_float+0x304>)
 8007356:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007358:	4252      	negs	r2, r2
 800735a:	f7fb fb21 	bl	80029a0 <__aeabi_dcmpun>
 800735e:	2800      	cmp	r0, #0
 8007360:	d132      	bne.n	80073c8 <_printf_float+0xc8>
 8007362:	2201      	movs	r2, #1
 8007364:	0030      	movs	r0, r6
 8007366:	4ba7      	ldr	r3, [pc, #668]	; (8007604 <_printf_float+0x304>)
 8007368:	990e      	ldr	r1, [sp, #56]	; 0x38
 800736a:	4252      	negs	r2, r2
 800736c:	f7f9 f87e 	bl	800046c <__aeabi_dcmple>
 8007370:	2800      	cmp	r0, #0
 8007372:	d129      	bne.n	80073c8 <_printf_float+0xc8>
 8007374:	2200      	movs	r2, #0
 8007376:	2300      	movs	r3, #0
 8007378:	0030      	movs	r0, r6
 800737a:	0029      	movs	r1, r5
 800737c:	f7f9 f86c 	bl	8000458 <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	d003      	beq.n	800738c <_printf_float+0x8c>
 8007384:	0023      	movs	r3, r4
 8007386:	222d      	movs	r2, #45	; 0x2d
 8007388:	3343      	adds	r3, #67	; 0x43
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	4d9e      	ldr	r5, [pc, #632]	; (8007608 <_printf_float+0x308>)
 8007390:	2b47      	cmp	r3, #71	; 0x47
 8007392:	d900      	bls.n	8007396 <_printf_float+0x96>
 8007394:	4d9d      	ldr	r5, [pc, #628]	; (800760c <_printf_float+0x30c>)
 8007396:	2303      	movs	r3, #3
 8007398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800739a:	6123      	str	r3, [r4, #16]
 800739c:	3301      	adds	r3, #1
 800739e:	439a      	bics	r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a8:	0021      	movs	r1, r4
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	0038      	movs	r0, r7
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	aa13      	add	r2, sp, #76	; 0x4c
 80073b2:	f000 f9fb 	bl	80077ac <_printf_common>
 80073b6:	3001      	adds	r0, #1
 80073b8:	d000      	beq.n	80073bc <_printf_float+0xbc>
 80073ba:	e0a3      	b.n	8007504 <_printf_float+0x204>
 80073bc:	2001      	movs	r0, #1
 80073be:	4240      	negs	r0, r0
 80073c0:	b015      	add	sp, #84	; 0x54
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c4:	3307      	adds	r3, #7
 80073c6:	e7b6      	b.n	8007336 <_printf_float+0x36>
 80073c8:	0032      	movs	r2, r6
 80073ca:	002b      	movs	r3, r5
 80073cc:	0030      	movs	r0, r6
 80073ce:	0029      	movs	r1, r5
 80073d0:	f7fb fae6 	bl	80029a0 <__aeabi_dcmpun>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d00b      	beq.n	80073f0 <_printf_float+0xf0>
 80073d8:	2d00      	cmp	r5, #0
 80073da:	da03      	bge.n	80073e4 <_printf_float+0xe4>
 80073dc:	0023      	movs	r3, r4
 80073de:	222d      	movs	r2, #45	; 0x2d
 80073e0:	3343      	adds	r3, #67	; 0x43
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e6:	4d8a      	ldr	r5, [pc, #552]	; (8007610 <_printf_float+0x310>)
 80073e8:	2b47      	cmp	r3, #71	; 0x47
 80073ea:	d9d4      	bls.n	8007396 <_printf_float+0x96>
 80073ec:	4d89      	ldr	r5, [pc, #548]	; (8007614 <_printf_float+0x314>)
 80073ee:	e7d2      	b.n	8007396 <_printf_float+0x96>
 80073f0:	2220      	movs	r2, #32
 80073f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	4391      	bics	r1, r2
 80073f8:	910e      	str	r1, [sp, #56]	; 0x38
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	d14a      	bne.n	8007494 <_printf_float+0x194>
 80073fe:	3307      	adds	r3, #7
 8007400:	6063      	str	r3, [r4, #4]
 8007402:	2380      	movs	r3, #128	; 0x80
 8007404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	4313      	orrs	r3, r2
 800740a:	2200      	movs	r2, #0
 800740c:	9206      	str	r2, [sp, #24]
 800740e:	aa12      	add	r2, sp, #72	; 0x48
 8007410:	9205      	str	r2, [sp, #20]
 8007412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	9204      	str	r2, [sp, #16]
 8007418:	aa11      	add	r2, sp, #68	; 0x44
 800741a:	9203      	str	r2, [sp, #12]
 800741c:	2223      	movs	r2, #35	; 0x23
 800741e:	a908      	add	r1, sp, #32
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	6863      	ldr	r3, [r4, #4]
 8007424:	1852      	adds	r2, r2, r1
 8007426:	9202      	str	r2, [sp, #8]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	0032      	movs	r2, r6
 800742c:	002b      	movs	r3, r5
 800742e:	0038      	movs	r0, r7
 8007430:	f7ff febe 	bl	80071b0 <__cvt>
 8007434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007436:	0005      	movs	r5, r0
 8007438:	2b47      	cmp	r3, #71	; 0x47
 800743a:	d109      	bne.n	8007450 <_printf_float+0x150>
 800743c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800743e:	1cda      	adds	r2, r3, #3
 8007440:	db02      	blt.n	8007448 <_printf_float+0x148>
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	4293      	cmp	r3, r2
 8007446:	dd49      	ble.n	80074dc <_printf_float+0x1dc>
 8007448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744a:	3b02      	subs	r3, #2
 800744c:	b2db      	uxtb	r3, r3
 800744e:	930a      	str	r3, [sp, #40]	; 0x28
 8007450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007452:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007454:	2b65      	cmp	r3, #101	; 0x65
 8007456:	d824      	bhi.n	80074a2 <_printf_float+0x1a2>
 8007458:	0020      	movs	r0, r4
 800745a:	001a      	movs	r2, r3
 800745c:	3901      	subs	r1, #1
 800745e:	3050      	adds	r0, #80	; 0x50
 8007460:	9111      	str	r1, [sp, #68]	; 0x44
 8007462:	f7ff ff08 	bl	8007276 <__exponent>
 8007466:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007468:	900b      	str	r0, [sp, #44]	; 0x2c
 800746a:	1813      	adds	r3, r2, r0
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	2a01      	cmp	r2, #1
 8007470:	dc02      	bgt.n	8007478 <_printf_float+0x178>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	07d2      	lsls	r2, r2, #31
 8007476:	d501      	bpl.n	800747c <_printf_float+0x17c>
 8007478:	3301      	adds	r3, #1
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	2323      	movs	r3, #35	; 0x23
 800747e:	aa08      	add	r2, sp, #32
 8007480:	189b      	adds	r3, r3, r2
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d100      	bne.n	800748a <_printf_float+0x18a>
 8007488:	e78d      	b.n	80073a6 <_printf_float+0xa6>
 800748a:	0023      	movs	r3, r4
 800748c:	222d      	movs	r2, #45	; 0x2d
 800748e:	3343      	adds	r3, #67	; 0x43
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	e788      	b.n	80073a6 <_printf_float+0xa6>
 8007494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007496:	2a47      	cmp	r2, #71	; 0x47
 8007498:	d1b3      	bne.n	8007402 <_printf_float+0x102>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1b1      	bne.n	8007402 <_printf_float+0x102>
 800749e:	3301      	adds	r3, #1
 80074a0:	e7ae      	b.n	8007400 <_printf_float+0x100>
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	2b66      	cmp	r3, #102	; 0x66
 80074a6:	d11b      	bne.n	80074e0 <_printf_float+0x1e0>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	2900      	cmp	r1, #0
 80074ac:	dd09      	ble.n	80074c2 <_printf_float+0x1c2>
 80074ae:	6121      	str	r1, [r4, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <_printf_float+0x1ba>
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	07d2      	lsls	r2, r2, #31
 80074b8:	d50b      	bpl.n	80074d2 <_printf_float+0x1d2>
 80074ba:	3301      	adds	r3, #1
 80074bc:	185b      	adds	r3, r3, r1
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	e007      	b.n	80074d2 <_printf_float+0x1d2>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <_printf_float+0x1ce>
 80074c6:	2201      	movs	r2, #1
 80074c8:	6821      	ldr	r1, [r4, #0]
 80074ca:	4211      	tst	r1, r2
 80074cc:	d000      	beq.n	80074d0 <_printf_float+0x1d0>
 80074ce:	1c9a      	adds	r2, r3, #2
 80074d0:	6122      	str	r2, [r4, #16]
 80074d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80074d6:	2300      	movs	r3, #0
 80074d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074da:	e7cf      	b.n	800747c <_printf_float+0x17c>
 80074dc:	2367      	movs	r3, #103	; 0x67
 80074de:	930a      	str	r3, [sp, #40]	; 0x28
 80074e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074e4:	4299      	cmp	r1, r3
 80074e6:	db06      	blt.n	80074f6 <_printf_float+0x1f6>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	6121      	str	r1, [r4, #16]
 80074ec:	07db      	lsls	r3, r3, #31
 80074ee:	d5f0      	bpl.n	80074d2 <_printf_float+0x1d2>
 80074f0:	3101      	adds	r1, #1
 80074f2:	6121      	str	r1, [r4, #16]
 80074f4:	e7ed      	b.n	80074d2 <_printf_float+0x1d2>
 80074f6:	2201      	movs	r2, #1
 80074f8:	2900      	cmp	r1, #0
 80074fa:	dc01      	bgt.n	8007500 <_printf_float+0x200>
 80074fc:	1892      	adds	r2, r2, r2
 80074fe:	1a52      	subs	r2, r2, r1
 8007500:	189b      	adds	r3, r3, r2
 8007502:	e7dc      	b.n	80074be <_printf_float+0x1be>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	0553      	lsls	r3, r2, #21
 8007508:	d408      	bmi.n	800751c <_printf_float+0x21c>
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	002a      	movs	r2, r5
 800750e:	0038      	movs	r0, r7
 8007510:	9908      	ldr	r1, [sp, #32]
 8007512:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007514:	47a8      	blx	r5
 8007516:	3001      	adds	r0, #1
 8007518:	d12a      	bne.n	8007570 <_printf_float+0x270>
 800751a:	e74f      	b.n	80073bc <_printf_float+0xbc>
 800751c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800751e:	2b65      	cmp	r3, #101	; 0x65
 8007520:	d800      	bhi.n	8007524 <_printf_float+0x224>
 8007522:	e0ec      	b.n	80076fe <_printf_float+0x3fe>
 8007524:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007526:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	f7f8 ff8e 	bl	800044c <__aeabi_dcmpeq>
 8007530:	2800      	cmp	r0, #0
 8007532:	d034      	beq.n	800759e <_printf_float+0x29e>
 8007534:	2301      	movs	r3, #1
 8007536:	0038      	movs	r0, r7
 8007538:	4a37      	ldr	r2, [pc, #220]	; (8007618 <_printf_float+0x318>)
 800753a:	9908      	ldr	r1, [sp, #32]
 800753c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800753e:	47a8      	blx	r5
 8007540:	3001      	adds	r0, #1
 8007542:	d100      	bne.n	8007546 <_printf_float+0x246>
 8007544:	e73a      	b.n	80073bc <_printf_float+0xbc>
 8007546:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800754a:	429a      	cmp	r2, r3
 800754c:	db02      	blt.n	8007554 <_printf_float+0x254>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	07db      	lsls	r3, r3, #31
 8007552:	d50d      	bpl.n	8007570 <_printf_float+0x270>
 8007554:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007556:	0038      	movs	r0, r7
 8007558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800755a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800755c:	9908      	ldr	r1, [sp, #32]
 800755e:	47a8      	blx	r5
 8007560:	2500      	movs	r5, #0
 8007562:	3001      	adds	r0, #1
 8007564:	d100      	bne.n	8007568 <_printf_float+0x268>
 8007566:	e729      	b.n	80073bc <_printf_float+0xbc>
 8007568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800756a:	3b01      	subs	r3, #1
 800756c:	42ab      	cmp	r3, r5
 800756e:	dc0a      	bgt.n	8007586 <_printf_float+0x286>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	079b      	lsls	r3, r3, #30
 8007574:	d500      	bpl.n	8007578 <_printf_float+0x278>
 8007576:	e116      	b.n	80077a6 <_printf_float+0x4a6>
 8007578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	4298      	cmp	r0, r3
 800757e:	db00      	blt.n	8007582 <_printf_float+0x282>
 8007580:	e71e      	b.n	80073c0 <_printf_float+0xc0>
 8007582:	0018      	movs	r0, r3
 8007584:	e71c      	b.n	80073c0 <_printf_float+0xc0>
 8007586:	0022      	movs	r2, r4
 8007588:	2301      	movs	r3, #1
 800758a:	0038      	movs	r0, r7
 800758c:	9908      	ldr	r1, [sp, #32]
 800758e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007590:	321a      	adds	r2, #26
 8007592:	47b0      	blx	r6
 8007594:	3001      	adds	r0, #1
 8007596:	d100      	bne.n	800759a <_printf_float+0x29a>
 8007598:	e710      	b.n	80073bc <_printf_float+0xbc>
 800759a:	3501      	adds	r5, #1
 800759c:	e7e4      	b.n	8007568 <_printf_float+0x268>
 800759e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dc3b      	bgt.n	800761c <_printf_float+0x31c>
 80075a4:	2301      	movs	r3, #1
 80075a6:	0038      	movs	r0, r7
 80075a8:	4a1b      	ldr	r2, [pc, #108]	; (8007618 <_printf_float+0x318>)
 80075aa:	9908      	ldr	r1, [sp, #32]
 80075ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075ae:	47b0      	blx	r6
 80075b0:	3001      	adds	r0, #1
 80075b2:	d100      	bne.n	80075b6 <_printf_float+0x2b6>
 80075b4:	e702      	b.n	80073bc <_printf_float+0xbc>
 80075b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ba:	4313      	orrs	r3, r2
 80075bc:	d102      	bne.n	80075c4 <_printf_float+0x2c4>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	07db      	lsls	r3, r3, #31
 80075c2:	d5d5      	bpl.n	8007570 <_printf_float+0x270>
 80075c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c6:	0038      	movs	r0, r7
 80075c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ca:	9908      	ldr	r1, [sp, #32]
 80075cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075ce:	47b0      	blx	r6
 80075d0:	2300      	movs	r3, #0
 80075d2:	3001      	adds	r0, #1
 80075d4:	d100      	bne.n	80075d8 <_printf_float+0x2d8>
 80075d6:	e6f1      	b.n	80073bc <_printf_float+0xbc>
 80075d8:	930a      	str	r3, [sp, #40]	; 0x28
 80075da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075de:	425b      	negs	r3, r3
 80075e0:	4293      	cmp	r3, r2
 80075e2:	dc01      	bgt.n	80075e8 <_printf_float+0x2e8>
 80075e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075e6:	e791      	b.n	800750c <_printf_float+0x20c>
 80075e8:	0022      	movs	r2, r4
 80075ea:	2301      	movs	r3, #1
 80075ec:	0038      	movs	r0, r7
 80075ee:	9908      	ldr	r1, [sp, #32]
 80075f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075f2:	321a      	adds	r2, #26
 80075f4:	47b0      	blx	r6
 80075f6:	3001      	adds	r0, #1
 80075f8:	d100      	bne.n	80075fc <_printf_float+0x2fc>
 80075fa:	e6df      	b.n	80073bc <_printf_float+0xbc>
 80075fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fe:	3301      	adds	r3, #1
 8007600:	e7ea      	b.n	80075d8 <_printf_float+0x2d8>
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	7fefffff 	.word	0x7fefffff
 8007608:	0800a291 	.word	0x0800a291
 800760c:	0800a295 	.word	0x0800a295
 8007610:	0800a299 	.word	0x0800a299
 8007614:	0800a29d 	.word	0x0800a29d
 8007618:	0800a2a1 	.word	0x0800a2a1
 800761c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800761e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007620:	920a      	str	r2, [sp, #40]	; 0x28
 8007622:	429a      	cmp	r2, r3
 8007624:	dd00      	ble.n	8007628 <_printf_float+0x328>
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	dc3d      	bgt.n	80076aa <_printf_float+0x3aa>
 800762e:	2300      	movs	r3, #0
 8007630:	930e      	str	r3, [sp, #56]	; 0x38
 8007632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007634:	43db      	mvns	r3, r3
 8007636:	17db      	asrs	r3, r3, #31
 8007638:	930f      	str	r3, [sp, #60]	; 0x3c
 800763a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800763c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800763e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007642:	4013      	ands	r3, r2
 8007644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800764a:	4293      	cmp	r3, r2
 800764c:	dc36      	bgt.n	80076bc <_printf_float+0x3bc>
 800764e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007652:	429a      	cmp	r2, r3
 8007654:	db40      	blt.n	80076d8 <_printf_float+0x3d8>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d43d      	bmi.n	80076d8 <_printf_float+0x3d8>
 800765c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800765e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007662:	1af3      	subs	r3, r6, r3
 8007664:	1ab6      	subs	r6, r6, r2
 8007666:	429e      	cmp	r6, r3
 8007668:	dd00      	ble.n	800766c <_printf_float+0x36c>
 800766a:	001e      	movs	r6, r3
 800766c:	2e00      	cmp	r6, #0
 800766e:	dc3c      	bgt.n	80076ea <_printf_float+0x3ea>
 8007670:	2300      	movs	r3, #0
 8007672:	930a      	str	r3, [sp, #40]	; 0x28
 8007674:	43f3      	mvns	r3, r6
 8007676:	17db      	asrs	r3, r3, #31
 8007678:	930b      	str	r3, [sp, #44]	; 0x2c
 800767a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800767c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007682:	4032      	ands	r2, r6
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007688:	4293      	cmp	r3, r2
 800768a:	dc00      	bgt.n	800768e <_printf_float+0x38e>
 800768c:	e770      	b.n	8007570 <_printf_float+0x270>
 800768e:	0022      	movs	r2, r4
 8007690:	2301      	movs	r3, #1
 8007692:	0038      	movs	r0, r7
 8007694:	9908      	ldr	r1, [sp, #32]
 8007696:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007698:	321a      	adds	r2, #26
 800769a:	47a8      	blx	r5
 800769c:	3001      	adds	r0, #1
 800769e:	d100      	bne.n	80076a2 <_printf_float+0x3a2>
 80076a0:	e68c      	b.n	80073bc <_printf_float+0xbc>
 80076a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a4:	3301      	adds	r3, #1
 80076a6:	930a      	str	r3, [sp, #40]	; 0x28
 80076a8:	e7e7      	b.n	800767a <_printf_float+0x37a>
 80076aa:	002a      	movs	r2, r5
 80076ac:	0038      	movs	r0, r7
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	9908      	ldr	r1, [sp, #32]
 80076b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076b4:	47b0      	blx	r6
 80076b6:	3001      	adds	r0, #1
 80076b8:	d1b9      	bne.n	800762e <_printf_float+0x32e>
 80076ba:	e67f      	b.n	80073bc <_printf_float+0xbc>
 80076bc:	0022      	movs	r2, r4
 80076be:	2301      	movs	r3, #1
 80076c0:	0038      	movs	r0, r7
 80076c2:	9908      	ldr	r1, [sp, #32]
 80076c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076c6:	321a      	adds	r2, #26
 80076c8:	47b0      	blx	r6
 80076ca:	3001      	adds	r0, #1
 80076cc:	d100      	bne.n	80076d0 <_printf_float+0x3d0>
 80076ce:	e675      	b.n	80073bc <_printf_float+0xbc>
 80076d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d2:	3301      	adds	r3, #1
 80076d4:	930e      	str	r3, [sp, #56]	; 0x38
 80076d6:	e7b0      	b.n	800763a <_printf_float+0x33a>
 80076d8:	0038      	movs	r0, r7
 80076da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076de:	9908      	ldr	r1, [sp, #32]
 80076e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076e2:	47b0      	blx	r6
 80076e4:	3001      	adds	r0, #1
 80076e6:	d1b9      	bne.n	800765c <_printf_float+0x35c>
 80076e8:	e668      	b.n	80073bc <_printf_float+0xbc>
 80076ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ec:	0038      	movs	r0, r7
 80076ee:	18ea      	adds	r2, r5, r3
 80076f0:	9908      	ldr	r1, [sp, #32]
 80076f2:	0033      	movs	r3, r6
 80076f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076f6:	47a8      	blx	r5
 80076f8:	3001      	adds	r0, #1
 80076fa:	d1b9      	bne.n	8007670 <_printf_float+0x370>
 80076fc:	e65e      	b.n	80073bc <_printf_float+0xbc>
 80076fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007700:	2b01      	cmp	r3, #1
 8007702:	dc02      	bgt.n	800770a <_printf_float+0x40a>
 8007704:	2301      	movs	r3, #1
 8007706:	421a      	tst	r2, r3
 8007708:	d03a      	beq.n	8007780 <_printf_float+0x480>
 800770a:	2301      	movs	r3, #1
 800770c:	002a      	movs	r2, r5
 800770e:	0038      	movs	r0, r7
 8007710:	9908      	ldr	r1, [sp, #32]
 8007712:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007714:	47b0      	blx	r6
 8007716:	3001      	adds	r0, #1
 8007718:	d100      	bne.n	800771c <_printf_float+0x41c>
 800771a:	e64f      	b.n	80073bc <_printf_float+0xbc>
 800771c:	0038      	movs	r0, r7
 800771e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007722:	9908      	ldr	r1, [sp, #32]
 8007724:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007726:	47b0      	blx	r6
 8007728:	3001      	adds	r0, #1
 800772a:	d100      	bne.n	800772e <_printf_float+0x42e>
 800772c:	e646      	b.n	80073bc <_printf_float+0xbc>
 800772e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007730:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007734:	2200      	movs	r2, #0
 8007736:	001e      	movs	r6, r3
 8007738:	2300      	movs	r3, #0
 800773a:	f7f8 fe87 	bl	800044c <__aeabi_dcmpeq>
 800773e:	2800      	cmp	r0, #0
 8007740:	d11c      	bne.n	800777c <_printf_float+0x47c>
 8007742:	0033      	movs	r3, r6
 8007744:	1c6a      	adds	r2, r5, #1
 8007746:	3b01      	subs	r3, #1
 8007748:	0038      	movs	r0, r7
 800774a:	9908      	ldr	r1, [sp, #32]
 800774c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800774e:	47a8      	blx	r5
 8007750:	3001      	adds	r0, #1
 8007752:	d10f      	bne.n	8007774 <_printf_float+0x474>
 8007754:	e632      	b.n	80073bc <_printf_float+0xbc>
 8007756:	0022      	movs	r2, r4
 8007758:	2301      	movs	r3, #1
 800775a:	0038      	movs	r0, r7
 800775c:	9908      	ldr	r1, [sp, #32]
 800775e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007760:	321a      	adds	r2, #26
 8007762:	47b0      	blx	r6
 8007764:	3001      	adds	r0, #1
 8007766:	d100      	bne.n	800776a <_printf_float+0x46a>
 8007768:	e628      	b.n	80073bc <_printf_float+0xbc>
 800776a:	3501      	adds	r5, #1
 800776c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800776e:	3b01      	subs	r3, #1
 8007770:	42ab      	cmp	r3, r5
 8007772:	dcf0      	bgt.n	8007756 <_printf_float+0x456>
 8007774:	0022      	movs	r2, r4
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	3250      	adds	r2, #80	; 0x50
 800777a:	e6c8      	b.n	800750e <_printf_float+0x20e>
 800777c:	2500      	movs	r5, #0
 800777e:	e7f5      	b.n	800776c <_printf_float+0x46c>
 8007780:	002a      	movs	r2, r5
 8007782:	e7e1      	b.n	8007748 <_printf_float+0x448>
 8007784:	0022      	movs	r2, r4
 8007786:	2301      	movs	r3, #1
 8007788:	0038      	movs	r0, r7
 800778a:	9908      	ldr	r1, [sp, #32]
 800778c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800778e:	3219      	adds	r2, #25
 8007790:	47b0      	blx	r6
 8007792:	3001      	adds	r0, #1
 8007794:	d100      	bne.n	8007798 <_printf_float+0x498>
 8007796:	e611      	b.n	80073bc <_printf_float+0xbc>
 8007798:	3501      	adds	r5, #1
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dcef      	bgt.n	8007784 <_printf_float+0x484>
 80077a4:	e6e8      	b.n	8007578 <_printf_float+0x278>
 80077a6:	2500      	movs	r5, #0
 80077a8:	e7f7      	b.n	800779a <_printf_float+0x49a>
 80077aa:	46c0      	nop			; (mov r8, r8)

080077ac <_printf_common>:
 80077ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ae:	0016      	movs	r6, r2
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	688a      	ldr	r2, [r1, #8]
 80077b4:	690b      	ldr	r3, [r1, #16]
 80077b6:	000c      	movs	r4, r1
 80077b8:	9000      	str	r0, [sp, #0]
 80077ba:	4293      	cmp	r3, r2
 80077bc:	da00      	bge.n	80077c0 <_printf_common+0x14>
 80077be:	0013      	movs	r3, r2
 80077c0:	0022      	movs	r2, r4
 80077c2:	6033      	str	r3, [r6, #0]
 80077c4:	3243      	adds	r2, #67	; 0x43
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	d001      	beq.n	80077d0 <_printf_common+0x24>
 80077cc:	3301      	adds	r3, #1
 80077ce:	6033      	str	r3, [r6, #0]
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	069b      	lsls	r3, r3, #26
 80077d4:	d502      	bpl.n	80077dc <_printf_common+0x30>
 80077d6:	6833      	ldr	r3, [r6, #0]
 80077d8:	3302      	adds	r3, #2
 80077da:	6033      	str	r3, [r6, #0]
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	2306      	movs	r3, #6
 80077e0:	0015      	movs	r5, r2
 80077e2:	401d      	ands	r5, r3
 80077e4:	421a      	tst	r2, r3
 80077e6:	d027      	beq.n	8007838 <_printf_common+0x8c>
 80077e8:	0023      	movs	r3, r4
 80077ea:	3343      	adds	r3, #67	; 0x43
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	1e5a      	subs	r2, r3, #1
 80077f0:	4193      	sbcs	r3, r2
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	0692      	lsls	r2, r2, #26
 80077f6:	d430      	bmi.n	800785a <_printf_common+0xae>
 80077f8:	0022      	movs	r2, r4
 80077fa:	9901      	ldr	r1, [sp, #4]
 80077fc:	9800      	ldr	r0, [sp, #0]
 80077fe:	9d08      	ldr	r5, [sp, #32]
 8007800:	3243      	adds	r2, #67	; 0x43
 8007802:	47a8      	blx	r5
 8007804:	3001      	adds	r0, #1
 8007806:	d025      	beq.n	8007854 <_printf_common+0xa8>
 8007808:	2206      	movs	r2, #6
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	2500      	movs	r5, #0
 800780e:	4013      	ands	r3, r2
 8007810:	2b04      	cmp	r3, #4
 8007812:	d105      	bne.n	8007820 <_printf_common+0x74>
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	68e5      	ldr	r5, [r4, #12]
 8007818:	1aed      	subs	r5, r5, r3
 800781a:	43eb      	mvns	r3, r5
 800781c:	17db      	asrs	r3, r3, #31
 800781e:	401d      	ands	r5, r3
 8007820:	68a3      	ldr	r3, [r4, #8]
 8007822:	6922      	ldr	r2, [r4, #16]
 8007824:	4293      	cmp	r3, r2
 8007826:	dd01      	ble.n	800782c <_printf_common+0x80>
 8007828:	1a9b      	subs	r3, r3, r2
 800782a:	18ed      	adds	r5, r5, r3
 800782c:	2600      	movs	r6, #0
 800782e:	42b5      	cmp	r5, r6
 8007830:	d120      	bne.n	8007874 <_printf_common+0xc8>
 8007832:	2000      	movs	r0, #0
 8007834:	e010      	b.n	8007858 <_printf_common+0xac>
 8007836:	3501      	adds	r5, #1
 8007838:	68e3      	ldr	r3, [r4, #12]
 800783a:	6832      	ldr	r2, [r6, #0]
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	42ab      	cmp	r3, r5
 8007840:	ddd2      	ble.n	80077e8 <_printf_common+0x3c>
 8007842:	0022      	movs	r2, r4
 8007844:	2301      	movs	r3, #1
 8007846:	9901      	ldr	r1, [sp, #4]
 8007848:	9800      	ldr	r0, [sp, #0]
 800784a:	9f08      	ldr	r7, [sp, #32]
 800784c:	3219      	adds	r2, #25
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	d1f0      	bne.n	8007836 <_printf_common+0x8a>
 8007854:	2001      	movs	r0, #1
 8007856:	4240      	negs	r0, r0
 8007858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800785a:	2030      	movs	r0, #48	; 0x30
 800785c:	18e1      	adds	r1, r4, r3
 800785e:	3143      	adds	r1, #67	; 0x43
 8007860:	7008      	strb	r0, [r1, #0]
 8007862:	0021      	movs	r1, r4
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	3145      	adds	r1, #69	; 0x45
 8007868:	7809      	ldrb	r1, [r1, #0]
 800786a:	18a2      	adds	r2, r4, r2
 800786c:	3243      	adds	r2, #67	; 0x43
 800786e:	3302      	adds	r3, #2
 8007870:	7011      	strb	r1, [r2, #0]
 8007872:	e7c1      	b.n	80077f8 <_printf_common+0x4c>
 8007874:	0022      	movs	r2, r4
 8007876:	2301      	movs	r3, #1
 8007878:	9901      	ldr	r1, [sp, #4]
 800787a:	9800      	ldr	r0, [sp, #0]
 800787c:	9f08      	ldr	r7, [sp, #32]
 800787e:	321a      	adds	r2, #26
 8007880:	47b8      	blx	r7
 8007882:	3001      	adds	r0, #1
 8007884:	d0e6      	beq.n	8007854 <_printf_common+0xa8>
 8007886:	3601      	adds	r6, #1
 8007888:	e7d1      	b.n	800782e <_printf_common+0x82>
	...

0800788c <_printf_i>:
 800788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788e:	b08b      	sub	sp, #44	; 0x2c
 8007890:	9206      	str	r2, [sp, #24]
 8007892:	000a      	movs	r2, r1
 8007894:	3243      	adds	r2, #67	; 0x43
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	9005      	str	r0, [sp, #20]
 800789a:	9204      	str	r2, [sp, #16]
 800789c:	7e0a      	ldrb	r2, [r1, #24]
 800789e:	000c      	movs	r4, r1
 80078a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a2:	2a78      	cmp	r2, #120	; 0x78
 80078a4:	d809      	bhi.n	80078ba <_printf_i+0x2e>
 80078a6:	2a62      	cmp	r2, #98	; 0x62
 80078a8:	d80b      	bhi.n	80078c2 <_printf_i+0x36>
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d100      	bne.n	80078b0 <_printf_i+0x24>
 80078ae:	e0be      	b.n	8007a2e <_printf_i+0x1a2>
 80078b0:	497c      	ldr	r1, [pc, #496]	; (8007aa4 <_printf_i+0x218>)
 80078b2:	9103      	str	r1, [sp, #12]
 80078b4:	2a58      	cmp	r2, #88	; 0x58
 80078b6:	d100      	bne.n	80078ba <_printf_i+0x2e>
 80078b8:	e093      	b.n	80079e2 <_printf_i+0x156>
 80078ba:	0026      	movs	r6, r4
 80078bc:	3642      	adds	r6, #66	; 0x42
 80078be:	7032      	strb	r2, [r6, #0]
 80078c0:	e022      	b.n	8007908 <_printf_i+0x7c>
 80078c2:	0010      	movs	r0, r2
 80078c4:	3863      	subs	r0, #99	; 0x63
 80078c6:	2815      	cmp	r0, #21
 80078c8:	d8f7      	bhi.n	80078ba <_printf_i+0x2e>
 80078ca:	f7f8 fc2f 	bl	800012c <__gnu_thumb1_case_shi>
 80078ce:	0016      	.short	0x0016
 80078d0:	fff6001f 	.word	0xfff6001f
 80078d4:	fff6fff6 	.word	0xfff6fff6
 80078d8:	001ffff6 	.word	0x001ffff6
 80078dc:	fff6fff6 	.word	0xfff6fff6
 80078e0:	fff6fff6 	.word	0xfff6fff6
 80078e4:	003600a3 	.word	0x003600a3
 80078e8:	fff60083 	.word	0xfff60083
 80078ec:	00b4fff6 	.word	0x00b4fff6
 80078f0:	0036fff6 	.word	0x0036fff6
 80078f4:	fff6fff6 	.word	0xfff6fff6
 80078f8:	0087      	.short	0x0087
 80078fa:	0026      	movs	r6, r4
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	3642      	adds	r6, #66	; 0x42
 8007900:	1d11      	adds	r1, r2, #4
 8007902:	6019      	str	r1, [r3, #0]
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	7033      	strb	r3, [r6, #0]
 8007908:	2301      	movs	r3, #1
 800790a:	e0a2      	b.n	8007a52 <_printf_i+0x1c6>
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	6809      	ldr	r1, [r1, #0]
 8007910:	1d02      	adds	r2, r0, #4
 8007912:	060d      	lsls	r5, r1, #24
 8007914:	d50b      	bpl.n	800792e <_printf_i+0xa2>
 8007916:	6805      	ldr	r5, [r0, #0]
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	2d00      	cmp	r5, #0
 800791c:	da03      	bge.n	8007926 <_printf_i+0x9a>
 800791e:	232d      	movs	r3, #45	; 0x2d
 8007920:	9a04      	ldr	r2, [sp, #16]
 8007922:	426d      	negs	r5, r5
 8007924:	7013      	strb	r3, [r2, #0]
 8007926:	4b5f      	ldr	r3, [pc, #380]	; (8007aa4 <_printf_i+0x218>)
 8007928:	270a      	movs	r7, #10
 800792a:	9303      	str	r3, [sp, #12]
 800792c:	e01b      	b.n	8007966 <_printf_i+0xda>
 800792e:	6805      	ldr	r5, [r0, #0]
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	0649      	lsls	r1, r1, #25
 8007934:	d5f1      	bpl.n	800791a <_printf_i+0x8e>
 8007936:	b22d      	sxth	r5, r5
 8007938:	e7ef      	b.n	800791a <_printf_i+0x8e>
 800793a:	680d      	ldr	r5, [r1, #0]
 800793c:	6819      	ldr	r1, [r3, #0]
 800793e:	1d08      	adds	r0, r1, #4
 8007940:	6018      	str	r0, [r3, #0]
 8007942:	062e      	lsls	r6, r5, #24
 8007944:	d501      	bpl.n	800794a <_printf_i+0xbe>
 8007946:	680d      	ldr	r5, [r1, #0]
 8007948:	e003      	b.n	8007952 <_printf_i+0xc6>
 800794a:	066d      	lsls	r5, r5, #25
 800794c:	d5fb      	bpl.n	8007946 <_printf_i+0xba>
 800794e:	680d      	ldr	r5, [r1, #0]
 8007950:	b2ad      	uxth	r5, r5
 8007952:	4b54      	ldr	r3, [pc, #336]	; (8007aa4 <_printf_i+0x218>)
 8007954:	2708      	movs	r7, #8
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	2a6f      	cmp	r2, #111	; 0x6f
 800795a:	d000      	beq.n	800795e <_printf_i+0xd2>
 800795c:	3702      	adds	r7, #2
 800795e:	0023      	movs	r3, r4
 8007960:	2200      	movs	r2, #0
 8007962:	3343      	adds	r3, #67	; 0x43
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	6863      	ldr	r3, [r4, #4]
 8007968:	60a3      	str	r3, [r4, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db03      	blt.n	8007976 <_printf_i+0xea>
 800796e:	2104      	movs	r1, #4
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	438a      	bics	r2, r1
 8007974:	6022      	str	r2, [r4, #0]
 8007976:	2d00      	cmp	r5, #0
 8007978:	d102      	bne.n	8007980 <_printf_i+0xf4>
 800797a:	9e04      	ldr	r6, [sp, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00c      	beq.n	800799a <_printf_i+0x10e>
 8007980:	9e04      	ldr	r6, [sp, #16]
 8007982:	0028      	movs	r0, r5
 8007984:	0039      	movs	r1, r7
 8007986:	f7f8 fc61 	bl	800024c <__aeabi_uidivmod>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	3e01      	subs	r6, #1
 800798e:	5c5b      	ldrb	r3, [r3, r1]
 8007990:	7033      	strb	r3, [r6, #0]
 8007992:	002b      	movs	r3, r5
 8007994:	0005      	movs	r5, r0
 8007996:	429f      	cmp	r7, r3
 8007998:	d9f3      	bls.n	8007982 <_printf_i+0xf6>
 800799a:	2f08      	cmp	r7, #8
 800799c:	d109      	bne.n	80079b2 <_printf_i+0x126>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	07db      	lsls	r3, r3, #31
 80079a2:	d506      	bpl.n	80079b2 <_printf_i+0x126>
 80079a4:	6862      	ldr	r2, [r4, #4]
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	dc02      	bgt.n	80079b2 <_printf_i+0x126>
 80079ac:	2330      	movs	r3, #48	; 0x30
 80079ae:	3e01      	subs	r6, #1
 80079b0:	7033      	strb	r3, [r6, #0]
 80079b2:	9b04      	ldr	r3, [sp, #16]
 80079b4:	1b9b      	subs	r3, r3, r6
 80079b6:	6123      	str	r3, [r4, #16]
 80079b8:	9b07      	ldr	r3, [sp, #28]
 80079ba:	0021      	movs	r1, r4
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	9805      	ldr	r0, [sp, #20]
 80079c0:	9b06      	ldr	r3, [sp, #24]
 80079c2:	aa09      	add	r2, sp, #36	; 0x24
 80079c4:	f7ff fef2 	bl	80077ac <_printf_common>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d147      	bne.n	8007a5c <_printf_i+0x1d0>
 80079cc:	2001      	movs	r0, #1
 80079ce:	4240      	negs	r0, r0
 80079d0:	b00b      	add	sp, #44	; 0x2c
 80079d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d4:	2220      	movs	r2, #32
 80079d6:	6809      	ldr	r1, [r1, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	2278      	movs	r2, #120	; 0x78
 80079de:	4932      	ldr	r1, [pc, #200]	; (8007aa8 <_printf_i+0x21c>)
 80079e0:	9103      	str	r1, [sp, #12]
 80079e2:	0021      	movs	r1, r4
 80079e4:	3145      	adds	r1, #69	; 0x45
 80079e6:	700a      	strb	r2, [r1, #0]
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	c920      	ldmia	r1!, {r5}
 80079ee:	0610      	lsls	r0, r2, #24
 80079f0:	d402      	bmi.n	80079f8 <_printf_i+0x16c>
 80079f2:	0650      	lsls	r0, r2, #25
 80079f4:	d500      	bpl.n	80079f8 <_printf_i+0x16c>
 80079f6:	b2ad      	uxth	r5, r5
 80079f8:	6019      	str	r1, [r3, #0]
 80079fa:	07d3      	lsls	r3, r2, #31
 80079fc:	d502      	bpl.n	8007a04 <_printf_i+0x178>
 80079fe:	2320      	movs	r3, #32
 8007a00:	4313      	orrs	r3, r2
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	2710      	movs	r7, #16
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	d1a9      	bne.n	800795e <_printf_i+0xd2>
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	4393      	bics	r3, r2
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	e7a4      	b.n	800795e <_printf_i+0xd2>
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	680d      	ldr	r5, [r1, #0]
 8007a18:	1d10      	adds	r0, r2, #4
 8007a1a:	6949      	ldr	r1, [r1, #20]
 8007a1c:	6018      	str	r0, [r3, #0]
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	062e      	lsls	r6, r5, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0x19c>
 8007a24:	6019      	str	r1, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0x1a2>
 8007a28:	066d      	lsls	r5, r5, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0x198>
 8007a2c:	8019      	strh	r1, [r3, #0]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9e04      	ldr	r6, [sp, #16]
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	e7c0      	b.n	80079b8 <_printf_i+0x12c>
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	1d11      	adds	r1, r2, #4
 8007a3a:	6019      	str	r1, [r3, #0]
 8007a3c:	6816      	ldr	r6, [r2, #0]
 8007a3e:	2100      	movs	r1, #0
 8007a40:	0030      	movs	r0, r6
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	f000 f9e9 	bl	8007e1a <memchr>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d001      	beq.n	8007a50 <_printf_i+0x1c4>
 8007a4c:	1b80      	subs	r0, r0, r6
 8007a4e:	6060      	str	r0, [r4, #4]
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	2300      	movs	r3, #0
 8007a56:	9a04      	ldr	r2, [sp, #16]
 8007a58:	7013      	strb	r3, [r2, #0]
 8007a5a:	e7ad      	b.n	80079b8 <_printf_i+0x12c>
 8007a5c:	0032      	movs	r2, r6
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	9906      	ldr	r1, [sp, #24]
 8007a62:	9805      	ldr	r0, [sp, #20]
 8007a64:	9d07      	ldr	r5, [sp, #28]
 8007a66:	47a8      	blx	r5
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d0af      	beq.n	80079cc <_printf_i+0x140>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	079b      	lsls	r3, r3, #30
 8007a70:	d415      	bmi.n	8007a9e <_printf_i+0x212>
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	68e0      	ldr	r0, [r4, #12]
 8007a76:	4298      	cmp	r0, r3
 8007a78:	daaa      	bge.n	80079d0 <_printf_i+0x144>
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	e7a8      	b.n	80079d0 <_printf_i+0x144>
 8007a7e:	0022      	movs	r2, r4
 8007a80:	2301      	movs	r3, #1
 8007a82:	9906      	ldr	r1, [sp, #24]
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	9e07      	ldr	r6, [sp, #28]
 8007a88:	3219      	adds	r2, #25
 8007a8a:	47b0      	blx	r6
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d09d      	beq.n	80079cc <_printf_i+0x140>
 8007a90:	3501      	adds	r5, #1
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	42ab      	cmp	r3, r5
 8007a9a:	dcf0      	bgt.n	8007a7e <_printf_i+0x1f2>
 8007a9c:	e7e9      	b.n	8007a72 <_printf_i+0x1e6>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	e7f7      	b.n	8007a92 <_printf_i+0x206>
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	0800a2a3 	.word	0x0800a2a3
 8007aa8:	0800a2b4 	.word	0x0800a2b4

08007aac <std>:
 8007aac:	2300      	movs	r3, #0
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	0004      	movs	r4, r0
 8007ab2:	6003      	str	r3, [r0, #0]
 8007ab4:	6043      	str	r3, [r0, #4]
 8007ab6:	6083      	str	r3, [r0, #8]
 8007ab8:	8181      	strh	r1, [r0, #12]
 8007aba:	6643      	str	r3, [r0, #100]	; 0x64
 8007abc:	81c2      	strh	r2, [r0, #14]
 8007abe:	6103      	str	r3, [r0, #16]
 8007ac0:	6143      	str	r3, [r0, #20]
 8007ac2:	6183      	str	r3, [r0, #24]
 8007ac4:	0019      	movs	r1, r3
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	305c      	adds	r0, #92	; 0x5c
 8007aca:	f000 f91f 	bl	8007d0c <memset>
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <std+0x50>)
 8007ad0:	6224      	str	r4, [r4, #32]
 8007ad2:	6263      	str	r3, [r4, #36]	; 0x24
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <std+0x54>)
 8007ad6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <std+0x58>)
 8007ada:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <std+0x5c>)
 8007ade:	6323      	str	r3, [r4, #48]	; 0x30
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <std+0x60>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d005      	beq.n	8007af2 <std+0x46>
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <std+0x64>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d002      	beq.n	8007af2 <std+0x46>
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <std+0x68>)
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d103      	bne.n	8007afa <std+0x4e>
 8007af2:	0020      	movs	r0, r4
 8007af4:	3058      	adds	r0, #88	; 0x58
 8007af6:	f000 f98d 	bl	8007e14 <__retarget_lock_init_recursive>
 8007afa:	bd10      	pop	{r4, pc}
 8007afc:	08007c75 	.word	0x08007c75
 8007b00:	08007c9d 	.word	0x08007c9d
 8007b04:	08007cd5 	.word	0x08007cd5
 8007b08:	08007d01 	.word	0x08007d01
 8007b0c:	20000650 	.word	0x20000650
 8007b10:	200006b8 	.word	0x200006b8
 8007b14:	20000720 	.word	0x20000720

08007b18 <stdio_exit_handler>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4a03      	ldr	r2, [pc, #12]	; (8007b28 <stdio_exit_handler+0x10>)
 8007b1c:	4903      	ldr	r1, [pc, #12]	; (8007b2c <stdio_exit_handler+0x14>)
 8007b1e:	4804      	ldr	r0, [pc, #16]	; (8007b30 <stdio_exit_handler+0x18>)
 8007b20:	f000 f86c 	bl	8007bfc <_fwalk_sglue>
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	20000270 	.word	0x20000270
 8007b2c:	08009899 	.word	0x08009899
 8007b30:	2000027c 	.word	0x2000027c

08007b34 <cleanup_stdio>:
 8007b34:	6841      	ldr	r1, [r0, #4]
 8007b36:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <cleanup_stdio+0x30>)
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	0004      	movs	r4, r0
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	d001      	beq.n	8007b44 <cleanup_stdio+0x10>
 8007b40:	f001 feaa 	bl	8009898 <_fflush_r>
 8007b44:	68a1      	ldr	r1, [r4, #8]
 8007b46:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <cleanup_stdio+0x34>)
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	d002      	beq.n	8007b52 <cleanup_stdio+0x1e>
 8007b4c:	0020      	movs	r0, r4
 8007b4e:	f001 fea3 	bl	8009898 <_fflush_r>
 8007b52:	68e1      	ldr	r1, [r4, #12]
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <cleanup_stdio+0x38>)
 8007b56:	4299      	cmp	r1, r3
 8007b58:	d002      	beq.n	8007b60 <cleanup_stdio+0x2c>
 8007b5a:	0020      	movs	r0, r4
 8007b5c:	f001 fe9c 	bl	8009898 <_fflush_r>
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	20000650 	.word	0x20000650
 8007b68:	200006b8 	.word	0x200006b8
 8007b6c:	20000720 	.word	0x20000720

08007b70 <global_stdio_init.part.0>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <global_stdio_init.part.0+0x28>)
 8007b74:	4a09      	ldr	r2, [pc, #36]	; (8007b9c <global_stdio_init.part.0+0x2c>)
 8007b76:	2104      	movs	r1, #4
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	4809      	ldr	r0, [pc, #36]	; (8007ba0 <global_stdio_init.part.0+0x30>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f7ff ff95 	bl	8007aac <std>
 8007b82:	2201      	movs	r2, #1
 8007b84:	2109      	movs	r1, #9
 8007b86:	4807      	ldr	r0, [pc, #28]	; (8007ba4 <global_stdio_init.part.0+0x34>)
 8007b88:	f7ff ff90 	bl	8007aac <std>
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	2112      	movs	r1, #18
 8007b90:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <global_stdio_init.part.0+0x38>)
 8007b92:	f7ff ff8b 	bl	8007aac <std>
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	20000788 	.word	0x20000788
 8007b9c:	08007b19 	.word	0x08007b19
 8007ba0:	20000650 	.word	0x20000650
 8007ba4:	200006b8 	.word	0x200006b8
 8007ba8:	20000720 	.word	0x20000720

08007bac <__sfp_lock_acquire>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4802      	ldr	r0, [pc, #8]	; (8007bb8 <__sfp_lock_acquire+0xc>)
 8007bb0:	f000 f931 	bl	8007e16 <__retarget_lock_acquire_recursive>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	20000791 	.word	0x20000791

08007bbc <__sfp_lock_release>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	4802      	ldr	r0, [pc, #8]	; (8007bc8 <__sfp_lock_release+0xc>)
 8007bc0:	f000 f92a 	bl	8007e18 <__retarget_lock_release_recursive>
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	20000791 	.word	0x20000791

08007bcc <__sinit>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	0004      	movs	r4, r0
 8007bd0:	f7ff ffec 	bl	8007bac <__sfp_lock_acquire>
 8007bd4:	6a23      	ldr	r3, [r4, #32]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <__sinit+0x14>
 8007bda:	f7ff ffef 	bl	8007bbc <__sfp_lock_release>
 8007bde:	bd10      	pop	{r4, pc}
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <__sinit+0x28>)
 8007be2:	6223      	str	r3, [r4, #32]
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <__sinit+0x2c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f6      	bne.n	8007bda <__sinit+0xe>
 8007bec:	f7ff ffc0 	bl	8007b70 <global_stdio_init.part.0>
 8007bf0:	e7f3      	b.n	8007bda <__sinit+0xe>
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	08007b35 	.word	0x08007b35
 8007bf8:	20000788 	.word	0x20000788

08007bfc <_fwalk_sglue>:
 8007bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bfe:	0014      	movs	r4, r2
 8007c00:	2600      	movs	r6, #0
 8007c02:	9000      	str	r0, [sp, #0]
 8007c04:	9101      	str	r1, [sp, #4]
 8007c06:	68a5      	ldr	r5, [r4, #8]
 8007c08:	6867      	ldr	r7, [r4, #4]
 8007c0a:	3f01      	subs	r7, #1
 8007c0c:	d504      	bpl.n	8007c18 <_fwalk_sglue+0x1c>
 8007c0e:	6824      	ldr	r4, [r4, #0]
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	d1f8      	bne.n	8007c06 <_fwalk_sglue+0xa>
 8007c14:	0030      	movs	r0, r6
 8007c16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c18:	89ab      	ldrh	r3, [r5, #12]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d908      	bls.n	8007c30 <_fwalk_sglue+0x34>
 8007c1e:	220e      	movs	r2, #14
 8007c20:	5eab      	ldrsh	r3, [r5, r2]
 8007c22:	3301      	adds	r3, #1
 8007c24:	d004      	beq.n	8007c30 <_fwalk_sglue+0x34>
 8007c26:	0029      	movs	r1, r5
 8007c28:	9800      	ldr	r0, [sp, #0]
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	4798      	blx	r3
 8007c2e:	4306      	orrs	r6, r0
 8007c30:	3568      	adds	r5, #104	; 0x68
 8007c32:	e7ea      	b.n	8007c0a <_fwalk_sglue+0xe>

08007c34 <siprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b500      	push	{lr}
 8007c38:	490b      	ldr	r1, [pc, #44]	; (8007c68 <siprintf+0x34>)
 8007c3a:	b09c      	sub	sp, #112	; 0x70
 8007c3c:	ab1d      	add	r3, sp, #116	; 0x74
 8007c3e:	9002      	str	r0, [sp, #8]
 8007c40:	9006      	str	r0, [sp, #24]
 8007c42:	9107      	str	r1, [sp, #28]
 8007c44:	9104      	str	r1, [sp, #16]
 8007c46:	4809      	ldr	r0, [pc, #36]	; (8007c6c <siprintf+0x38>)
 8007c48:	4909      	ldr	r1, [pc, #36]	; (8007c70 <siprintf+0x3c>)
 8007c4a:	cb04      	ldmia	r3!, {r2}
 8007c4c:	9105      	str	r1, [sp, #20]
 8007c4e:	6800      	ldr	r0, [r0, #0]
 8007c50:	a902      	add	r1, sp, #8
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	f001 fc96 	bl	8009584 <_svfiprintf_r>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	9b02      	ldr	r3, [sp, #8]
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	b01c      	add	sp, #112	; 0x70
 8007c60:	bc08      	pop	{r3}
 8007c62:	b003      	add	sp, #12
 8007c64:	4718      	bx	r3
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	7fffffff 	.word	0x7fffffff
 8007c6c:	200002c8 	.word	0x200002c8
 8007c70:	ffff0208 	.word	0xffff0208

08007c74 <__sread>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	000c      	movs	r4, r1
 8007c78:	250e      	movs	r5, #14
 8007c7a:	5f49      	ldrsh	r1, [r1, r5]
 8007c7c:	f000 f878 	bl	8007d70 <_read_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	db03      	blt.n	8007c8c <__sread+0x18>
 8007c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007c86:	181b      	adds	r3, r3, r0
 8007c88:	6563      	str	r3, [r4, #84]	; 0x54
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	4a02      	ldr	r2, [pc, #8]	; (8007c98 <__sread+0x24>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	e7f9      	b.n	8007c8a <__sread+0x16>
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	ffffefff 	.word	0xffffefff

08007c9c <__swrite>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	001f      	movs	r7, r3
 8007ca0:	898b      	ldrh	r3, [r1, #12]
 8007ca2:	0005      	movs	r5, r0
 8007ca4:	000c      	movs	r4, r1
 8007ca6:	0016      	movs	r6, r2
 8007ca8:	05db      	lsls	r3, r3, #23
 8007caa:	d505      	bpl.n	8007cb8 <__swrite+0x1c>
 8007cac:	230e      	movs	r3, #14
 8007cae:	5ec9      	ldrsh	r1, [r1, r3]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	f000 f848 	bl	8007d48 <_lseek_r>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <__swrite+0x34>)
 8007cbc:	0028      	movs	r0, r5
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	0032      	movs	r2, r6
 8007cc4:	230e      	movs	r3, #14
 8007cc6:	5ee1      	ldrsh	r1, [r4, r3]
 8007cc8:	003b      	movs	r3, r7
 8007cca:	f000 f865 	bl	8007d98 <_write_r>
 8007cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd0:	ffffefff 	.word	0xffffefff

08007cd4 <__sseek>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	000c      	movs	r4, r1
 8007cd8:	250e      	movs	r5, #14
 8007cda:	5f49      	ldrsh	r1, [r1, r5]
 8007cdc:	f000 f834 	bl	8007d48 <_lseek_r>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	1c42      	adds	r2, r0, #1
 8007ce4:	d103      	bne.n	8007cee <__sseek+0x1a>
 8007ce6:	4a05      	ldr	r2, [pc, #20]	; (8007cfc <__sseek+0x28>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	81a3      	strh	r3, [r4, #12]
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	2280      	movs	r2, #128	; 0x80
 8007cf0:	0152      	lsls	r2, r2, #5
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8007cf8:	e7f8      	b.n	8007cec <__sseek+0x18>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	ffffefff 	.word	0xffffefff

08007d00 <__sclose>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	230e      	movs	r3, #14
 8007d04:	5ec9      	ldrsh	r1, [r1, r3]
 8007d06:	f000 f80d 	bl	8007d24 <_close_r>
 8007d0a:	bd10      	pop	{r4, pc}

08007d0c <memset>:
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	1882      	adds	r2, r0, r2
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	7019      	strb	r1, [r3, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <_localeconv_r>:
 8007d1c:	4800      	ldr	r0, [pc, #0]	; (8007d20 <_localeconv_r+0x4>)
 8007d1e:	4770      	bx	lr
 8007d20:	200003bc 	.word	0x200003bc

08007d24 <_close_r>:
 8007d24:	2300      	movs	r3, #0
 8007d26:	b570      	push	{r4, r5, r6, lr}
 8007d28:	4d06      	ldr	r5, [pc, #24]	; (8007d44 <_close_r+0x20>)
 8007d2a:	0004      	movs	r4, r0
 8007d2c:	0008      	movs	r0, r1
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	f7fc f844 	bl	8003dbc <_close>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d103      	bne.n	8007d40 <_close_r+0x1c>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d000      	beq.n	8007d40 <_close_r+0x1c>
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	2000078c 	.word	0x2000078c

08007d48 <_lseek_r>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	0004      	movs	r4, r0
 8007d4c:	0008      	movs	r0, r1
 8007d4e:	0011      	movs	r1, r2
 8007d50:	001a      	movs	r2, r3
 8007d52:	2300      	movs	r3, #0
 8007d54:	4d05      	ldr	r5, [pc, #20]	; (8007d6c <_lseek_r+0x24>)
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7fc f851 	bl	8003dfe <_lseek>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d103      	bne.n	8007d68 <_lseek_r+0x20>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d000      	beq.n	8007d68 <_lseek_r+0x20>
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	2000078c 	.word	0x2000078c

08007d70 <_read_r>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	0004      	movs	r4, r0
 8007d74:	0008      	movs	r0, r1
 8007d76:	0011      	movs	r1, r2
 8007d78:	001a      	movs	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4d05      	ldr	r5, [pc, #20]	; (8007d94 <_read_r+0x24>)
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7fb ffe3 	bl	8003d4a <_read>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d103      	bne.n	8007d90 <_read_r+0x20>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d000      	beq.n	8007d90 <_read_r+0x20>
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	2000078c 	.word	0x2000078c

08007d98 <_write_r>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	0004      	movs	r4, r0
 8007d9c:	0008      	movs	r0, r1
 8007d9e:	0011      	movs	r1, r2
 8007da0:	001a      	movs	r2, r3
 8007da2:	2300      	movs	r3, #0
 8007da4:	4d05      	ldr	r5, [pc, #20]	; (8007dbc <_write_r+0x24>)
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	f7fb ffec 	bl	8003d84 <_write>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d103      	bne.n	8007db8 <_write_r+0x20>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d000      	beq.n	8007db8 <_write_r+0x20>
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	bd70      	pop	{r4, r5, r6, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	2000078c 	.word	0x2000078c

08007dc0 <__errno>:
 8007dc0:	4b01      	ldr	r3, [pc, #4]	; (8007dc8 <__errno+0x8>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	4770      	bx	lr
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	200002c8 	.word	0x200002c8

08007dcc <__libc_init_array>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	2600      	movs	r6, #0
 8007dd0:	4c0c      	ldr	r4, [pc, #48]	; (8007e04 <__libc_init_array+0x38>)
 8007dd2:	4d0d      	ldr	r5, [pc, #52]	; (8007e08 <__libc_init_array+0x3c>)
 8007dd4:	1b64      	subs	r4, r4, r5
 8007dd6:	10a4      	asrs	r4, r4, #2
 8007dd8:	42a6      	cmp	r6, r4
 8007dda:	d109      	bne.n	8007df0 <__libc_init_array+0x24>
 8007ddc:	2600      	movs	r6, #0
 8007dde:	f002 f921 	bl	800a024 <_init>
 8007de2:	4c0a      	ldr	r4, [pc, #40]	; (8007e0c <__libc_init_array+0x40>)
 8007de4:	4d0a      	ldr	r5, [pc, #40]	; (8007e10 <__libc_init_array+0x44>)
 8007de6:	1b64      	subs	r4, r4, r5
 8007de8:	10a4      	asrs	r4, r4, #2
 8007dea:	42a6      	cmp	r6, r4
 8007dec:	d105      	bne.n	8007dfa <__libc_init_array+0x2e>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	00b3      	lsls	r3, r6, #2
 8007df2:	58eb      	ldr	r3, [r5, r3]
 8007df4:	4798      	blx	r3
 8007df6:	3601      	adds	r6, #1
 8007df8:	e7ee      	b.n	8007dd8 <__libc_init_array+0xc>
 8007dfa:	00b3      	lsls	r3, r6, #2
 8007dfc:	58eb      	ldr	r3, [r5, r3]
 8007dfe:	4798      	blx	r3
 8007e00:	3601      	adds	r6, #1
 8007e02:	e7f2      	b.n	8007dea <__libc_init_array+0x1e>
 8007e04:	0800a60c 	.word	0x0800a60c
 8007e08:	0800a60c 	.word	0x0800a60c
 8007e0c:	0800a610 	.word	0x0800a610
 8007e10:	0800a60c 	.word	0x0800a60c

08007e14 <__retarget_lock_init_recursive>:
 8007e14:	4770      	bx	lr

08007e16 <__retarget_lock_acquire_recursive>:
 8007e16:	4770      	bx	lr

08007e18 <__retarget_lock_release_recursive>:
 8007e18:	4770      	bx	lr

08007e1a <memchr>:
 8007e1a:	b2c9      	uxtb	r1, r1
 8007e1c:	1882      	adds	r2, r0, r2
 8007e1e:	4290      	cmp	r0, r2
 8007e20:	d101      	bne.n	8007e26 <memchr+0xc>
 8007e22:	2000      	movs	r0, #0
 8007e24:	4770      	bx	lr
 8007e26:	7803      	ldrb	r3, [r0, #0]
 8007e28:	428b      	cmp	r3, r1
 8007e2a:	d0fb      	beq.n	8007e24 <memchr+0xa>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	e7f6      	b.n	8007e1e <memchr+0x4>

08007e30 <memcpy>:
 8007e30:	2300      	movs	r3, #0
 8007e32:	b510      	push	{r4, lr}
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d100      	bne.n	8007e3a <memcpy+0xa>
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	5ccc      	ldrb	r4, [r1, r3]
 8007e3c:	54c4      	strb	r4, [r0, r3]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	e7f8      	b.n	8007e34 <memcpy+0x4>

08007e42 <quorem>:
 8007e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e44:	6902      	ldr	r2, [r0, #16]
 8007e46:	690b      	ldr	r3, [r1, #16]
 8007e48:	b089      	sub	sp, #36	; 0x24
 8007e4a:	0007      	movs	r7, r0
 8007e4c:	9104      	str	r1, [sp, #16]
 8007e4e:	2000      	movs	r0, #0
 8007e50:	429a      	cmp	r2, r3
 8007e52:	db69      	blt.n	8007f28 <quorem+0xe6>
 8007e54:	3b01      	subs	r3, #1
 8007e56:	009c      	lsls	r4, r3, #2
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	000b      	movs	r3, r1
 8007e5c:	3314      	adds	r3, #20
 8007e5e:	9306      	str	r3, [sp, #24]
 8007e60:	191b      	adds	r3, r3, r4
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	003b      	movs	r3, r7
 8007e66:	3314      	adds	r3, #20
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	191c      	adds	r4, r3, r4
 8007e6c:	9b05      	ldr	r3, [sp, #20]
 8007e6e:	6826      	ldr	r6, [r4, #0]
 8007e70:	681d      	ldr	r5, [r3, #0]
 8007e72:	0030      	movs	r0, r6
 8007e74:	3501      	adds	r5, #1
 8007e76:	0029      	movs	r1, r5
 8007e78:	f7f8 f962 	bl	8000140 <__udivsi3>
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	42ae      	cmp	r6, r5
 8007e80:	d329      	bcc.n	8007ed6 <quorem+0x94>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	2600      	movs	r6, #0
 8007e86:	469c      	mov	ip, r3
 8007e88:	9d03      	ldr	r5, [sp, #12]
 8007e8a:	9606      	str	r6, [sp, #24]
 8007e8c:	4662      	mov	r2, ip
 8007e8e:	ca08      	ldmia	r2!, {r3}
 8007e90:	6828      	ldr	r0, [r5, #0]
 8007e92:	4694      	mov	ip, r2
 8007e94:	9a02      	ldr	r2, [sp, #8]
 8007e96:	b299      	uxth	r1, r3
 8007e98:	4351      	muls	r1, r2
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	4353      	muls	r3, r2
 8007e9e:	1989      	adds	r1, r1, r6
 8007ea0:	0c0a      	lsrs	r2, r1, #16
 8007ea2:	189b      	adds	r3, r3, r2
 8007ea4:	9307      	str	r3, [sp, #28]
 8007ea6:	0c1e      	lsrs	r6, r3, #16
 8007ea8:	9b06      	ldr	r3, [sp, #24]
 8007eaa:	b282      	uxth	r2, r0
 8007eac:	18d2      	adds	r2, r2, r3
 8007eae:	466b      	mov	r3, sp
 8007eb0:	b289      	uxth	r1, r1
 8007eb2:	8b9b      	ldrh	r3, [r3, #28]
 8007eb4:	1a52      	subs	r2, r2, r1
 8007eb6:	0c01      	lsrs	r1, r0, #16
 8007eb8:	1ac9      	subs	r1, r1, r3
 8007eba:	1413      	asrs	r3, r2, #16
 8007ebc:	18cb      	adds	r3, r1, r3
 8007ebe:	1419      	asrs	r1, r3, #16
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	c508      	stmia	r5!, {r3}
 8007ec8:	9b05      	ldr	r3, [sp, #20]
 8007eca:	9106      	str	r1, [sp, #24]
 8007ecc:	4563      	cmp	r3, ip
 8007ece:	d2dd      	bcs.n	8007e8c <quorem+0x4a>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d030      	beq.n	8007f38 <quorem+0xf6>
 8007ed6:	0038      	movs	r0, r7
 8007ed8:	9904      	ldr	r1, [sp, #16]
 8007eda:	f001 f9dd 	bl	8009298 <__mcmp>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	db21      	blt.n	8007f26 <quorem+0xe4>
 8007ee2:	0038      	movs	r0, r7
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	9b02      	ldr	r3, [sp, #8]
 8007ee8:	9c04      	ldr	r4, [sp, #16]
 8007eea:	3301      	adds	r3, #1
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	3014      	adds	r0, #20
 8007ef0:	3414      	adds	r4, #20
 8007ef2:	6803      	ldr	r3, [r0, #0]
 8007ef4:	cc02      	ldmia	r4!, {r1}
 8007ef6:	b29d      	uxth	r5, r3
 8007ef8:	19ad      	adds	r5, r5, r6
 8007efa:	b28a      	uxth	r2, r1
 8007efc:	1aaa      	subs	r2, r5, r2
 8007efe:	0c09      	lsrs	r1, r1, #16
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	1a5b      	subs	r3, r3, r1
 8007f04:	1411      	asrs	r1, r2, #16
 8007f06:	185b      	adds	r3, r3, r1
 8007f08:	141e      	asrs	r6, r3, #16
 8007f0a:	b292      	uxth	r2, r2
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	c008      	stmia	r0!, {r3}
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	d2ec      	bcs.n	8007ef2 <quorem+0xb0>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	9a03      	ldr	r2, [sp, #12]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	18d3      	adds	r3, r2, r3
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	d015      	beq.n	8007f52 <quorem+0x110>
 8007f26:	9802      	ldr	r0, [sp, #8]
 8007f28:	b009      	add	sp, #36	; 0x24
 8007f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <quorem+0xfe>
 8007f32:	9b01      	ldr	r3, [sp, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	3c04      	subs	r4, #4
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d3f5      	bcc.n	8007f2c <quorem+0xea>
 8007f40:	9b01      	ldr	r3, [sp, #4]
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	e7c7      	b.n	8007ed6 <quorem+0x94>
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d106      	bne.n	8007f5a <quorem+0x118>
 8007f4c:	9a01      	ldr	r2, [sp, #4]
 8007f4e:	3a01      	subs	r2, #1
 8007f50:	9201      	str	r2, [sp, #4]
 8007f52:	9a03      	ldr	r2, [sp, #12]
 8007f54:	3b04      	subs	r3, #4
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d3f5      	bcc.n	8007f46 <quorem+0x104>
 8007f5a:	9b01      	ldr	r3, [sp, #4]
 8007f5c:	613b      	str	r3, [r7, #16]
 8007f5e:	e7e2      	b.n	8007f26 <quorem+0xe4>

08007f60 <_dtoa_r>:
 8007f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f62:	0014      	movs	r4, r2
 8007f64:	001d      	movs	r5, r3
 8007f66:	69c6      	ldr	r6, [r0, #28]
 8007f68:	b09d      	sub	sp, #116	; 0x74
 8007f6a:	9408      	str	r4, [sp, #32]
 8007f6c:	9509      	str	r5, [sp, #36]	; 0x24
 8007f6e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007f70:	9004      	str	r0, [sp, #16]
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d10f      	bne.n	8007f96 <_dtoa_r+0x36>
 8007f76:	2010      	movs	r0, #16
 8007f78:	f000 fe4a 	bl	8008c10 <malloc>
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	1e02      	subs	r2, r0, #0
 8007f80:	61d8      	str	r0, [r3, #28]
 8007f82:	d104      	bne.n	8007f8e <_dtoa_r+0x2e>
 8007f84:	21ef      	movs	r1, #239	; 0xef
 8007f86:	4bc6      	ldr	r3, [pc, #792]	; (80082a0 <_dtoa_r+0x340>)
 8007f88:	48c6      	ldr	r0, [pc, #792]	; (80082a4 <_dtoa_r+0x344>)
 8007f8a:	f001 fcd5 	bl	8009938 <__assert_func>
 8007f8e:	6046      	str	r6, [r0, #4]
 8007f90:	6086      	str	r6, [r0, #8]
 8007f92:	6006      	str	r6, [r0, #0]
 8007f94:	60c6      	str	r6, [r0, #12]
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	6819      	ldr	r1, [r3, #0]
 8007f9c:	2900      	cmp	r1, #0
 8007f9e:	d00b      	beq.n	8007fb8 <_dtoa_r+0x58>
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4093      	lsls	r3, r2
 8007fa6:	604a      	str	r2, [r1, #4]
 8007fa8:	608b      	str	r3, [r1, #8]
 8007faa:	9804      	ldr	r0, [sp, #16]
 8007fac:	f000 ff32 	bl	8008e14 <_Bfree>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	da1e      	bge.n	8007ffa <_dtoa_r+0x9a>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	006b      	lsls	r3, r5, #1
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fc8:	4bb7      	ldr	r3, [pc, #732]	; (80082a8 <_dtoa_r+0x348>)
 8007fca:	4ab7      	ldr	r2, [pc, #732]	; (80082a8 <_dtoa_r+0x348>)
 8007fcc:	403b      	ands	r3, r7
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d116      	bne.n	8008000 <_dtoa_r+0xa0>
 8007fd2:	4bb6      	ldr	r3, [pc, #728]	; (80082ac <_dtoa_r+0x34c>)
 8007fd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	033b      	lsls	r3, r7, #12
 8007fda:	0b1b      	lsrs	r3, r3, #12
 8007fdc:	4323      	orrs	r3, r4
 8007fde:	d101      	bne.n	8007fe4 <_dtoa_r+0x84>
 8007fe0:	f000 fdb5 	bl	8008b4e <_dtoa_r+0xbee>
 8007fe4:	4bb2      	ldr	r3, [pc, #712]	; (80082b0 <_dtoa_r+0x350>)
 8007fe6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007fe8:	9306      	str	r3, [sp, #24]
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d002      	beq.n	8007ff4 <_dtoa_r+0x94>
 8007fee:	4bb1      	ldr	r3, [pc, #708]	; (80082b4 <_dtoa_r+0x354>)
 8007ff0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	9806      	ldr	r0, [sp, #24]
 8007ff6:	b01d      	add	sp, #116	; 0x74
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	603b      	str	r3, [r7, #0]
 8007ffe:	e7e2      	b.n	8007fc6 <_dtoa_r+0x66>
 8008000:	9a08      	ldr	r2, [sp, #32]
 8008002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008004:	9210      	str	r2, [sp, #64]	; 0x40
 8008006:	9311      	str	r3, [sp, #68]	; 0x44
 8008008:	9810      	ldr	r0, [sp, #64]	; 0x40
 800800a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	f7f8 fa1c 	bl	800044c <__aeabi_dcmpeq>
 8008014:	1e06      	subs	r6, r0, #0
 8008016:	d009      	beq.n	800802c <_dtoa_r+0xcc>
 8008018:	2301      	movs	r3, #1
 800801a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	4ba6      	ldr	r3, [pc, #664]	; (80082b8 <_dtoa_r+0x358>)
 8008020:	9306      	str	r3, [sp, #24]
 8008022:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0e5      	beq.n	8007ff4 <_dtoa_r+0x94>
 8008028:	4ba4      	ldr	r3, [pc, #656]	; (80082bc <_dtoa_r+0x35c>)
 800802a:	e7e1      	b.n	8007ff0 <_dtoa_r+0x90>
 800802c:	ab1a      	add	r3, sp, #104	; 0x68
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	ab1b      	add	r3, sp, #108	; 0x6c
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	9804      	ldr	r0, [sp, #16]
 8008036:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800803a:	f001 f9e1 	bl	8009400 <__d2b>
 800803e:	007a      	lsls	r2, r7, #1
 8008040:	9005      	str	r0, [sp, #20]
 8008042:	0d52      	lsrs	r2, r2, #21
 8008044:	d100      	bne.n	8008048 <_dtoa_r+0xe8>
 8008046:	e07b      	b.n	8008140 <_dtoa_r+0x1e0>
 8008048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800804a:	9617      	str	r6, [sp, #92]	; 0x5c
 800804c:	0319      	lsls	r1, r3, #12
 800804e:	4b9c      	ldr	r3, [pc, #624]	; (80082c0 <_dtoa_r+0x360>)
 8008050:	0b09      	lsrs	r1, r1, #12
 8008052:	430b      	orrs	r3, r1
 8008054:	499b      	ldr	r1, [pc, #620]	; (80082c4 <_dtoa_r+0x364>)
 8008056:	1857      	adds	r7, r2, r1
 8008058:	9810      	ldr	r0, [sp, #64]	; 0x40
 800805a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800805c:	0019      	movs	r1, r3
 800805e:	2200      	movs	r2, #0
 8008060:	4b99      	ldr	r3, [pc, #612]	; (80082c8 <_dtoa_r+0x368>)
 8008062:	f7fa f91b 	bl	800229c <__aeabi_dsub>
 8008066:	4a99      	ldr	r2, [pc, #612]	; (80082cc <_dtoa_r+0x36c>)
 8008068:	4b99      	ldr	r3, [pc, #612]	; (80082d0 <_dtoa_r+0x370>)
 800806a:	f7f9 fe55 	bl	8001d18 <__aeabi_dmul>
 800806e:	4a99      	ldr	r2, [pc, #612]	; (80082d4 <_dtoa_r+0x374>)
 8008070:	4b99      	ldr	r3, [pc, #612]	; (80082d8 <_dtoa_r+0x378>)
 8008072:	f7f8 fef7 	bl	8000e64 <__aeabi_dadd>
 8008076:	0004      	movs	r4, r0
 8008078:	0038      	movs	r0, r7
 800807a:	000d      	movs	r5, r1
 800807c:	f7fa fce4 	bl	8002a48 <__aeabi_i2d>
 8008080:	4a96      	ldr	r2, [pc, #600]	; (80082dc <_dtoa_r+0x37c>)
 8008082:	4b97      	ldr	r3, [pc, #604]	; (80082e0 <_dtoa_r+0x380>)
 8008084:	f7f9 fe48 	bl	8001d18 <__aeabi_dmul>
 8008088:	0002      	movs	r2, r0
 800808a:	000b      	movs	r3, r1
 800808c:	0020      	movs	r0, r4
 800808e:	0029      	movs	r1, r5
 8008090:	f7f8 fee8 	bl	8000e64 <__aeabi_dadd>
 8008094:	0004      	movs	r4, r0
 8008096:	000d      	movs	r5, r1
 8008098:	f7fa fca0 	bl	80029dc <__aeabi_d2iz>
 800809c:	2200      	movs	r2, #0
 800809e:	9003      	str	r0, [sp, #12]
 80080a0:	2300      	movs	r3, #0
 80080a2:	0020      	movs	r0, r4
 80080a4:	0029      	movs	r1, r5
 80080a6:	f7f8 f9d7 	bl	8000458 <__aeabi_dcmplt>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d00b      	beq.n	80080c6 <_dtoa_r+0x166>
 80080ae:	9803      	ldr	r0, [sp, #12]
 80080b0:	f7fa fcca 	bl	8002a48 <__aeabi_i2d>
 80080b4:	002b      	movs	r3, r5
 80080b6:	0022      	movs	r2, r4
 80080b8:	f7f8 f9c8 	bl	800044c <__aeabi_dcmpeq>
 80080bc:	4243      	negs	r3, r0
 80080be:	4158      	adcs	r0, r3
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	1a1b      	subs	r3, r3, r0
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	2301      	movs	r3, #1
 80080c8:	9316      	str	r3, [sp, #88]	; 0x58
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	2b16      	cmp	r3, #22
 80080ce:	d810      	bhi.n	80080f2 <_dtoa_r+0x192>
 80080d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080d4:	9a03      	ldr	r2, [sp, #12]
 80080d6:	4b83      	ldr	r3, [pc, #524]	; (80082e4 <_dtoa_r+0x384>)
 80080d8:	00d2      	lsls	r2, r2, #3
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f7f8 f9ba 	bl	8000458 <__aeabi_dcmplt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d047      	beq.n	8008178 <_dtoa_r+0x218>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9316      	str	r3, [sp, #88]	; 0x58
 80080f2:	2200      	movs	r2, #0
 80080f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080f6:	920a      	str	r2, [sp, #40]	; 0x28
 80080f8:	1bdb      	subs	r3, r3, r7
 80080fa:	1e5a      	subs	r2, r3, #1
 80080fc:	d53e      	bpl.n	800817c <_dtoa_r+0x21c>
 80080fe:	2201      	movs	r2, #1
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	930a      	str	r3, [sp, #40]	; 0x28
 8008104:	2300      	movs	r3, #0
 8008106:	930c      	str	r3, [sp, #48]	; 0x30
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	db38      	blt.n	8008180 <_dtoa_r+0x220>
 800810e:	9a03      	ldr	r2, [sp, #12]
 8008110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008112:	4694      	mov	ip, r2
 8008114:	4463      	add	r3, ip
 8008116:	930c      	str	r3, [sp, #48]	; 0x30
 8008118:	2300      	movs	r3, #0
 800811a:	9213      	str	r2, [sp, #76]	; 0x4c
 800811c:	930d      	str	r3, [sp, #52]	; 0x34
 800811e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008120:	2401      	movs	r4, #1
 8008122:	2b09      	cmp	r3, #9
 8008124:	d867      	bhi.n	80081f6 <_dtoa_r+0x296>
 8008126:	2b05      	cmp	r3, #5
 8008128:	dd02      	ble.n	8008130 <_dtoa_r+0x1d0>
 800812a:	2400      	movs	r4, #0
 800812c:	3b04      	subs	r3, #4
 800812e:	9322      	str	r3, [sp, #136]	; 0x88
 8008130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008132:	1e98      	subs	r0, r3, #2
 8008134:	2803      	cmp	r0, #3
 8008136:	d867      	bhi.n	8008208 <_dtoa_r+0x2a8>
 8008138:	f7f7 ffee 	bl	8000118 <__gnu_thumb1_case_uqi>
 800813c:	5b383a2b 	.word	0x5b383a2b
 8008140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008142:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008144:	18f6      	adds	r6, r6, r3
 8008146:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <_dtoa_r+0x388>)
 8008148:	18f2      	adds	r2, r6, r3
 800814a:	2a20      	cmp	r2, #32
 800814c:	dd0f      	ble.n	800816e <_dtoa_r+0x20e>
 800814e:	2340      	movs	r3, #64	; 0x40
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	409f      	lsls	r7, r3
 8008154:	4b65      	ldr	r3, [pc, #404]	; (80082ec <_dtoa_r+0x38c>)
 8008156:	0038      	movs	r0, r7
 8008158:	18f3      	adds	r3, r6, r3
 800815a:	40dc      	lsrs	r4, r3
 800815c:	4320      	orrs	r0, r4
 800815e:	f7fa fca3 	bl	8002aa8 <__aeabi_ui2d>
 8008162:	2201      	movs	r2, #1
 8008164:	4b62      	ldr	r3, [pc, #392]	; (80082f0 <_dtoa_r+0x390>)
 8008166:	1e77      	subs	r7, r6, #1
 8008168:	18cb      	adds	r3, r1, r3
 800816a:	9217      	str	r2, [sp, #92]	; 0x5c
 800816c:	e776      	b.n	800805c <_dtoa_r+0xfc>
 800816e:	2320      	movs	r3, #32
 8008170:	0020      	movs	r0, r4
 8008172:	1a9b      	subs	r3, r3, r2
 8008174:	4098      	lsls	r0, r3
 8008176:	e7f2      	b.n	800815e <_dtoa_r+0x1fe>
 8008178:	9016      	str	r0, [sp, #88]	; 0x58
 800817a:	e7ba      	b.n	80080f2 <_dtoa_r+0x192>
 800817c:	920c      	str	r2, [sp, #48]	; 0x30
 800817e:	e7c3      	b.n	8008108 <_dtoa_r+0x1a8>
 8008180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008182:	9a03      	ldr	r2, [sp, #12]
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	930a      	str	r3, [sp, #40]	; 0x28
 8008188:	4253      	negs	r3, r2
 800818a:	930d      	str	r3, [sp, #52]	; 0x34
 800818c:	2300      	movs	r3, #0
 800818e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008190:	e7c5      	b.n	800811e <_dtoa_r+0x1be>
 8008192:	2300      	movs	r3, #0
 8008194:	930f      	str	r3, [sp, #60]	; 0x3c
 8008196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008198:	930b      	str	r3, [sp, #44]	; 0x2c
 800819a:	9307      	str	r3, [sp, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dc13      	bgt.n	80081c8 <_dtoa_r+0x268>
 80081a0:	2301      	movs	r3, #1
 80081a2:	001a      	movs	r2, r3
 80081a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80081aa:	e00d      	b.n	80081c8 <_dtoa_r+0x268>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e7f1      	b.n	8008194 <_dtoa_r+0x234>
 80081b0:	2300      	movs	r3, #0
 80081b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80081b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b6:	4694      	mov	ip, r2
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	4463      	add	r3, ip
 80081bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081be:	3301      	adds	r3, #1
 80081c0:	9307      	str	r3, [sp, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dc00      	bgt.n	80081c8 <_dtoa_r+0x268>
 80081c6:	2301      	movs	r3, #1
 80081c8:	9a04      	ldr	r2, [sp, #16]
 80081ca:	2100      	movs	r1, #0
 80081cc:	69d0      	ldr	r0, [r2, #28]
 80081ce:	2204      	movs	r2, #4
 80081d0:	0015      	movs	r5, r2
 80081d2:	3514      	adds	r5, #20
 80081d4:	429d      	cmp	r5, r3
 80081d6:	d91b      	bls.n	8008210 <_dtoa_r+0x2b0>
 80081d8:	6041      	str	r1, [r0, #4]
 80081da:	9804      	ldr	r0, [sp, #16]
 80081dc:	f000 fdd6 	bl	8008d8c <_Balloc>
 80081e0:	9006      	str	r0, [sp, #24]
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d117      	bne.n	8008216 <_dtoa_r+0x2b6>
 80081e6:	21b0      	movs	r1, #176	; 0xb0
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <_dtoa_r+0x394>)
 80081ea:	482e      	ldr	r0, [pc, #184]	; (80082a4 <_dtoa_r+0x344>)
 80081ec:	9a06      	ldr	r2, [sp, #24]
 80081ee:	31ff      	adds	r1, #255	; 0xff
 80081f0:	e6cb      	b.n	8007f8a <_dtoa_r+0x2a>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7dd      	b.n	80081b2 <_dtoa_r+0x252>
 80081f6:	2300      	movs	r3, #0
 80081f8:	940f      	str	r4, [sp, #60]	; 0x3c
 80081fa:	9322      	str	r3, [sp, #136]	; 0x88
 80081fc:	3b01      	subs	r3, #1
 80081fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008200:	9307      	str	r3, [sp, #28]
 8008202:	2200      	movs	r2, #0
 8008204:	3313      	adds	r3, #19
 8008206:	e7cf      	b.n	80081a8 <_dtoa_r+0x248>
 8008208:	2301      	movs	r3, #1
 800820a:	930f      	str	r3, [sp, #60]	; 0x3c
 800820c:	3b02      	subs	r3, #2
 800820e:	e7f6      	b.n	80081fe <_dtoa_r+0x29e>
 8008210:	3101      	adds	r1, #1
 8008212:	0052      	lsls	r2, r2, #1
 8008214:	e7dc      	b.n	80081d0 <_dtoa_r+0x270>
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	9a06      	ldr	r2, [sp, #24]
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	9b07      	ldr	r3, [sp, #28]
 8008220:	2b0e      	cmp	r3, #14
 8008222:	d900      	bls.n	8008226 <_dtoa_r+0x2c6>
 8008224:	e0e5      	b.n	80083f2 <_dtoa_r+0x492>
 8008226:	2c00      	cmp	r4, #0
 8008228:	d100      	bne.n	800822c <_dtoa_r+0x2cc>
 800822a:	e0e2      	b.n	80083f2 <_dtoa_r+0x492>
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dd64      	ble.n	80082fc <_dtoa_r+0x39c>
 8008232:	210f      	movs	r1, #15
 8008234:	9a03      	ldr	r2, [sp, #12]
 8008236:	4b2b      	ldr	r3, [pc, #172]	; (80082e4 <_dtoa_r+0x384>)
 8008238:	400a      	ands	r2, r1
 800823a:	00d2      	lsls	r2, r2, #3
 800823c:	189b      	adds	r3, r3, r2
 800823e:	681e      	ldr	r6, [r3, #0]
 8008240:	685f      	ldr	r7, [r3, #4]
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	2402      	movs	r4, #2
 8008246:	111d      	asrs	r5, r3, #4
 8008248:	05db      	lsls	r3, r3, #23
 800824a:	d50a      	bpl.n	8008262 <_dtoa_r+0x302>
 800824c:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <_dtoa_r+0x398>)
 800824e:	400d      	ands	r5, r1
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008256:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008258:	f7f9 f964 	bl	8001524 <__aeabi_ddiv>
 800825c:	9008      	str	r0, [sp, #32]
 800825e:	9109      	str	r1, [sp, #36]	; 0x24
 8008260:	3401      	adds	r4, #1
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <_dtoa_r+0x398>)
 8008264:	930e      	str	r3, [sp, #56]	; 0x38
 8008266:	2d00      	cmp	r5, #0
 8008268:	d108      	bne.n	800827c <_dtoa_r+0x31c>
 800826a:	9808      	ldr	r0, [sp, #32]
 800826c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800826e:	0032      	movs	r2, r6
 8008270:	003b      	movs	r3, r7
 8008272:	f7f9 f957 	bl	8001524 <__aeabi_ddiv>
 8008276:	9008      	str	r0, [sp, #32]
 8008278:	9109      	str	r1, [sp, #36]	; 0x24
 800827a:	e05a      	b.n	8008332 <_dtoa_r+0x3d2>
 800827c:	2301      	movs	r3, #1
 800827e:	421d      	tst	r5, r3
 8008280:	d009      	beq.n	8008296 <_dtoa_r+0x336>
 8008282:	18e4      	adds	r4, r4, r3
 8008284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008286:	0030      	movs	r0, r6
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	0039      	movs	r1, r7
 800828e:	f7f9 fd43 	bl	8001d18 <__aeabi_dmul>
 8008292:	0006      	movs	r6, r0
 8008294:	000f      	movs	r7, r1
 8008296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008298:	106d      	asrs	r5, r5, #1
 800829a:	3308      	adds	r3, #8
 800829c:	e7e2      	b.n	8008264 <_dtoa_r+0x304>
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	0800a2d2 	.word	0x0800a2d2
 80082a4:	0800a2e9 	.word	0x0800a2e9
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	0000270f 	.word	0x0000270f
 80082b0:	0800a2ce 	.word	0x0800a2ce
 80082b4:	0800a2d1 	.word	0x0800a2d1
 80082b8:	0800a2a1 	.word	0x0800a2a1
 80082bc:	0800a2a2 	.word	0x0800a2a2
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	fffffc01 	.word	0xfffffc01
 80082c8:	3ff80000 	.word	0x3ff80000
 80082cc:	636f4361 	.word	0x636f4361
 80082d0:	3fd287a7 	.word	0x3fd287a7
 80082d4:	8b60c8b3 	.word	0x8b60c8b3
 80082d8:	3fc68a28 	.word	0x3fc68a28
 80082dc:	509f79fb 	.word	0x509f79fb
 80082e0:	3fd34413 	.word	0x3fd34413
 80082e4:	0800a3d8 	.word	0x0800a3d8
 80082e8:	00000432 	.word	0x00000432
 80082ec:	00000412 	.word	0x00000412
 80082f0:	fe100000 	.word	0xfe100000
 80082f4:	0800a341 	.word	0x0800a341
 80082f8:	0800a3b0 	.word	0x0800a3b0
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	2402      	movs	r4, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d016      	beq.n	8008332 <_dtoa_r+0x3d2>
 8008304:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008306:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008308:	220f      	movs	r2, #15
 800830a:	425d      	negs	r5, r3
 800830c:	402a      	ands	r2, r5
 800830e:	4bdd      	ldr	r3, [pc, #884]	; (8008684 <_dtoa_r+0x724>)
 8008310:	00d2      	lsls	r2, r2, #3
 8008312:	189b      	adds	r3, r3, r2
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f7f9 fcfe 	bl	8001d18 <__aeabi_dmul>
 800831c:	2701      	movs	r7, #1
 800831e:	2300      	movs	r3, #0
 8008320:	9008      	str	r0, [sp, #32]
 8008322:	9109      	str	r1, [sp, #36]	; 0x24
 8008324:	4ed8      	ldr	r6, [pc, #864]	; (8008688 <_dtoa_r+0x728>)
 8008326:	112d      	asrs	r5, r5, #4
 8008328:	2d00      	cmp	r5, #0
 800832a:	d000      	beq.n	800832e <_dtoa_r+0x3ce>
 800832c:	e091      	b.n	8008452 <_dtoa_r+0x4f2>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1a1      	bne.n	8008276 <_dtoa_r+0x316>
 8008332:	9e08      	ldr	r6, [sp, #32]
 8008334:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008336:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008338:	2b00      	cmp	r3, #0
 800833a:	d100      	bne.n	800833e <_dtoa_r+0x3de>
 800833c:	e094      	b.n	8008468 <_dtoa_r+0x508>
 800833e:	2200      	movs	r2, #0
 8008340:	0030      	movs	r0, r6
 8008342:	0039      	movs	r1, r7
 8008344:	4bd1      	ldr	r3, [pc, #836]	; (800868c <_dtoa_r+0x72c>)
 8008346:	f7f8 f887 	bl	8000458 <__aeabi_dcmplt>
 800834a:	2800      	cmp	r0, #0
 800834c:	d100      	bne.n	8008350 <_dtoa_r+0x3f0>
 800834e:	e08b      	b.n	8008468 <_dtoa_r+0x508>
 8008350:	9b07      	ldr	r3, [sp, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d100      	bne.n	8008358 <_dtoa_r+0x3f8>
 8008356:	e087      	b.n	8008468 <_dtoa_r+0x508>
 8008358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	dd45      	ble.n	80083ea <_dtoa_r+0x48a>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	3b01      	subs	r3, #1
 8008364:	930e      	str	r3, [sp, #56]	; 0x38
 8008366:	0030      	movs	r0, r6
 8008368:	4bc9      	ldr	r3, [pc, #804]	; (8008690 <_dtoa_r+0x730>)
 800836a:	0039      	movs	r1, r7
 800836c:	f7f9 fcd4 	bl	8001d18 <__aeabi_dmul>
 8008370:	9008      	str	r0, [sp, #32]
 8008372:	9109      	str	r1, [sp, #36]	; 0x24
 8008374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008376:	3401      	adds	r4, #1
 8008378:	0020      	movs	r0, r4
 800837a:	9e08      	ldr	r6, [sp, #32]
 800837c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800837e:	9312      	str	r3, [sp, #72]	; 0x48
 8008380:	f7fa fb62 	bl	8002a48 <__aeabi_i2d>
 8008384:	0032      	movs	r2, r6
 8008386:	003b      	movs	r3, r7
 8008388:	f7f9 fcc6 	bl	8001d18 <__aeabi_dmul>
 800838c:	2200      	movs	r2, #0
 800838e:	4bc1      	ldr	r3, [pc, #772]	; (8008694 <_dtoa_r+0x734>)
 8008390:	f7f8 fd68 	bl	8000e64 <__aeabi_dadd>
 8008394:	4ac0      	ldr	r2, [pc, #768]	; (8008698 <_dtoa_r+0x738>)
 8008396:	9014      	str	r0, [sp, #80]	; 0x50
 8008398:	9115      	str	r1, [sp, #84]	; 0x54
 800839a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800839c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800839e:	4694      	mov	ip, r2
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	9409      	str	r4, [sp, #36]	; 0x24
 80083a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a6:	4463      	add	r3, ip
 80083a8:	9318      	str	r3, [sp, #96]	; 0x60
 80083aa:	9309      	str	r3, [sp, #36]	; 0x24
 80083ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d15e      	bne.n	8008470 <_dtoa_r+0x510>
 80083b2:	2200      	movs	r2, #0
 80083b4:	4bb9      	ldr	r3, [pc, #740]	; (800869c <_dtoa_r+0x73c>)
 80083b6:	0030      	movs	r0, r6
 80083b8:	0039      	movs	r1, r7
 80083ba:	f7f9 ff6f 	bl	800229c <__aeabi_dsub>
 80083be:	9a08      	ldr	r2, [sp, #32]
 80083c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80083c2:	0004      	movs	r4, r0
 80083c4:	000d      	movs	r5, r1
 80083c6:	f7f8 f85b 	bl	8000480 <__aeabi_dcmpgt>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d000      	beq.n	80083d0 <_dtoa_r+0x470>
 80083ce:	e2b3      	b.n	8008938 <_dtoa_r+0x9d8>
 80083d0:	48b3      	ldr	r0, [pc, #716]	; (80086a0 <_dtoa_r+0x740>)
 80083d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80083d4:	4684      	mov	ip, r0
 80083d6:	4461      	add	r1, ip
 80083d8:	000b      	movs	r3, r1
 80083da:	0020      	movs	r0, r4
 80083dc:	0029      	movs	r1, r5
 80083de:	9a08      	ldr	r2, [sp, #32]
 80083e0:	f7f8 f83a 	bl	8000458 <__aeabi_dcmplt>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d000      	beq.n	80083ea <_dtoa_r+0x48a>
 80083e8:	e2a3      	b.n	8008932 <_dtoa_r+0x9d2>
 80083ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80083ee:	9308      	str	r3, [sp, #32]
 80083f0:	9409      	str	r4, [sp, #36]	; 0x24
 80083f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da00      	bge.n	80083fa <_dtoa_r+0x49a>
 80083f8:	e179      	b.n	80086ee <_dtoa_r+0x78e>
 80083fa:	9a03      	ldr	r2, [sp, #12]
 80083fc:	2a0e      	cmp	r2, #14
 80083fe:	dd00      	ble.n	8008402 <_dtoa_r+0x4a2>
 8008400:	e175      	b.n	80086ee <_dtoa_r+0x78e>
 8008402:	4ba0      	ldr	r3, [pc, #640]	; (8008684 <_dtoa_r+0x724>)
 8008404:	00d2      	lsls	r2, r2, #3
 8008406:	189b      	adds	r3, r3, r2
 8008408:	681e      	ldr	r6, [r3, #0]
 800840a:	685f      	ldr	r7, [r3, #4]
 800840c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800840e:	2b00      	cmp	r3, #0
 8008410:	db00      	blt.n	8008414 <_dtoa_r+0x4b4>
 8008412:	e0e5      	b.n	80085e0 <_dtoa_r+0x680>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd00      	ble.n	800841c <_dtoa_r+0x4bc>
 800841a:	e0e1      	b.n	80085e0 <_dtoa_r+0x680>
 800841c:	d000      	beq.n	8008420 <_dtoa_r+0x4c0>
 800841e:	e288      	b.n	8008932 <_dtoa_r+0x9d2>
 8008420:	2200      	movs	r2, #0
 8008422:	0030      	movs	r0, r6
 8008424:	0039      	movs	r1, r7
 8008426:	4b9d      	ldr	r3, [pc, #628]	; (800869c <_dtoa_r+0x73c>)
 8008428:	f7f9 fc76 	bl	8001d18 <__aeabi_dmul>
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008430:	f7f8 f830 	bl	8000494 <__aeabi_dcmpge>
 8008434:	9e07      	ldr	r6, [sp, #28]
 8008436:	0037      	movs	r7, r6
 8008438:	2800      	cmp	r0, #0
 800843a:	d000      	beq.n	800843e <_dtoa_r+0x4de>
 800843c:	e25f      	b.n	80088fe <_dtoa_r+0x99e>
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	9a06      	ldr	r2, [sp, #24]
 8008442:	3301      	adds	r3, #1
 8008444:	9308      	str	r3, [sp, #32]
 8008446:	2331      	movs	r3, #49	; 0x31
 8008448:	7013      	strb	r3, [r2, #0]
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	3301      	adds	r3, #1
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	e25a      	b.n	8008908 <_dtoa_r+0x9a8>
 8008452:	423d      	tst	r5, r7
 8008454:	d005      	beq.n	8008462 <_dtoa_r+0x502>
 8008456:	6832      	ldr	r2, [r6, #0]
 8008458:	6873      	ldr	r3, [r6, #4]
 800845a:	f7f9 fc5d 	bl	8001d18 <__aeabi_dmul>
 800845e:	003b      	movs	r3, r7
 8008460:	3401      	adds	r4, #1
 8008462:	106d      	asrs	r5, r5, #1
 8008464:	3608      	adds	r6, #8
 8008466:	e75f      	b.n	8008328 <_dtoa_r+0x3c8>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	930e      	str	r3, [sp, #56]	; 0x38
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	e783      	b.n	8008378 <_dtoa_r+0x418>
 8008470:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008472:	4b84      	ldr	r3, [pc, #528]	; (8008684 <_dtoa_r+0x724>)
 8008474:	3a01      	subs	r2, #1
 8008476:	00d2      	lsls	r2, r2, #3
 8008478:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800847a:	189b      	adds	r3, r3, r2
 800847c:	9c08      	ldr	r4, [sp, #32]
 800847e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2900      	cmp	r1, #0
 8008486:	d051      	beq.n	800852c <_dtoa_r+0x5cc>
 8008488:	2000      	movs	r0, #0
 800848a:	4986      	ldr	r1, [pc, #536]	; (80086a4 <_dtoa_r+0x744>)
 800848c:	f7f9 f84a 	bl	8001524 <__aeabi_ddiv>
 8008490:	0022      	movs	r2, r4
 8008492:	002b      	movs	r3, r5
 8008494:	f7f9 ff02 	bl	800229c <__aeabi_dsub>
 8008498:	9a06      	ldr	r2, [sp, #24]
 800849a:	0004      	movs	r4, r0
 800849c:	4694      	mov	ip, r2
 800849e:	000d      	movs	r5, r1
 80084a0:	9b06      	ldr	r3, [sp, #24]
 80084a2:	9314      	str	r3, [sp, #80]	; 0x50
 80084a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084a6:	4463      	add	r3, ip
 80084a8:	9318      	str	r3, [sp, #96]	; 0x60
 80084aa:	0039      	movs	r1, r7
 80084ac:	0030      	movs	r0, r6
 80084ae:	f7fa fa95 	bl	80029dc <__aeabi_d2iz>
 80084b2:	9012      	str	r0, [sp, #72]	; 0x48
 80084b4:	f7fa fac8 	bl	8002a48 <__aeabi_i2d>
 80084b8:	0002      	movs	r2, r0
 80084ba:	000b      	movs	r3, r1
 80084bc:	0030      	movs	r0, r6
 80084be:	0039      	movs	r1, r7
 80084c0:	f7f9 feec 	bl	800229c <__aeabi_dsub>
 80084c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084c8:	3301      	adds	r3, #1
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084ce:	0006      	movs	r6, r0
 80084d0:	3330      	adds	r3, #48	; 0x30
 80084d2:	7013      	strb	r3, [r2, #0]
 80084d4:	0022      	movs	r2, r4
 80084d6:	002b      	movs	r3, r5
 80084d8:	000f      	movs	r7, r1
 80084da:	f7f7 ffbd 	bl	8000458 <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d174      	bne.n	80085cc <_dtoa_r+0x66c>
 80084e2:	0032      	movs	r2, r6
 80084e4:	003b      	movs	r3, r7
 80084e6:	2000      	movs	r0, #0
 80084e8:	4968      	ldr	r1, [pc, #416]	; (800868c <_dtoa_r+0x72c>)
 80084ea:	f7f9 fed7 	bl	800229c <__aeabi_dsub>
 80084ee:	0022      	movs	r2, r4
 80084f0:	002b      	movs	r3, r5
 80084f2:	f7f7 ffb1 	bl	8000458 <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d000      	beq.n	80084fc <_dtoa_r+0x59c>
 80084fa:	e0d7      	b.n	80086ac <_dtoa_r+0x74c>
 80084fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80084fe:	9a08      	ldr	r2, [sp, #32]
 8008500:	4293      	cmp	r3, r2
 8008502:	d100      	bne.n	8008506 <_dtoa_r+0x5a6>
 8008504:	e771      	b.n	80083ea <_dtoa_r+0x48a>
 8008506:	2200      	movs	r2, #0
 8008508:	0020      	movs	r0, r4
 800850a:	0029      	movs	r1, r5
 800850c:	4b60      	ldr	r3, [pc, #384]	; (8008690 <_dtoa_r+0x730>)
 800850e:	f7f9 fc03 	bl	8001d18 <__aeabi_dmul>
 8008512:	4b5f      	ldr	r3, [pc, #380]	; (8008690 <_dtoa_r+0x730>)
 8008514:	0004      	movs	r4, r0
 8008516:	000d      	movs	r5, r1
 8008518:	0030      	movs	r0, r6
 800851a:	0039      	movs	r1, r7
 800851c:	2200      	movs	r2, #0
 800851e:	f7f9 fbfb 	bl	8001d18 <__aeabi_dmul>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	0006      	movs	r6, r0
 8008526:	000f      	movs	r7, r1
 8008528:	9314      	str	r3, [sp, #80]	; 0x50
 800852a:	e7be      	b.n	80084aa <_dtoa_r+0x54a>
 800852c:	0020      	movs	r0, r4
 800852e:	0029      	movs	r1, r5
 8008530:	f7f9 fbf2 	bl	8001d18 <__aeabi_dmul>
 8008534:	9a06      	ldr	r2, [sp, #24]
 8008536:	9b06      	ldr	r3, [sp, #24]
 8008538:	4694      	mov	ip, r2
 800853a:	9308      	str	r3, [sp, #32]
 800853c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800853e:	9014      	str	r0, [sp, #80]	; 0x50
 8008540:	9115      	str	r1, [sp, #84]	; 0x54
 8008542:	4463      	add	r3, ip
 8008544:	9319      	str	r3, [sp, #100]	; 0x64
 8008546:	0030      	movs	r0, r6
 8008548:	0039      	movs	r1, r7
 800854a:	f7fa fa47 	bl	80029dc <__aeabi_d2iz>
 800854e:	9018      	str	r0, [sp, #96]	; 0x60
 8008550:	f7fa fa7a 	bl	8002a48 <__aeabi_i2d>
 8008554:	0002      	movs	r2, r0
 8008556:	000b      	movs	r3, r1
 8008558:	0030      	movs	r0, r6
 800855a:	0039      	movs	r1, r7
 800855c:	f7f9 fe9e 	bl	800229c <__aeabi_dsub>
 8008560:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	3630      	adds	r6, #48	; 0x30
 8008566:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008568:	701e      	strb	r6, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	0004      	movs	r4, r0
 800856e:	000d      	movs	r5, r1
 8008570:	9308      	str	r3, [sp, #32]
 8008572:	4293      	cmp	r3, r2
 8008574:	d12d      	bne.n	80085d2 <_dtoa_r+0x672>
 8008576:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008578:	9915      	ldr	r1, [sp, #84]	; 0x54
 800857a:	9a06      	ldr	r2, [sp, #24]
 800857c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800857e:	4694      	mov	ip, r2
 8008580:	4463      	add	r3, ip
 8008582:	2200      	movs	r2, #0
 8008584:	9308      	str	r3, [sp, #32]
 8008586:	4b47      	ldr	r3, [pc, #284]	; (80086a4 <_dtoa_r+0x744>)
 8008588:	f7f8 fc6c 	bl	8000e64 <__aeabi_dadd>
 800858c:	0002      	movs	r2, r0
 800858e:	000b      	movs	r3, r1
 8008590:	0020      	movs	r0, r4
 8008592:	0029      	movs	r1, r5
 8008594:	f7f7 ff74 	bl	8000480 <__aeabi_dcmpgt>
 8008598:	2800      	cmp	r0, #0
 800859a:	d000      	beq.n	800859e <_dtoa_r+0x63e>
 800859c:	e086      	b.n	80086ac <_dtoa_r+0x74c>
 800859e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085a2:	2000      	movs	r0, #0
 80085a4:	493f      	ldr	r1, [pc, #252]	; (80086a4 <_dtoa_r+0x744>)
 80085a6:	f7f9 fe79 	bl	800229c <__aeabi_dsub>
 80085aa:	0002      	movs	r2, r0
 80085ac:	000b      	movs	r3, r1
 80085ae:	0020      	movs	r0, r4
 80085b0:	0029      	movs	r1, r5
 80085b2:	f7f7 ff51 	bl	8000458 <__aeabi_dcmplt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d100      	bne.n	80085bc <_dtoa_r+0x65c>
 80085ba:	e716      	b.n	80083ea <_dtoa_r+0x48a>
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	001a      	movs	r2, r3
 80085c0:	3a01      	subs	r2, #1
 80085c2:	9208      	str	r2, [sp, #32]
 80085c4:	7812      	ldrb	r2, [r2, #0]
 80085c6:	2a30      	cmp	r2, #48	; 0x30
 80085c8:	d0f8      	beq.n	80085bc <_dtoa_r+0x65c>
 80085ca:	9308      	str	r3, [sp, #32]
 80085cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	e046      	b.n	8008660 <_dtoa_r+0x700>
 80085d2:	2200      	movs	r2, #0
 80085d4:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <_dtoa_r+0x730>)
 80085d6:	f7f9 fb9f 	bl	8001d18 <__aeabi_dmul>
 80085da:	0006      	movs	r6, r0
 80085dc:	000f      	movs	r7, r1
 80085de:	e7b2      	b.n	8008546 <_dtoa_r+0x5e6>
 80085e0:	9b06      	ldr	r3, [sp, #24]
 80085e2:	9a06      	ldr	r2, [sp, #24]
 80085e4:	930a      	str	r3, [sp, #40]	; 0x28
 80085e6:	9b07      	ldr	r3, [sp, #28]
 80085e8:	9c08      	ldr	r4, [sp, #32]
 80085ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085ec:	3b01      	subs	r3, #1
 80085ee:	189b      	adds	r3, r3, r2
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	0032      	movs	r2, r6
 80085f4:	003b      	movs	r3, r7
 80085f6:	0020      	movs	r0, r4
 80085f8:	0029      	movs	r1, r5
 80085fa:	f7f8 ff93 	bl	8001524 <__aeabi_ddiv>
 80085fe:	f7fa f9ed 	bl	80029dc <__aeabi_d2iz>
 8008602:	9007      	str	r0, [sp, #28]
 8008604:	f7fa fa20 	bl	8002a48 <__aeabi_i2d>
 8008608:	0032      	movs	r2, r6
 800860a:	003b      	movs	r3, r7
 800860c:	f7f9 fb84 	bl	8001d18 <__aeabi_dmul>
 8008610:	0002      	movs	r2, r0
 8008612:	000b      	movs	r3, r1
 8008614:	0020      	movs	r0, r4
 8008616:	0029      	movs	r1, r5
 8008618:	f7f9 fe40 	bl	800229c <__aeabi_dsub>
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	001a      	movs	r2, r3
 8008620:	3201      	adds	r2, #1
 8008622:	920a      	str	r2, [sp, #40]	; 0x28
 8008624:	9208      	str	r2, [sp, #32]
 8008626:	9a07      	ldr	r2, [sp, #28]
 8008628:	3230      	adds	r2, #48	; 0x30
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d14f      	bne.n	80086d2 <_dtoa_r+0x772>
 8008632:	0002      	movs	r2, r0
 8008634:	000b      	movs	r3, r1
 8008636:	f7f8 fc15 	bl	8000e64 <__aeabi_dadd>
 800863a:	0032      	movs	r2, r6
 800863c:	003b      	movs	r3, r7
 800863e:	0004      	movs	r4, r0
 8008640:	000d      	movs	r5, r1
 8008642:	f7f7 ff1d 	bl	8000480 <__aeabi_dcmpgt>
 8008646:	2800      	cmp	r0, #0
 8008648:	d12e      	bne.n	80086a8 <_dtoa_r+0x748>
 800864a:	0032      	movs	r2, r6
 800864c:	003b      	movs	r3, r7
 800864e:	0020      	movs	r0, r4
 8008650:	0029      	movs	r1, r5
 8008652:	f7f7 fefb 	bl	800044c <__aeabi_dcmpeq>
 8008656:	2800      	cmp	r0, #0
 8008658:	d002      	beq.n	8008660 <_dtoa_r+0x700>
 800865a:	9b07      	ldr	r3, [sp, #28]
 800865c:	07de      	lsls	r6, r3, #31
 800865e:	d423      	bmi.n	80086a8 <_dtoa_r+0x748>
 8008660:	9905      	ldr	r1, [sp, #20]
 8008662:	9804      	ldr	r0, [sp, #16]
 8008664:	f000 fbd6 	bl	8008e14 <_Bfree>
 8008668:	2300      	movs	r3, #0
 800866a:	9a08      	ldr	r2, [sp, #32]
 800866c:	7013      	strb	r3, [r2, #0]
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008672:	3301      	adds	r3, #1
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008678:	2b00      	cmp	r3, #0
 800867a:	d100      	bne.n	800867e <_dtoa_r+0x71e>
 800867c:	e4ba      	b.n	8007ff4 <_dtoa_r+0x94>
 800867e:	9a08      	ldr	r2, [sp, #32]
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e4b7      	b.n	8007ff4 <_dtoa_r+0x94>
 8008684:	0800a3d8 	.word	0x0800a3d8
 8008688:	0800a3b0 	.word	0x0800a3b0
 800868c:	3ff00000 	.word	0x3ff00000
 8008690:	40240000 	.word	0x40240000
 8008694:	401c0000 	.word	0x401c0000
 8008698:	fcc00000 	.word	0xfcc00000
 800869c:	40140000 	.word	0x40140000
 80086a0:	7cc00000 	.word	0x7cc00000
 80086a4:	3fe00000 	.word	0x3fe00000
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	930e      	str	r3, [sp, #56]	; 0x38
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	9308      	str	r3, [sp, #32]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	2a39      	cmp	r2, #57	; 0x39
 80086b6:	d108      	bne.n	80086ca <_dtoa_r+0x76a>
 80086b8:	9a06      	ldr	r2, [sp, #24]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d1f7      	bne.n	80086ae <_dtoa_r+0x74e>
 80086be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086c0:	9906      	ldr	r1, [sp, #24]
 80086c2:	3201      	adds	r2, #1
 80086c4:	920e      	str	r2, [sp, #56]	; 0x38
 80086c6:	2230      	movs	r2, #48	; 0x30
 80086c8:	700a      	strb	r2, [r1, #0]
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	3201      	adds	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	e77c      	b.n	80085cc <_dtoa_r+0x66c>
 80086d2:	2200      	movs	r2, #0
 80086d4:	4ba9      	ldr	r3, [pc, #676]	; (800897c <_dtoa_r+0xa1c>)
 80086d6:	f7f9 fb1f 	bl	8001d18 <__aeabi_dmul>
 80086da:	2200      	movs	r2, #0
 80086dc:	2300      	movs	r3, #0
 80086de:	0004      	movs	r4, r0
 80086e0:	000d      	movs	r5, r1
 80086e2:	f7f7 feb3 	bl	800044c <__aeabi_dcmpeq>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d100      	bne.n	80086ec <_dtoa_r+0x78c>
 80086ea:	e782      	b.n	80085f2 <_dtoa_r+0x692>
 80086ec:	e7b8      	b.n	8008660 <_dtoa_r+0x700>
 80086ee:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80086f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80086f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	d012      	beq.n	800871e <_dtoa_r+0x7be>
 80086f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80086fa:	2a01      	cmp	r2, #1
 80086fc:	dc6e      	bgt.n	80087dc <_dtoa_r+0x87c>
 80086fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008700:	2a00      	cmp	r2, #0
 8008702:	d065      	beq.n	80087d0 <_dtoa_r+0x870>
 8008704:	4a9e      	ldr	r2, [pc, #632]	; (8008980 <_dtoa_r+0xa20>)
 8008706:	189b      	adds	r3, r3, r2
 8008708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800870a:	2101      	movs	r1, #1
 800870c:	18d2      	adds	r2, r2, r3
 800870e:	920a      	str	r2, [sp, #40]	; 0x28
 8008710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008712:	9804      	ldr	r0, [sp, #16]
 8008714:	18d3      	adds	r3, r2, r3
 8008716:	930c      	str	r3, [sp, #48]	; 0x30
 8008718:	f000 fc2c 	bl	8008f74 <__i2b>
 800871c:	0007      	movs	r7, r0
 800871e:	2c00      	cmp	r4, #0
 8008720:	d00e      	beq.n	8008740 <_dtoa_r+0x7e0>
 8008722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd0b      	ble.n	8008740 <_dtoa_r+0x7e0>
 8008728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800872a:	0023      	movs	r3, r4
 800872c:	4294      	cmp	r4, r2
 800872e:	dd00      	ble.n	8008732 <_dtoa_r+0x7d2>
 8008730:	0013      	movs	r3, r2
 8008732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008734:	1ae4      	subs	r4, r4, r3
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	920a      	str	r2, [sp, #40]	; 0x28
 800873a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	930c      	str	r3, [sp, #48]	; 0x30
 8008740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01e      	beq.n	8008784 <_dtoa_r+0x824>
 8008746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d05c      	beq.n	8008806 <_dtoa_r+0x8a6>
 800874c:	2d00      	cmp	r5, #0
 800874e:	dd10      	ble.n	8008772 <_dtoa_r+0x812>
 8008750:	0039      	movs	r1, r7
 8008752:	002a      	movs	r2, r5
 8008754:	9804      	ldr	r0, [sp, #16]
 8008756:	f000 fcd5 	bl	8009104 <__pow5mult>
 800875a:	9a05      	ldr	r2, [sp, #20]
 800875c:	0001      	movs	r1, r0
 800875e:	0007      	movs	r7, r0
 8008760:	9804      	ldr	r0, [sp, #16]
 8008762:	f000 fc1f 	bl	8008fa4 <__multiply>
 8008766:	0006      	movs	r6, r0
 8008768:	9905      	ldr	r1, [sp, #20]
 800876a:	9804      	ldr	r0, [sp, #16]
 800876c:	f000 fb52 	bl	8008e14 <_Bfree>
 8008770:	9605      	str	r6, [sp, #20]
 8008772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008774:	1b5a      	subs	r2, r3, r5
 8008776:	42ab      	cmp	r3, r5
 8008778:	d004      	beq.n	8008784 <_dtoa_r+0x824>
 800877a:	9905      	ldr	r1, [sp, #20]
 800877c:	9804      	ldr	r0, [sp, #16]
 800877e:	f000 fcc1 	bl	8009104 <__pow5mult>
 8008782:	9005      	str	r0, [sp, #20]
 8008784:	2101      	movs	r1, #1
 8008786:	9804      	ldr	r0, [sp, #16]
 8008788:	f000 fbf4 	bl	8008f74 <__i2b>
 800878c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800878e:	0006      	movs	r6, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	dd3a      	ble.n	800880a <_dtoa_r+0x8aa>
 8008794:	001a      	movs	r2, r3
 8008796:	0001      	movs	r1, r0
 8008798:	9804      	ldr	r0, [sp, #16]
 800879a:	f000 fcb3 	bl	8009104 <__pow5mult>
 800879e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087a0:	0006      	movs	r6, r0
 80087a2:	2500      	movs	r5, #0
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	dc38      	bgt.n	800881a <_dtoa_r+0x8ba>
 80087a8:	2500      	movs	r5, #0
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	d130      	bne.n	8008812 <_dtoa_r+0x8b2>
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	031b      	lsls	r3, r3, #12
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	d12c      	bne.n	8008812 <_dtoa_r+0x8b2>
 80087b8:	4b72      	ldr	r3, [pc, #456]	; (8008984 <_dtoa_r+0xa24>)
 80087ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087bc:	4213      	tst	r3, r2
 80087be:	d028      	beq.n	8008812 <_dtoa_r+0x8b2>
 80087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c2:	3501      	adds	r5, #1
 80087c4:	3301      	adds	r3, #1
 80087c6:	930a      	str	r3, [sp, #40]	; 0x28
 80087c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ca:	3301      	adds	r3, #1
 80087cc:	930c      	str	r3, [sp, #48]	; 0x30
 80087ce:	e020      	b.n	8008812 <_dtoa_r+0x8b2>
 80087d0:	2336      	movs	r3, #54	; 0x36
 80087d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80087d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	e795      	b.n	8008708 <_dtoa_r+0x7a8>
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	1e5d      	subs	r5, r3, #1
 80087e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e2:	42ab      	cmp	r3, r5
 80087e4:	db07      	blt.n	80087f6 <_dtoa_r+0x896>
 80087e6:	1b5d      	subs	r5, r3, r5
 80087e8:	9b07      	ldr	r3, [sp, #28]
 80087ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da8b      	bge.n	8008708 <_dtoa_r+0x7a8>
 80087f0:	1ae4      	subs	r4, r4, r3
 80087f2:	2300      	movs	r3, #0
 80087f4:	e788      	b.n	8008708 <_dtoa_r+0x7a8>
 80087f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087fa:	1aeb      	subs	r3, r5, r3
 80087fc:	18d3      	adds	r3, r2, r3
 80087fe:	950d      	str	r5, [sp, #52]	; 0x34
 8008800:	9313      	str	r3, [sp, #76]	; 0x4c
 8008802:	2500      	movs	r5, #0
 8008804:	e7f0      	b.n	80087e8 <_dtoa_r+0x888>
 8008806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008808:	e7b7      	b.n	800877a <_dtoa_r+0x81a>
 800880a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800880c:	2500      	movs	r5, #0
 800880e:	2b01      	cmp	r3, #1
 8008810:	ddca      	ble.n	80087a8 <_dtoa_r+0x848>
 8008812:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008814:	2001      	movs	r0, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d008      	beq.n	800882c <_dtoa_r+0x8cc>
 800881a:	6933      	ldr	r3, [r6, #16]
 800881c:	3303      	adds	r3, #3
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	18f3      	adds	r3, r6, r3
 8008822:	6858      	ldr	r0, [r3, #4]
 8008824:	f000 fb5e 	bl	8008ee4 <__hi0bits>
 8008828:	2320      	movs	r3, #32
 800882a:	1a18      	subs	r0, r3, r0
 800882c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800882e:	1818      	adds	r0, r3, r0
 8008830:	0002      	movs	r2, r0
 8008832:	231f      	movs	r3, #31
 8008834:	401a      	ands	r2, r3
 8008836:	4218      	tst	r0, r3
 8008838:	d047      	beq.n	80088ca <_dtoa_r+0x96a>
 800883a:	3301      	adds	r3, #1
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	2b04      	cmp	r3, #4
 8008840:	dd3f      	ble.n	80088c2 <_dtoa_r+0x962>
 8008842:	231c      	movs	r3, #28
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008848:	18e4      	adds	r4, r4, r3
 800884a:	18d2      	adds	r2, r2, r3
 800884c:	920a      	str	r2, [sp, #40]	; 0x28
 800884e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008850:	18d3      	adds	r3, r2, r3
 8008852:	930c      	str	r3, [sp, #48]	; 0x30
 8008854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	dd05      	ble.n	8008866 <_dtoa_r+0x906>
 800885a:	001a      	movs	r2, r3
 800885c:	9905      	ldr	r1, [sp, #20]
 800885e:	9804      	ldr	r0, [sp, #16]
 8008860:	f000 fcac 	bl	80091bc <__lshift>
 8008864:	9005      	str	r0, [sp, #20]
 8008866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	dd05      	ble.n	8008878 <_dtoa_r+0x918>
 800886c:	0031      	movs	r1, r6
 800886e:	001a      	movs	r2, r3
 8008870:	9804      	ldr	r0, [sp, #16]
 8008872:	f000 fca3 	bl	80091bc <__lshift>
 8008876:	0006      	movs	r6, r0
 8008878:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800887a:	2b00      	cmp	r3, #0
 800887c:	d027      	beq.n	80088ce <_dtoa_r+0x96e>
 800887e:	0031      	movs	r1, r6
 8008880:	9805      	ldr	r0, [sp, #20]
 8008882:	f000 fd09 	bl	8009298 <__mcmp>
 8008886:	2800      	cmp	r0, #0
 8008888:	da21      	bge.n	80088ce <_dtoa_r+0x96e>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	220a      	movs	r2, #10
 800888e:	3b01      	subs	r3, #1
 8008890:	9303      	str	r3, [sp, #12]
 8008892:	9905      	ldr	r1, [sp, #20]
 8008894:	2300      	movs	r3, #0
 8008896:	9804      	ldr	r0, [sp, #16]
 8008898:	f000 fae0 	bl	8008e5c <__multadd>
 800889c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800889e:	9005      	str	r0, [sp, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d100      	bne.n	80088a6 <_dtoa_r+0x946>
 80088a4:	e15d      	b.n	8008b62 <_dtoa_r+0xc02>
 80088a6:	2300      	movs	r3, #0
 80088a8:	0039      	movs	r1, r7
 80088aa:	220a      	movs	r2, #10
 80088ac:	9804      	ldr	r0, [sp, #16]
 80088ae:	f000 fad5 	bl	8008e5c <__multadd>
 80088b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b4:	0007      	movs	r7, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dc49      	bgt.n	800894e <_dtoa_r+0x9ee>
 80088ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088bc:	2b02      	cmp	r3, #2
 80088be:	dc0e      	bgt.n	80088de <_dtoa_r+0x97e>
 80088c0:	e045      	b.n	800894e <_dtoa_r+0x9ee>
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d0c6      	beq.n	8008854 <_dtoa_r+0x8f4>
 80088c6:	331c      	adds	r3, #28
 80088c8:	e7bd      	b.n	8008846 <_dtoa_r+0x8e6>
 80088ca:	0013      	movs	r3, r2
 80088cc:	e7fb      	b.n	80088c6 <_dtoa_r+0x966>
 80088ce:	9b07      	ldr	r3, [sp, #28]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dc36      	bgt.n	8008942 <_dtoa_r+0x9e2>
 80088d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	dd33      	ble.n	8008942 <_dtoa_r+0x9e2>
 80088da:	9b07      	ldr	r3, [sp, #28]
 80088dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80088de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10c      	bne.n	80088fe <_dtoa_r+0x99e>
 80088e4:	0031      	movs	r1, r6
 80088e6:	2205      	movs	r2, #5
 80088e8:	9804      	ldr	r0, [sp, #16]
 80088ea:	f000 fab7 	bl	8008e5c <__multadd>
 80088ee:	0006      	movs	r6, r0
 80088f0:	0001      	movs	r1, r0
 80088f2:	9805      	ldr	r0, [sp, #20]
 80088f4:	f000 fcd0 	bl	8009298 <__mcmp>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	dd00      	ble.n	80088fe <_dtoa_r+0x99e>
 80088fc:	e59f      	b.n	800843e <_dtoa_r+0x4de>
 80088fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008900:	43db      	mvns	r3, r3
 8008902:	9303      	str	r3, [sp, #12]
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	9308      	str	r3, [sp, #32]
 8008908:	2500      	movs	r5, #0
 800890a:	0031      	movs	r1, r6
 800890c:	9804      	ldr	r0, [sp, #16]
 800890e:	f000 fa81 	bl	8008e14 <_Bfree>
 8008912:	2f00      	cmp	r7, #0
 8008914:	d100      	bne.n	8008918 <_dtoa_r+0x9b8>
 8008916:	e6a3      	b.n	8008660 <_dtoa_r+0x700>
 8008918:	2d00      	cmp	r5, #0
 800891a:	d005      	beq.n	8008928 <_dtoa_r+0x9c8>
 800891c:	42bd      	cmp	r5, r7
 800891e:	d003      	beq.n	8008928 <_dtoa_r+0x9c8>
 8008920:	0029      	movs	r1, r5
 8008922:	9804      	ldr	r0, [sp, #16]
 8008924:	f000 fa76 	bl	8008e14 <_Bfree>
 8008928:	0039      	movs	r1, r7
 800892a:	9804      	ldr	r0, [sp, #16]
 800892c:	f000 fa72 	bl	8008e14 <_Bfree>
 8008930:	e696      	b.n	8008660 <_dtoa_r+0x700>
 8008932:	2600      	movs	r6, #0
 8008934:	0037      	movs	r7, r6
 8008936:	e7e2      	b.n	80088fe <_dtoa_r+0x99e>
 8008938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800893a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	0037      	movs	r7, r6
 8008940:	e57d      	b.n	800843e <_dtoa_r+0x4de>
 8008942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d100      	bne.n	800894a <_dtoa_r+0x9ea>
 8008948:	e0c3      	b.n	8008ad2 <_dtoa_r+0xb72>
 800894a:	9b07      	ldr	r3, [sp, #28]
 800894c:	930b      	str	r3, [sp, #44]	; 0x2c
 800894e:	2c00      	cmp	r4, #0
 8008950:	dd05      	ble.n	800895e <_dtoa_r+0x9fe>
 8008952:	0039      	movs	r1, r7
 8008954:	0022      	movs	r2, r4
 8008956:	9804      	ldr	r0, [sp, #16]
 8008958:	f000 fc30 	bl	80091bc <__lshift>
 800895c:	0007      	movs	r7, r0
 800895e:	0038      	movs	r0, r7
 8008960:	2d00      	cmp	r5, #0
 8008962:	d024      	beq.n	80089ae <_dtoa_r+0xa4e>
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	9804      	ldr	r0, [sp, #16]
 8008968:	f000 fa10 	bl	8008d8c <_Balloc>
 800896c:	1e04      	subs	r4, r0, #0
 800896e:	d111      	bne.n	8008994 <_dtoa_r+0xa34>
 8008970:	0022      	movs	r2, r4
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <_dtoa_r+0xa28>)
 8008974:	4805      	ldr	r0, [pc, #20]	; (800898c <_dtoa_r+0xa2c>)
 8008976:	4906      	ldr	r1, [pc, #24]	; (8008990 <_dtoa_r+0xa30>)
 8008978:	f7ff fb07 	bl	8007f8a <_dtoa_r+0x2a>
 800897c:	40240000 	.word	0x40240000
 8008980:	00000433 	.word	0x00000433
 8008984:	7ff00000 	.word	0x7ff00000
 8008988:	0800a341 	.word	0x0800a341
 800898c:	0800a2e9 	.word	0x0800a2e9
 8008990:	000002ef 	.word	0x000002ef
 8008994:	0039      	movs	r1, r7
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	310c      	adds	r1, #12
 800899a:	3202      	adds	r2, #2
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	300c      	adds	r0, #12
 80089a0:	f7ff fa46 	bl	8007e30 <memcpy>
 80089a4:	2201      	movs	r2, #1
 80089a6:	0021      	movs	r1, r4
 80089a8:	9804      	ldr	r0, [sp, #16]
 80089aa:	f000 fc07 	bl	80091bc <__lshift>
 80089ae:	9b06      	ldr	r3, [sp, #24]
 80089b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	2201      	movs	r2, #1
 80089ba:	003d      	movs	r5, r7
 80089bc:	0007      	movs	r7, r0
 80089be:	930e      	str	r3, [sp, #56]	; 0x38
 80089c0:	9b08      	ldr	r3, [sp, #32]
 80089c2:	4013      	ands	r3, r2
 80089c4:	930d      	str	r3, [sp, #52]	; 0x34
 80089c6:	0031      	movs	r1, r6
 80089c8:	9805      	ldr	r0, [sp, #20]
 80089ca:	f7ff fa3a 	bl	8007e42 <quorem>
 80089ce:	0029      	movs	r1, r5
 80089d0:	0004      	movs	r4, r0
 80089d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80089d4:	9805      	ldr	r0, [sp, #20]
 80089d6:	f000 fc5f 	bl	8009298 <__mcmp>
 80089da:	003a      	movs	r2, r7
 80089dc:	900c      	str	r0, [sp, #48]	; 0x30
 80089de:	0031      	movs	r1, r6
 80089e0:	9804      	ldr	r0, [sp, #16]
 80089e2:	f000 fc75 	bl	80092d0 <__mdiff>
 80089e6:	2201      	movs	r2, #1
 80089e8:	68c3      	ldr	r3, [r0, #12]
 80089ea:	3430      	adds	r4, #48	; 0x30
 80089ec:	9008      	str	r0, [sp, #32]
 80089ee:	920a      	str	r2, [sp, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <_dtoa_r+0xa9e>
 80089f4:	0001      	movs	r1, r0
 80089f6:	9805      	ldr	r0, [sp, #20]
 80089f8:	f000 fc4e 	bl	8009298 <__mcmp>
 80089fc:	900a      	str	r0, [sp, #40]	; 0x28
 80089fe:	9908      	ldr	r1, [sp, #32]
 8008a00:	9804      	ldr	r0, [sp, #16]
 8008a02:	f000 fa07 	bl	8008e14 <_Bfree>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	9308      	str	r3, [sp, #32]
 8008a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a10:	4313      	orrs	r3, r2
 8008a12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a14:	4313      	orrs	r3, r2
 8008a16:	d109      	bne.n	8008a2c <_dtoa_r+0xacc>
 8008a18:	2c39      	cmp	r4, #57	; 0x39
 8008a1a:	d022      	beq.n	8008a62 <_dtoa_r+0xb02>
 8008a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd01      	ble.n	8008a26 <_dtoa_r+0xac6>
 8008a22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008a24:	3431      	adds	r4, #49	; 0x31
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	701c      	strb	r4, [r3, #0]
 8008a2a:	e76e      	b.n	800890a <_dtoa_r+0x9aa>
 8008a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	db04      	blt.n	8008a3c <_dtoa_r+0xadc>
 8008a32:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a34:	4313      	orrs	r3, r2
 8008a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	d11e      	bne.n	8008a7a <_dtoa_r+0xb1a>
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	ddf1      	ble.n	8008a26 <_dtoa_r+0xac6>
 8008a42:	9905      	ldr	r1, [sp, #20]
 8008a44:	2201      	movs	r2, #1
 8008a46:	9804      	ldr	r0, [sp, #16]
 8008a48:	f000 fbb8 	bl	80091bc <__lshift>
 8008a4c:	0031      	movs	r1, r6
 8008a4e:	9005      	str	r0, [sp, #20]
 8008a50:	f000 fc22 	bl	8009298 <__mcmp>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	dc02      	bgt.n	8008a5e <_dtoa_r+0xafe>
 8008a58:	d1e5      	bne.n	8008a26 <_dtoa_r+0xac6>
 8008a5a:	07e3      	lsls	r3, r4, #31
 8008a5c:	d5e3      	bpl.n	8008a26 <_dtoa_r+0xac6>
 8008a5e:	2c39      	cmp	r4, #57	; 0x39
 8008a60:	d1df      	bne.n	8008a22 <_dtoa_r+0xac2>
 8008a62:	2339      	movs	r3, #57	; 0x39
 8008a64:	9a07      	ldr	r2, [sp, #28]
 8008a66:	7013      	strb	r3, [r2, #0]
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	9308      	str	r3, [sp, #32]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	781a      	ldrb	r2, [r3, #0]
 8008a70:	2a39      	cmp	r2, #57	; 0x39
 8008a72:	d063      	beq.n	8008b3c <_dtoa_r+0xbdc>
 8008a74:	3201      	adds	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e747      	b.n	800890a <_dtoa_r+0x9aa>
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dd03      	ble.n	8008a88 <_dtoa_r+0xb28>
 8008a80:	2c39      	cmp	r4, #57	; 0x39
 8008a82:	d0ee      	beq.n	8008a62 <_dtoa_r+0xb02>
 8008a84:	3401      	adds	r4, #1
 8008a86:	e7ce      	b.n	8008a26 <_dtoa_r+0xac6>
 8008a88:	9b07      	ldr	r3, [sp, #28]
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	701c      	strb	r4, [r3, #0]
 8008a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d03e      	beq.n	8008b12 <_dtoa_r+0xbb2>
 8008a94:	2300      	movs	r3, #0
 8008a96:	220a      	movs	r2, #10
 8008a98:	9905      	ldr	r1, [sp, #20]
 8008a9a:	9804      	ldr	r0, [sp, #16]
 8008a9c:	f000 f9de 	bl	8008e5c <__multadd>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9005      	str	r0, [sp, #20]
 8008aa4:	220a      	movs	r2, #10
 8008aa6:	0029      	movs	r1, r5
 8008aa8:	9804      	ldr	r0, [sp, #16]
 8008aaa:	42bd      	cmp	r5, r7
 8008aac:	d106      	bne.n	8008abc <_dtoa_r+0xb5c>
 8008aae:	f000 f9d5 	bl	8008e5c <__multadd>
 8008ab2:	0005      	movs	r5, r0
 8008ab4:	0007      	movs	r7, r0
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	9307      	str	r3, [sp, #28]
 8008aba:	e784      	b.n	80089c6 <_dtoa_r+0xa66>
 8008abc:	f000 f9ce 	bl	8008e5c <__multadd>
 8008ac0:	0039      	movs	r1, r7
 8008ac2:	0005      	movs	r5, r0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	220a      	movs	r2, #10
 8008ac8:	9804      	ldr	r0, [sp, #16]
 8008aca:	f000 f9c7 	bl	8008e5c <__multadd>
 8008ace:	0007      	movs	r7, r0
 8008ad0:	e7f1      	b.n	8008ab6 <_dtoa_r+0xb56>
 8008ad2:	9b07      	ldr	r3, [sp, #28]
 8008ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	0031      	movs	r1, r6
 8008ada:	9805      	ldr	r0, [sp, #20]
 8008adc:	f7ff f9b1 	bl	8007e42 <quorem>
 8008ae0:	9b06      	ldr	r3, [sp, #24]
 8008ae2:	3030      	adds	r0, #48	; 0x30
 8008ae4:	5558      	strb	r0, [r3, r5]
 8008ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae8:	3501      	adds	r5, #1
 8008aea:	0004      	movs	r4, r0
 8008aec:	42ab      	cmp	r3, r5
 8008aee:	dd07      	ble.n	8008b00 <_dtoa_r+0xba0>
 8008af0:	2300      	movs	r3, #0
 8008af2:	220a      	movs	r2, #10
 8008af4:	9905      	ldr	r1, [sp, #20]
 8008af6:	9804      	ldr	r0, [sp, #16]
 8008af8:	f000 f9b0 	bl	8008e5c <__multadd>
 8008afc:	9005      	str	r0, [sp, #20]
 8008afe:	e7eb      	b.n	8008ad8 <_dtoa_r+0xb78>
 8008b00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b02:	2301      	movs	r3, #1
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	dd00      	ble.n	8008b0a <_dtoa_r+0xbaa>
 8008b08:	0013      	movs	r3, r2
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	9a06      	ldr	r2, [sp, #24]
 8008b0e:	18d3      	adds	r3, r2, r3
 8008b10:	9308      	str	r3, [sp, #32]
 8008b12:	9905      	ldr	r1, [sp, #20]
 8008b14:	2201      	movs	r2, #1
 8008b16:	9804      	ldr	r0, [sp, #16]
 8008b18:	f000 fb50 	bl	80091bc <__lshift>
 8008b1c:	0031      	movs	r1, r6
 8008b1e:	9005      	str	r0, [sp, #20]
 8008b20:	f000 fbba 	bl	8009298 <__mcmp>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	dc9f      	bgt.n	8008a68 <_dtoa_r+0xb08>
 8008b28:	d101      	bne.n	8008b2e <_dtoa_r+0xbce>
 8008b2a:	07e4      	lsls	r4, r4, #31
 8008b2c:	d49c      	bmi.n	8008a68 <_dtoa_r+0xb08>
 8008b2e:	9b08      	ldr	r3, [sp, #32]
 8008b30:	9308      	str	r3, [sp, #32]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	2a30      	cmp	r2, #48	; 0x30
 8008b38:	d0fa      	beq.n	8008b30 <_dtoa_r+0xbd0>
 8008b3a:	e6e6      	b.n	800890a <_dtoa_r+0x9aa>
 8008b3c:	9a06      	ldr	r2, [sp, #24]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d193      	bne.n	8008a6a <_dtoa_r+0xb0a>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	2331      	movs	r3, #49	; 0x31
 8008b4a:	7013      	strb	r3, [r2, #0]
 8008b4c:	e6dd      	b.n	800890a <_dtoa_r+0x9aa>
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <_dtoa_r+0xc14>)
 8008b50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <_dtoa_r+0xc18>)
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	d001      	beq.n	8008b5e <_dtoa_r+0xbfe>
 8008b5a:	f7ff fa49 	bl	8007ff0 <_dtoa_r+0x90>
 8008b5e:	f7ff fa49 	bl	8007ff4 <_dtoa_r+0x94>
 8008b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dcb6      	bgt.n	8008ad6 <_dtoa_r+0xb76>
 8008b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	dd00      	ble.n	8008b70 <_dtoa_r+0xc10>
 8008b6e:	e6b6      	b.n	80088de <_dtoa_r+0x97e>
 8008b70:	e7b1      	b.n	8008ad6 <_dtoa_r+0xb76>
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	0800a2c5 	.word	0x0800a2c5
 8008b78:	0800a2cd 	.word	0x0800a2cd

08008b7c <_free_r>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	0005      	movs	r5, r0
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d010      	beq.n	8008ba6 <_free_r+0x2a>
 8008b84:	1f0c      	subs	r4, r1, #4
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	da00      	bge.n	8008b8e <_free_r+0x12>
 8008b8c:	18e4      	adds	r4, r4, r3
 8008b8e:	0028      	movs	r0, r5
 8008b90:	f000 f8ec 	bl	8008d6c <__malloc_lock>
 8008b94:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <_free_r+0x90>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <_free_r+0x2c>
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6014      	str	r4, [r2, #0]
 8008ba0:	0028      	movs	r0, r5
 8008ba2:	f000 f8eb 	bl	8008d7c <__malloc_unlock>
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d908      	bls.n	8008bbe <_free_r+0x42>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	1821      	adds	r1, r4, r0
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	d1f3      	bne.n	8008b9c <_free_r+0x20>
 8008bb4:	6819      	ldr	r1, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	1809      	adds	r1, r1, r0
 8008bba:	6021      	str	r1, [r4, #0]
 8008bbc:	e7ee      	b.n	8008b9c <_free_r+0x20>
 8008bbe:	001a      	movs	r2, r3
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <_free_r+0x4e>
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	d9f9      	bls.n	8008bbe <_free_r+0x42>
 8008bca:	6811      	ldr	r1, [r2, #0]
 8008bcc:	1850      	adds	r0, r2, r1
 8008bce:	42a0      	cmp	r0, r4
 8008bd0:	d10b      	bne.n	8008bea <_free_r+0x6e>
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	1809      	adds	r1, r1, r0
 8008bd6:	1850      	adds	r0, r2, r1
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	4283      	cmp	r3, r0
 8008bdc:	d1e0      	bne.n	8008ba0 <_free_r+0x24>
 8008bde:	6818      	ldr	r0, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	1841      	adds	r1, r0, r1
 8008be4:	6011      	str	r1, [r2, #0]
 8008be6:	6053      	str	r3, [r2, #4]
 8008be8:	e7da      	b.n	8008ba0 <_free_r+0x24>
 8008bea:	42a0      	cmp	r0, r4
 8008bec:	d902      	bls.n	8008bf4 <_free_r+0x78>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	e7d5      	b.n	8008ba0 <_free_r+0x24>
 8008bf4:	6820      	ldr	r0, [r4, #0]
 8008bf6:	1821      	adds	r1, r4, r0
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	d103      	bne.n	8008c04 <_free_r+0x88>
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	1809      	adds	r1, r1, r0
 8008c02:	6021      	str	r1, [r4, #0]
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	6054      	str	r4, [r2, #4]
 8008c08:	e7ca      	b.n	8008ba0 <_free_r+0x24>
 8008c0a:	46c0      	nop			; (mov r8, r8)
 8008c0c:	20000794 	.word	0x20000794

08008c10 <malloc>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	4b03      	ldr	r3, [pc, #12]	; (8008c20 <malloc+0x10>)
 8008c14:	0001      	movs	r1, r0
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	f000 f826 	bl	8008c68 <_malloc_r>
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	200002c8 	.word	0x200002c8

08008c24 <sbrk_aligned>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4e0f      	ldr	r6, [pc, #60]	; (8008c64 <sbrk_aligned+0x40>)
 8008c28:	000d      	movs	r5, r1
 8008c2a:	6831      	ldr	r1, [r6, #0]
 8008c2c:	0004      	movs	r4, r0
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	d102      	bne.n	8008c38 <sbrk_aligned+0x14>
 8008c32:	f000 fe6f 	bl	8009914 <_sbrk_r>
 8008c36:	6030      	str	r0, [r6, #0]
 8008c38:	0029      	movs	r1, r5
 8008c3a:	0020      	movs	r0, r4
 8008c3c:	f000 fe6a 	bl	8009914 <_sbrk_r>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d00a      	beq.n	8008c5a <sbrk_aligned+0x36>
 8008c44:	2303      	movs	r3, #3
 8008c46:	1cc5      	adds	r5, r0, #3
 8008c48:	439d      	bics	r5, r3
 8008c4a:	42a8      	cmp	r0, r5
 8008c4c:	d007      	beq.n	8008c5e <sbrk_aligned+0x3a>
 8008c4e:	1a29      	subs	r1, r5, r0
 8008c50:	0020      	movs	r0, r4
 8008c52:	f000 fe5f 	bl	8009914 <_sbrk_r>
 8008c56:	3001      	adds	r0, #1
 8008c58:	d101      	bne.n	8008c5e <sbrk_aligned+0x3a>
 8008c5a:	2501      	movs	r5, #1
 8008c5c:	426d      	negs	r5, r5
 8008c5e:	0028      	movs	r0, r5
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	20000798 	.word	0x20000798

08008c68 <_malloc_r>:
 8008c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	1ccb      	adds	r3, r1, #3
 8008c6e:	4393      	bics	r3, r2
 8008c70:	3308      	adds	r3, #8
 8008c72:	0006      	movs	r6, r0
 8008c74:	001f      	movs	r7, r3
 8008c76:	2b0c      	cmp	r3, #12
 8008c78:	d238      	bcs.n	8008cec <_malloc_r+0x84>
 8008c7a:	270c      	movs	r7, #12
 8008c7c:	42b9      	cmp	r1, r7
 8008c7e:	d837      	bhi.n	8008cf0 <_malloc_r+0x88>
 8008c80:	0030      	movs	r0, r6
 8008c82:	f000 f873 	bl	8008d6c <__malloc_lock>
 8008c86:	4b38      	ldr	r3, [pc, #224]	; (8008d68 <_malloc_r+0x100>)
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	001c      	movs	r4, r3
 8008c8e:	2c00      	cmp	r4, #0
 8008c90:	d133      	bne.n	8008cfa <_malloc_r+0x92>
 8008c92:	0039      	movs	r1, r7
 8008c94:	0030      	movs	r0, r6
 8008c96:	f7ff ffc5 	bl	8008c24 <sbrk_aligned>
 8008c9a:	0004      	movs	r4, r0
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d15e      	bne.n	8008d5e <_malloc_r+0xf6>
 8008ca0:	9b00      	ldr	r3, [sp, #0]
 8008ca2:	681c      	ldr	r4, [r3, #0]
 8008ca4:	0025      	movs	r5, r4
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	d14e      	bne.n	8008d48 <_malloc_r+0xe0>
 8008caa:	2c00      	cmp	r4, #0
 8008cac:	d051      	beq.n	8008d52 <_malloc_r+0xea>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	0029      	movs	r1, r5
 8008cb2:	18e3      	adds	r3, r4, r3
 8008cb4:	0030      	movs	r0, r6
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	f000 fe2c 	bl	8009914 <_sbrk_r>
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	4283      	cmp	r3, r0
 8008cc0:	d147      	bne.n	8008d52 <_malloc_r+0xea>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	0030      	movs	r0, r6
 8008cc6:	1aff      	subs	r7, r7, r3
 8008cc8:	0039      	movs	r1, r7
 8008cca:	f7ff ffab 	bl	8008c24 <sbrk_aligned>
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d03f      	beq.n	8008d52 <_malloc_r+0xea>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	19db      	adds	r3, r3, r7
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d040      	beq.n	8008d62 <_malloc_r+0xfa>
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	42a2      	cmp	r2, r4
 8008ce4:	d133      	bne.n	8008d4e <_malloc_r+0xe6>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	e014      	b.n	8008d16 <_malloc_r+0xae>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dac5      	bge.n	8008c7c <_malloc_r+0x14>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	6033      	str	r3, [r6, #0]
 8008cf6:	0028      	movs	r0, r5
 8008cf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	1bc9      	subs	r1, r1, r7
 8008cfe:	d420      	bmi.n	8008d42 <_malloc_r+0xda>
 8008d00:	290b      	cmp	r1, #11
 8008d02:	d918      	bls.n	8008d36 <_malloc_r+0xce>
 8008d04:	19e2      	adds	r2, r4, r7
 8008d06:	6027      	str	r7, [r4, #0]
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d112      	bne.n	8008d32 <_malloc_r+0xca>
 8008d0c:	9b00      	ldr	r3, [sp, #0]
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	6011      	str	r1, [r2, #0]
 8008d14:	6053      	str	r3, [r2, #4]
 8008d16:	0030      	movs	r0, r6
 8008d18:	0025      	movs	r5, r4
 8008d1a:	f000 f82f 	bl	8008d7c <__malloc_unlock>
 8008d1e:	2207      	movs	r2, #7
 8008d20:	350b      	adds	r5, #11
 8008d22:	1d23      	adds	r3, r4, #4
 8008d24:	4395      	bics	r5, r2
 8008d26:	1aea      	subs	r2, r5, r3
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	d0e4      	beq.n	8008cf6 <_malloc_r+0x8e>
 8008d2c:	1b5b      	subs	r3, r3, r5
 8008d2e:	50a3      	str	r3, [r4, r2]
 8008d30:	e7e1      	b.n	8008cf6 <_malloc_r+0x8e>
 8008d32:	605a      	str	r2, [r3, #4]
 8008d34:	e7ec      	b.n	8008d10 <_malloc_r+0xa8>
 8008d36:	6862      	ldr	r2, [r4, #4]
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d1d5      	bne.n	8008ce8 <_malloc_r+0x80>
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e7e9      	b.n	8008d16 <_malloc_r+0xae>
 8008d42:	0023      	movs	r3, r4
 8008d44:	6864      	ldr	r4, [r4, #4]
 8008d46:	e7a2      	b.n	8008c8e <_malloc_r+0x26>
 8008d48:	002c      	movs	r4, r5
 8008d4a:	686d      	ldr	r5, [r5, #4]
 8008d4c:	e7ab      	b.n	8008ca6 <_malloc_r+0x3e>
 8008d4e:	0013      	movs	r3, r2
 8008d50:	e7c4      	b.n	8008cdc <_malloc_r+0x74>
 8008d52:	230c      	movs	r3, #12
 8008d54:	0030      	movs	r0, r6
 8008d56:	6033      	str	r3, [r6, #0]
 8008d58:	f000 f810 	bl	8008d7c <__malloc_unlock>
 8008d5c:	e7cb      	b.n	8008cf6 <_malloc_r+0x8e>
 8008d5e:	6027      	str	r7, [r4, #0]
 8008d60:	e7d9      	b.n	8008d16 <_malloc_r+0xae>
 8008d62:	605b      	str	r3, [r3, #4]
 8008d64:	deff      	udf	#255	; 0xff
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	20000794 	.word	0x20000794

08008d6c <__malloc_lock>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	4802      	ldr	r0, [pc, #8]	; (8008d78 <__malloc_lock+0xc>)
 8008d70:	f7ff f851 	bl	8007e16 <__retarget_lock_acquire_recursive>
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	20000790 	.word	0x20000790

08008d7c <__malloc_unlock>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4802      	ldr	r0, [pc, #8]	; (8008d88 <__malloc_unlock+0xc>)
 8008d80:	f7ff f84a 	bl	8007e18 <__retarget_lock_release_recursive>
 8008d84:	bd10      	pop	{r4, pc}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	20000790 	.word	0x20000790

08008d8c <_Balloc>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	69c5      	ldr	r5, [r0, #28]
 8008d90:	0006      	movs	r6, r0
 8008d92:	000c      	movs	r4, r1
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	d10e      	bne.n	8008db6 <_Balloc+0x2a>
 8008d98:	2010      	movs	r0, #16
 8008d9a:	f7ff ff39 	bl	8008c10 <malloc>
 8008d9e:	1e02      	subs	r2, r0, #0
 8008da0:	61f0      	str	r0, [r6, #28]
 8008da2:	d104      	bne.n	8008dae <_Balloc+0x22>
 8008da4:	216b      	movs	r1, #107	; 0x6b
 8008da6:	4b19      	ldr	r3, [pc, #100]	; (8008e0c <_Balloc+0x80>)
 8008da8:	4819      	ldr	r0, [pc, #100]	; (8008e10 <_Balloc+0x84>)
 8008daa:	f000 fdc5 	bl	8009938 <__assert_func>
 8008dae:	6045      	str	r5, [r0, #4]
 8008db0:	6085      	str	r5, [r0, #8]
 8008db2:	6005      	str	r5, [r0, #0]
 8008db4:	60c5      	str	r5, [r0, #12]
 8008db6:	69f5      	ldr	r5, [r6, #28]
 8008db8:	68eb      	ldr	r3, [r5, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d013      	beq.n	8008de6 <_Balloc+0x5a>
 8008dbe:	69f3      	ldr	r3, [r6, #28]
 8008dc0:	00a2      	lsls	r2, r4, #2
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	189b      	adds	r3, r3, r2
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d118      	bne.n	8008dfe <_Balloc+0x72>
 8008dcc:	2101      	movs	r1, #1
 8008dce:	000d      	movs	r5, r1
 8008dd0:	40a5      	lsls	r5, r4
 8008dd2:	1d6a      	adds	r2, r5, #5
 8008dd4:	0030      	movs	r0, r6
 8008dd6:	0092      	lsls	r2, r2, #2
 8008dd8:	f000 fdcc 	bl	8009974 <_calloc_r>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d00c      	beq.n	8008dfa <_Balloc+0x6e>
 8008de0:	6044      	str	r4, [r0, #4]
 8008de2:	6085      	str	r5, [r0, #8]
 8008de4:	e00d      	b.n	8008e02 <_Balloc+0x76>
 8008de6:	2221      	movs	r2, #33	; 0x21
 8008de8:	2104      	movs	r1, #4
 8008dea:	0030      	movs	r0, r6
 8008dec:	f000 fdc2 	bl	8009974 <_calloc_r>
 8008df0:	69f3      	ldr	r3, [r6, #28]
 8008df2:	60e8      	str	r0, [r5, #12]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e1      	bne.n	8008dbe <_Balloc+0x32>
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
 8008dfe:	6802      	ldr	r2, [r0, #0]
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	2300      	movs	r3, #0
 8008e04:	6103      	str	r3, [r0, #16]
 8008e06:	60c3      	str	r3, [r0, #12]
 8008e08:	e7f8      	b.n	8008dfc <_Balloc+0x70>
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	0800a2d2 	.word	0x0800a2d2
 8008e10:	0800a352 	.word	0x0800a352

08008e14 <_Bfree>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	69c6      	ldr	r6, [r0, #28]
 8008e18:	0005      	movs	r5, r0
 8008e1a:	000c      	movs	r4, r1
 8008e1c:	2e00      	cmp	r6, #0
 8008e1e:	d10e      	bne.n	8008e3e <_Bfree+0x2a>
 8008e20:	2010      	movs	r0, #16
 8008e22:	f7ff fef5 	bl	8008c10 <malloc>
 8008e26:	1e02      	subs	r2, r0, #0
 8008e28:	61e8      	str	r0, [r5, #28]
 8008e2a:	d104      	bne.n	8008e36 <_Bfree+0x22>
 8008e2c:	218f      	movs	r1, #143	; 0x8f
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <_Bfree+0x40>)
 8008e30:	4809      	ldr	r0, [pc, #36]	; (8008e58 <_Bfree+0x44>)
 8008e32:	f000 fd81 	bl	8009938 <__assert_func>
 8008e36:	6046      	str	r6, [r0, #4]
 8008e38:	6086      	str	r6, [r0, #8]
 8008e3a:	6006      	str	r6, [r0, #0]
 8008e3c:	60c6      	str	r6, [r0, #12]
 8008e3e:	2c00      	cmp	r4, #0
 8008e40:	d007      	beq.n	8008e52 <_Bfree+0x3e>
 8008e42:	69eb      	ldr	r3, [r5, #28]
 8008e44:	6862      	ldr	r2, [r4, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	189b      	adds	r3, r3, r2
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	6022      	str	r2, [r4, #0]
 8008e50:	601c      	str	r4, [r3, #0]
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	0800a2d2 	.word	0x0800a2d2
 8008e58:	0800a352 	.word	0x0800a352

08008e5c <__multadd>:
 8008e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e5e:	000e      	movs	r6, r1
 8008e60:	9001      	str	r0, [sp, #4]
 8008e62:	000c      	movs	r4, r1
 8008e64:	001d      	movs	r5, r3
 8008e66:	2000      	movs	r0, #0
 8008e68:	690f      	ldr	r7, [r1, #16]
 8008e6a:	3614      	adds	r6, #20
 8008e6c:	6833      	ldr	r3, [r6, #0]
 8008e6e:	3001      	adds	r0, #1
 8008e70:	b299      	uxth	r1, r3
 8008e72:	4351      	muls	r1, r2
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	4353      	muls	r3, r2
 8008e78:	1949      	adds	r1, r1, r5
 8008e7a:	0c0d      	lsrs	r5, r1, #16
 8008e7c:	195b      	adds	r3, r3, r5
 8008e7e:	0c1d      	lsrs	r5, r3, #16
 8008e80:	b289      	uxth	r1, r1
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	185b      	adds	r3, r3, r1
 8008e86:	c608      	stmia	r6!, {r3}
 8008e88:	4287      	cmp	r7, r0
 8008e8a:	dcef      	bgt.n	8008e6c <__multadd+0x10>
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	d022      	beq.n	8008ed6 <__multadd+0x7a>
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	42bb      	cmp	r3, r7
 8008e94:	dc19      	bgt.n	8008eca <__multadd+0x6e>
 8008e96:	6861      	ldr	r1, [r4, #4]
 8008e98:	9801      	ldr	r0, [sp, #4]
 8008e9a:	3101      	adds	r1, #1
 8008e9c:	f7ff ff76 	bl	8008d8c <_Balloc>
 8008ea0:	1e06      	subs	r6, r0, #0
 8008ea2:	d105      	bne.n	8008eb0 <__multadd+0x54>
 8008ea4:	0032      	movs	r2, r6
 8008ea6:	21ba      	movs	r1, #186	; 0xba
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <__multadd+0x80>)
 8008eaa:	480d      	ldr	r0, [pc, #52]	; (8008ee0 <__multadd+0x84>)
 8008eac:	f000 fd44 	bl	8009938 <__assert_func>
 8008eb0:	0021      	movs	r1, r4
 8008eb2:	6922      	ldr	r2, [r4, #16]
 8008eb4:	310c      	adds	r1, #12
 8008eb6:	3202      	adds	r2, #2
 8008eb8:	0092      	lsls	r2, r2, #2
 8008eba:	300c      	adds	r0, #12
 8008ebc:	f7fe ffb8 	bl	8007e30 <memcpy>
 8008ec0:	0021      	movs	r1, r4
 8008ec2:	9801      	ldr	r0, [sp, #4]
 8008ec4:	f7ff ffa6 	bl	8008e14 <_Bfree>
 8008ec8:	0034      	movs	r4, r6
 8008eca:	1d3b      	adds	r3, r7, #4
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	18e3      	adds	r3, r4, r3
 8008ed0:	605d      	str	r5, [r3, #4]
 8008ed2:	1c7b      	adds	r3, r7, #1
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	0020      	movs	r0, r4
 8008ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	0800a341 	.word	0x0800a341
 8008ee0:	0800a352 	.word	0x0800a352

08008ee4 <__hi0bits>:
 8008ee4:	0003      	movs	r3, r0
 8008ee6:	0c02      	lsrs	r2, r0, #16
 8008ee8:	2000      	movs	r0, #0
 8008eea:	4282      	cmp	r2, r0
 8008eec:	d101      	bne.n	8008ef2 <__hi0bits+0xe>
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	3010      	adds	r0, #16
 8008ef2:	0e1a      	lsrs	r2, r3, #24
 8008ef4:	d101      	bne.n	8008efa <__hi0bits+0x16>
 8008ef6:	3008      	adds	r0, #8
 8008ef8:	021b      	lsls	r3, r3, #8
 8008efa:	0f1a      	lsrs	r2, r3, #28
 8008efc:	d101      	bne.n	8008f02 <__hi0bits+0x1e>
 8008efe:	3004      	adds	r0, #4
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	0f9a      	lsrs	r2, r3, #30
 8008f04:	d101      	bne.n	8008f0a <__hi0bits+0x26>
 8008f06:	3002      	adds	r0, #2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db03      	blt.n	8008f16 <__hi0bits+0x32>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	d400      	bmi.n	8008f16 <__hi0bits+0x32>
 8008f14:	2020      	movs	r0, #32
 8008f16:	4770      	bx	lr

08008f18 <__lo0bits>:
 8008f18:	6803      	ldr	r3, [r0, #0]
 8008f1a:	0001      	movs	r1, r0
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	0018      	movs	r0, r3
 8008f20:	4010      	ands	r0, r2
 8008f22:	4213      	tst	r3, r2
 8008f24:	d00d      	beq.n	8008f42 <__lo0bits+0x2a>
 8008f26:	3a06      	subs	r2, #6
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4213      	tst	r3, r2
 8008f2c:	d105      	bne.n	8008f3a <__lo0bits+0x22>
 8008f2e:	3002      	adds	r0, #2
 8008f30:	4203      	tst	r3, r0
 8008f32:	d003      	beq.n	8008f3c <__lo0bits+0x24>
 8008f34:	40d3      	lsrs	r3, r2
 8008f36:	0010      	movs	r0, r2
 8008f38:	600b      	str	r3, [r1, #0]
 8008f3a:	4770      	bx	lr
 8008f3c:	089b      	lsrs	r3, r3, #2
 8008f3e:	600b      	str	r3, [r1, #0]
 8008f40:	e7fb      	b.n	8008f3a <__lo0bits+0x22>
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	2a00      	cmp	r2, #0
 8008f46:	d101      	bne.n	8008f4c <__lo0bits+0x34>
 8008f48:	2010      	movs	r0, #16
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d101      	bne.n	8008f56 <__lo0bits+0x3e>
 8008f52:	3008      	adds	r0, #8
 8008f54:	0a1b      	lsrs	r3, r3, #8
 8008f56:	071a      	lsls	r2, r3, #28
 8008f58:	d101      	bne.n	8008f5e <__lo0bits+0x46>
 8008f5a:	3004      	adds	r0, #4
 8008f5c:	091b      	lsrs	r3, r3, #4
 8008f5e:	079a      	lsls	r2, r3, #30
 8008f60:	d101      	bne.n	8008f66 <__lo0bits+0x4e>
 8008f62:	3002      	adds	r0, #2
 8008f64:	089b      	lsrs	r3, r3, #2
 8008f66:	07da      	lsls	r2, r3, #31
 8008f68:	d4e9      	bmi.n	8008f3e <__lo0bits+0x26>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	085b      	lsrs	r3, r3, #1
 8008f6e:	d1e6      	bne.n	8008f3e <__lo0bits+0x26>
 8008f70:	2020      	movs	r0, #32
 8008f72:	e7e2      	b.n	8008f3a <__lo0bits+0x22>

08008f74 <__i2b>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	000c      	movs	r4, r1
 8008f78:	2101      	movs	r1, #1
 8008f7a:	f7ff ff07 	bl	8008d8c <_Balloc>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d107      	bne.n	8008f92 <__i2b+0x1e>
 8008f82:	2146      	movs	r1, #70	; 0x46
 8008f84:	4c05      	ldr	r4, [pc, #20]	; (8008f9c <__i2b+0x28>)
 8008f86:	0002      	movs	r2, r0
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <__i2b+0x2c>)
 8008f8a:	0020      	movs	r0, r4
 8008f8c:	31ff      	adds	r1, #255	; 0xff
 8008f8e:	f000 fcd3 	bl	8009938 <__assert_func>
 8008f92:	2301      	movs	r3, #1
 8008f94:	6144      	str	r4, [r0, #20]
 8008f96:	6103      	str	r3, [r0, #16]
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	0800a352 	.word	0x0800a352
 8008fa0:	0800a341 	.word	0x0800a341

08008fa4 <__multiply>:
 8008fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fa6:	0015      	movs	r5, r2
 8008fa8:	690a      	ldr	r2, [r1, #16]
 8008faa:	692b      	ldr	r3, [r5, #16]
 8008fac:	000c      	movs	r4, r1
 8008fae:	b08b      	sub	sp, #44	; 0x2c
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	da01      	bge.n	8008fb8 <__multiply+0x14>
 8008fb4:	002c      	movs	r4, r5
 8008fb6:	000d      	movs	r5, r1
 8008fb8:	6927      	ldr	r7, [r4, #16]
 8008fba:	692e      	ldr	r6, [r5, #16]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	19bb      	adds	r3, r7, r6
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	68a3      	ldr	r3, [r4, #8]
 8008fc4:	19ba      	adds	r2, r7, r6
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	da00      	bge.n	8008fcc <__multiply+0x28>
 8008fca:	3101      	adds	r1, #1
 8008fcc:	f7ff fede 	bl	8008d8c <_Balloc>
 8008fd0:	9002      	str	r0, [sp, #8]
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d106      	bne.n	8008fe4 <__multiply+0x40>
 8008fd6:	21b1      	movs	r1, #177	; 0xb1
 8008fd8:	4b48      	ldr	r3, [pc, #288]	; (80090fc <__multiply+0x158>)
 8008fda:	4849      	ldr	r0, [pc, #292]	; (8009100 <__multiply+0x15c>)
 8008fdc:	9a02      	ldr	r2, [sp, #8]
 8008fde:	0049      	lsls	r1, r1, #1
 8008fe0:	f000 fcaa 	bl	8009938 <__assert_func>
 8008fe4:	9b02      	ldr	r3, [sp, #8]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	3314      	adds	r3, #20
 8008fea:	469c      	mov	ip, r3
 8008fec:	19bb      	adds	r3, r7, r6
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4463      	add	r3, ip
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	4663      	mov	r3, ip
 8008ff6:	9904      	ldr	r1, [sp, #16]
 8008ff8:	428b      	cmp	r3, r1
 8008ffa:	d32a      	bcc.n	8009052 <__multiply+0xae>
 8008ffc:	0023      	movs	r3, r4
 8008ffe:	00bf      	lsls	r7, r7, #2
 8009000:	3314      	adds	r3, #20
 8009002:	3514      	adds	r5, #20
 8009004:	9308      	str	r3, [sp, #32]
 8009006:	00b6      	lsls	r6, r6, #2
 8009008:	19db      	adds	r3, r3, r7
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	19ab      	adds	r3, r5, r6
 800900e:	9309      	str	r3, [sp, #36]	; 0x24
 8009010:	2304      	movs	r3, #4
 8009012:	9306      	str	r3, [sp, #24]
 8009014:	0023      	movs	r3, r4
 8009016:	9a05      	ldr	r2, [sp, #20]
 8009018:	3315      	adds	r3, #21
 800901a:	9501      	str	r5, [sp, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d305      	bcc.n	800902c <__multiply+0x88>
 8009020:	1b13      	subs	r3, r2, r4
 8009022:	3b15      	subs	r3, #21
 8009024:	089b      	lsrs	r3, r3, #2
 8009026:	3301      	adds	r3, #1
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	9306      	str	r3, [sp, #24]
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009030:	4293      	cmp	r3, r2
 8009032:	d310      	bcc.n	8009056 <__multiply+0xb2>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	dd05      	ble.n	8009046 <__multiply+0xa2>
 800903a:	9b04      	ldr	r3, [sp, #16]
 800903c:	3b04      	subs	r3, #4
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d056      	beq.n	80090f4 <__multiply+0x150>
 8009046:	9b02      	ldr	r3, [sp, #8]
 8009048:	9a03      	ldr	r2, [sp, #12]
 800904a:	0018      	movs	r0, r3
 800904c:	611a      	str	r2, [r3, #16]
 800904e:	b00b      	add	sp, #44	; 0x2c
 8009050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009052:	c304      	stmia	r3!, {r2}
 8009054:	e7cf      	b.n	8008ff6 <__multiply+0x52>
 8009056:	9b01      	ldr	r3, [sp, #4]
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	b280      	uxth	r0, r0
 800905c:	2800      	cmp	r0, #0
 800905e:	d01e      	beq.n	800909e <__multiply+0xfa>
 8009060:	4667      	mov	r7, ip
 8009062:	2500      	movs	r5, #0
 8009064:	9e08      	ldr	r6, [sp, #32]
 8009066:	ce02      	ldmia	r6!, {r1}
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	9307      	str	r3, [sp, #28]
 800906c:	b28b      	uxth	r3, r1
 800906e:	4343      	muls	r3, r0
 8009070:	001a      	movs	r2, r3
 8009072:	466b      	mov	r3, sp
 8009074:	8b9b      	ldrh	r3, [r3, #28]
 8009076:	18d3      	adds	r3, r2, r3
 8009078:	195b      	adds	r3, r3, r5
 800907a:	0c0d      	lsrs	r5, r1, #16
 800907c:	4345      	muls	r5, r0
 800907e:	9a07      	ldr	r2, [sp, #28]
 8009080:	0c11      	lsrs	r1, r2, #16
 8009082:	1869      	adds	r1, r5, r1
 8009084:	0c1a      	lsrs	r2, r3, #16
 8009086:	188a      	adds	r2, r1, r2
 8009088:	b29b      	uxth	r3, r3
 800908a:	0c15      	lsrs	r5, r2, #16
 800908c:	0412      	lsls	r2, r2, #16
 800908e:	431a      	orrs	r2, r3
 8009090:	9b05      	ldr	r3, [sp, #20]
 8009092:	c704      	stmia	r7!, {r2}
 8009094:	42b3      	cmp	r3, r6
 8009096:	d8e6      	bhi.n	8009066 <__multiply+0xc2>
 8009098:	4663      	mov	r3, ip
 800909a:	9a06      	ldr	r2, [sp, #24]
 800909c:	509d      	str	r5, [r3, r2]
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	0c00      	lsrs	r0, r0, #16
 80090a4:	d020      	beq.n	80090e8 <__multiply+0x144>
 80090a6:	4663      	mov	r3, ip
 80090a8:	0025      	movs	r5, r4
 80090aa:	4661      	mov	r1, ip
 80090ac:	2700      	movs	r7, #0
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3514      	adds	r5, #20
 80090b2:	682a      	ldr	r2, [r5, #0]
 80090b4:	680e      	ldr	r6, [r1, #0]
 80090b6:	b292      	uxth	r2, r2
 80090b8:	4342      	muls	r2, r0
 80090ba:	0c36      	lsrs	r6, r6, #16
 80090bc:	1992      	adds	r2, r2, r6
 80090be:	19d2      	adds	r2, r2, r7
 80090c0:	0416      	lsls	r6, r2, #16
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	431e      	orrs	r6, r3
 80090c6:	600e      	str	r6, [r1, #0]
 80090c8:	cd40      	ldmia	r5!, {r6}
 80090ca:	684b      	ldr	r3, [r1, #4]
 80090cc:	0c36      	lsrs	r6, r6, #16
 80090ce:	4346      	muls	r6, r0
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	0c12      	lsrs	r2, r2, #16
 80090d4:	18f3      	adds	r3, r6, r3
 80090d6:	189b      	adds	r3, r3, r2
 80090d8:	9a05      	ldr	r2, [sp, #20]
 80090da:	0c1f      	lsrs	r7, r3, #16
 80090dc:	3104      	adds	r1, #4
 80090de:	42aa      	cmp	r2, r5
 80090e0:	d8e7      	bhi.n	80090b2 <__multiply+0x10e>
 80090e2:	4662      	mov	r2, ip
 80090e4:	9906      	ldr	r1, [sp, #24]
 80090e6:	5053      	str	r3, [r2, r1]
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	2304      	movs	r3, #4
 80090f0:	449c      	add	ip, r3
 80090f2:	e79b      	b.n	800902c <__multiply+0x88>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	9303      	str	r3, [sp, #12]
 80090fa:	e79b      	b.n	8009034 <__multiply+0x90>
 80090fc:	0800a341 	.word	0x0800a341
 8009100:	0800a352 	.word	0x0800a352

08009104 <__pow5mult>:
 8009104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009106:	2303      	movs	r3, #3
 8009108:	0015      	movs	r5, r2
 800910a:	0007      	movs	r7, r0
 800910c:	000e      	movs	r6, r1
 800910e:	401a      	ands	r2, r3
 8009110:	421d      	tst	r5, r3
 8009112:	d008      	beq.n	8009126 <__pow5mult+0x22>
 8009114:	4925      	ldr	r1, [pc, #148]	; (80091ac <__pow5mult+0xa8>)
 8009116:	3a01      	subs	r2, #1
 8009118:	0092      	lsls	r2, r2, #2
 800911a:	5852      	ldr	r2, [r2, r1]
 800911c:	2300      	movs	r3, #0
 800911e:	0031      	movs	r1, r6
 8009120:	f7ff fe9c 	bl	8008e5c <__multadd>
 8009124:	0006      	movs	r6, r0
 8009126:	10ad      	asrs	r5, r5, #2
 8009128:	d03d      	beq.n	80091a6 <__pow5mult+0xa2>
 800912a:	69fc      	ldr	r4, [r7, #28]
 800912c:	2c00      	cmp	r4, #0
 800912e:	d10f      	bne.n	8009150 <__pow5mult+0x4c>
 8009130:	2010      	movs	r0, #16
 8009132:	f7ff fd6d 	bl	8008c10 <malloc>
 8009136:	1e02      	subs	r2, r0, #0
 8009138:	61f8      	str	r0, [r7, #28]
 800913a:	d105      	bne.n	8009148 <__pow5mult+0x44>
 800913c:	21b4      	movs	r1, #180	; 0xb4
 800913e:	4b1c      	ldr	r3, [pc, #112]	; (80091b0 <__pow5mult+0xac>)
 8009140:	481c      	ldr	r0, [pc, #112]	; (80091b4 <__pow5mult+0xb0>)
 8009142:	31ff      	adds	r1, #255	; 0xff
 8009144:	f000 fbf8 	bl	8009938 <__assert_func>
 8009148:	6044      	str	r4, [r0, #4]
 800914a:	6084      	str	r4, [r0, #8]
 800914c:	6004      	str	r4, [r0, #0]
 800914e:	60c4      	str	r4, [r0, #12]
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	689c      	ldr	r4, [r3, #8]
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	2c00      	cmp	r4, #0
 8009158:	d108      	bne.n	800916c <__pow5mult+0x68>
 800915a:	0038      	movs	r0, r7
 800915c:	4916      	ldr	r1, [pc, #88]	; (80091b8 <__pow5mult+0xb4>)
 800915e:	f7ff ff09 	bl	8008f74 <__i2b>
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	0004      	movs	r4, r0
 8009166:	6098      	str	r0, [r3, #8]
 8009168:	2300      	movs	r3, #0
 800916a:	6003      	str	r3, [r0, #0]
 800916c:	2301      	movs	r3, #1
 800916e:	421d      	tst	r5, r3
 8009170:	d00a      	beq.n	8009188 <__pow5mult+0x84>
 8009172:	0031      	movs	r1, r6
 8009174:	0022      	movs	r2, r4
 8009176:	0038      	movs	r0, r7
 8009178:	f7ff ff14 	bl	8008fa4 <__multiply>
 800917c:	0031      	movs	r1, r6
 800917e:	9001      	str	r0, [sp, #4]
 8009180:	0038      	movs	r0, r7
 8009182:	f7ff fe47 	bl	8008e14 <_Bfree>
 8009186:	9e01      	ldr	r6, [sp, #4]
 8009188:	106d      	asrs	r5, r5, #1
 800918a:	d00c      	beq.n	80091a6 <__pow5mult+0xa2>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	2800      	cmp	r0, #0
 8009190:	d107      	bne.n	80091a2 <__pow5mult+0x9e>
 8009192:	0022      	movs	r2, r4
 8009194:	0021      	movs	r1, r4
 8009196:	0038      	movs	r0, r7
 8009198:	f7ff ff04 	bl	8008fa4 <__multiply>
 800919c:	2300      	movs	r3, #0
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	0004      	movs	r4, r0
 80091a4:	e7e2      	b.n	800916c <__pow5mult+0x68>
 80091a6:	0030      	movs	r0, r6
 80091a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	0800a4a0 	.word	0x0800a4a0
 80091b0:	0800a2d2 	.word	0x0800a2d2
 80091b4:	0800a352 	.word	0x0800a352
 80091b8:	00000271 	.word	0x00000271

080091bc <__lshift>:
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	000c      	movs	r4, r1
 80091c0:	0017      	movs	r7, r2
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	1155      	asrs	r5, r2, #5
 80091c6:	b087      	sub	sp, #28
 80091c8:	18eb      	adds	r3, r5, r3
 80091ca:	9302      	str	r3, [sp, #8]
 80091cc:	3301      	adds	r3, #1
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	6849      	ldr	r1, [r1, #4]
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	9004      	str	r0, [sp, #16]
 80091d6:	9a01      	ldr	r2, [sp, #4]
 80091d8:	4293      	cmp	r3, r2
 80091da:	db10      	blt.n	80091fe <__lshift+0x42>
 80091dc:	9804      	ldr	r0, [sp, #16]
 80091de:	f7ff fdd5 	bl	8008d8c <_Balloc>
 80091e2:	2300      	movs	r3, #0
 80091e4:	0002      	movs	r2, r0
 80091e6:	0006      	movs	r6, r0
 80091e8:	0019      	movs	r1, r3
 80091ea:	3214      	adds	r2, #20
 80091ec:	4298      	cmp	r0, r3
 80091ee:	d10c      	bne.n	800920a <__lshift+0x4e>
 80091f0:	31df      	adds	r1, #223	; 0xdf
 80091f2:	0032      	movs	r2, r6
 80091f4:	4b26      	ldr	r3, [pc, #152]	; (8009290 <__lshift+0xd4>)
 80091f6:	4827      	ldr	r0, [pc, #156]	; (8009294 <__lshift+0xd8>)
 80091f8:	31ff      	adds	r1, #255	; 0xff
 80091fa:	f000 fb9d 	bl	8009938 <__assert_func>
 80091fe:	3101      	adds	r1, #1
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	e7e8      	b.n	80091d6 <__lshift+0x1a>
 8009204:	0098      	lsls	r0, r3, #2
 8009206:	5011      	str	r1, [r2, r0]
 8009208:	3301      	adds	r3, #1
 800920a:	42ab      	cmp	r3, r5
 800920c:	dbfa      	blt.n	8009204 <__lshift+0x48>
 800920e:	43eb      	mvns	r3, r5
 8009210:	17db      	asrs	r3, r3, #31
 8009212:	401d      	ands	r5, r3
 8009214:	211f      	movs	r1, #31
 8009216:	0023      	movs	r3, r4
 8009218:	0038      	movs	r0, r7
 800921a:	00ad      	lsls	r5, r5, #2
 800921c:	1955      	adds	r5, r2, r5
 800921e:	6922      	ldr	r2, [r4, #16]
 8009220:	3314      	adds	r3, #20
 8009222:	0092      	lsls	r2, r2, #2
 8009224:	4008      	ands	r0, r1
 8009226:	4684      	mov	ip, r0
 8009228:	189a      	adds	r2, r3, r2
 800922a:	420f      	tst	r7, r1
 800922c:	d02a      	beq.n	8009284 <__lshift+0xc8>
 800922e:	3101      	adds	r1, #1
 8009230:	1a09      	subs	r1, r1, r0
 8009232:	9105      	str	r1, [sp, #20]
 8009234:	2100      	movs	r1, #0
 8009236:	9503      	str	r5, [sp, #12]
 8009238:	4667      	mov	r7, ip
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	40b8      	lsls	r0, r7
 800923e:	4308      	orrs	r0, r1
 8009240:	9903      	ldr	r1, [sp, #12]
 8009242:	c101      	stmia	r1!, {r0}
 8009244:	9103      	str	r1, [sp, #12]
 8009246:	9805      	ldr	r0, [sp, #20]
 8009248:	cb02      	ldmia	r3!, {r1}
 800924a:	40c1      	lsrs	r1, r0
 800924c:	429a      	cmp	r2, r3
 800924e:	d8f3      	bhi.n	8009238 <__lshift+0x7c>
 8009250:	0020      	movs	r0, r4
 8009252:	3015      	adds	r0, #21
 8009254:	2304      	movs	r3, #4
 8009256:	4282      	cmp	r2, r0
 8009258:	d304      	bcc.n	8009264 <__lshift+0xa8>
 800925a:	1b13      	subs	r3, r2, r4
 800925c:	3b15      	subs	r3, #21
 800925e:	089b      	lsrs	r3, r3, #2
 8009260:	3301      	adds	r3, #1
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	50e9      	str	r1, [r5, r3]
 8009266:	2900      	cmp	r1, #0
 8009268:	d002      	beq.n	8009270 <__lshift+0xb4>
 800926a:	9b02      	ldr	r3, [sp, #8]
 800926c:	3302      	adds	r3, #2
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	9b01      	ldr	r3, [sp, #4]
 8009272:	9804      	ldr	r0, [sp, #16]
 8009274:	3b01      	subs	r3, #1
 8009276:	0021      	movs	r1, r4
 8009278:	6133      	str	r3, [r6, #16]
 800927a:	f7ff fdcb 	bl	8008e14 <_Bfree>
 800927e:	0030      	movs	r0, r6
 8009280:	b007      	add	sp, #28
 8009282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009284:	cb02      	ldmia	r3!, {r1}
 8009286:	c502      	stmia	r5!, {r1}
 8009288:	429a      	cmp	r2, r3
 800928a:	d8fb      	bhi.n	8009284 <__lshift+0xc8>
 800928c:	e7f0      	b.n	8009270 <__lshift+0xb4>
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	0800a341 	.word	0x0800a341
 8009294:	0800a352 	.word	0x0800a352

08009298 <__mcmp>:
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	690b      	ldr	r3, [r1, #16]
 800929c:	6904      	ldr	r4, [r0, #16]
 800929e:	0002      	movs	r2, r0
 80092a0:	1ae0      	subs	r0, r4, r3
 80092a2:	429c      	cmp	r4, r3
 80092a4:	d10e      	bne.n	80092c4 <__mcmp+0x2c>
 80092a6:	3214      	adds	r2, #20
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	3114      	adds	r1, #20
 80092ac:	0014      	movs	r4, r2
 80092ae:	18c9      	adds	r1, r1, r3
 80092b0:	18d2      	adds	r2, r2, r3
 80092b2:	3a04      	subs	r2, #4
 80092b4:	3904      	subs	r1, #4
 80092b6:	6815      	ldr	r5, [r2, #0]
 80092b8:	680b      	ldr	r3, [r1, #0]
 80092ba:	429d      	cmp	r5, r3
 80092bc:	d003      	beq.n	80092c6 <__mcmp+0x2e>
 80092be:	2001      	movs	r0, #1
 80092c0:	429d      	cmp	r5, r3
 80092c2:	d303      	bcc.n	80092cc <__mcmp+0x34>
 80092c4:	bd30      	pop	{r4, r5, pc}
 80092c6:	4294      	cmp	r4, r2
 80092c8:	d3f3      	bcc.n	80092b2 <__mcmp+0x1a>
 80092ca:	e7fb      	b.n	80092c4 <__mcmp+0x2c>
 80092cc:	4240      	negs	r0, r0
 80092ce:	e7f9      	b.n	80092c4 <__mcmp+0x2c>

080092d0 <__mdiff>:
 80092d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d2:	000e      	movs	r6, r1
 80092d4:	0007      	movs	r7, r0
 80092d6:	0011      	movs	r1, r2
 80092d8:	0030      	movs	r0, r6
 80092da:	b087      	sub	sp, #28
 80092dc:	0014      	movs	r4, r2
 80092de:	f7ff ffdb 	bl	8009298 <__mcmp>
 80092e2:	1e05      	subs	r5, r0, #0
 80092e4:	d110      	bne.n	8009308 <__mdiff+0x38>
 80092e6:	0001      	movs	r1, r0
 80092e8:	0038      	movs	r0, r7
 80092ea:	f7ff fd4f 	bl	8008d8c <_Balloc>
 80092ee:	1e02      	subs	r2, r0, #0
 80092f0:	d104      	bne.n	80092fc <__mdiff+0x2c>
 80092f2:	4b3f      	ldr	r3, [pc, #252]	; (80093f0 <__mdiff+0x120>)
 80092f4:	483f      	ldr	r0, [pc, #252]	; (80093f4 <__mdiff+0x124>)
 80092f6:	4940      	ldr	r1, [pc, #256]	; (80093f8 <__mdiff+0x128>)
 80092f8:	f000 fb1e 	bl	8009938 <__assert_func>
 80092fc:	2301      	movs	r3, #1
 80092fe:	6145      	str	r5, [r0, #20]
 8009300:	6103      	str	r3, [r0, #16]
 8009302:	0010      	movs	r0, r2
 8009304:	b007      	add	sp, #28
 8009306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009308:	2301      	movs	r3, #1
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	2800      	cmp	r0, #0
 800930e:	db04      	blt.n	800931a <__mdiff+0x4a>
 8009310:	0023      	movs	r3, r4
 8009312:	0034      	movs	r4, r6
 8009314:	001e      	movs	r6, r3
 8009316:	2300      	movs	r3, #0
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	0038      	movs	r0, r7
 800931c:	6861      	ldr	r1, [r4, #4]
 800931e:	f7ff fd35 	bl	8008d8c <_Balloc>
 8009322:	1e02      	subs	r2, r0, #0
 8009324:	d103      	bne.n	800932e <__mdiff+0x5e>
 8009326:	4b32      	ldr	r3, [pc, #200]	; (80093f0 <__mdiff+0x120>)
 8009328:	4832      	ldr	r0, [pc, #200]	; (80093f4 <__mdiff+0x124>)
 800932a:	4934      	ldr	r1, [pc, #208]	; (80093fc <__mdiff+0x12c>)
 800932c:	e7e4      	b.n	80092f8 <__mdiff+0x28>
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	2700      	movs	r7, #0
 8009332:	60c3      	str	r3, [r0, #12]
 8009334:	6920      	ldr	r0, [r4, #16]
 8009336:	3414      	adds	r4, #20
 8009338:	0083      	lsls	r3, r0, #2
 800933a:	18e3      	adds	r3, r4, r3
 800933c:	0021      	movs	r1, r4
 800933e:	9401      	str	r4, [sp, #4]
 8009340:	0034      	movs	r4, r6
 8009342:	9302      	str	r3, [sp, #8]
 8009344:	6933      	ldr	r3, [r6, #16]
 8009346:	3414      	adds	r4, #20
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	18e3      	adds	r3, r4, r3
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	0013      	movs	r3, r2
 8009350:	3314      	adds	r3, #20
 8009352:	469c      	mov	ip, r3
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	9104      	str	r1, [sp, #16]
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	cc02      	ldmia	r4!, {r1}
 800935c:	cb20      	ldmia	r3!, {r5}
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	b2ab      	uxth	r3, r5
 8009362:	19df      	adds	r7, r3, r7
 8009364:	b28b      	uxth	r3, r1
 8009366:	1afb      	subs	r3, r7, r3
 8009368:	0c09      	lsrs	r1, r1, #16
 800936a:	0c2d      	lsrs	r5, r5, #16
 800936c:	1a6d      	subs	r5, r5, r1
 800936e:	1419      	asrs	r1, r3, #16
 8009370:	1869      	adds	r1, r5, r1
 8009372:	b29b      	uxth	r3, r3
 8009374:	140f      	asrs	r7, r1, #16
 8009376:	0409      	lsls	r1, r1, #16
 8009378:	4319      	orrs	r1, r3
 800937a:	4663      	mov	r3, ip
 800937c:	c302      	stmia	r3!, {r1}
 800937e:	469c      	mov	ip, r3
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	42a3      	cmp	r3, r4
 8009384:	d8e8      	bhi.n	8009358 <__mdiff+0x88>
 8009386:	0031      	movs	r1, r6
 8009388:	9c03      	ldr	r4, [sp, #12]
 800938a:	3115      	adds	r1, #21
 800938c:	2304      	movs	r3, #4
 800938e:	428c      	cmp	r4, r1
 8009390:	d304      	bcc.n	800939c <__mdiff+0xcc>
 8009392:	1ba3      	subs	r3, r4, r6
 8009394:	3b15      	subs	r3, #21
 8009396:	089b      	lsrs	r3, r3, #2
 8009398:	3301      	adds	r3, #1
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	9901      	ldr	r1, [sp, #4]
 800939e:	18cd      	adds	r5, r1, r3
 80093a0:	9905      	ldr	r1, [sp, #20]
 80093a2:	002e      	movs	r6, r5
 80093a4:	18cb      	adds	r3, r1, r3
 80093a6:	469c      	mov	ip, r3
 80093a8:	9902      	ldr	r1, [sp, #8]
 80093aa:	428e      	cmp	r6, r1
 80093ac:	d310      	bcc.n	80093d0 <__mdiff+0x100>
 80093ae:	9e02      	ldr	r6, [sp, #8]
 80093b0:	1ee9      	subs	r1, r5, #3
 80093b2:	2400      	movs	r4, #0
 80093b4:	428e      	cmp	r6, r1
 80093b6:	d304      	bcc.n	80093c2 <__mdiff+0xf2>
 80093b8:	0031      	movs	r1, r6
 80093ba:	3103      	adds	r1, #3
 80093bc:	1b49      	subs	r1, r1, r5
 80093be:	0889      	lsrs	r1, r1, #2
 80093c0:	008c      	lsls	r4, r1, #2
 80093c2:	191b      	adds	r3, r3, r4
 80093c4:	3b04      	subs	r3, #4
 80093c6:	6819      	ldr	r1, [r3, #0]
 80093c8:	2900      	cmp	r1, #0
 80093ca:	d00f      	beq.n	80093ec <__mdiff+0x11c>
 80093cc:	6110      	str	r0, [r2, #16]
 80093ce:	e798      	b.n	8009302 <__mdiff+0x32>
 80093d0:	ce02      	ldmia	r6!, {r1}
 80093d2:	b28c      	uxth	r4, r1
 80093d4:	19e4      	adds	r4, r4, r7
 80093d6:	0c0f      	lsrs	r7, r1, #16
 80093d8:	1421      	asrs	r1, r4, #16
 80093da:	1879      	adds	r1, r7, r1
 80093dc:	b2a4      	uxth	r4, r4
 80093de:	140f      	asrs	r7, r1, #16
 80093e0:	0409      	lsls	r1, r1, #16
 80093e2:	4321      	orrs	r1, r4
 80093e4:	4664      	mov	r4, ip
 80093e6:	c402      	stmia	r4!, {r1}
 80093e8:	46a4      	mov	ip, r4
 80093ea:	e7dd      	b.n	80093a8 <__mdiff+0xd8>
 80093ec:	3801      	subs	r0, #1
 80093ee:	e7e9      	b.n	80093c4 <__mdiff+0xf4>
 80093f0:	0800a341 	.word	0x0800a341
 80093f4:	0800a352 	.word	0x0800a352
 80093f8:	00000237 	.word	0x00000237
 80093fc:	00000245 	.word	0x00000245

08009400 <__d2b>:
 8009400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009402:	2101      	movs	r1, #1
 8009404:	0014      	movs	r4, r2
 8009406:	001d      	movs	r5, r3
 8009408:	9f08      	ldr	r7, [sp, #32]
 800940a:	f7ff fcbf 	bl	8008d8c <_Balloc>
 800940e:	1e06      	subs	r6, r0, #0
 8009410:	d105      	bne.n	800941e <__d2b+0x1e>
 8009412:	0032      	movs	r2, r6
 8009414:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <__d2b+0xa8>)
 8009416:	4825      	ldr	r0, [pc, #148]	; (80094ac <__d2b+0xac>)
 8009418:	4925      	ldr	r1, [pc, #148]	; (80094b0 <__d2b+0xb0>)
 800941a:	f000 fa8d 	bl	8009938 <__assert_func>
 800941e:	032b      	lsls	r3, r5, #12
 8009420:	006d      	lsls	r5, r5, #1
 8009422:	0b1b      	lsrs	r3, r3, #12
 8009424:	0d6d      	lsrs	r5, r5, #21
 8009426:	d125      	bne.n	8009474 <__d2b+0x74>
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	2c00      	cmp	r4, #0
 800942c:	d028      	beq.n	8009480 <__d2b+0x80>
 800942e:	4668      	mov	r0, sp
 8009430:	9400      	str	r4, [sp, #0]
 8009432:	f7ff fd71 	bl	8008f18 <__lo0bits>
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	9900      	ldr	r1, [sp, #0]
 800943a:	2800      	cmp	r0, #0
 800943c:	d01e      	beq.n	800947c <__d2b+0x7c>
 800943e:	2220      	movs	r2, #32
 8009440:	001c      	movs	r4, r3
 8009442:	1a12      	subs	r2, r2, r0
 8009444:	4094      	lsls	r4, r2
 8009446:	0022      	movs	r2, r4
 8009448:	40c3      	lsrs	r3, r0
 800944a:	430a      	orrs	r2, r1
 800944c:	6172      	str	r2, [r6, #20]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	9c01      	ldr	r4, [sp, #4]
 8009452:	61b4      	str	r4, [r6, #24]
 8009454:	1e63      	subs	r3, r4, #1
 8009456:	419c      	sbcs	r4, r3
 8009458:	3401      	adds	r4, #1
 800945a:	6134      	str	r4, [r6, #16]
 800945c:	2d00      	cmp	r5, #0
 800945e:	d017      	beq.n	8009490 <__d2b+0x90>
 8009460:	2435      	movs	r4, #53	; 0x35
 8009462:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <__d2b+0xb4>)
 8009464:	18ed      	adds	r5, r5, r3
 8009466:	182d      	adds	r5, r5, r0
 8009468:	603d      	str	r5, [r7, #0]
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	1a24      	subs	r4, r4, r0
 800946e:	601c      	str	r4, [r3, #0]
 8009470:	0030      	movs	r0, r6
 8009472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	0352      	lsls	r2, r2, #13
 8009478:	4313      	orrs	r3, r2
 800947a:	e7d5      	b.n	8009428 <__d2b+0x28>
 800947c:	6171      	str	r1, [r6, #20]
 800947e:	e7e7      	b.n	8009450 <__d2b+0x50>
 8009480:	a801      	add	r0, sp, #4
 8009482:	f7ff fd49 	bl	8008f18 <__lo0bits>
 8009486:	9b01      	ldr	r3, [sp, #4]
 8009488:	2401      	movs	r4, #1
 800948a:	6173      	str	r3, [r6, #20]
 800948c:	3020      	adds	r0, #32
 800948e:	e7e4      	b.n	800945a <__d2b+0x5a>
 8009490:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <__d2b+0xb8>)
 8009492:	18c0      	adds	r0, r0, r3
 8009494:	4b09      	ldr	r3, [pc, #36]	; (80094bc <__d2b+0xbc>)
 8009496:	6038      	str	r0, [r7, #0]
 8009498:	18e3      	adds	r3, r4, r3
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	18f3      	adds	r3, r6, r3
 800949e:	6958      	ldr	r0, [r3, #20]
 80094a0:	f7ff fd20 	bl	8008ee4 <__hi0bits>
 80094a4:	0164      	lsls	r4, r4, #5
 80094a6:	e7e0      	b.n	800946a <__d2b+0x6a>
 80094a8:	0800a341 	.word	0x0800a341
 80094ac:	0800a352 	.word	0x0800a352
 80094b0:	0000030f 	.word	0x0000030f
 80094b4:	fffffbcd 	.word	0xfffffbcd
 80094b8:	fffffbce 	.word	0xfffffbce
 80094bc:	3fffffff 	.word	0x3fffffff

080094c0 <__ssputs_r>:
 80094c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094c2:	b085      	sub	sp, #20
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	9203      	str	r2, [sp, #12]
 80094c8:	688e      	ldr	r6, [r1, #8]
 80094ca:	9a01      	ldr	r2, [sp, #4]
 80094cc:	0007      	movs	r7, r0
 80094ce:	000c      	movs	r4, r1
 80094d0:	680b      	ldr	r3, [r1, #0]
 80094d2:	4296      	cmp	r6, r2
 80094d4:	d831      	bhi.n	800953a <__ssputs_r+0x7a>
 80094d6:	898a      	ldrh	r2, [r1, #12]
 80094d8:	2190      	movs	r1, #144	; 0x90
 80094da:	00c9      	lsls	r1, r1, #3
 80094dc:	420a      	tst	r2, r1
 80094de:	d029      	beq.n	8009534 <__ssputs_r+0x74>
 80094e0:	2003      	movs	r0, #3
 80094e2:	6921      	ldr	r1, [r4, #16]
 80094e4:	1a5b      	subs	r3, r3, r1
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	6963      	ldr	r3, [r4, #20]
 80094ea:	4343      	muls	r3, r0
 80094ec:	0fdd      	lsrs	r5, r3, #31
 80094ee:	18ed      	adds	r5, r5, r3
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	9802      	ldr	r0, [sp, #8]
 80094f4:	3301      	adds	r3, #1
 80094f6:	181b      	adds	r3, r3, r0
 80094f8:	106d      	asrs	r5, r5, #1
 80094fa:	42ab      	cmp	r3, r5
 80094fc:	d900      	bls.n	8009500 <__ssputs_r+0x40>
 80094fe:	001d      	movs	r5, r3
 8009500:	0552      	lsls	r2, r2, #21
 8009502:	d529      	bpl.n	8009558 <__ssputs_r+0x98>
 8009504:	0029      	movs	r1, r5
 8009506:	0038      	movs	r0, r7
 8009508:	f7ff fbae 	bl	8008c68 <_malloc_r>
 800950c:	1e06      	subs	r6, r0, #0
 800950e:	d02d      	beq.n	800956c <__ssputs_r+0xac>
 8009510:	9a02      	ldr	r2, [sp, #8]
 8009512:	6921      	ldr	r1, [r4, #16]
 8009514:	f7fe fc8c 	bl	8007e30 <memcpy>
 8009518:	89a2      	ldrh	r2, [r4, #12]
 800951a:	4b19      	ldr	r3, [pc, #100]	; (8009580 <__ssputs_r+0xc0>)
 800951c:	401a      	ands	r2, r3
 800951e:	2380      	movs	r3, #128	; 0x80
 8009520:	4313      	orrs	r3, r2
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	9b02      	ldr	r3, [sp, #8]
 8009526:	6126      	str	r6, [r4, #16]
 8009528:	18f6      	adds	r6, r6, r3
 800952a:	6026      	str	r6, [r4, #0]
 800952c:	6165      	str	r5, [r4, #20]
 800952e:	9e01      	ldr	r6, [sp, #4]
 8009530:	1aed      	subs	r5, r5, r3
 8009532:	60a5      	str	r5, [r4, #8]
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	429e      	cmp	r6, r3
 8009538:	d900      	bls.n	800953c <__ssputs_r+0x7c>
 800953a:	9e01      	ldr	r6, [sp, #4]
 800953c:	0032      	movs	r2, r6
 800953e:	9903      	ldr	r1, [sp, #12]
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	f000 f9d4 	bl	80098ee <memmove>
 8009546:	2000      	movs	r0, #0
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	1b9b      	subs	r3, r3, r6
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	199b      	adds	r3, r3, r6
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	b005      	add	sp, #20
 8009556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009558:	002a      	movs	r2, r5
 800955a:	0038      	movs	r0, r7
 800955c:	f000 fa49 	bl	80099f2 <_realloc_r>
 8009560:	1e06      	subs	r6, r0, #0
 8009562:	d1df      	bne.n	8009524 <__ssputs_r+0x64>
 8009564:	0038      	movs	r0, r7
 8009566:	6921      	ldr	r1, [r4, #16]
 8009568:	f7ff fb08 	bl	8008b7c <_free_r>
 800956c:	230c      	movs	r3, #12
 800956e:	2001      	movs	r0, #1
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	89a2      	ldrh	r2, [r4, #12]
 8009574:	3334      	adds	r3, #52	; 0x34
 8009576:	4313      	orrs	r3, r2
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	4240      	negs	r0, r0
 800957c:	e7ea      	b.n	8009554 <__ssputs_r+0x94>
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	fffffb7f 	.word	0xfffffb7f

08009584 <_svfiprintf_r>:
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	b0a1      	sub	sp, #132	; 0x84
 8009588:	9003      	str	r0, [sp, #12]
 800958a:	001d      	movs	r5, r3
 800958c:	898b      	ldrh	r3, [r1, #12]
 800958e:	000f      	movs	r7, r1
 8009590:	0016      	movs	r6, r2
 8009592:	061b      	lsls	r3, r3, #24
 8009594:	d511      	bpl.n	80095ba <_svfiprintf_r+0x36>
 8009596:	690b      	ldr	r3, [r1, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10e      	bne.n	80095ba <_svfiprintf_r+0x36>
 800959c:	2140      	movs	r1, #64	; 0x40
 800959e:	f7ff fb63 	bl	8008c68 <_malloc_r>
 80095a2:	6038      	str	r0, [r7, #0]
 80095a4:	6138      	str	r0, [r7, #16]
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d105      	bne.n	80095b6 <_svfiprintf_r+0x32>
 80095aa:	230c      	movs	r3, #12
 80095ac:	9a03      	ldr	r2, [sp, #12]
 80095ae:	3801      	subs	r0, #1
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	b021      	add	sp, #132	; 0x84
 80095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b6:	2340      	movs	r3, #64	; 0x40
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	2300      	movs	r3, #0
 80095bc:	ac08      	add	r4, sp, #32
 80095be:	6163      	str	r3, [r4, #20]
 80095c0:	3320      	adds	r3, #32
 80095c2:	7663      	strb	r3, [r4, #25]
 80095c4:	3310      	adds	r3, #16
 80095c6:	76a3      	strb	r3, [r4, #26]
 80095c8:	9507      	str	r5, [sp, #28]
 80095ca:	0035      	movs	r5, r6
 80095cc:	782b      	ldrb	r3, [r5, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <_svfiprintf_r+0x52>
 80095d2:	2b25      	cmp	r3, #37	; 0x25
 80095d4:	d148      	bne.n	8009668 <_svfiprintf_r+0xe4>
 80095d6:	1bab      	subs	r3, r5, r6
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	42b5      	cmp	r5, r6
 80095dc:	d00b      	beq.n	80095f6 <_svfiprintf_r+0x72>
 80095de:	0032      	movs	r2, r6
 80095e0:	0039      	movs	r1, r7
 80095e2:	9803      	ldr	r0, [sp, #12]
 80095e4:	f7ff ff6c 	bl	80094c0 <__ssputs_r>
 80095e8:	3001      	adds	r0, #1
 80095ea:	d100      	bne.n	80095ee <_svfiprintf_r+0x6a>
 80095ec:	e0af      	b.n	800974e <_svfiprintf_r+0x1ca>
 80095ee:	6963      	ldr	r3, [r4, #20]
 80095f0:	9a05      	ldr	r2, [sp, #20]
 80095f2:	189b      	adds	r3, r3, r2
 80095f4:	6163      	str	r3, [r4, #20]
 80095f6:	782b      	ldrb	r3, [r5, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d100      	bne.n	80095fe <_svfiprintf_r+0x7a>
 80095fc:	e0a7      	b.n	800974e <_svfiprintf_r+0x1ca>
 80095fe:	2201      	movs	r2, #1
 8009600:	2300      	movs	r3, #0
 8009602:	4252      	negs	r2, r2
 8009604:	6062      	str	r2, [r4, #4]
 8009606:	a904      	add	r1, sp, #16
 8009608:	3254      	adds	r2, #84	; 0x54
 800960a:	1852      	adds	r2, r2, r1
 800960c:	1c6e      	adds	r6, r5, #1
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	60e3      	str	r3, [r4, #12]
 8009612:	60a3      	str	r3, [r4, #8]
 8009614:	7013      	strb	r3, [r2, #0]
 8009616:	65a3      	str	r3, [r4, #88]	; 0x58
 8009618:	4b55      	ldr	r3, [pc, #340]	; (8009770 <_svfiprintf_r+0x1ec>)
 800961a:	2205      	movs	r2, #5
 800961c:	0018      	movs	r0, r3
 800961e:	7831      	ldrb	r1, [r6, #0]
 8009620:	9305      	str	r3, [sp, #20]
 8009622:	f7fe fbfa 	bl	8007e1a <memchr>
 8009626:	1c75      	adds	r5, r6, #1
 8009628:	2800      	cmp	r0, #0
 800962a:	d11f      	bne.n	800966c <_svfiprintf_r+0xe8>
 800962c:	6822      	ldr	r2, [r4, #0]
 800962e:	06d3      	lsls	r3, r2, #27
 8009630:	d504      	bpl.n	800963c <_svfiprintf_r+0xb8>
 8009632:	2353      	movs	r3, #83	; 0x53
 8009634:	a904      	add	r1, sp, #16
 8009636:	185b      	adds	r3, r3, r1
 8009638:	2120      	movs	r1, #32
 800963a:	7019      	strb	r1, [r3, #0]
 800963c:	0713      	lsls	r3, r2, #28
 800963e:	d504      	bpl.n	800964a <_svfiprintf_r+0xc6>
 8009640:	2353      	movs	r3, #83	; 0x53
 8009642:	a904      	add	r1, sp, #16
 8009644:	185b      	adds	r3, r3, r1
 8009646:	212b      	movs	r1, #43	; 0x2b
 8009648:	7019      	strb	r1, [r3, #0]
 800964a:	7833      	ldrb	r3, [r6, #0]
 800964c:	2b2a      	cmp	r3, #42	; 0x2a
 800964e:	d016      	beq.n	800967e <_svfiprintf_r+0xfa>
 8009650:	0035      	movs	r5, r6
 8009652:	2100      	movs	r1, #0
 8009654:	200a      	movs	r0, #10
 8009656:	68e3      	ldr	r3, [r4, #12]
 8009658:	782a      	ldrb	r2, [r5, #0]
 800965a:	1c6e      	adds	r6, r5, #1
 800965c:	3a30      	subs	r2, #48	; 0x30
 800965e:	2a09      	cmp	r2, #9
 8009660:	d94e      	bls.n	8009700 <_svfiprintf_r+0x17c>
 8009662:	2900      	cmp	r1, #0
 8009664:	d111      	bne.n	800968a <_svfiprintf_r+0x106>
 8009666:	e017      	b.n	8009698 <_svfiprintf_r+0x114>
 8009668:	3501      	adds	r5, #1
 800966a:	e7af      	b.n	80095cc <_svfiprintf_r+0x48>
 800966c:	9b05      	ldr	r3, [sp, #20]
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	1ac0      	subs	r0, r0, r3
 8009672:	2301      	movs	r3, #1
 8009674:	4083      	lsls	r3, r0
 8009676:	4313      	orrs	r3, r2
 8009678:	002e      	movs	r6, r5
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	e7cc      	b.n	8009618 <_svfiprintf_r+0x94>
 800967e:	9b07      	ldr	r3, [sp, #28]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	9107      	str	r1, [sp, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	db01      	blt.n	800968e <_svfiprintf_r+0x10a>
 800968a:	930b      	str	r3, [sp, #44]	; 0x2c
 800968c:	e004      	b.n	8009698 <_svfiprintf_r+0x114>
 800968e:	425b      	negs	r3, r3
 8009690:	60e3      	str	r3, [r4, #12]
 8009692:	2302      	movs	r3, #2
 8009694:	4313      	orrs	r3, r2
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	782b      	ldrb	r3, [r5, #0]
 800969a:	2b2e      	cmp	r3, #46	; 0x2e
 800969c:	d10a      	bne.n	80096b4 <_svfiprintf_r+0x130>
 800969e:	786b      	ldrb	r3, [r5, #1]
 80096a0:	2b2a      	cmp	r3, #42	; 0x2a
 80096a2:	d135      	bne.n	8009710 <_svfiprintf_r+0x18c>
 80096a4:	9b07      	ldr	r3, [sp, #28]
 80096a6:	3502      	adds	r5, #2
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9207      	str	r2, [sp, #28]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	db2b      	blt.n	800970a <_svfiprintf_r+0x186>
 80096b2:	9309      	str	r3, [sp, #36]	; 0x24
 80096b4:	4e2f      	ldr	r6, [pc, #188]	; (8009774 <_svfiprintf_r+0x1f0>)
 80096b6:	2203      	movs	r2, #3
 80096b8:	0030      	movs	r0, r6
 80096ba:	7829      	ldrb	r1, [r5, #0]
 80096bc:	f7fe fbad 	bl	8007e1a <memchr>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d006      	beq.n	80096d2 <_svfiprintf_r+0x14e>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	1b80      	subs	r0, r0, r6
 80096c8:	4083      	lsls	r3, r0
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	3501      	adds	r5, #1
 80096ce:	4313      	orrs	r3, r2
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	7829      	ldrb	r1, [r5, #0]
 80096d4:	2206      	movs	r2, #6
 80096d6:	4828      	ldr	r0, [pc, #160]	; (8009778 <_svfiprintf_r+0x1f4>)
 80096d8:	1c6e      	adds	r6, r5, #1
 80096da:	7621      	strb	r1, [r4, #24]
 80096dc:	f7fe fb9d 	bl	8007e1a <memchr>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d03c      	beq.n	800975e <_svfiprintf_r+0x1da>
 80096e4:	4b25      	ldr	r3, [pc, #148]	; (800977c <_svfiprintf_r+0x1f8>)
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d125      	bne.n	8009736 <_svfiprintf_r+0x1b2>
 80096ea:	2207      	movs	r2, #7
 80096ec:	9b07      	ldr	r3, [sp, #28]
 80096ee:	3307      	adds	r3, #7
 80096f0:	4393      	bics	r3, r2
 80096f2:	3308      	adds	r3, #8
 80096f4:	9307      	str	r3, [sp, #28]
 80096f6:	6963      	ldr	r3, [r4, #20]
 80096f8:	9a04      	ldr	r2, [sp, #16]
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	6163      	str	r3, [r4, #20]
 80096fe:	e764      	b.n	80095ca <_svfiprintf_r+0x46>
 8009700:	4343      	muls	r3, r0
 8009702:	0035      	movs	r5, r6
 8009704:	2101      	movs	r1, #1
 8009706:	189b      	adds	r3, r3, r2
 8009708:	e7a6      	b.n	8009658 <_svfiprintf_r+0xd4>
 800970a:	2301      	movs	r3, #1
 800970c:	425b      	negs	r3, r3
 800970e:	e7d0      	b.n	80096b2 <_svfiprintf_r+0x12e>
 8009710:	2300      	movs	r3, #0
 8009712:	200a      	movs	r0, #10
 8009714:	001a      	movs	r2, r3
 8009716:	3501      	adds	r5, #1
 8009718:	6063      	str	r3, [r4, #4]
 800971a:	7829      	ldrb	r1, [r5, #0]
 800971c:	1c6e      	adds	r6, r5, #1
 800971e:	3930      	subs	r1, #48	; 0x30
 8009720:	2909      	cmp	r1, #9
 8009722:	d903      	bls.n	800972c <_svfiprintf_r+0x1a8>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0c5      	beq.n	80096b4 <_svfiprintf_r+0x130>
 8009728:	9209      	str	r2, [sp, #36]	; 0x24
 800972a:	e7c3      	b.n	80096b4 <_svfiprintf_r+0x130>
 800972c:	4342      	muls	r2, r0
 800972e:	0035      	movs	r5, r6
 8009730:	2301      	movs	r3, #1
 8009732:	1852      	adds	r2, r2, r1
 8009734:	e7f1      	b.n	800971a <_svfiprintf_r+0x196>
 8009736:	aa07      	add	r2, sp, #28
 8009738:	9200      	str	r2, [sp, #0]
 800973a:	0021      	movs	r1, r4
 800973c:	003a      	movs	r2, r7
 800973e:	4b10      	ldr	r3, [pc, #64]	; (8009780 <_svfiprintf_r+0x1fc>)
 8009740:	9803      	ldr	r0, [sp, #12]
 8009742:	f7fd fddd 	bl	8007300 <_printf_float>
 8009746:	9004      	str	r0, [sp, #16]
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	3301      	adds	r3, #1
 800974c:	d1d3      	bne.n	80096f6 <_svfiprintf_r+0x172>
 800974e:	89bb      	ldrh	r3, [r7, #12]
 8009750:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009752:	065b      	lsls	r3, r3, #25
 8009754:	d400      	bmi.n	8009758 <_svfiprintf_r+0x1d4>
 8009756:	e72c      	b.n	80095b2 <_svfiprintf_r+0x2e>
 8009758:	2001      	movs	r0, #1
 800975a:	4240      	negs	r0, r0
 800975c:	e729      	b.n	80095b2 <_svfiprintf_r+0x2e>
 800975e:	aa07      	add	r2, sp, #28
 8009760:	9200      	str	r2, [sp, #0]
 8009762:	0021      	movs	r1, r4
 8009764:	003a      	movs	r2, r7
 8009766:	4b06      	ldr	r3, [pc, #24]	; (8009780 <_svfiprintf_r+0x1fc>)
 8009768:	9803      	ldr	r0, [sp, #12]
 800976a:	f7fe f88f 	bl	800788c <_printf_i>
 800976e:	e7ea      	b.n	8009746 <_svfiprintf_r+0x1c2>
 8009770:	0800a4ac 	.word	0x0800a4ac
 8009774:	0800a4b2 	.word	0x0800a4b2
 8009778:	0800a4b6 	.word	0x0800a4b6
 800977c:	08007301 	.word	0x08007301
 8009780:	080094c1 	.word	0x080094c1

08009784 <__sflush_r>:
 8009784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009786:	898b      	ldrh	r3, [r1, #12]
 8009788:	0005      	movs	r5, r0
 800978a:	000c      	movs	r4, r1
 800978c:	071a      	lsls	r2, r3, #28
 800978e:	d45c      	bmi.n	800984a <__sflush_r+0xc6>
 8009790:	684a      	ldr	r2, [r1, #4]
 8009792:	2a00      	cmp	r2, #0
 8009794:	dc04      	bgt.n	80097a0 <__sflush_r+0x1c>
 8009796:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009798:	2a00      	cmp	r2, #0
 800979a:	dc01      	bgt.n	80097a0 <__sflush_r+0x1c>
 800979c:	2000      	movs	r0, #0
 800979e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80097a2:	2f00      	cmp	r7, #0
 80097a4:	d0fa      	beq.n	800979c <__sflush_r+0x18>
 80097a6:	2200      	movs	r2, #0
 80097a8:	2080      	movs	r0, #128	; 0x80
 80097aa:	682e      	ldr	r6, [r5, #0]
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	001a      	movs	r2, r3
 80097b0:	0140      	lsls	r0, r0, #5
 80097b2:	6a21      	ldr	r1, [r4, #32]
 80097b4:	4002      	ands	r2, r0
 80097b6:	4203      	tst	r3, r0
 80097b8:	d034      	beq.n	8009824 <__sflush_r+0xa0>
 80097ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	075b      	lsls	r3, r3, #29
 80097c0:	d506      	bpl.n	80097d0 <__sflush_r+0x4c>
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	1ac0      	subs	r0, r0, r3
 80097c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <__sflush_r+0x4c>
 80097cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097ce:	1ac0      	subs	r0, r0, r3
 80097d0:	0002      	movs	r2, r0
 80097d2:	2300      	movs	r3, #0
 80097d4:	0028      	movs	r0, r5
 80097d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80097d8:	6a21      	ldr	r1, [r4, #32]
 80097da:	47b8      	blx	r7
 80097dc:	89a2      	ldrh	r2, [r4, #12]
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d106      	bne.n	80097f0 <__sflush_r+0x6c>
 80097e2:	6829      	ldr	r1, [r5, #0]
 80097e4:	291d      	cmp	r1, #29
 80097e6:	d82c      	bhi.n	8009842 <__sflush_r+0xbe>
 80097e8:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <__sflush_r+0x110>)
 80097ea:	410b      	asrs	r3, r1
 80097ec:	07db      	lsls	r3, r3, #31
 80097ee:	d428      	bmi.n	8009842 <__sflush_r+0xbe>
 80097f0:	2300      	movs	r3, #0
 80097f2:	6063      	str	r3, [r4, #4]
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	04d2      	lsls	r2, r2, #19
 80097fa:	d505      	bpl.n	8009808 <__sflush_r+0x84>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <__sflush_r+0x82>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d100      	bne.n	8009808 <__sflush_r+0x84>
 8009806:	6560      	str	r0, [r4, #84]	; 0x54
 8009808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980a:	602e      	str	r6, [r5, #0]
 800980c:	2900      	cmp	r1, #0
 800980e:	d0c5      	beq.n	800979c <__sflush_r+0x18>
 8009810:	0023      	movs	r3, r4
 8009812:	3344      	adds	r3, #68	; 0x44
 8009814:	4299      	cmp	r1, r3
 8009816:	d002      	beq.n	800981e <__sflush_r+0x9a>
 8009818:	0028      	movs	r0, r5
 800981a:	f7ff f9af 	bl	8008b7c <_free_r>
 800981e:	2000      	movs	r0, #0
 8009820:	6360      	str	r0, [r4, #52]	; 0x34
 8009822:	e7bc      	b.n	800979e <__sflush_r+0x1a>
 8009824:	2301      	movs	r3, #1
 8009826:	0028      	movs	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d1c6      	bne.n	80097bc <__sflush_r+0x38>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0c3      	beq.n	80097bc <__sflush_r+0x38>
 8009834:	2b1d      	cmp	r3, #29
 8009836:	d001      	beq.n	800983c <__sflush_r+0xb8>
 8009838:	2b16      	cmp	r3, #22
 800983a:	d101      	bne.n	8009840 <__sflush_r+0xbc>
 800983c:	602e      	str	r6, [r5, #0]
 800983e:	e7ad      	b.n	800979c <__sflush_r+0x18>
 8009840:	89a2      	ldrh	r2, [r4, #12]
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	4313      	orrs	r3, r2
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	e7a9      	b.n	800979e <__sflush_r+0x1a>
 800984a:	690e      	ldr	r6, [r1, #16]
 800984c:	2e00      	cmp	r6, #0
 800984e:	d0a5      	beq.n	800979c <__sflush_r+0x18>
 8009850:	680f      	ldr	r7, [r1, #0]
 8009852:	600e      	str	r6, [r1, #0]
 8009854:	1bba      	subs	r2, r7, r6
 8009856:	9201      	str	r2, [sp, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	079b      	lsls	r3, r3, #30
 800985c:	d100      	bne.n	8009860 <__sflush_r+0xdc>
 800985e:	694a      	ldr	r2, [r1, #20]
 8009860:	60a2      	str	r2, [r4, #8]
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	dd99      	ble.n	800979c <__sflush_r+0x18>
 8009868:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800986a:	0032      	movs	r2, r6
 800986c:	001f      	movs	r7, r3
 800986e:	0028      	movs	r0, r5
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	6a21      	ldr	r1, [r4, #32]
 8009874:	47b8      	blx	r7
 8009876:	2800      	cmp	r0, #0
 8009878:	dc06      	bgt.n	8009888 <__sflush_r+0x104>
 800987a:	2340      	movs	r3, #64	; 0x40
 800987c:	2001      	movs	r0, #1
 800987e:	89a2      	ldrh	r2, [r4, #12]
 8009880:	4240      	negs	r0, r0
 8009882:	4313      	orrs	r3, r2
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	e78a      	b.n	800979e <__sflush_r+0x1a>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	1836      	adds	r6, r6, r0
 800988c:	1a1b      	subs	r3, r3, r0
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	e7e7      	b.n	8009862 <__sflush_r+0xde>
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	dfbffffe 	.word	0xdfbffffe

08009898 <_fflush_r>:
 8009898:	690b      	ldr	r3, [r1, #16]
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	0005      	movs	r5, r0
 800989e:	000c      	movs	r4, r1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <_fflush_r+0x12>
 80098a4:	2500      	movs	r5, #0
 80098a6:	0028      	movs	r0, r5
 80098a8:	bd70      	pop	{r4, r5, r6, pc}
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d004      	beq.n	80098b8 <_fflush_r+0x20>
 80098ae:	6a03      	ldr	r3, [r0, #32]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <_fflush_r+0x20>
 80098b4:	f7fe f98a 	bl	8007bcc <__sinit>
 80098b8:	220c      	movs	r2, #12
 80098ba:	5ea3      	ldrsh	r3, [r4, r2]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d0f1      	beq.n	80098a4 <_fflush_r+0xc>
 80098c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098c2:	07d2      	lsls	r2, r2, #31
 80098c4:	d404      	bmi.n	80098d0 <_fflush_r+0x38>
 80098c6:	059b      	lsls	r3, r3, #22
 80098c8:	d402      	bmi.n	80098d0 <_fflush_r+0x38>
 80098ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098cc:	f7fe faa3 	bl	8007e16 <__retarget_lock_acquire_recursive>
 80098d0:	0028      	movs	r0, r5
 80098d2:	0021      	movs	r1, r4
 80098d4:	f7ff ff56 	bl	8009784 <__sflush_r>
 80098d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098da:	0005      	movs	r5, r0
 80098dc:	07db      	lsls	r3, r3, #31
 80098de:	d4e2      	bmi.n	80098a6 <_fflush_r+0xe>
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	059b      	lsls	r3, r3, #22
 80098e4:	d4df      	bmi.n	80098a6 <_fflush_r+0xe>
 80098e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098e8:	f7fe fa96 	bl	8007e18 <__retarget_lock_release_recursive>
 80098ec:	e7db      	b.n	80098a6 <_fflush_r+0xe>

080098ee <memmove>:
 80098ee:	b510      	push	{r4, lr}
 80098f0:	4288      	cmp	r0, r1
 80098f2:	d902      	bls.n	80098fa <memmove+0xc>
 80098f4:	188b      	adds	r3, r1, r2
 80098f6:	4298      	cmp	r0, r3
 80098f8:	d303      	bcc.n	8009902 <memmove+0x14>
 80098fa:	2300      	movs	r3, #0
 80098fc:	e007      	b.n	800990e <memmove+0x20>
 80098fe:	5c8b      	ldrb	r3, [r1, r2]
 8009900:	5483      	strb	r3, [r0, r2]
 8009902:	3a01      	subs	r2, #1
 8009904:	d2fb      	bcs.n	80098fe <memmove+0x10>
 8009906:	bd10      	pop	{r4, pc}
 8009908:	5ccc      	ldrb	r4, [r1, r3]
 800990a:	54c4      	strb	r4, [r0, r3]
 800990c:	3301      	adds	r3, #1
 800990e:	429a      	cmp	r2, r3
 8009910:	d1fa      	bne.n	8009908 <memmove+0x1a>
 8009912:	e7f8      	b.n	8009906 <memmove+0x18>

08009914 <_sbrk_r>:
 8009914:	2300      	movs	r3, #0
 8009916:	b570      	push	{r4, r5, r6, lr}
 8009918:	4d06      	ldr	r5, [pc, #24]	; (8009934 <_sbrk_r+0x20>)
 800991a:	0004      	movs	r4, r0
 800991c:	0008      	movs	r0, r1
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	f7fa fa78 	bl	8003e14 <_sbrk>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d103      	bne.n	8009930 <_sbrk_r+0x1c>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d000      	beq.n	8009930 <_sbrk_r+0x1c>
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	bd70      	pop	{r4, r5, r6, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	2000078c 	.word	0x2000078c

08009938 <__assert_func>:
 8009938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800993a:	0014      	movs	r4, r2
 800993c:	001a      	movs	r2, r3
 800993e:	4b09      	ldr	r3, [pc, #36]	; (8009964 <__assert_func+0x2c>)
 8009940:	0005      	movs	r5, r0
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	000e      	movs	r6, r1
 8009946:	68d8      	ldr	r0, [r3, #12]
 8009948:	4b07      	ldr	r3, [pc, #28]	; (8009968 <__assert_func+0x30>)
 800994a:	2c00      	cmp	r4, #0
 800994c:	d101      	bne.n	8009952 <__assert_func+0x1a>
 800994e:	4b07      	ldr	r3, [pc, #28]	; (800996c <__assert_func+0x34>)
 8009950:	001c      	movs	r4, r3
 8009952:	4907      	ldr	r1, [pc, #28]	; (8009970 <__assert_func+0x38>)
 8009954:	9301      	str	r3, [sp, #4]
 8009956:	9402      	str	r4, [sp, #8]
 8009958:	002b      	movs	r3, r5
 800995a:	9600      	str	r6, [sp, #0]
 800995c:	f000 f886 	bl	8009a6c <fiprintf>
 8009960:	f000 f894 	bl	8009a8c <abort>
 8009964:	200002c8 	.word	0x200002c8
 8009968:	0800a4c7 	.word	0x0800a4c7
 800996c:	0800a502 	.word	0x0800a502
 8009970:	0800a4d4 	.word	0x0800a4d4

08009974 <_calloc_r>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	0c0b      	lsrs	r3, r1, #16
 8009978:	0c15      	lsrs	r5, r2, #16
 800997a:	2b00      	cmp	r3, #0
 800997c:	d11e      	bne.n	80099bc <_calloc_r+0x48>
 800997e:	2d00      	cmp	r5, #0
 8009980:	d10c      	bne.n	800999c <_calloc_r+0x28>
 8009982:	b289      	uxth	r1, r1
 8009984:	b294      	uxth	r4, r2
 8009986:	434c      	muls	r4, r1
 8009988:	0021      	movs	r1, r4
 800998a:	f7ff f96d 	bl	8008c68 <_malloc_r>
 800998e:	1e05      	subs	r5, r0, #0
 8009990:	d01b      	beq.n	80099ca <_calloc_r+0x56>
 8009992:	0022      	movs	r2, r4
 8009994:	2100      	movs	r1, #0
 8009996:	f7fe f9b9 	bl	8007d0c <memset>
 800999a:	e016      	b.n	80099ca <_calloc_r+0x56>
 800999c:	1c2b      	adds	r3, r5, #0
 800999e:	1c0c      	adds	r4, r1, #0
 80099a0:	b289      	uxth	r1, r1
 80099a2:	b292      	uxth	r2, r2
 80099a4:	434a      	muls	r2, r1
 80099a6:	b2a1      	uxth	r1, r4
 80099a8:	b29c      	uxth	r4, r3
 80099aa:	434c      	muls	r4, r1
 80099ac:	0c13      	lsrs	r3, r2, #16
 80099ae:	18e4      	adds	r4, r4, r3
 80099b0:	0c23      	lsrs	r3, r4, #16
 80099b2:	d107      	bne.n	80099c4 <_calloc_r+0x50>
 80099b4:	0424      	lsls	r4, r4, #16
 80099b6:	b292      	uxth	r2, r2
 80099b8:	4314      	orrs	r4, r2
 80099ba:	e7e5      	b.n	8009988 <_calloc_r+0x14>
 80099bc:	2d00      	cmp	r5, #0
 80099be:	d101      	bne.n	80099c4 <_calloc_r+0x50>
 80099c0:	1c14      	adds	r4, r2, #0
 80099c2:	e7ed      	b.n	80099a0 <_calloc_r+0x2c>
 80099c4:	230c      	movs	r3, #12
 80099c6:	2500      	movs	r5, #0
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	0028      	movs	r0, r5
 80099cc:	bd70      	pop	{r4, r5, r6, pc}

080099ce <__ascii_mbtowc>:
 80099ce:	b082      	sub	sp, #8
 80099d0:	2900      	cmp	r1, #0
 80099d2:	d100      	bne.n	80099d6 <__ascii_mbtowc+0x8>
 80099d4:	a901      	add	r1, sp, #4
 80099d6:	1e10      	subs	r0, r2, #0
 80099d8:	d006      	beq.n	80099e8 <__ascii_mbtowc+0x1a>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d006      	beq.n	80099ec <__ascii_mbtowc+0x1e>
 80099de:	7813      	ldrb	r3, [r2, #0]
 80099e0:	600b      	str	r3, [r1, #0]
 80099e2:	7810      	ldrb	r0, [r2, #0]
 80099e4:	1e43      	subs	r3, r0, #1
 80099e6:	4198      	sbcs	r0, r3
 80099e8:	b002      	add	sp, #8
 80099ea:	4770      	bx	lr
 80099ec:	2002      	movs	r0, #2
 80099ee:	4240      	negs	r0, r0
 80099f0:	e7fa      	b.n	80099e8 <__ascii_mbtowc+0x1a>

080099f2 <_realloc_r>:
 80099f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f4:	0007      	movs	r7, r0
 80099f6:	000e      	movs	r6, r1
 80099f8:	0014      	movs	r4, r2
 80099fa:	2900      	cmp	r1, #0
 80099fc:	d105      	bne.n	8009a0a <_realloc_r+0x18>
 80099fe:	0011      	movs	r1, r2
 8009a00:	f7ff f932 	bl	8008c68 <_malloc_r>
 8009a04:	0005      	movs	r5, r0
 8009a06:	0028      	movs	r0, r5
 8009a08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	d103      	bne.n	8009a16 <_realloc_r+0x24>
 8009a0e:	f7ff f8b5 	bl	8008b7c <_free_r>
 8009a12:	0025      	movs	r5, r4
 8009a14:	e7f7      	b.n	8009a06 <_realloc_r+0x14>
 8009a16:	f000 f840 	bl	8009a9a <_malloc_usable_size_r>
 8009a1a:	9001      	str	r0, [sp, #4]
 8009a1c:	4284      	cmp	r4, r0
 8009a1e:	d803      	bhi.n	8009a28 <_realloc_r+0x36>
 8009a20:	0035      	movs	r5, r6
 8009a22:	0843      	lsrs	r3, r0, #1
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	d3ee      	bcc.n	8009a06 <_realloc_r+0x14>
 8009a28:	0021      	movs	r1, r4
 8009a2a:	0038      	movs	r0, r7
 8009a2c:	f7ff f91c 	bl	8008c68 <_malloc_r>
 8009a30:	1e05      	subs	r5, r0, #0
 8009a32:	d0e8      	beq.n	8009a06 <_realloc_r+0x14>
 8009a34:	9b01      	ldr	r3, [sp, #4]
 8009a36:	0022      	movs	r2, r4
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d900      	bls.n	8009a3e <_realloc_r+0x4c>
 8009a3c:	001a      	movs	r2, r3
 8009a3e:	0031      	movs	r1, r6
 8009a40:	0028      	movs	r0, r5
 8009a42:	f7fe f9f5 	bl	8007e30 <memcpy>
 8009a46:	0031      	movs	r1, r6
 8009a48:	0038      	movs	r0, r7
 8009a4a:	f7ff f897 	bl	8008b7c <_free_r>
 8009a4e:	e7da      	b.n	8009a06 <_realloc_r+0x14>

08009a50 <__ascii_wctomb>:
 8009a50:	0003      	movs	r3, r0
 8009a52:	1e08      	subs	r0, r1, #0
 8009a54:	d005      	beq.n	8009a62 <__ascii_wctomb+0x12>
 8009a56:	2aff      	cmp	r2, #255	; 0xff
 8009a58:	d904      	bls.n	8009a64 <__ascii_wctomb+0x14>
 8009a5a:	228a      	movs	r2, #138	; 0x8a
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	4240      	negs	r0, r0
 8009a62:	4770      	bx	lr
 8009a64:	2001      	movs	r0, #1
 8009a66:	700a      	strb	r2, [r1, #0]
 8009a68:	e7fb      	b.n	8009a62 <__ascii_wctomb+0x12>
	...

08009a6c <fiprintf>:
 8009a6c:	b40e      	push	{r1, r2, r3}
 8009a6e:	b517      	push	{r0, r1, r2, r4, lr}
 8009a70:	4c05      	ldr	r4, [pc, #20]	; (8009a88 <fiprintf+0x1c>)
 8009a72:	ab05      	add	r3, sp, #20
 8009a74:	cb04      	ldmia	r3!, {r2}
 8009a76:	0001      	movs	r1, r0
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	f000 f83c 	bl	8009af8 <_vfiprintf_r>
 8009a80:	bc1e      	pop	{r1, r2, r3, r4}
 8009a82:	bc08      	pop	{r3}
 8009a84:	b003      	add	sp, #12
 8009a86:	4718      	bx	r3
 8009a88:	200002c8 	.word	0x200002c8

08009a8c <abort>:
 8009a8c:	2006      	movs	r0, #6
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	f000 fa1e 	bl	8009ed0 <raise>
 8009a94:	2001      	movs	r0, #1
 8009a96:	f7fa f94c 	bl	8003d32 <_exit>

08009a9a <_malloc_usable_size_r>:
 8009a9a:	1f0b      	subs	r3, r1, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	1f18      	subs	r0, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	da01      	bge.n	8009aa8 <_malloc_usable_size_r+0xe>
 8009aa4:	580b      	ldr	r3, [r1, r0]
 8009aa6:	18c0      	adds	r0, r0, r3
 8009aa8:	4770      	bx	lr

08009aaa <__sfputc_r>:
 8009aaa:	6893      	ldr	r3, [r2, #8]
 8009aac:	b510      	push	{r4, lr}
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	6093      	str	r3, [r2, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	da04      	bge.n	8009ac0 <__sfputc_r+0x16>
 8009ab6:	6994      	ldr	r4, [r2, #24]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	db07      	blt.n	8009acc <__sfputc_r+0x22>
 8009abc:	290a      	cmp	r1, #10
 8009abe:	d005      	beq.n	8009acc <__sfputc_r+0x22>
 8009ac0:	6813      	ldr	r3, [r2, #0]
 8009ac2:	1c58      	adds	r0, r3, #1
 8009ac4:	6010      	str	r0, [r2, #0]
 8009ac6:	7019      	strb	r1, [r3, #0]
 8009ac8:	0008      	movs	r0, r1
 8009aca:	bd10      	pop	{r4, pc}
 8009acc:	f000 f930 	bl	8009d30 <__swbuf_r>
 8009ad0:	0001      	movs	r1, r0
 8009ad2:	e7f9      	b.n	8009ac8 <__sfputc_r+0x1e>

08009ad4 <__sfputs_r>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	0006      	movs	r6, r0
 8009ad8:	000f      	movs	r7, r1
 8009ada:	0014      	movs	r4, r2
 8009adc:	18d5      	adds	r5, r2, r3
 8009ade:	42ac      	cmp	r4, r5
 8009ae0:	d101      	bne.n	8009ae6 <__sfputs_r+0x12>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e007      	b.n	8009af6 <__sfputs_r+0x22>
 8009ae6:	7821      	ldrb	r1, [r4, #0]
 8009ae8:	003a      	movs	r2, r7
 8009aea:	0030      	movs	r0, r6
 8009aec:	f7ff ffdd 	bl	8009aaa <__sfputc_r>
 8009af0:	3401      	adds	r4, #1
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d1f3      	bne.n	8009ade <__sfputs_r+0xa>
 8009af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009af8 <_vfiprintf_r>:
 8009af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afa:	b0a1      	sub	sp, #132	; 0x84
 8009afc:	000f      	movs	r7, r1
 8009afe:	0015      	movs	r5, r2
 8009b00:	001e      	movs	r6, r3
 8009b02:	9003      	str	r0, [sp, #12]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d004      	beq.n	8009b12 <_vfiprintf_r+0x1a>
 8009b08:	6a03      	ldr	r3, [r0, #32]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <_vfiprintf_r+0x1a>
 8009b0e:	f7fe f85d 	bl	8007bcc <__sinit>
 8009b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b14:	07db      	lsls	r3, r3, #31
 8009b16:	d405      	bmi.n	8009b24 <_vfiprintf_r+0x2c>
 8009b18:	89bb      	ldrh	r3, [r7, #12]
 8009b1a:	059b      	lsls	r3, r3, #22
 8009b1c:	d402      	bmi.n	8009b24 <_vfiprintf_r+0x2c>
 8009b1e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009b20:	f7fe f979 	bl	8007e16 <__retarget_lock_acquire_recursive>
 8009b24:	89bb      	ldrh	r3, [r7, #12]
 8009b26:	071b      	lsls	r3, r3, #28
 8009b28:	d502      	bpl.n	8009b30 <_vfiprintf_r+0x38>
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d113      	bne.n	8009b58 <_vfiprintf_r+0x60>
 8009b30:	0039      	movs	r1, r7
 8009b32:	9803      	ldr	r0, [sp, #12]
 8009b34:	f000 f93e 	bl	8009db4 <__swsetup_r>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d00d      	beq.n	8009b58 <_vfiprintf_r+0x60>
 8009b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b3e:	07db      	lsls	r3, r3, #31
 8009b40:	d503      	bpl.n	8009b4a <_vfiprintf_r+0x52>
 8009b42:	2001      	movs	r0, #1
 8009b44:	4240      	negs	r0, r0
 8009b46:	b021      	add	sp, #132	; 0x84
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4a:	89bb      	ldrh	r3, [r7, #12]
 8009b4c:	059b      	lsls	r3, r3, #22
 8009b4e:	d4f8      	bmi.n	8009b42 <_vfiprintf_r+0x4a>
 8009b50:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009b52:	f7fe f961 	bl	8007e18 <__retarget_lock_release_recursive>
 8009b56:	e7f4      	b.n	8009b42 <_vfiprintf_r+0x4a>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	ac08      	add	r4, sp, #32
 8009b5c:	6163      	str	r3, [r4, #20]
 8009b5e:	3320      	adds	r3, #32
 8009b60:	7663      	strb	r3, [r4, #25]
 8009b62:	3310      	adds	r3, #16
 8009b64:	76a3      	strb	r3, [r4, #26]
 8009b66:	9607      	str	r6, [sp, #28]
 8009b68:	002e      	movs	r6, r5
 8009b6a:	7833      	ldrb	r3, [r6, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <_vfiprintf_r+0x7c>
 8009b70:	2b25      	cmp	r3, #37	; 0x25
 8009b72:	d148      	bne.n	8009c06 <_vfiprintf_r+0x10e>
 8009b74:	1b73      	subs	r3, r6, r5
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	42ae      	cmp	r6, r5
 8009b7a:	d00b      	beq.n	8009b94 <_vfiprintf_r+0x9c>
 8009b7c:	002a      	movs	r2, r5
 8009b7e:	0039      	movs	r1, r7
 8009b80:	9803      	ldr	r0, [sp, #12]
 8009b82:	f7ff ffa7 	bl	8009ad4 <__sfputs_r>
 8009b86:	3001      	adds	r0, #1
 8009b88:	d100      	bne.n	8009b8c <_vfiprintf_r+0x94>
 8009b8a:	e0af      	b.n	8009cec <_vfiprintf_r+0x1f4>
 8009b8c:	6963      	ldr	r3, [r4, #20]
 8009b8e:	9a05      	ldr	r2, [sp, #20]
 8009b90:	189b      	adds	r3, r3, r2
 8009b92:	6163      	str	r3, [r4, #20]
 8009b94:	7833      	ldrb	r3, [r6, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d100      	bne.n	8009b9c <_vfiprintf_r+0xa4>
 8009b9a:	e0a7      	b.n	8009cec <_vfiprintf_r+0x1f4>
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4252      	negs	r2, r2
 8009ba2:	6062      	str	r2, [r4, #4]
 8009ba4:	a904      	add	r1, sp, #16
 8009ba6:	3254      	adds	r2, #84	; 0x54
 8009ba8:	1852      	adds	r2, r2, r1
 8009baa:	1c75      	adds	r5, r6, #1
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	60e3      	str	r3, [r4, #12]
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	7013      	strb	r3, [r2, #0]
 8009bb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009bb6:	4b59      	ldr	r3, [pc, #356]	; (8009d1c <_vfiprintf_r+0x224>)
 8009bb8:	2205      	movs	r2, #5
 8009bba:	0018      	movs	r0, r3
 8009bbc:	7829      	ldrb	r1, [r5, #0]
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	f7fe f92b 	bl	8007e1a <memchr>
 8009bc4:	1c6e      	adds	r6, r5, #1
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d11f      	bne.n	8009c0a <_vfiprintf_r+0x112>
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	06d3      	lsls	r3, r2, #27
 8009bce:	d504      	bpl.n	8009bda <_vfiprintf_r+0xe2>
 8009bd0:	2353      	movs	r3, #83	; 0x53
 8009bd2:	a904      	add	r1, sp, #16
 8009bd4:	185b      	adds	r3, r3, r1
 8009bd6:	2120      	movs	r1, #32
 8009bd8:	7019      	strb	r1, [r3, #0]
 8009bda:	0713      	lsls	r3, r2, #28
 8009bdc:	d504      	bpl.n	8009be8 <_vfiprintf_r+0xf0>
 8009bde:	2353      	movs	r3, #83	; 0x53
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	185b      	adds	r3, r3, r1
 8009be4:	212b      	movs	r1, #43	; 0x2b
 8009be6:	7019      	strb	r1, [r3, #0]
 8009be8:	782b      	ldrb	r3, [r5, #0]
 8009bea:	2b2a      	cmp	r3, #42	; 0x2a
 8009bec:	d016      	beq.n	8009c1c <_vfiprintf_r+0x124>
 8009bee:	002e      	movs	r6, r5
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	200a      	movs	r0, #10
 8009bf4:	68e3      	ldr	r3, [r4, #12]
 8009bf6:	7832      	ldrb	r2, [r6, #0]
 8009bf8:	1c75      	adds	r5, r6, #1
 8009bfa:	3a30      	subs	r2, #48	; 0x30
 8009bfc:	2a09      	cmp	r2, #9
 8009bfe:	d94e      	bls.n	8009c9e <_vfiprintf_r+0x1a6>
 8009c00:	2900      	cmp	r1, #0
 8009c02:	d111      	bne.n	8009c28 <_vfiprintf_r+0x130>
 8009c04:	e017      	b.n	8009c36 <_vfiprintf_r+0x13e>
 8009c06:	3601      	adds	r6, #1
 8009c08:	e7af      	b.n	8009b6a <_vfiprintf_r+0x72>
 8009c0a:	9b05      	ldr	r3, [sp, #20]
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	1ac0      	subs	r0, r0, r3
 8009c10:	2301      	movs	r3, #1
 8009c12:	4083      	lsls	r3, r0
 8009c14:	4313      	orrs	r3, r2
 8009c16:	0035      	movs	r5, r6
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	e7cc      	b.n	8009bb6 <_vfiprintf_r+0xbe>
 8009c1c:	9b07      	ldr	r3, [sp, #28]
 8009c1e:	1d19      	adds	r1, r3, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	9107      	str	r1, [sp, #28]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	db01      	blt.n	8009c2c <_vfiprintf_r+0x134>
 8009c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c2a:	e004      	b.n	8009c36 <_vfiprintf_r+0x13e>
 8009c2c:	425b      	negs	r3, r3
 8009c2e:	60e3      	str	r3, [r4, #12]
 8009c30:	2302      	movs	r3, #2
 8009c32:	4313      	orrs	r3, r2
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	7833      	ldrb	r3, [r6, #0]
 8009c38:	2b2e      	cmp	r3, #46	; 0x2e
 8009c3a:	d10a      	bne.n	8009c52 <_vfiprintf_r+0x15a>
 8009c3c:	7873      	ldrb	r3, [r6, #1]
 8009c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c40:	d135      	bne.n	8009cae <_vfiprintf_r+0x1b6>
 8009c42:	9b07      	ldr	r3, [sp, #28]
 8009c44:	3602      	adds	r6, #2
 8009c46:	1d1a      	adds	r2, r3, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	9207      	str	r2, [sp, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	db2b      	blt.n	8009ca8 <_vfiprintf_r+0x1b0>
 8009c50:	9309      	str	r3, [sp, #36]	; 0x24
 8009c52:	4d33      	ldr	r5, [pc, #204]	; (8009d20 <_vfiprintf_r+0x228>)
 8009c54:	2203      	movs	r2, #3
 8009c56:	0028      	movs	r0, r5
 8009c58:	7831      	ldrb	r1, [r6, #0]
 8009c5a:	f7fe f8de 	bl	8007e1a <memchr>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d006      	beq.n	8009c70 <_vfiprintf_r+0x178>
 8009c62:	2340      	movs	r3, #64	; 0x40
 8009c64:	1b40      	subs	r0, r0, r5
 8009c66:	4083      	lsls	r3, r0
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	7831      	ldrb	r1, [r6, #0]
 8009c72:	2206      	movs	r2, #6
 8009c74:	482b      	ldr	r0, [pc, #172]	; (8009d24 <_vfiprintf_r+0x22c>)
 8009c76:	1c75      	adds	r5, r6, #1
 8009c78:	7621      	strb	r1, [r4, #24]
 8009c7a:	f7fe f8ce 	bl	8007e1a <memchr>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d043      	beq.n	8009d0a <_vfiprintf_r+0x212>
 8009c82:	4b29      	ldr	r3, [pc, #164]	; (8009d28 <_vfiprintf_r+0x230>)
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d125      	bne.n	8009cd4 <_vfiprintf_r+0x1dc>
 8009c88:	2207      	movs	r2, #7
 8009c8a:	9b07      	ldr	r3, [sp, #28]
 8009c8c:	3307      	adds	r3, #7
 8009c8e:	4393      	bics	r3, r2
 8009c90:	3308      	adds	r3, #8
 8009c92:	9307      	str	r3, [sp, #28]
 8009c94:	6963      	ldr	r3, [r4, #20]
 8009c96:	9a04      	ldr	r2, [sp, #16]
 8009c98:	189b      	adds	r3, r3, r2
 8009c9a:	6163      	str	r3, [r4, #20]
 8009c9c:	e764      	b.n	8009b68 <_vfiprintf_r+0x70>
 8009c9e:	4343      	muls	r3, r0
 8009ca0:	002e      	movs	r6, r5
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	189b      	adds	r3, r3, r2
 8009ca6:	e7a6      	b.n	8009bf6 <_vfiprintf_r+0xfe>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	425b      	negs	r3, r3
 8009cac:	e7d0      	b.n	8009c50 <_vfiprintf_r+0x158>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	200a      	movs	r0, #10
 8009cb2:	001a      	movs	r2, r3
 8009cb4:	3601      	adds	r6, #1
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	7831      	ldrb	r1, [r6, #0]
 8009cba:	1c75      	adds	r5, r6, #1
 8009cbc:	3930      	subs	r1, #48	; 0x30
 8009cbe:	2909      	cmp	r1, #9
 8009cc0:	d903      	bls.n	8009cca <_vfiprintf_r+0x1d2>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0c5      	beq.n	8009c52 <_vfiprintf_r+0x15a>
 8009cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc8:	e7c3      	b.n	8009c52 <_vfiprintf_r+0x15a>
 8009cca:	4342      	muls	r2, r0
 8009ccc:	002e      	movs	r6, r5
 8009cce:	2301      	movs	r3, #1
 8009cd0:	1852      	adds	r2, r2, r1
 8009cd2:	e7f1      	b.n	8009cb8 <_vfiprintf_r+0x1c0>
 8009cd4:	aa07      	add	r2, sp, #28
 8009cd6:	9200      	str	r2, [sp, #0]
 8009cd8:	0021      	movs	r1, r4
 8009cda:	003a      	movs	r2, r7
 8009cdc:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <_vfiprintf_r+0x234>)
 8009cde:	9803      	ldr	r0, [sp, #12]
 8009ce0:	f7fd fb0e 	bl	8007300 <_printf_float>
 8009ce4:	9004      	str	r0, [sp, #16]
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	d1d3      	bne.n	8009c94 <_vfiprintf_r+0x19c>
 8009cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cee:	07db      	lsls	r3, r3, #31
 8009cf0:	d405      	bmi.n	8009cfe <_vfiprintf_r+0x206>
 8009cf2:	89bb      	ldrh	r3, [r7, #12]
 8009cf4:	059b      	lsls	r3, r3, #22
 8009cf6:	d402      	bmi.n	8009cfe <_vfiprintf_r+0x206>
 8009cf8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009cfa:	f7fe f88d 	bl	8007e18 <__retarget_lock_release_recursive>
 8009cfe:	89bb      	ldrh	r3, [r7, #12]
 8009d00:	065b      	lsls	r3, r3, #25
 8009d02:	d500      	bpl.n	8009d06 <_vfiprintf_r+0x20e>
 8009d04:	e71d      	b.n	8009b42 <_vfiprintf_r+0x4a>
 8009d06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d08:	e71d      	b.n	8009b46 <_vfiprintf_r+0x4e>
 8009d0a:	aa07      	add	r2, sp, #28
 8009d0c:	9200      	str	r2, [sp, #0]
 8009d0e:	0021      	movs	r1, r4
 8009d10:	003a      	movs	r2, r7
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <_vfiprintf_r+0x234>)
 8009d14:	9803      	ldr	r0, [sp, #12]
 8009d16:	f7fd fdb9 	bl	800788c <_printf_i>
 8009d1a:	e7e3      	b.n	8009ce4 <_vfiprintf_r+0x1ec>
 8009d1c:	0800a4ac 	.word	0x0800a4ac
 8009d20:	0800a4b2 	.word	0x0800a4b2
 8009d24:	0800a4b6 	.word	0x0800a4b6
 8009d28:	08007301 	.word	0x08007301
 8009d2c:	08009ad5 	.word	0x08009ad5

08009d30 <__swbuf_r>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	0006      	movs	r6, r0
 8009d34:	000d      	movs	r5, r1
 8009d36:	0014      	movs	r4, r2
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d004      	beq.n	8009d46 <__swbuf_r+0x16>
 8009d3c:	6a03      	ldr	r3, [r0, #32]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <__swbuf_r+0x16>
 8009d42:	f7fd ff43 	bl	8007bcc <__sinit>
 8009d46:	69a3      	ldr	r3, [r4, #24]
 8009d48:	60a3      	str	r3, [r4, #8]
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	071b      	lsls	r3, r3, #28
 8009d4e:	d528      	bpl.n	8009da2 <__swbuf_r+0x72>
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d025      	beq.n	8009da2 <__swbuf_r+0x72>
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	b2ef      	uxtb	r7, r5
 8009d5c:	1ac0      	subs	r0, r0, r3
 8009d5e:	6963      	ldr	r3, [r4, #20]
 8009d60:	b2ed      	uxtb	r5, r5
 8009d62:	4283      	cmp	r3, r0
 8009d64:	dc05      	bgt.n	8009d72 <__swbuf_r+0x42>
 8009d66:	0021      	movs	r1, r4
 8009d68:	0030      	movs	r0, r6
 8009d6a:	f7ff fd95 	bl	8009898 <_fflush_r>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d11d      	bne.n	8009dae <__swbuf_r+0x7e>
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	3001      	adds	r0, #1
 8009d76:	3b01      	subs	r3, #1
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	701f      	strb	r7, [r3, #0]
 8009d82:	6963      	ldr	r3, [r4, #20]
 8009d84:	4283      	cmp	r3, r0
 8009d86:	d004      	beq.n	8009d92 <__swbuf_r+0x62>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	07db      	lsls	r3, r3, #31
 8009d8c:	d507      	bpl.n	8009d9e <__swbuf_r+0x6e>
 8009d8e:	2d0a      	cmp	r5, #10
 8009d90:	d105      	bne.n	8009d9e <__swbuf_r+0x6e>
 8009d92:	0021      	movs	r1, r4
 8009d94:	0030      	movs	r0, r6
 8009d96:	f7ff fd7f 	bl	8009898 <_fflush_r>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d107      	bne.n	8009dae <__swbuf_r+0x7e>
 8009d9e:	0028      	movs	r0, r5
 8009da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da2:	0021      	movs	r1, r4
 8009da4:	0030      	movs	r0, r6
 8009da6:	f000 f805 	bl	8009db4 <__swsetup_r>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0d3      	beq.n	8009d56 <__swbuf_r+0x26>
 8009dae:	2501      	movs	r5, #1
 8009db0:	426d      	negs	r5, r5
 8009db2:	e7f4      	b.n	8009d9e <__swbuf_r+0x6e>

08009db4 <__swsetup_r>:
 8009db4:	4b30      	ldr	r3, [pc, #192]	; (8009e78 <__swsetup_r+0xc4>)
 8009db6:	b570      	push	{r4, r5, r6, lr}
 8009db8:	0005      	movs	r5, r0
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	000c      	movs	r4, r1
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d004      	beq.n	8009dcc <__swsetup_r+0x18>
 8009dc2:	6a03      	ldr	r3, [r0, #32]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <__swsetup_r+0x18>
 8009dc8:	f7fd ff00 	bl	8007bcc <__sinit>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	5ee2      	ldrsh	r2, [r4, r3]
 8009dd0:	b293      	uxth	r3, r2
 8009dd2:	0711      	lsls	r1, r2, #28
 8009dd4:	d423      	bmi.n	8009e1e <__swsetup_r+0x6a>
 8009dd6:	06d9      	lsls	r1, r3, #27
 8009dd8:	d407      	bmi.n	8009dea <__swsetup_r+0x36>
 8009dda:	2309      	movs	r3, #9
 8009ddc:	2001      	movs	r0, #1
 8009dde:	602b      	str	r3, [r5, #0]
 8009de0:	3337      	adds	r3, #55	; 0x37
 8009de2:	4313      	orrs	r3, r2
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	4240      	negs	r0, r0
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	075b      	lsls	r3, r3, #29
 8009dec:	d513      	bpl.n	8009e16 <__swsetup_r+0x62>
 8009dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009df0:	2900      	cmp	r1, #0
 8009df2:	d008      	beq.n	8009e06 <__swsetup_r+0x52>
 8009df4:	0023      	movs	r3, r4
 8009df6:	3344      	adds	r3, #68	; 0x44
 8009df8:	4299      	cmp	r1, r3
 8009dfa:	d002      	beq.n	8009e02 <__swsetup_r+0x4e>
 8009dfc:	0028      	movs	r0, r5
 8009dfe:	f7fe febd 	bl	8008b7c <_free_r>
 8009e02:	2300      	movs	r3, #0
 8009e04:	6363      	str	r3, [r4, #52]	; 0x34
 8009e06:	2224      	movs	r2, #36	; 0x24
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	4393      	bics	r3, r2
 8009e0c:	81a3      	strh	r3, [r4, #12]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	6063      	str	r3, [r4, #4]
 8009e12:	6923      	ldr	r3, [r4, #16]
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	2308      	movs	r3, #8
 8009e18:	89a2      	ldrh	r2, [r4, #12]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10b      	bne.n	8009e3c <__swsetup_r+0x88>
 8009e24:	21a0      	movs	r1, #160	; 0xa0
 8009e26:	2280      	movs	r2, #128	; 0x80
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	0089      	lsls	r1, r1, #2
 8009e2c:	0092      	lsls	r2, r2, #2
 8009e2e:	400b      	ands	r3, r1
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d003      	beq.n	8009e3c <__swsetup_r+0x88>
 8009e34:	0021      	movs	r1, r4
 8009e36:	0028      	movs	r0, r5
 8009e38:	f000 f892 	bl	8009f60 <__smakebuf_r>
 8009e3c:	220c      	movs	r2, #12
 8009e3e:	5ea3      	ldrsh	r3, [r4, r2]
 8009e40:	2001      	movs	r0, #1
 8009e42:	001a      	movs	r2, r3
 8009e44:	b299      	uxth	r1, r3
 8009e46:	4002      	ands	r2, r0
 8009e48:	4203      	tst	r3, r0
 8009e4a:	d00f      	beq.n	8009e6c <__swsetup_r+0xb8>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	60a2      	str	r2, [r4, #8]
 8009e50:	6962      	ldr	r2, [r4, #20]
 8009e52:	4252      	negs	r2, r2
 8009e54:	61a2      	str	r2, [r4, #24]
 8009e56:	2000      	movs	r0, #0
 8009e58:	6922      	ldr	r2, [r4, #16]
 8009e5a:	4282      	cmp	r2, r0
 8009e5c:	d1c4      	bne.n	8009de8 <__swsetup_r+0x34>
 8009e5e:	0609      	lsls	r1, r1, #24
 8009e60:	d5c2      	bpl.n	8009de8 <__swsetup_r+0x34>
 8009e62:	2240      	movs	r2, #64	; 0x40
 8009e64:	4313      	orrs	r3, r2
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	3801      	subs	r0, #1
 8009e6a:	e7bd      	b.n	8009de8 <__swsetup_r+0x34>
 8009e6c:	0788      	lsls	r0, r1, #30
 8009e6e:	d400      	bmi.n	8009e72 <__swsetup_r+0xbe>
 8009e70:	6962      	ldr	r2, [r4, #20]
 8009e72:	60a2      	str	r2, [r4, #8]
 8009e74:	e7ef      	b.n	8009e56 <__swsetup_r+0xa2>
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	200002c8 	.word	0x200002c8

08009e7c <_raise_r>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	0004      	movs	r4, r0
 8009e80:	000d      	movs	r5, r1
 8009e82:	291f      	cmp	r1, #31
 8009e84:	d904      	bls.n	8009e90 <_raise_r+0x14>
 8009e86:	2316      	movs	r3, #22
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	4240      	negs	r0, r0
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <_raise_r+0x24>
 8009e96:	008a      	lsls	r2, r1, #2
 8009e98:	189b      	adds	r3, r3, r2
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	d108      	bne.n	8009eb2 <_raise_r+0x36>
 8009ea0:	0020      	movs	r0, r4
 8009ea2:	f000 f831 	bl	8009f08 <_getpid_r>
 8009ea6:	002a      	movs	r2, r5
 8009ea8:	0001      	movs	r1, r0
 8009eaa:	0020      	movs	r0, r4
 8009eac:	f000 f81a 	bl	8009ee4 <_kill_r>
 8009eb0:	e7ed      	b.n	8009e8e <_raise_r+0x12>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	2a01      	cmp	r2, #1
 8009eb6:	d0ea      	beq.n	8009e8e <_raise_r+0x12>
 8009eb8:	1c51      	adds	r1, r2, #1
 8009eba:	d103      	bne.n	8009ec4 <_raise_r+0x48>
 8009ebc:	2316      	movs	r3, #22
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	e7e4      	b.n	8009e8e <_raise_r+0x12>
 8009ec4:	2400      	movs	r4, #0
 8009ec6:	0028      	movs	r0, r5
 8009ec8:	601c      	str	r4, [r3, #0]
 8009eca:	4790      	blx	r2
 8009ecc:	0020      	movs	r0, r4
 8009ece:	e7de      	b.n	8009e8e <_raise_r+0x12>

08009ed0 <raise>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	4b03      	ldr	r3, [pc, #12]	; (8009ee0 <raise+0x10>)
 8009ed4:	0001      	movs	r1, r0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	f7ff ffd0 	bl	8009e7c <_raise_r>
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	200002c8 	.word	0x200002c8

08009ee4 <_kill_r>:
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	b570      	push	{r4, r5, r6, lr}
 8009ee8:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_kill_r+0x20>)
 8009eea:	0004      	movs	r4, r0
 8009eec:	0008      	movs	r0, r1
 8009eee:	0011      	movs	r1, r2
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f7f9 ff0e 	bl	8003d12 <_kill>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d103      	bne.n	8009f02 <_kill_r+0x1e>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d000      	beq.n	8009f02 <_kill_r+0x1e>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	2000078c 	.word	0x2000078c

08009f08 <_getpid_r>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	f7f9 fefc 	bl	8003d06 <_getpid>
 8009f0e:	bd10      	pop	{r4, pc}

08009f10 <__swhatbuf_r>:
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	000e      	movs	r6, r1
 8009f14:	001d      	movs	r5, r3
 8009f16:	230e      	movs	r3, #14
 8009f18:	5ec9      	ldrsh	r1, [r1, r3]
 8009f1a:	0014      	movs	r4, r2
 8009f1c:	b096      	sub	sp, #88	; 0x58
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	da0c      	bge.n	8009f3c <__swhatbuf_r+0x2c>
 8009f22:	89b2      	ldrh	r2, [r6, #12]
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	0011      	movs	r1, r2
 8009f28:	4019      	ands	r1, r3
 8009f2a:	421a      	tst	r2, r3
 8009f2c:	d013      	beq.n	8009f56 <__swhatbuf_r+0x46>
 8009f2e:	2100      	movs	r1, #0
 8009f30:	3b40      	subs	r3, #64	; 0x40
 8009f32:	2000      	movs	r0, #0
 8009f34:	6029      	str	r1, [r5, #0]
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	b016      	add	sp, #88	; 0x58
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	466a      	mov	r2, sp
 8009f3e:	f000 f84d 	bl	8009fdc <_fstat_r>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	dbed      	blt.n	8009f22 <__swhatbuf_r+0x12>
 8009f46:	23f0      	movs	r3, #240	; 0xf0
 8009f48:	9901      	ldr	r1, [sp, #4]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	4019      	ands	r1, r3
 8009f4e:	4b03      	ldr	r3, [pc, #12]	; (8009f5c <__swhatbuf_r+0x4c>)
 8009f50:	18c9      	adds	r1, r1, r3
 8009f52:	424b      	negs	r3, r1
 8009f54:	4159      	adcs	r1, r3
 8009f56:	2380      	movs	r3, #128	; 0x80
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	e7ea      	b.n	8009f32 <__swhatbuf_r+0x22>
 8009f5c:	ffffe000 	.word	0xffffe000

08009f60 <__smakebuf_r>:
 8009f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f62:	2602      	movs	r6, #2
 8009f64:	898b      	ldrh	r3, [r1, #12]
 8009f66:	0005      	movs	r5, r0
 8009f68:	000c      	movs	r4, r1
 8009f6a:	4233      	tst	r3, r6
 8009f6c:	d006      	beq.n	8009f7c <__smakebuf_r+0x1c>
 8009f6e:	0023      	movs	r3, r4
 8009f70:	3347      	adds	r3, #71	; 0x47
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	2301      	movs	r3, #1
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009f7c:	466a      	mov	r2, sp
 8009f7e:	ab01      	add	r3, sp, #4
 8009f80:	f7ff ffc6 	bl	8009f10 <__swhatbuf_r>
 8009f84:	9900      	ldr	r1, [sp, #0]
 8009f86:	0007      	movs	r7, r0
 8009f88:	0028      	movs	r0, r5
 8009f8a:	f7fe fe6d 	bl	8008c68 <_malloc_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d108      	bne.n	8009fa4 <__smakebuf_r+0x44>
 8009f92:	220c      	movs	r2, #12
 8009f94:	5ea3      	ldrsh	r3, [r4, r2]
 8009f96:	059a      	lsls	r2, r3, #22
 8009f98:	d4ef      	bmi.n	8009f7a <__smakebuf_r+0x1a>
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	4393      	bics	r3, r2
 8009f9e:	431e      	orrs	r6, r3
 8009fa0:	81a6      	strh	r6, [r4, #12]
 8009fa2:	e7e4      	b.n	8009f6e <__smakebuf_r+0xe>
 8009fa4:	2380      	movs	r3, #128	; 0x80
 8009fa6:	89a2      	ldrh	r2, [r4, #12]
 8009fa8:	6020      	str	r0, [r4, #0]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	6120      	str	r0, [r4, #16]
 8009fb2:	6163      	str	r3, [r4, #20]
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00c      	beq.n	8009fd4 <__smakebuf_r+0x74>
 8009fba:	0028      	movs	r0, r5
 8009fbc:	230e      	movs	r3, #14
 8009fbe:	5ee1      	ldrsh	r1, [r4, r3]
 8009fc0:	f000 f81e 	bl	800a000 <_isatty_r>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d005      	beq.n	8009fd4 <__smakebuf_r+0x74>
 8009fc8:	2303      	movs	r3, #3
 8009fca:	89a2      	ldrh	r2, [r4, #12]
 8009fcc:	439a      	bics	r2, r3
 8009fce:	3b02      	subs	r3, #2
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	433b      	orrs	r3, r7
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	e7ce      	b.n	8009f7a <__smakebuf_r+0x1a>

08009fdc <_fstat_r>:
 8009fdc:	2300      	movs	r3, #0
 8009fde:	b570      	push	{r4, r5, r6, lr}
 8009fe0:	4d06      	ldr	r5, [pc, #24]	; (8009ffc <_fstat_r+0x20>)
 8009fe2:	0004      	movs	r4, r0
 8009fe4:	0008      	movs	r0, r1
 8009fe6:	0011      	movs	r1, r2
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	f7f9 fef1 	bl	8003dd0 <_fstat>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	d103      	bne.n	8009ffa <_fstat_r+0x1e>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d000      	beq.n	8009ffa <_fstat_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	2000078c 	.word	0x2000078c

0800a000 <_isatty_r>:
 800a000:	2300      	movs	r3, #0
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	4d06      	ldr	r5, [pc, #24]	; (800a020 <_isatty_r+0x20>)
 800a006:	0004      	movs	r4, r0
 800a008:	0008      	movs	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7f9 feee 	bl	8003dec <_isatty>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d103      	bne.n	800a01c <_isatty_r+0x1c>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d000      	beq.n	800a01c <_isatty_r+0x1c>
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	2000078c 	.word	0x2000078c

0800a024 <_init>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	46c0      	nop			; (mov r8, r8)
 800a028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02a:	bc08      	pop	{r3}
 800a02c:	469e      	mov	lr, r3
 800a02e:	4770      	bx	lr

0800a030 <_fini>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr
